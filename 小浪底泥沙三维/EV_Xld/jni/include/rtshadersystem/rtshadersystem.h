#ifndef _RTShaderSystem_
#define _RTShaderSystem_
#include "shaderprogrammanager.h"
#include "shaderprogramwriter.h"
#include "shadergenerator.h"
#include "shaderrenderstate.h"
#include "shaderffptransform.h"
#include "shaderffpcolour.h"
#include "shaderffplighting.h"
#include "shaderffptexturing.h"
#include "shaderffpfog.h"
#include "shaderexperpixellighting.h"
#include "shaderexnormalmaplighting.h"
#include "shaderexintegratedpssm3.h"
#include "shaderexlayeredblending.h"
#include "shaderexhardwareskinning.h"
#include "shadermaterialserializerlistener.h"
/****
* The RT Shader System enables GPU program generation during the runtime of a process.
* The main interface to do that is the ShaderGenerator singleton.
* A typical usage of this system would be to create shader based technique from an existing technique and
* associate it with a destination scheme name. @see ShaderGenerator::createShaderBasedTechnique.
* The source technique must include only fixed function based passes, otherwise the method will fail.
* Once this task accomplished, one may switch the scheme of the current viewport(s) he uses, to
* the scheme he associate previously, and then a technique based on the original one will be used but this
* time it will be based on GPU programs the were generated by this component.
*
* The following are the highlights applications of this system.
* - Fixed function emulation for Render Systems that supports only shader based rendering. (D3D11 for example).
*   Using this component will allow one to seamlessly use existing FFP techniques on these render systems.
* - Global custom shader based pipeline. One can extended the system to allow creation of custom shader based
*   rendering techniques such as per pixel lighting, bump map, etc and apply it to all of the materials.
*   That approach has the advantages of low maintenance of shader code since the code is the same for all materials instead
*   of being spread around many different materials and programs.
*
****/
#endif

