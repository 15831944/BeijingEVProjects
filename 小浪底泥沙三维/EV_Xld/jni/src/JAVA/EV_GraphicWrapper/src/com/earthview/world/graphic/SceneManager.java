package com.earthview.world.graphic;

import global.*;
import com.earthview.world.base.*;
import com.earthview.world.util.*;
import com.earthview.world.core.*;

/**
 * 场景管理类此类是场景管理核心类，提供各种方法为摄像机，光源等进行管理和维护。还直接保存场景节点树的跟节点指针以提供该树的访问入口。
 */
public class SceneManager extends com.earthview.world.core.AllocatedObject {
	
	static {
		GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager", new SceneManagerClassFactory());
		GlobalClassFactoryMap.put("EarthView::World::Graphic::JCSceneManagerProxy", new SceneManagerClassFactory());
	}

	native private static long get_WORLD_GEOMETRY_TYPE_MASK_void();
	public static long get_WORLD_GEOMETRY_TYPE_MASK()
	{
		long jniValue = get_WORLD_GEOMETRY_TYPE_MASK_void();
		
		return jniValue;
	}
	
	native private static void set_WORLD_GEOMETRY_TYPE_MASK_ev_uint32 (long value);
	public static void set_WORLD_GEOMETRY_TYPE_MASK(long WORLD_GEOMETRY_TYPE_MASK)
	{
		long WORLD_GEOMETRY_TYPE_MASKParamValue = WORLD_GEOMETRY_TYPE_MASK;
		
		set_WORLD_GEOMETRY_TYPE_MASK_ev_uint32(WORLD_GEOMETRY_TYPE_MASKParamValue);
	}
	
	native private static long get_ENTITY_TYPE_MASK_void();
	public static long get_ENTITY_TYPE_MASK()
	{
		long jniValue = get_ENTITY_TYPE_MASK_void();
		
		return jniValue;
	}
	
	native private static void set_ENTITY_TYPE_MASK_ev_uint32 (long value);
	public static void set_ENTITY_TYPE_MASK(long ENTITY_TYPE_MASK)
	{
		long ENTITY_TYPE_MASKParamValue = ENTITY_TYPE_MASK;
		
		set_ENTITY_TYPE_MASK_ev_uint32(ENTITY_TYPE_MASKParamValue);
	}
	
	native private static long get_FX_TYPE_MASK_void();
	public static long get_FX_TYPE_MASK()
	{
		long jniValue = get_FX_TYPE_MASK_void();
		
		return jniValue;
	}
	
	native private static void set_FX_TYPE_MASK_ev_uint32 (long value);
	public static void set_FX_TYPE_MASK(long FX_TYPE_MASK)
	{
		long FX_TYPE_MASKParamValue = FX_TYPE_MASK;
		
		set_FX_TYPE_MASK_ev_uint32(FX_TYPE_MASKParamValue);
	}
	
	native private static long get_STATICGEOMETRY_TYPE_MASK_void();
	public static long get_STATICGEOMETRY_TYPE_MASK()
	{
		long jniValue = get_STATICGEOMETRY_TYPE_MASK_void();
		
		return jniValue;
	}
	
	native private static void set_STATICGEOMETRY_TYPE_MASK_ev_uint32 (long value);
	public static void set_STATICGEOMETRY_TYPE_MASK(long STATICGEOMETRY_TYPE_MASK)
	{
		long STATICGEOMETRY_TYPE_MASKParamValue = STATICGEOMETRY_TYPE_MASK;
		
		set_STATICGEOMETRY_TYPE_MASK_ev_uint32(STATICGEOMETRY_TYPE_MASKParamValue);
	}
	
	native private static long get_LIGHT_TYPE_MASK_void();
	public static long get_LIGHT_TYPE_MASK()
	{
		long jniValue = get_LIGHT_TYPE_MASK_void();
		
		return jniValue;
	}
	
	native private static void set_LIGHT_TYPE_MASK_ev_uint32 (long value);
	public static void set_LIGHT_TYPE_MASK(long LIGHT_TYPE_MASK)
	{
		long LIGHT_TYPE_MASKParamValue = LIGHT_TYPE_MASK;
		
		set_LIGHT_TYPE_MASK_ev_uint32(LIGHT_TYPE_MASKParamValue);
	}
	
	native private static long get_FRUSTUM_TYPE_MASK_void();
	public static long get_FRUSTUM_TYPE_MASK()
	{
		long jniValue = get_FRUSTUM_TYPE_MASK_void();
		
		return jniValue;
	}
	
	native private static void set_FRUSTUM_TYPE_MASK_ev_uint32 (long value);
	public static void set_FRUSTUM_TYPE_MASK(long FRUSTUM_TYPE_MASK)
	{
		long FRUSTUM_TYPE_MASKParamValue = FRUSTUM_TYPE_MASK;
		
		set_FRUSTUM_TYPE_MASK_ev_uint32(FRUSTUM_TYPE_MASKParamValue);
	}
	
	native private static long get_USER_TYPE_MASK_LIMIT_void();
	public static long get_USER_TYPE_MASK_LIMIT()
	{
		long jniValue = get_USER_TYPE_MASK_LIMIT_void();
		
		return jniValue;
	}
	
	native private static void set_USER_TYPE_MASK_LIMIT_ev_uint32 (long value);
	public static void set_USER_TYPE_MASK_LIMIT(long USER_TYPE_MASK_LIMIT)
	{
		long USER_TYPE_MASK_LIMITParamValue = USER_TYPE_MASK_LIMIT;
		
		set_USER_TYPE_MASK_LIMIT_ev_uint32(USER_TYPE_MASK_LIMITParamValue);
	}
	
	native private static String get_GlobeCameraName_void();
	public static String get_GlobeCameraName()
	{
		String jniValue = get_GlobeCameraName_void();
		
		return jniValue;
	}
	
	/**
	 * 渲染阶段
	 */
	public enum IlluminationRenderStage implements INativeEnum<IlluminationRenderStage> {
		IRS_NONE(IlluminationRenderStageHelper.ENUM_VALUES[0]),
		IRS_RENDER_TO_TEXTURE(IlluminationRenderStageHelper.ENUM_VALUES[1]),
		IRS_RENDER_RECEIVER_PASS(IlluminationRenderStageHelper.ENUM_VALUES[2]);
		private int value;
		IlluminationRenderStage(int i) {
			this.value = i;
		}
		public IlluminationRenderStage getEnum(int val) {
			return toEnum(val);
		}
		public int getValue() {
			return this.value;
		}
		public static final IlluminationRenderStage toEnum(int retval) {
			if(retval == IRS_NONE.value){
				return IRS_NONE;
			}
			else if(retval == IRS_RENDER_TO_TEXTURE.value){
				return IRS_RENDER_TO_TEXTURE;
			}
			else if(retval == IRS_RENDER_RECEIVER_PASS.value){
				return IRS_RENDER_RECEIVER_PASS;
			}
			throw new RuntimeException("wrong number in jni call for an enum!");
		}
	}
	static class IlluminationRenderStageHelper {
		public static final int[] ENUM_VALUES = getEnumValues();
		private static native int[] getEnumValues();
	}
	
	/**
	 * 特殊实例渲染队列
	 */
	public enum SpecialCaseRenderQueueMode implements INativeEnum<SpecialCaseRenderQueueMode> {
		SCRQM_INCLUDE(SpecialCaseRenderQueueModeHelper.ENUM_VALUES[0]),
		SCRQM_EXCLUDE(SpecialCaseRenderQueueModeHelper.ENUM_VALUES[1]);
		private int value;
		SpecialCaseRenderQueueMode(int i) {
			this.value = i;
		}
		public SpecialCaseRenderQueueMode getEnum(int val) {
			return toEnum(val);
		}
		public int getValue() {
			return this.value;
		}
		public static final SpecialCaseRenderQueueMode toEnum(int retval) {
			if(retval == SCRQM_INCLUDE.value){
				return SCRQM_INCLUDE;
			}
			else if(retval == SCRQM_EXCLUDE.value){
				return SCRQM_EXCLUDE;
			}
			throw new RuntimeException("wrong number in jni call for an enum!");
		}
	}
	static class SpecialCaseRenderQueueModeHelper {
		public static final int[] ENUM_VALUES = getEnumValues();
		private static native int[] getEnumValues();
	}
	
	///只渲染队列里的特殊实例
	public enum BoxPlane implements INativeEnum<BoxPlane> {
		BP_FRONT(BoxPlaneHelper.ENUM_VALUES[0]),
		BP_BACK(BoxPlaneHelper.ENUM_VALUES[1]),
		BP_LEFT(BoxPlaneHelper.ENUM_VALUES[2]),
		BP_RIGHT(BoxPlaneHelper.ENUM_VALUES[3]),
		BP_UP(BoxPlaneHelper.ENUM_VALUES[4]),
		BP_DOWN(BoxPlaneHelper.ENUM_VALUES[5]);
		private int value;
		BoxPlane(int i) {
			this.value = i;
		}
		public BoxPlane getEnum(int val) {
			return toEnum(val);
		}
		public int getValue() {
			return this.value;
		}
		public static final BoxPlane toEnum(int retval) {
			if(retval == BP_FRONT.value){
				return BP_FRONT;
			}
			else if(retval == BP_BACK.value){
				return BP_BACK;
			}
			else if(retval == BP_LEFT.value){
				return BP_LEFT;
			}
			else if(retval == BP_RIGHT.value){
				return BP_RIGHT;
			}
			else if(retval == BP_UP.value){
				return BP_UP;
			}
			else if(retval == BP_DOWN.value){
				return BP_DOWN;
			}
			throw new RuntimeException("wrong number in jni call for an enum!");
		}
	}
	static class BoxPlaneHelper {
		public static final int[] ENUM_VALUES = getEnumValues();
		private static native int[] getEnumValues();
	}
	
	/**
	 * 天空穹顶参数原为struct类型
	 */
	public static final class SkyDomeGenParameters extends RemoteNativeObject {
	
		public SkyDomeGenParameters(InstancePointer pointer, boolean remote) {
			super(pointer, remote);
		}
		
		public SkyDomeGenParameters(InstancePointer pInstance) {
			super(pInstance);
		}
		
		native private static long Create();
		public SkyDomeGenParameters() {
			super(new InstancePointer(Create()),false);
		}
		native private double get_skyDomeCurvature_void(long pNativeObject);
		public double get_skyDomeCurvature()
		{
			double jniValue = get_skyDomeCurvature_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_skyDomeCurvature_Real (long pNativeObject, double value);
		public void set_skyDomeCurvature(double skyDomeCurvature)
		{
			double skyDomeCurvatureParamValue = skyDomeCurvature;
			
			set_skyDomeCurvature_Real(this.nativeObject.pointer, skyDomeCurvatureParamValue);
		}
		
		native private double get_skyDomeTiling_void(long pNativeObject);
		public double get_skyDomeTiling()
		{
			double jniValue = get_skyDomeTiling_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_skyDomeTiling_Real (long pNativeObject, double value);
		public void set_skyDomeTiling(double skyDomeTiling)
		{
			double skyDomeTilingParamValue = skyDomeTiling;
			
			set_skyDomeTiling_Real(this.nativeObject.pointer, skyDomeTilingParamValue);
		}
		
		native private double get_skyDomeDistance_void(long pNativeObject);
		public double get_skyDomeDistance()
		{
			double jniValue = get_skyDomeDistance_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_skyDomeDistance_Real (long pNativeObject, double value);
		public void set_skyDomeDistance(double skyDomeDistance)
		{
			double skyDomeDistanceParamValue = skyDomeDistance;
			
			set_skyDomeDistance_Real(this.nativeObject.pointer, skyDomeDistanceParamValue);
		}
		
		native private int get_skyDomeXSegments_void(long pNativeObject);
		public int get_skyDomeXSegments()
		{
			int jniValue = get_skyDomeXSegments_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_skyDomeXSegments_ev_int32 (long pNativeObject, int value);
		public void set_skyDomeXSegments(int skyDomeXSegments)
		{
			int skyDomeXSegmentsParamValue = skyDomeXSegments;
			
			set_skyDomeXSegments_ev_int32(this.nativeObject.pointer, skyDomeXSegmentsParamValue);
		}
		
		native private int get_skyDomeYSegments_void(long pNativeObject);
		public int get_skyDomeYSegments()
		{
			int jniValue = get_skyDomeYSegments_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_skyDomeYSegments_ev_int32 (long pNativeObject, int value);
		public void set_skyDomeYSegments(int skyDomeYSegments)
		{
			int skyDomeYSegmentsParamValue = skyDomeYSegments;
			
			set_skyDomeYSegments_ev_int32(this.nativeObject.pointer, skyDomeYSegmentsParamValue);
		}
		
		native private int get_skyDomeYSegments_keep_void(long pNativeObject);
		public int get_skyDomeYSegments_keep()
		{
			int jniValue = get_skyDomeYSegments_keep_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_skyDomeYSegments_keep_ev_int32 (long pNativeObject, int value);
		public void set_skyDomeYSegments_keep(int skyDomeYSegments_keep)
		{
			int skyDomeYSegments_keepParamValue = skyDomeYSegments_keep;
			
			set_skyDomeYSegments_keep_ev_int32(this.nativeObject.pointer, skyDomeYSegments_keepParamValue);
		}
		
		
		native private static void Destroy(long pNativeObject);
		public void destroyNativeObject() {
			Destroy(this.nativeObject.pointer);
		}
	}
	/**
	 * 天空面参数原为struct类型
	 */
	public static final class SkyPlaneGenParameters extends RemoteNativeObject {
	
		public SkyPlaneGenParameters(InstancePointer pointer, boolean remote) {
			super(pointer, remote);
		}
		
		public SkyPlaneGenParameters(InstancePointer pInstance) {
			super(pInstance);
		}
		
		native private static long Create();
		public SkyPlaneGenParameters() {
			super(new InstancePointer(Create()),false);
		}
		native private double get_skyPlaneScale_void(long pNativeObject);
		public double get_skyPlaneScale()
		{
			double jniValue = get_skyPlaneScale_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_skyPlaneScale_Real (long pNativeObject, double value);
		public void set_skyPlaneScale(double skyPlaneScale)
		{
			double skyPlaneScaleParamValue = skyPlaneScale;
			
			set_skyPlaneScale_Real(this.nativeObject.pointer, skyPlaneScaleParamValue);
		}
		
		native private double get_skyPlaneTiling_void(long pNativeObject);
		public double get_skyPlaneTiling()
		{
			double jniValue = get_skyPlaneTiling_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_skyPlaneTiling_Real (long pNativeObject, double value);
		public void set_skyPlaneTiling(double skyPlaneTiling)
		{
			double skyPlaneTilingParamValue = skyPlaneTiling;
			
			set_skyPlaneTiling_Real(this.nativeObject.pointer, skyPlaneTilingParamValue);
		}
		
		native private double get_skyPlaneBow_void(long pNativeObject);
		public double get_skyPlaneBow()
		{
			double jniValue = get_skyPlaneBow_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_skyPlaneBow_Real (long pNativeObject, double value);
		public void set_skyPlaneBow(double skyPlaneBow)
		{
			double skyPlaneBowParamValue = skyPlaneBow;
			
			set_skyPlaneBow_Real(this.nativeObject.pointer, skyPlaneBowParamValue);
		}
		
		native private int get_skyPlaneXSegments_void(long pNativeObject);
		public int get_skyPlaneXSegments()
		{
			int jniValue = get_skyPlaneXSegments_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_skyPlaneXSegments_ev_int32 (long pNativeObject, int value);
		public void set_skyPlaneXSegments(int skyPlaneXSegments)
		{
			int skyPlaneXSegmentsParamValue = skyPlaneXSegments;
			
			set_skyPlaneXSegments_ev_int32(this.nativeObject.pointer, skyPlaneXSegmentsParamValue);
		}
		
		native private int get_skyPlaneYSegments_void(long pNativeObject);
		public int get_skyPlaneYSegments()
		{
			int jniValue = get_skyPlaneYSegments_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_skyPlaneYSegments_ev_int32 (long pNativeObject, int value);
		public void set_skyPlaneYSegments(int skyPlaneYSegments)
		{
			int skyPlaneYSegmentsParamValue = skyPlaneYSegments;
			
			set_skyPlaneYSegments_ev_int32(this.nativeObject.pointer, skyPlaneYSegmentsParamValue);
		}
		
		
		native private static void Destroy(long pNativeObject);
		public void destroyNativeObject() {
			Destroy(this.nativeObject.pointer);
		}
	}
	/**
	 * 天空盒参数原为struct类型
	 */
	public static final class SkyBoxGenParameters extends RemoteNativeObject {
	
		public SkyBoxGenParameters(InstancePointer pointer, boolean remote) {
			super(pointer, remote);
		}
		
		public SkyBoxGenParameters(InstancePointer pInstance) {
			super(pInstance);
		}
		
		native private static long Create();
		public SkyBoxGenParameters() {
			super(new InstancePointer(Create()),false);
		}
		native private double get_skyBoxDistance_void(long pNativeObject);
		public double get_skyBoxDistance()
		{
			double jniValue = get_skyBoxDistance_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_skyBoxDistance_Real (long pNativeObject, double value);
		public void set_skyBoxDistance(double skyBoxDistance)
		{
			double skyBoxDistanceParamValue = skyBoxDistance;
			
			set_skyBoxDistance_Real(this.nativeObject.pointer, skyBoxDistanceParamValue);
		}
		
		
		native private static void Destroy(long pNativeObject);
		public void destroyNativeObject() {
			Destroy(this.nativeObject.pointer);
		}
	}
	public static class ShadowMapGround extends BaseObject {
		
		static {
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::ShadowMapGround", new ShadowMapGroundClassFactory());
		}

		public ShadowMapGround(com.earthview.world.graphic.SceneManager manager, float width) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			NameValuePairList list = new NameValuePairList();
			BasePointer managerPtr = new BasePointer(manager);
			list.add("manager", managerPtr.get());
			BasePointer widthPtr = new BasePointer(width);
			list.add("width", widthPtr.get());
			Create("ShadowMapGround", list);
		}

		native private void render_CCamera(long pNativeObject, long cam);
		public void render(com.earthview.world.graphic.Camera cam)
		{
			long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
			render_CCamera(this.nativeObject.pointer, camParamValue);
		}
		native private void disableRender_void(long pNativeObject);
		public void disableRender()
		{
			disableRender_void(this.nativeObject.pointer);
		}
		public ShadowMapGround(CreatedWhenConstruct cwc) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
		}
		public ShadowMapGround(CreatedWhenConstruct cwc, String classNameStr) {
			super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
		}
		
		
		
		
		public static ShadowMapGround fromBaseObject(BaseObject baseObj)
		{
			if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
			{
				return null;
			}
			ShadowMapGround obj = null;
 			if(baseObj instanceof ShadowMapGround)
			{
				obj = (ShadowMapGround)baseObj;
			} else {
				obj = new ShadowMapGround(CreatedWhenConstruct.CWC_NotToCreate);
				obj.bindNativeObject(baseObj.nativeObject, "ShadowMapGround");
				obj.increaseCast();
			}

			return obj;
		}
	}
	public static class ShadowMapGroundClassFactory implements IClassFactory {
		public BaseObject create()
		{
			ShadowMapGround emptyInstance = new ShadowMapGround(CreatedWhenConstruct.CWC_NotToCreate);
			return emptyInstance;
		}
	}
	
	public static class ShadowFullScreenQuad extends BaseObject {
		
		static {
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::ShadowFullScreenQuad", new ShadowFullScreenQuadClassFactory());
		}

		public ShadowFullScreenQuad(com.earthview.world.graphic.SceneManager manager, float width, com.earthview.world.graphic.TexturePtr tex, com.earthview.world.graphic.TexturePtr texVB) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			NameValuePairList list = new NameValuePairList();
			BasePointer managerPtr = new BasePointer(manager);
			list.add("manager", managerPtr.get());
			BasePointer widthPtr = new BasePointer(width);
			list.add("width", widthPtr.get());
			BasePointer texPtr = new BasePointer(tex);
			list.add("tex", texPtr.get());
			BasePointer texVBPtr = new BasePointer(texVB);
			list.add("texVB", texVBPtr.get());
			Create("ShadowFullScreenQuad", list);
		}

		native private void render_void(long pNativeObject);
		public void render()
		{
			render_void(this.nativeObject.pointer);
		}
		native private void disableRender_void(long pNativeObject);
		public void disableRender()
		{
			disableRender_void(this.nativeObject.pointer);
		}
		native private long get_mFullScreenQuadRenderable_void(long pNativeObject);
		public com.earthview.world.graphic.SimpleRenderable get_mFullScreenQuadRenderable()
		{
			long jniValue = get_mFullScreenQuadRenderable_void(this.nativeObject.pointer);
			
			if(jniValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.SimpleRenderable __returnValue = new com.earthview.world.graphic.SimpleRenderable(CreatedWhenConstruct.CWC_NotToCreate, "CSimpleRenderable");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(jniValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.SimpleRenderable)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CSimpleRenderable");
			}
			return __returnValue;
		}
		
		native private void set_mFullScreenQuadRenderable_CSimpleRenderable (long pNativeObject, long value);
		public void set_mFullScreenQuadRenderable(com.earthview.world.graphic.SimpleRenderable mFullScreenQuadRenderable)
		{
			long mFullScreenQuadRenderableParamValue = (mFullScreenQuadRenderable == null ? 0L : mFullScreenQuadRenderable.nativeObject.pointer);
			
			set_mFullScreenQuadRenderable_CSimpleRenderable(this.nativeObject.pointer, mFullScreenQuadRenderableParamValue);
		}
		
		native private long GetMaterialVB_void(long pNativeObject);
		public com.earthview.world.graphic.MaterialPtr GetMaterialVB()
		{
			long returnValue = GetMaterialVB_void(this.nativeObject.pointer);
			com.earthview.world.graphic.MaterialPtr __returnValue = new com.earthview.world.graphic.MaterialPtr(CreatedWhenConstruct.CWC_NotToCreate);
			InstancePointer __instancePointer = new InstancePointer(returnValue);
			__returnValue.bindNativeObject(__instancePointer, "CMaterialPtr");
			__returnValue.createNativeObjectPointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.MaterialPtr)__returnValueClassFactory.create();
				__returnValue.bindNativeObject(__instancePointer, "CMaterialPtr");
			}
			return __returnValue;
		}
		native private long GetMaterialHB_void(long pNativeObject);
		public com.earthview.world.graphic.MaterialPtr GetMaterialHB()
		{
			long returnValue = GetMaterialHB_void(this.nativeObject.pointer);
			com.earthview.world.graphic.MaterialPtr __returnValue = new com.earthview.world.graphic.MaterialPtr(CreatedWhenConstruct.CWC_NotToCreate);
			InstancePointer __instancePointer = new InstancePointer(returnValue);
			__returnValue.bindNativeObject(__instancePointer, "CMaterialPtr");
			__returnValue.createNativeObjectPointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.MaterialPtr)__returnValueClassFactory.create();
				__returnValue.bindNativeObject(__instancePointer, "CMaterialPtr");
			}
			return __returnValue;
		}
		public ShadowFullScreenQuad(CreatedWhenConstruct cwc) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
		}
		public ShadowFullScreenQuad(CreatedWhenConstruct cwc, String classNameStr) {
			super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
		}
		
		
		
		
		public static ShadowFullScreenQuad fromBaseObject(BaseObject baseObj)
		{
			if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
			{
				return null;
			}
			ShadowFullScreenQuad obj = null;
 			if(baseObj instanceof ShadowFullScreenQuad)
			{
				obj = (ShadowFullScreenQuad)baseObj;
			} else {
				obj = new ShadowFullScreenQuad(CreatedWhenConstruct.CWC_NotToCreate);
				obj.bindNativeObject(baseObj.nativeObject, "ShadowFullScreenQuad");
				obj.increaseCast();
			}

			return obj;
		}
	}
	public static class ShadowFullScreenQuadClassFactory implements IClassFactory {
		public BaseObject create()
		{
			ShadowFullScreenQuad emptyInstance = new ShadowFullScreenQuad(CreatedWhenConstruct.CWC_NotToCreate);
			return emptyInstance;
		}
	}
	
	/**
	 * 场景管理监听类自定义操作可以在外部实施
	 */
	public static class SceneManagerListener extends com.earthview.world.core.AllocatedObject {
		
		static {
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::CSceneManagerListener", new SceneManagerListenerClassFactory());
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::JCSceneManagerListenerProxy", new SceneManagerListenerClassFactory());
		}

		/**
		 * 默认构造函数
		 * @param  
		 */
		public SceneManagerListener() {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			Create("JCSceneManagerListenerProxy", null, true);
			this.registerCallback();
			if (!"com.earthview.world.graphic.SceneManager$SceneManagerListener".equals(this.getClass().getName()))
			{
				this.setCustomExtend(true);
			}
		}

		protected  void preUpdateSceneGraph_CSceneManager_CCamera_callback(long source, long camera)
		{
			com.earthview.world.graphic.SceneManager sourceParamValue = (source == 0L ? null : new com.earthview.world.graphic.SceneManager(CreatedWhenConstruct.CWC_NotToCreate));
			if(sourceParamValue != null)
			{
			sourceParamValue.setDelegate(true);
			sourceParamValue.setInstancePointer(new InstancePointer(source));
			IClassFactory sourceParamValueClassFactory = GlobalClassFactoryMap.get(sourceParamValue.getCppInstanceTypeName());
			if (sourceParamValueClassFactory != null)
			{
				sourceParamValue.setDelegate(true);
				sourceParamValue = (com.earthview.world.graphic.SceneManager)sourceParamValueClassFactory.create();
				sourceParamValue.setDelegate(true);
				sourceParamValue.setInstancePointer(new InstancePointer(source));
			}
			}
			com.earthview.world.graphic.Camera cameraParamValue = (camera == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
			if(cameraParamValue != null)
			{
			cameraParamValue.setDelegate(true);
			cameraParamValue.setInstancePointer(new InstancePointer(camera));
			IClassFactory cameraParamValueClassFactory = GlobalClassFactoryMap.get(cameraParamValue.getCppInstanceTypeName());
			if (cameraParamValueClassFactory != null)
			{
				cameraParamValue.setDelegate(true);
				cameraParamValue = (com.earthview.world.graphic.Camera)cameraParamValueClassFactory.create();
				cameraParamValue.setDelegate(true);
				cameraParamValue.setInstancePointer(new InstancePointer(camera));
			}
			}
			preUpdateSceneGraph(sourceParamValue, cameraParamValue);
		}

		native private void preUpdateSceneGraph_CSceneManager_CCamera(long pNativeObject, long source, long camera);
		/**
		 * 在每帧更新场景图前触发			
		 */
		public void preUpdateSceneGraph(com.earthview.world.graphic.SceneManager source, com.earthview.world.graphic.Camera camera)
		{
			long sourceParamValue = (source == null ? 0L : source.nativeObject.pointer);
			long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
			preUpdateSceneGraph_CSceneManager_CCamera(this.nativeObject.pointer, sourceParamValue, cameraParamValue);
		}
		native private void preUpdateSceneGraph_CSceneManager_CCamera_NoVirtual(long pNativeObject, long source, long camera);
		protected void preUpdateSceneGraph_NoVirtual(com.earthview.world.graphic.SceneManager source, com.earthview.world.graphic.Camera camera)
		{
			long sourceParamValue = (source == null ? 0L : source.nativeObject.pointer);
			long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
			preUpdateSceneGraph_CSceneManager_CCamera_NoVirtual(this.nativeObject.pointer, sourceParamValue, cameraParamValue);
		}

		protected  void postUpdateSceneGraph_CSceneManager_CCamera_callback(long source, long camera)
		{
			com.earthview.world.graphic.SceneManager sourceParamValue = (source == 0L ? null : new com.earthview.world.graphic.SceneManager(CreatedWhenConstruct.CWC_NotToCreate));
			if(sourceParamValue != null)
			{
			sourceParamValue.setDelegate(true);
			sourceParamValue.setInstancePointer(new InstancePointer(source));
			IClassFactory sourceParamValueClassFactory = GlobalClassFactoryMap.get(sourceParamValue.getCppInstanceTypeName());
			if (sourceParamValueClassFactory != null)
			{
				sourceParamValue.setDelegate(true);
				sourceParamValue = (com.earthview.world.graphic.SceneManager)sourceParamValueClassFactory.create();
				sourceParamValue.setDelegate(true);
				sourceParamValue.setInstancePointer(new InstancePointer(source));
			}
			}
			com.earthview.world.graphic.Camera cameraParamValue = (camera == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
			if(cameraParamValue != null)
			{
			cameraParamValue.setDelegate(true);
			cameraParamValue.setInstancePointer(new InstancePointer(camera));
			IClassFactory cameraParamValueClassFactory = GlobalClassFactoryMap.get(cameraParamValue.getCppInstanceTypeName());
			if (cameraParamValueClassFactory != null)
			{
				cameraParamValue.setDelegate(true);
				cameraParamValue = (com.earthview.world.graphic.Camera)cameraParamValueClassFactory.create();
				cameraParamValue.setDelegate(true);
				cameraParamValue.setInstancePointer(new InstancePointer(camera));
			}
			}
			postUpdateSceneGraph(sourceParamValue, cameraParamValue);
		}

		native private void postUpdateSceneGraph_CSceneManager_CCamera(long pNativeObject, long source, long camera);
		/**
		 * 在每帧更新场景图后触发			
		 */
		public void postUpdateSceneGraph(com.earthview.world.graphic.SceneManager source, com.earthview.world.graphic.Camera camera)
		{
			long sourceParamValue = (source == null ? 0L : source.nativeObject.pointer);
			long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
			postUpdateSceneGraph_CSceneManager_CCamera(this.nativeObject.pointer, sourceParamValue, cameraParamValue);
		}
		native private void postUpdateSceneGraph_CSceneManager_CCamera_NoVirtual(long pNativeObject, long source, long camera);
		protected void postUpdateSceneGraph_NoVirtual(com.earthview.world.graphic.SceneManager source, com.earthview.world.graphic.Camera camera)
		{
			long sourceParamValue = (source == null ? 0L : source.nativeObject.pointer);
			long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
			postUpdateSceneGraph_CSceneManager_CCamera_NoVirtual(this.nativeObject.pointer, sourceParamValue, cameraParamValue);
		}

		protected  void preFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback(long source, int irs, long v)
		{
			com.earthview.world.graphic.SceneManager sourceParamValue = (source == 0L ? null : new com.earthview.world.graphic.SceneManager(CreatedWhenConstruct.CWC_NotToCreate));
			if(sourceParamValue != null)
			{
			sourceParamValue.setDelegate(true);
			sourceParamValue.setInstancePointer(new InstancePointer(source));
			IClassFactory sourceParamValueClassFactory = GlobalClassFactoryMap.get(sourceParamValue.getCppInstanceTypeName());
			if (sourceParamValueClassFactory != null)
			{
				sourceParamValue.setDelegate(true);
				sourceParamValue = (com.earthview.world.graphic.SceneManager)sourceParamValueClassFactory.create();
				sourceParamValue.setDelegate(true);
				sourceParamValue.setInstancePointer(new InstancePointer(source));
			}
			}
			com.earthview.world.graphic.SceneManager.IlluminationRenderStage irsParamValue = com.earthview.world.graphic.SceneManager.IlluminationRenderStage.toEnum(irs);
			com.earthview.world.graphic.Viewport vParamValue = (v == 0L ? null : new com.earthview.world.graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate));
			if(vParamValue != null)
			{
			vParamValue.setDelegate(true);
			vParamValue.setInstancePointer(new InstancePointer(v));
			IClassFactory vParamValueClassFactory = GlobalClassFactoryMap.get(vParamValue.getCppInstanceTypeName());
			if (vParamValueClassFactory != null)
			{
				vParamValue.setDelegate(true);
				vParamValue = (com.earthview.world.graphic.Viewport)vParamValueClassFactory.create();
				vParamValue.setDelegate(true);
				vParamValue.setInstancePointer(new InstancePointer(v));
			}
			}
			preFindVisibleObjects(sourceParamValue, irsParamValue, vParamValue);
		}

		native private void preFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport(long pNativeObject, long source, int irs, long v);
		/**
		 * 在场景中搜索可见对象之前触发
		 * @param source 场景管理实例
		 * @param irs 渲染阶段
		 * @param v 视口
		 */
		public void preFindVisibleObjects(com.earthview.world.graphic.SceneManager source, com.earthview.world.graphic.SceneManager.IlluminationRenderStage irs, com.earthview.world.graphic.Viewport v)
		{
			long sourceParamValue = (source == null ? 0L : source.nativeObject.pointer);
			int irsParamValue = irs.getValue();
			long vParamValue = (v == null ? 0L : v.nativeObject.pointer);
			preFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport(this.nativeObject.pointer, sourceParamValue, irsParamValue, vParamValue);
		}
		native private void preFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_NoVirtual(long pNativeObject, long source, int irs, long v);
		protected void preFindVisibleObjects_NoVirtual(com.earthview.world.graphic.SceneManager source, com.earthview.world.graphic.SceneManager.IlluminationRenderStage irs, com.earthview.world.graphic.Viewport v)
		{
			long sourceParamValue = (source == null ? 0L : source.nativeObject.pointer);
			int irsParamValue = irs.getValue();
			long vParamValue = (v == null ? 0L : v.nativeObject.pointer);
			preFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_NoVirtual(this.nativeObject.pointer, sourceParamValue, irsParamValue, vParamValue);
		}

		protected  void postFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback(long source, int irs, long v)
		{
			com.earthview.world.graphic.SceneManager sourceParamValue = (source == 0L ? null : new com.earthview.world.graphic.SceneManager(CreatedWhenConstruct.CWC_NotToCreate));
			if(sourceParamValue != null)
			{
			sourceParamValue.setDelegate(true);
			sourceParamValue.setInstancePointer(new InstancePointer(source));
			IClassFactory sourceParamValueClassFactory = GlobalClassFactoryMap.get(sourceParamValue.getCppInstanceTypeName());
			if (sourceParamValueClassFactory != null)
			{
				sourceParamValue.setDelegate(true);
				sourceParamValue = (com.earthview.world.graphic.SceneManager)sourceParamValueClassFactory.create();
				sourceParamValue.setDelegate(true);
				sourceParamValue.setInstancePointer(new InstancePointer(source));
			}
			}
			com.earthview.world.graphic.SceneManager.IlluminationRenderStage irsParamValue = com.earthview.world.graphic.SceneManager.IlluminationRenderStage.toEnum(irs);
			com.earthview.world.graphic.Viewport vParamValue = (v == 0L ? null : new com.earthview.world.graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate));
			if(vParamValue != null)
			{
			vParamValue.setDelegate(true);
			vParamValue.setInstancePointer(new InstancePointer(v));
			IClassFactory vParamValueClassFactory = GlobalClassFactoryMap.get(vParamValue.getCppInstanceTypeName());
			if (vParamValueClassFactory != null)
			{
				vParamValue.setDelegate(true);
				vParamValue = (com.earthview.world.graphic.Viewport)vParamValueClassFactory.create();
				vParamValue.setDelegate(true);
				vParamValue.setInstancePointer(new InstancePointer(v));
			}
			}
			postFindVisibleObjects(sourceParamValue, irsParamValue, vParamValue);
		}

		native private void postFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport(long pNativeObject, long source, int irs, long v);
		/**
		 * 在场景中搜索可见对象之后触发
		 * @param source 场景管理实例
		 * @param irs 渲染阶段
		 * @param v 视口
		 */
		public void postFindVisibleObjects(com.earthview.world.graphic.SceneManager source, com.earthview.world.graphic.SceneManager.IlluminationRenderStage irs, com.earthview.world.graphic.Viewport v)
		{
			long sourceParamValue = (source == null ? 0L : source.nativeObject.pointer);
			int irsParamValue = irs.getValue();
			long vParamValue = (v == null ? 0L : v.nativeObject.pointer);
			postFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport(this.nativeObject.pointer, sourceParamValue, irsParamValue, vParamValue);
		}
		native private void postFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_NoVirtual(long pNativeObject, long source, int irs, long v);
		protected void postFindVisibleObjects_NoVirtual(com.earthview.world.graphic.SceneManager source, com.earthview.world.graphic.SceneManager.IlluminationRenderStage irs, com.earthview.world.graphic.Viewport v)
		{
			long sourceParamValue = (source == null ? 0L : source.nativeObject.pointer);
			int irsParamValue = irs.getValue();
			long vParamValue = (v == null ? 0L : v.nativeObject.pointer);
			postFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_NoVirtual(this.nativeObject.pointer, sourceParamValue, irsParamValue, vParamValue);
		}

		protected  void shadowTexturesUpdated_ev_size_t_callback(long numberOfShadowTextures)
		{
			long numberOfShadowTexturesParamValue = numberOfShadowTextures;
			shadowTexturesUpdated(numberOfShadowTexturesParamValue);
		}

		native private void shadowTexturesUpdated_ev_size_t(long pNativeObject, long numberOfShadowTextures);
		/**
		 * 阴影纹理更新时调用只有阴影纹理被使用的时候，这个事件才触发
		 * @param numberOfShadowTextures 阴影纹理使用中的数量
		 */
		public void shadowTexturesUpdated(long numberOfShadowTextures)
		{
			long numberOfShadowTexturesParamValue = numberOfShadowTextures;
			shadowTexturesUpdated_ev_size_t(this.nativeObject.pointer, numberOfShadowTexturesParamValue);
		}
		native private void shadowTexturesUpdated_ev_size_t_NoVirtual(long pNativeObject, long numberOfShadowTextures);
		protected void shadowTexturesUpdated_NoVirtual(long numberOfShadowTextures)
		{
			long numberOfShadowTexturesParamValue = numberOfShadowTextures;
			shadowTexturesUpdated_ev_size_t_NoVirtual(this.nativeObject.pointer, numberOfShadowTexturesParamValue);
		}

		protected  void shadowTextureCasterPreViewProj_CLight_CCamera_ev_size_t_callback(long light, long camera, long iteration)
		{
			com.earthview.world.graphic.Light lightParamValue = (light == 0L ? null : new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate));
			if(lightParamValue != null)
			{
			lightParamValue.setDelegate(true);
			lightParamValue.setInstancePointer(new InstancePointer(light));
			IClassFactory lightParamValueClassFactory = GlobalClassFactoryMap.get(lightParamValue.getCppInstanceTypeName());
			if (lightParamValueClassFactory != null)
			{
				lightParamValue.setDelegate(true);
				lightParamValue = (com.earthview.world.graphic.Light)lightParamValueClassFactory.create();
				lightParamValue.setDelegate(true);
				lightParamValue.setInstancePointer(new InstancePointer(light));
			}
			}
			com.earthview.world.graphic.Camera cameraParamValue = (camera == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
			if(cameraParamValue != null)
			{
			cameraParamValue.setDelegate(true);
			cameraParamValue.setInstancePointer(new InstancePointer(camera));
			IClassFactory cameraParamValueClassFactory = GlobalClassFactoryMap.get(cameraParamValue.getCppInstanceTypeName());
			if (cameraParamValueClassFactory != null)
			{
				cameraParamValue.setDelegate(true);
				cameraParamValue = (com.earthview.world.graphic.Camera)cameraParamValueClassFactory.create();
				cameraParamValue.setDelegate(true);
				cameraParamValue.setInstancePointer(new InstancePointer(camera));
			}
			}
			long iterationParamValue = iteration;
			shadowTextureCasterPreViewProj(lightParamValue, cameraParamValue, iterationParamValue);
		}

		native private void shadowTextureCasterPreViewProj_CLight_CCamera_ev_size_t(long pNativeObject, long light, long camera, long iteration);
		/**
		 * 在为纹理阴影投射者设置观察投影矩阵前触发
		 * @param light 阴影纹理的光源
		 * @param camera 摄像机
		 * @param iteration 迭代次数
		 */
		public void shadowTextureCasterPreViewProj(com.earthview.world.graphic.Light light, com.earthview.world.graphic.Camera camera, long iteration)
		{
			long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
			long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
			long iterationParamValue = iteration;
			shadowTextureCasterPreViewProj_CLight_CCamera_ev_size_t(this.nativeObject.pointer, lightParamValue, cameraParamValue, iterationParamValue);
		}
		native private void shadowTextureCasterPreViewProj_CLight_CCamera_ev_size_t_NoVirtual(long pNativeObject, long light, long camera, long iteration);
		protected void shadowTextureCasterPreViewProj_NoVirtual(com.earthview.world.graphic.Light light, com.earthview.world.graphic.Camera camera, long iteration)
		{
			long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
			long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
			long iterationParamValue = iteration;
			shadowTextureCasterPreViewProj_CLight_CCamera_ev_size_t_NoVirtual(this.nativeObject.pointer, lightParamValue, cameraParamValue, iterationParamValue);
		}

		protected  void shadowTextureReceiverPreViewProj_CLight_CFrustum_callback(long light, long frustum)
		{
			com.earthview.world.graphic.Light lightParamValue = (light == 0L ? null : new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate));
			if(lightParamValue != null)
			{
			lightParamValue.setDelegate(true);
			lightParamValue.setInstancePointer(new InstancePointer(light));
			IClassFactory lightParamValueClassFactory = GlobalClassFactoryMap.get(lightParamValue.getCppInstanceTypeName());
			if (lightParamValueClassFactory != null)
			{
				lightParamValue.setDelegate(true);
				lightParamValue = (com.earthview.world.graphic.Light)lightParamValueClassFactory.create();
				lightParamValue.setDelegate(true);
				lightParamValue.setInstancePointer(new InstancePointer(light));
			}
			}
			com.earthview.world.graphic.Frustum frustumParamValue = (frustum == 0L ? null : new com.earthview.world.graphic.Frustum(CreatedWhenConstruct.CWC_NotToCreate));
			if(frustumParamValue != null)
			{
			frustumParamValue.setDelegate(true);
			frustumParamValue.setInstancePointer(new InstancePointer(frustum));
			IClassFactory frustumParamValueClassFactory = GlobalClassFactoryMap.get(frustumParamValue.getCppInstanceTypeName());
			if (frustumParamValueClassFactory != null)
			{
				frustumParamValue.setDelegate(true);
				frustumParamValue = (com.earthview.world.graphic.Frustum)frustumParamValueClassFactory.create();
				frustumParamValue.setDelegate(true);
				frustumParamValue.setInstancePointer(new InstancePointer(frustum));
			}
			}
			shadowTextureReceiverPreViewProj(lightParamValue, frustumParamValue);
		}

		native private void shadowTextureReceiverPreViewProj_CLight_CFrustum(long pNativeObject, long light, long frustum);
		/**
		 * 在为纹理阴影接收者设置观察投影矩阵前触发
		 * @param light 阴影纹理的光源
		 * @param frustum 视椎体
		 */
		public void shadowTextureReceiverPreViewProj(com.earthview.world.graphic.Light light, com.earthview.world.graphic.Frustum frustum)
		{
			long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
			long frustumParamValue = (frustum == null ? 0L : frustum.nativeObject.pointer);
			shadowTextureReceiverPreViewProj_CLight_CFrustum(this.nativeObject.pointer, lightParamValue, frustumParamValue);
		}
		native private void shadowTextureReceiverPreViewProj_CLight_CFrustum_NoVirtual(long pNativeObject, long light, long frustum);
		protected void shadowTextureReceiverPreViewProj_NoVirtual(com.earthview.world.graphic.Light light, com.earthview.world.graphic.Frustum frustum)
		{
			long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
			long frustumParamValue = (frustum == null ? 0L : frustum.nativeObject.pointer);
			shadowTextureReceiverPreViewProj_CLight_CFrustum_NoVirtual(this.nativeObject.pointer, lightParamValue, frustumParamValue);
		}

		protected  boolean sortLightsAffectingFrustum_LightList_callback(long lightList)
		{
			com.earthview.world.graphic.LightList lightListParamValue = new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
			lightListParamValue.setDelegate(true);
			lightListParamValue.setInstancePointer(new InstancePointer(lightList));
			IClassFactory lightListParamValueClassFactory = GlobalClassFactoryMap.get(lightListParamValue.getCppInstanceTypeName());
			if (lightListParamValueClassFactory != null)
			{
				lightListParamValue.setDelegate(true);
				lightListParamValue = (com.earthview.world.graphic.LightList)lightListParamValueClassFactory.create();
				lightListParamValue.setDelegate(true);
				lightListParamValue.setInstancePointer(new InstancePointer(lightList));
			}
			boolean returnValue = sortLightsAffectingFrustum(lightListParamValue);
			boolean __returnValue = returnValue;
			return __returnValue;
		}

		native private boolean sortLightsAffectingFrustum_LightList(long pNativeObject, long lightList);
		/**
		 * 对影响视椎体的光源进行排序
		 * @param lightList 光源列表
		 * @return 为true，已排序
		 */
		public boolean sortLightsAffectingFrustum(com.earthview.world.graphic.LightList lightList)
		{
			long lightListParamValue = lightList.nativeObject.pointer;
			boolean returnValue = sortLightsAffectingFrustum_LightList(this.nativeObject.pointer, lightListParamValue);
			return returnValue;
		}
		native private boolean sortLightsAffectingFrustum_LightList_NoVirtual(long pNativeObject, long lightList);
		protected boolean sortLightsAffectingFrustum_NoVirtual(com.earthview.world.graphic.LightList lightList)
		{
			long lightListParamValue = lightList.nativeObject.pointer;
			boolean returnValue = sortLightsAffectingFrustum_LightList_NoVirtual(this.nativeObject.pointer, lightListParamValue);
			return returnValue;
		}

		protected  void sceneManagerDestroyed_CSceneManager_callback(long source)
		{
			com.earthview.world.graphic.SceneManager sourceParamValue = (source == 0L ? null : new com.earthview.world.graphic.SceneManager(CreatedWhenConstruct.CWC_NotToCreate));
			if(sourceParamValue != null)
			{
			sourceParamValue.setDelegate(true);
			sourceParamValue.setInstancePointer(new InstancePointer(source));
			IClassFactory sourceParamValueClassFactory = GlobalClassFactoryMap.get(sourceParamValue.getCppInstanceTypeName());
			if (sourceParamValueClassFactory != null)
			{
				sourceParamValue.setDelegate(true);
				sourceParamValue = (com.earthview.world.graphic.SceneManager)sourceParamValueClassFactory.create();
				sourceParamValue.setDelegate(true);
				sourceParamValue.setInstancePointer(new InstancePointer(source));
			}
			}
			sceneManagerDestroyed(sourceParamValue);
		}

		native private void sceneManagerDestroyed_CSceneManager(long pNativeObject, long source);
		/**
		 * 场景管理器销毁时触发
		 * @param source 场景管理器
		 */
		public void sceneManagerDestroyed(com.earthview.world.graphic.SceneManager source)
		{
			long sourceParamValue = (source == null ? 0L : source.nativeObject.pointer);
			sceneManagerDestroyed_CSceneManager(this.nativeObject.pointer, sourceParamValue);
		}
		native private void sceneManagerDestroyed_CSceneManager_NoVirtual(long pNativeObject, long source);
		protected void sceneManagerDestroyed_NoVirtual(com.earthview.world.graphic.SceneManager source)
		{
			long sourceParamValue = (source == null ? 0L : source.nativeObject.pointer);
			sceneManagerDestroyed_CSceneManager_NoVirtual(this.nativeObject.pointer, sourceParamValue);
		}

		public SceneManagerListener(CreatedWhenConstruct cwc) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
		}
		public SceneManagerListener(CreatedWhenConstruct cwc, String classNameStr) {
			super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
		}
		
		
		native protected void register_preUpdateSceneGraph_CSceneManager_CCamera(long pNativeObject, String method);
		native protected void register_postUpdateSceneGraph_CSceneManager_CCamera(long pNativeObject, String method);
		native protected void register_preFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport(long pNativeObject, String method);
		native protected void register_postFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport(long pNativeObject, String method);
		native protected void register_shadowTexturesUpdated_ev_size_t(long pNativeObject, String method);
		native protected void register_shadowTextureCasterPreViewProj_CLight_CCamera_ev_size_t(long pNativeObject, String method);
		native protected void register_shadowTextureReceiverPreViewProj_CLight_CFrustum(long pNativeObject, String method);
		native protected void register_sortLightsAffectingFrustum_LightList(long pNativeObject, String method);
		native protected void register_sceneManagerDestroyed_CSceneManager(long pNativeObject, String method);
		
		public void registerCallback(){
			if (!this.nativeObject.equals(InstancePointer.ZERO)){
				this.register_preUpdateSceneGraph_CSceneManager_CCamera(this.nativeObject.pointer, "preUpdateSceneGraph_CSceneManager_CCamera_callback");
				this.register_postUpdateSceneGraph_CSceneManager_CCamera(this.nativeObject.pointer, "postUpdateSceneGraph_CSceneManager_CCamera_callback");
				this.register_preFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport(this.nativeObject.pointer, "preFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback");
				this.register_postFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport(this.nativeObject.pointer, "postFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback");
				this.register_shadowTexturesUpdated_ev_size_t(this.nativeObject.pointer, "shadowTexturesUpdated_ev_size_t_callback");
				this.register_shadowTextureCasterPreViewProj_CLight_CCamera_ev_size_t(this.nativeObject.pointer, "shadowTextureCasterPreViewProj_CLight_CCamera_ev_size_t_callback");
				this.register_shadowTextureReceiverPreViewProj_CLight_CFrustum(this.nativeObject.pointer, "shadowTextureReceiverPreViewProj_CLight_CFrustum_callback");
				this.register_sortLightsAffectingFrustum_LightList(this.nativeObject.pointer, "sortLightsAffectingFrustum_LightList_callback");
				this.register_sceneManagerDestroyed_CSceneManager(this.nativeObject.pointer, "sceneManagerDestroyed_CSceneManager_callback");
			}
		}
		
		public static SceneManagerListener fromBaseObject(BaseObject baseObj)
		{
			if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
			{
				return null;
			}
			SceneManagerListener obj = null;
 			if(baseObj instanceof SceneManagerListener)
			{
				obj = (SceneManagerListener)baseObj;
			} else {
				obj = new SceneManagerListener(CreatedWhenConstruct.CWC_NotToCreate);
				obj.bindNativeObject(baseObj.nativeObject, "CSceneManagerListener");
				obj.increaseCast();
			}

			return obj;
		}
	}
	public static class SceneManagerListenerClassFactory implements IClassFactory {
		public BaseObject create()
		{
			SceneManagerListener emptyInstance = new SceneManagerListener(CreatedWhenConstruct.CWC_NotToCreate);
			return emptyInstance;
		}
	}
	
	/**
	 * 队列中渲染对象的访问者内部帮助类
	 */
	public static class SceneMgrQueuedRenderableVisitor extends com.earthview.world.graphic.QueuedRenderableVisitor {
		
		static {
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor", new SceneMgrQueuedRenderableVisitorClassFactory());
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::JCSceneMgrQueuedRenderableVisitorProxy", new SceneMgrQueuedRenderableVisitorClassFactory());
		}

		/**
		 * 默认构造函数
		 * @param  
		 */
		public SceneMgrQueuedRenderableVisitor() {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			Create("JCSceneMgrQueuedRenderableVisitorProxy", null, true);
			this.registerCallback();
			if (!"com.earthview.world.graphic.SceneManager$SceneMgrQueuedRenderableVisitor".equals(this.getClass().getName()))
			{
				this.setCustomExtend(true);
			}
		}

		native private void visit_CRenderable(long pNativeObject, long r);
		/**
		 * 访问可渲染对象
		 * @param r 渲染接口
		 */
		public void visit(com.earthview.world.graphic.Renderable r)
		{
			long rParamValue = (r == null ? 0L : r.nativeObject.pointer);
			visit_CRenderable(this.nativeObject.pointer, rParamValue);
		}
		native private void visit_CRenderable_NoVirtual(long pNativeObject, long r);
		protected void visit_NoVirtual(com.earthview.world.graphic.Renderable r)
		{
			long rParamValue = (r == null ? 0L : r.nativeObject.pointer);
			visit_CRenderable_NoVirtual(this.nativeObject.pointer, rParamValue);
		}

		native private boolean visit_CPass(long pNativeObject, long p);
		/**
		 * 访问渲染通路(当通路改变时，这个函数被调用)
		 * @param p 通路
		 */
		public boolean visit(com.earthview.world.graphic.Pass p)
		{
			long pParamValue = (p == null ? 0L : p.nativeObject.pointer);
			boolean returnValue = visit_CPass(this.nativeObject.pointer, pParamValue);
			return returnValue;
		}
		native private boolean visit_CPass_NoVirtual(long pNativeObject, long p);
		protected boolean visit_NoVirtual(com.earthview.world.graphic.Pass p)
		{
			long pParamValue = (p == null ? 0L : p.nativeObject.pointer);
			boolean returnValue = visit_CPass_NoVirtual(this.nativeObject.pointer, pParamValue);
			return returnValue;
		}

		native private void visit_RenderablePass(long pNativeObject, long rp);
		/**
		 * 访问渲染对象及其渲染通路
		 * @param rp 渲染通路
		 */
		public void visit(com.earthview.world.graphic.RenderablePass rp)
		{
			long rpParamValue = (rp == null ? 0L : rp.nativeObject.pointer);
			visit_RenderablePass(this.nativeObject.pointer, rpParamValue);
		}
		native private void visit_RenderablePass_NoVirtual(long pNativeObject, long rp);
		protected void visit_NoVirtual(com.earthview.world.graphic.RenderablePass rp)
		{
			long rpParamValue = (rp == null ? 0L : rp.nativeObject.pointer);
			visit_RenderablePass_NoVirtual(this.nativeObject.pointer, rpParamValue);
		}

		native private long get_targetSceneMgr_void(long pNativeObject);
		public com.earthview.world.graphic.SceneManager get_targetSceneMgr()
		{
			long jniValue = get_targetSceneMgr_void(this.nativeObject.pointer);
			
			if(jniValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.SceneManager __returnValue = new com.earthview.world.graphic.SceneManager(CreatedWhenConstruct.CWC_NotToCreate, "CSceneManager");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(jniValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.SceneManager)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CSceneManager");
			}
			return __returnValue;
		}
		
		native private void set_targetSceneMgr_CSceneManager (long pNativeObject, long value);
		public void set_targetSceneMgr(com.earthview.world.graphic.SceneManager targetSceneMgr)
		{
			long targetSceneMgrParamValue = (targetSceneMgr == null ? 0L : targetSceneMgr.nativeObject.pointer);
			
			set_targetSceneMgr_CSceneManager(this.nativeObject.pointer, targetSceneMgrParamValue);
		}
		
		native private boolean get_transparentShadowCastersMode_void(long pNativeObject);
		public boolean get_transparentShadowCastersMode()
		{
			boolean jniValue = get_transparentShadowCastersMode_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_transparentShadowCastersMode_ev_bool (long pNativeObject, boolean value);
		public void set_transparentShadowCastersMode(boolean transparentShadowCastersMode)
		{
			boolean transparentShadowCastersModeParamValue = transparentShadowCastersMode;
			
			set_transparentShadowCastersMode_ev_bool(this.nativeObject.pointer, transparentShadowCastersModeParamValue);
		}
		
		native private boolean get_autoLights_void(long pNativeObject);
		public boolean get_autoLights()
		{
			boolean jniValue = get_autoLights_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_autoLights_ev_bool (long pNativeObject, boolean value);
		public void set_autoLights(boolean autoLights)
		{
			boolean autoLightsParamValue = autoLights;
			
			set_autoLights_ev_bool(this.nativeObject.pointer, autoLightsParamValue);
		}
		
		native private long get_manualLightList_void(long pNativeObject);
		public com.earthview.world.graphic.LightList get_manualLightList()
		{
			long jniValue = get_manualLightList_void(this.nativeObject.pointer);
			
			if(jniValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.LightList __returnValue = new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate, "LightList");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(jniValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.LightList)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "LightList");
			}
			return __returnValue;
		}
		
		native private boolean get_scissoring_void(long pNativeObject);
		public boolean get_scissoring()
		{
			boolean jniValue = get_scissoring_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_scissoring_ev_bool (long pNativeObject, boolean value);
		public void set_scissoring(boolean scissoring)
		{
			boolean scissoringParamValue = scissoring;
			
			set_scissoring_ev_bool(this.nativeObject.pointer, scissoringParamValue);
		}
		
		public SceneMgrQueuedRenderableVisitor(CreatedWhenConstruct cwc) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
		}
		public SceneMgrQueuedRenderableVisitor(CreatedWhenConstruct cwc, String classNameStr) {
			super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
		}
		
		
		native protected void register_visit_RenderablePass(long pNativeObject, String method);
		native protected void register_visit_CPass(long pNativeObject, String method);
		native protected void register_visit_CRenderable(long pNativeObject, String method);
		
		public void registerCallback(){
			if (!this.nativeObject.equals(InstancePointer.ZERO)){
				this.register_visit_RenderablePass(this.nativeObject.pointer, "visit_RenderablePass_callback");
				this.register_visit_CPass(this.nativeObject.pointer, "visit_CPass_callback");
				this.register_visit_CRenderable(this.nativeObject.pointer, "visit_CRenderable_callback");
			}
		}
		
		public static SceneMgrQueuedRenderableVisitor fromBaseObject(BaseObject baseObj)
		{
			if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
			{
				return null;
			}
			SceneMgrQueuedRenderableVisitor obj = null;
 			if(baseObj instanceof SceneMgrQueuedRenderableVisitor)
			{
				obj = (SceneMgrQueuedRenderableVisitor)baseObj;
			} else {
				obj = new SceneMgrQueuedRenderableVisitor(CreatedWhenConstruct.CWC_NotToCreate);
				obj.bindNativeObject(baseObj.nativeObject, "CSceneMgrQueuedRenderableVisitor");
				obj.increaseCast();
			}

			return obj;
		}
	}
	public static class SceneMgrQueuedRenderableVisitorClassFactory implements IClassFactory {
		public BaseObject create()
		{
			SceneMgrQueuedRenderableVisitor emptyInstance = new SceneMgrQueuedRenderableVisitor(CreatedWhenConstruct.CWC_NotToCreate);
			return emptyInstance;
		}
	}
	
	///typedef map<EVString, EarthView::World::Graphic::CCamera*> EarthView::World::Graphic::CSceneManager::CameraList;
	public static class CameraList extends com.earthview.world.core.BaseObject {
		
		static {
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::CameraList", new CameraListClassFactory());
		}

		public CameraList() {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			Create("CameraList", null);
		}

		native private boolean push_EVString_CCamera(long pNativeObject, String key, long ref_val);
		public boolean push(String key, NativeObjectPointer<com.earthview.world.graphic.Camera> ref_val)
		{
			String keyParamValue = key;
			long ref_valParamValue = ref_val.nativeObject.pointer;
			boolean returnValue = push_EVString_CCamera(this.nativeObject.pointer, keyParamValue, ref_valParamValue);
			return returnValue;
		}
		native private boolean exist_EVString(long pNativeObject, String key);
		public boolean exist(String key)
		{
			String keyParamValue = key;
			boolean returnValue = exist_EVString(this.nativeObject.pointer, keyParamValue);
			return returnValue;
		}
		native private long OperatorIndex_EVString(long pNativeObject, String key);
		public NativeObjectPointer<com.earthview.world.graphic.Camera> OperatorIndex(String key)
		{
			String keyParamValue = key;
			long returnValue = OperatorIndex_EVString(this.nativeObject.pointer, keyParamValue);
			NativeObjectPointer<com.earthview.world.graphic.Camera> __returnValue = new NativeObjectPointer<com.earthview.world.graphic.Camera>(new InstancePointer(returnValue));
			return __returnValue;
		}
		native private long get_EVString(long pNativeObject, String key);
		public NativeObjectPointer<com.earthview.world.graphic.Camera> get(String key)
		{
			String keyParamValue = key;
			long returnValue = get_EVString(this.nativeObject.pointer, keyParamValue);
			NativeObjectPointer<com.earthview.world.graphic.Camera> __returnValue = new NativeObjectPointer<com.earthview.world.graphic.Camera>(new InstancePointer(returnValue));
			return __returnValue;
		}
		native private void erase_EVString(long pNativeObject, String key);
		public void erase(String key)
		{
			String keyParamValue = key;
			erase_EVString(this.nativeObject.pointer, keyParamValue);
		}
		native private long size_void(long pNativeObject);
		public long size()
		{
			long returnValue = size_void(this.nativeObject.pointer);
			return returnValue;
		}
		native private void clear_void(long pNativeObject);
		public void clear()
		{
			clear_void(this.nativeObject.pointer);
		}
		native private boolean empty_void(long pNativeObject);
		public boolean empty()
		{
			boolean returnValue = empty_void(this.nativeObject.pointer);
			return returnValue;
		}
		public CameraList(CreatedWhenConstruct cwc) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
		}
		public CameraList(CreatedWhenConstruct cwc, String classNameStr) {
			super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
		}
		
		
		
		
		public static CameraList fromBaseObject(BaseObject baseObj)
		{
			if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
			{
				return null;
			}
			CameraList obj = null;
 			if(baseObj instanceof CameraList)
			{
				obj = (CameraList)baseObj;
			} else {
				obj = new CameraList(CreatedWhenConstruct.CWC_NotToCreate);
				obj.bindNativeObject(baseObj.nativeObject, "CameraList");
				obj.increaseCast();
			}

			return obj;
		}
	}
	public static class CameraListClassFactory implements IClassFactory {
		public BaseObject create()
		{
			CameraList emptyInstance = new CameraList(CreatedWhenConstruct.CWC_NotToCreate);
			return emptyInstance;
		}
	}
	
	//// Storage of animations, lookup by name
	///typedef map<EVString, EarthView::World::Graphic::CAnimation*> EarthView::World::Graphic::CSceneManager::AnimationList;
	public static class AnimationList extends com.earthview.world.core.BaseObject {
		
		static {
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::AnimationList", new AnimationListClassFactory());
		}

		public AnimationList() {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			Create("AnimationList", null);
		}

		native private boolean push_EVString_CAnimation(long pNativeObject, String key, long ref_val);
		public boolean push(String key, NativeObjectPointer<com.earthview.world.graphic.Animation> ref_val)
		{
			String keyParamValue = key;
			long ref_valParamValue = ref_val.nativeObject.pointer;
			boolean returnValue = push_EVString_CAnimation(this.nativeObject.pointer, keyParamValue, ref_valParamValue);
			return returnValue;
		}
		native private boolean exist_EVString(long pNativeObject, String key);
		public boolean exist(String key)
		{
			String keyParamValue = key;
			boolean returnValue = exist_EVString(this.nativeObject.pointer, keyParamValue);
			return returnValue;
		}
		native private long OperatorIndex_EVString(long pNativeObject, String key);
		public NativeObjectPointer<com.earthview.world.graphic.Animation> OperatorIndex(String key)
		{
			String keyParamValue = key;
			long returnValue = OperatorIndex_EVString(this.nativeObject.pointer, keyParamValue);
			NativeObjectPointer<com.earthview.world.graphic.Animation> __returnValue = new NativeObjectPointer<com.earthview.world.graphic.Animation>(new InstancePointer(returnValue));
			return __returnValue;
		}
		native private long get_EVString(long pNativeObject, String key);
		public NativeObjectPointer<com.earthview.world.graphic.Animation> get(String key)
		{
			String keyParamValue = key;
			long returnValue = get_EVString(this.nativeObject.pointer, keyParamValue);
			NativeObjectPointer<com.earthview.world.graphic.Animation> __returnValue = new NativeObjectPointer<com.earthview.world.graphic.Animation>(new InstancePointer(returnValue));
			return __returnValue;
		}
		native private void erase_EVString(long pNativeObject, String key);
		public void erase(String key)
		{
			String keyParamValue = key;
			erase_EVString(this.nativeObject.pointer, keyParamValue);
		}
		native private long size_void(long pNativeObject);
		public long size()
		{
			long returnValue = size_void(this.nativeObject.pointer);
			return returnValue;
		}
		native private void clear_void(long pNativeObject);
		public void clear()
		{
			clear_void(this.nativeObject.pointer);
		}
		native private boolean empty_void(long pNativeObject);
		public boolean empty()
		{
			boolean returnValue = empty_void(this.nativeObject.pointer);
			return returnValue;
		}
		public AnimationList(CreatedWhenConstruct cwc) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
		}
		public AnimationList(CreatedWhenConstruct cwc, String classNameStr) {
			super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
		}
		
		
		
		
		public static AnimationList fromBaseObject(BaseObject baseObj)
		{
			if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
			{
				return null;
			}
			AnimationList obj = null;
 			if(baseObj instanceof AnimationList)
			{
				obj = (AnimationList)baseObj;
			} else {
				obj = new AnimationList(CreatedWhenConstruct.CWC_NotToCreate);
				obj.bindNativeObject(baseObj.nativeObject, "AnimationList");
				obj.increaseCast();
			}

			return obj;
		}
	}
	public static class AnimationListClassFactory implements IClassFactory {
		public BaseObject create()
		{
			AnimationList emptyInstance = new AnimationList(CreatedWhenConstruct.CWC_NotToCreate);
			return emptyInstance;
		}
	}
	
	///typedef map<EVString, EarthView::World::Graphic::CMovableObject*> EarthView::World::Graphic::CSceneManager::MovableObjectMap;
	public static class MovableObjectMap extends com.earthview.world.core.BaseObject {
		
		static {
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::MovableObjectMap", new MovableObjectMapClassFactory());
		}

		public MovableObjectMap() {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			Create("MovableObjectMap", null);
		}

		native private boolean push_EVString_CMovableObject(long pNativeObject, String key, long val);
		public boolean push(String key, NativeObjectPointer<com.earthview.world.graphic.MovableObject> val)
		{
			String keyParamValue = key;
			long valParamValue = val.nativeObject.pointer;
			boolean returnValue = push_EVString_CMovableObject(this.nativeObject.pointer, keyParamValue, valParamValue);
			return returnValue;
		}
		native private boolean exist_EVString(long pNativeObject, String key);
		public boolean exist(String key)
		{
			String keyParamValue = key;
			boolean returnValue = exist_EVString(this.nativeObject.pointer, keyParamValue);
			return returnValue;
		}
		native private long OperatorIndex_EVString(long pNativeObject, String key);
		public NativeObjectPointer<com.earthview.world.graphic.MovableObject> OperatorIndex(String key)
		{
			String keyParamValue = key;
			long returnValue = OperatorIndex_EVString(this.nativeObject.pointer, keyParamValue);
			NativeObjectPointer<com.earthview.world.graphic.MovableObject> __returnValue = new NativeObjectPointer<com.earthview.world.graphic.MovableObject>(new InstancePointer(returnValue));
			return __returnValue;
		}
		native private long get_EVString(long pNativeObject, String key);
		public NativeObjectPointer<com.earthview.world.graphic.MovableObject> get(String key)
		{
			String keyParamValue = key;
			long returnValue = get_EVString(this.nativeObject.pointer, keyParamValue);
			NativeObjectPointer<com.earthview.world.graphic.MovableObject> __returnValue = new NativeObjectPointer<com.earthview.world.graphic.MovableObject>(new InstancePointer(returnValue));
			return __returnValue;
		}
		native private void erase_EVString(long pNativeObject, String key);
		public void erase(String key)
		{
			String keyParamValue = key;
			erase_EVString(this.nativeObject.pointer, keyParamValue);
		}
		native private long size_void(long pNativeObject);
		public long size()
		{
			long returnValue = size_void(this.nativeObject.pointer);
			return returnValue;
		}
		native private void clear_void(long pNativeObject);
		public void clear()
		{
			clear_void(this.nativeObject.pointer);
		}
		native private boolean empty_void(long pNativeObject);
		public boolean empty()
		{
			boolean returnValue = empty_void(this.nativeObject.pointer);
			return returnValue;
		}
		public MovableObjectMap(CreatedWhenConstruct cwc) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
		}
		public MovableObjectMap(CreatedWhenConstruct cwc, String classNameStr) {
			super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
		}
		
		
		
		
		public static MovableObjectMap fromBaseObject(BaseObject baseObj)
		{
			if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
			{
				return null;
			}
			MovableObjectMap obj = null;
 			if(baseObj instanceof MovableObjectMap)
			{
				obj = (MovableObjectMap)baseObj;
			} else {
				obj = new MovableObjectMap(CreatedWhenConstruct.CWC_NotToCreate);
				obj.bindNativeObject(baseObj.nativeObject, "MovableObjectMap");
				obj.increaseCast();
			}

			return obj;
		}
	}
	public static class MovableObjectMapClassFactory implements IClassFactory {
		public BaseObject create()
		{
			MovableObjectMap emptyInstance = new MovableObjectMap(CreatedWhenConstruct.CWC_NotToCreate);
			return emptyInstance;
		}
	}
	
	protected  long createSceneNodeImpl_void_callback()
	{
		com.earthview.world.graphic.SceneNode returnValue = createSceneNodeImpl();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createSceneNodeImpl_void(long pNativeObject);
	/**
	 * 创建场景节点的实现函数
	 * @param name 节点名称
	 * @return 场景节点
	 */
	public com.earthview.world.graphic.SceneNode createSceneNodeImpl()
	{
		long returnValue = createSceneNodeImpl_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}
	native private long createSceneNodeImpl_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.SceneNode createSceneNodeImpl_NoVirtual()
	{
		long returnValue = createSceneNodeImpl_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}

	protected  long createSceneNodeImpl_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.SceneNode returnValue = createSceneNodeImpl(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createSceneNodeImpl_EVString(long pNativeObject, String name);
	public com.earthview.world.graphic.SceneNode createSceneNodeImpl(String name)
	{
		String nameParamValue = name;
		long returnValue = createSceneNodeImpl_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}
	native private long createSceneNodeImpl_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.SceneNode createSceneNodeImpl_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = createSceneNodeImpl_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}

	native private boolean getHeightMapRendering_void(long pNativeObject);
	public boolean getHeightMapRendering()
	{
		boolean returnValue = getHeightMapRendering_void(this.nativeObject.pointer);
		return returnValue;
	}
	/**
	 * 存储光源信息用于追踪光源改变，原为struct
	 */
	public static class LightInfo extends com.earthview.world.core.BaseObject {
		
		static {
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::LightInfo", new LightInfoClassFactory());
		}

		native private long get_light_void(long pNativeObject);
		public com.earthview.world.graphic.Light get_light()
		{
			long jniValue = get_light_void(this.nativeObject.pointer);
			
			if(jniValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.Light __returnValue = new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate, "CLight");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(jniValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.Light)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CLight");
			}
			return __returnValue;
		}
		
		native private void set_light_CLight (long pNativeObject, long value);
		public void set_light(com.earthview.world.graphic.Light light)
		{
			long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
			
			set_light_CLight(this.nativeObject.pointer, lightParamValue);
		}
		
		native private int get_type_void(long pNativeObject);
		public int get_type()
		{
			int jniValue = get_type_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_type_ev_int32 (long pNativeObject, int value);
		public void set_type(int type)
		{
			int typeParamValue = type;
			
			set_type_ev_int32(this.nativeObject.pointer, typeParamValue);
		}
		
		native private double get_range_void(long pNativeObject);
		public double get_range()
		{
			double jniValue = get_range_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_range_Real (long pNativeObject, double value);
		public void set_range(double range)
		{
			double rangeParamValue = range;
			
			set_range_Real(this.nativeObject.pointer, rangeParamValue);
		}
		
		native private long get_position_void(long pNativeObject);
		public com.earthview.world.spatial.math.Vector3 get_position()
		{
			long jniValue = get_position_void(this.nativeObject.pointer);
			
			com.earthview.world.spatial.math.Vector3 __returnValue = new com.earthview.world.spatial.math.Vector3(CreatedWhenConstruct.CWC_NotToCreate);
			InstancePointer __instancePointer = new InstancePointer(jniValue);
			__returnValue.bindNativeObject(__instancePointer, "CVector3");
			__returnValue.createNativeObjectPointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.spatial.math.Vector3)__returnValueClassFactory.create();
				__returnValue.bindNativeObject(__instancePointer, "CVector3");
			}
			return __returnValue;
		}
		
		native private void set_position_CVector3 (long pNativeObject, long value);
		public void set_position(com.earthview.world.spatial.math.Vector3 position)
		{
			long positionParamValue = position.nativeObject.pointer;
			
			set_position_CVector3(this.nativeObject.pointer, positionParamValue);
		}
		
		native private long get_lightMask_void(long pNativeObject);
		public long get_lightMask()
		{
			long jniValue = get_lightMask_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_lightMask_ev_uint32 (long pNativeObject, long value);
		public void set_lightMask(long lightMask)
		{
			long lightMaskParamValue = lightMask;
			
			set_lightMask_ev_uint32(this.nativeObject.pointer, lightMaskParamValue);
		}
		
		native private boolean OperatorEquals_LightInfo(long pNativeObject, long rhs);
		public boolean OperatorEquals(com.earthview.world.graphic.SceneManager.LightInfo rhs)
		{
			long rhsParamValue = rhs.nativeObject.pointer;
			boolean returnValue = OperatorEquals_LightInfo(this.nativeObject.pointer, rhsParamValue);
			return returnValue;
		}
		native private boolean OperatorNotEquals_LightInfo(long pNativeObject, long rhs);
		public boolean OperatorNotEquals(com.earthview.world.graphic.SceneManager.LightInfo rhs)
		{
			long rhsParamValue = rhs.nativeObject.pointer;
			boolean returnValue = OperatorNotEquals_LightInfo(this.nativeObject.pointer, rhsParamValue);
			return returnValue;
		}
		public LightInfo() {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			Create("LightInfo", null);
		}

		public LightInfo(CreatedWhenConstruct cwc) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
		}
		public LightInfo(CreatedWhenConstruct cwc, String classNameStr) {
			super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
		}
		
		
		
		
		public static LightInfo fromBaseObject(BaseObject baseObj)
		{
			if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
			{
				return null;
			}
			LightInfo obj = null;
 			if(baseObj instanceof LightInfo)
			{
				obj = (LightInfo)baseObj;
			} else {
				obj = new LightInfo(CreatedWhenConstruct.CWC_NotToCreate);
				obj.bindNativeObject(baseObj.nativeObject, "LightInfo");
				obj.increaseCast();
			}

			return obj;
		}
	}
	public static class LightInfoClassFactory implements IClassFactory {
		public BaseObject create()
		{
			LightInfo emptyInstance = new LightInfo(CreatedWhenConstruct.CWC_NotToCreate);
			return emptyInstance;
		}
	}
	
	protected  void initRenderQueue_void_callback()
	{
		initRenderQueue();
	}

	native private void initRenderQueue_void(long pNativeObject);
	/**
	 * 初始化渲染队列内部方法
	 * @param  
	 */
	public void initRenderQueue()
	{
		initRenderQueue_void(this.nativeObject.pointer);
	}
	native private void initRenderQueue_void_NoVirtual(long pNativeObject);
	protected void initRenderQueue_NoVirtual()
	{
		initRenderQueue_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  long deriveShadowCasterPass_CPass_callback(long pass)
	{
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.Pass returnValue = deriveShadowCasterPass(passParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long deriveShadowCasterPass_CPass(long pNativeObject, long pass);
	public com.earthview.world.graphic.Pass deriveShadowCasterPass(com.earthview.world.graphic.Pass pass)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long returnValue = deriveShadowCasterPass_CPass(this.nativeObject.pointer, passParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Pass __returnValue = new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate, "CPass");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Pass)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CPass");
		}
		return __returnValue;
	}
	native private long deriveShadowCasterPass_CPass_NoVirtual(long pNativeObject, long pass);
	protected com.earthview.world.graphic.Pass deriveShadowCasterPass_NoVirtual(com.earthview.world.graphic.Pass pass)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long returnValue = deriveShadowCasterPass_CPass_NoVirtual(this.nativeObject.pointer, passParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Pass __returnValue = new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate, "CPass");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Pass)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CPass");
		}
		return __returnValue;
	}

	protected  long deriveShadowReceiverPass_CPass_callback(long pass)
	{
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.Pass returnValue = deriveShadowReceiverPass(passParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long deriveShadowReceiverPass_CPass(long pNativeObject, long pass);
	public com.earthview.world.graphic.Pass deriveShadowReceiverPass(com.earthview.world.graphic.Pass pass)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long returnValue = deriveShadowReceiverPass_CPass(this.nativeObject.pointer, passParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Pass __returnValue = new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate, "CPass");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Pass)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CPass");
		}
		return __returnValue;
	}
	native private long deriveShadowReceiverPass_CPass_NoVirtual(long pNativeObject, long pass);
	protected com.earthview.world.graphic.Pass deriveShadowReceiverPass_NoVirtual(com.earthview.world.graphic.Pass pass)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long returnValue = deriveShadowReceiverPass_CPass_NoVirtual(this.nativeObject.pointer, passParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Pass __returnValue = new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate, "CPass");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Pass)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CPass");
		}
		return __returnValue;
	}

	protected  boolean validatePassForRendering_CPass_callback(long pass)
	{
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		boolean returnValue = validatePassForRendering(passParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean validatePassForRendering_CPass(long pNativeObject, long pass);
	public boolean validatePassForRendering(com.earthview.world.graphic.Pass pass)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		boolean returnValue = validatePassForRendering_CPass(this.nativeObject.pointer, passParamValue);
		return returnValue;
	}
	native private boolean validatePassForRendering_CPass_NoVirtual(long pNativeObject, long pass);
	protected boolean validatePassForRendering_NoVirtual(com.earthview.world.graphic.Pass pass)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		boolean returnValue = validatePassForRendering_CPass_NoVirtual(this.nativeObject.pointer, passParamValue);
		return returnValue;
	}

	protected  boolean validateRenderableForRendering_CPass_CRenderable_callback(long pass, long rend)
	{
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.Renderable rendParamValue = (rend == 0L ? null : new com.earthview.world.graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate));
		if(rendParamValue != null)
		{
		rendParamValue.setDelegate(true);
		rendParamValue.setInstancePointer(new InstancePointer(rend));
		IClassFactory rendParamValueClassFactory = GlobalClassFactoryMap.get(rendParamValue.getCppInstanceTypeName());
		if (rendParamValueClassFactory != null)
		{
			rendParamValue.setDelegate(true);
			rendParamValue = (com.earthview.world.graphic.Renderable)rendParamValueClassFactory.create();
			rendParamValue.setDelegate(true);
			rendParamValue.setInstancePointer(new InstancePointer(rend));
		}
		}
		boolean returnValue = validateRenderableForRendering(passParamValue, rendParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean validateRenderableForRendering_CPass_CRenderable(long pNativeObject, long pass, long rend);
	public boolean validateRenderableForRendering(com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Renderable rend)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		boolean returnValue = validateRenderableForRendering_CPass_CRenderable(this.nativeObject.pointer, passParamValue, rendParamValue);
		return returnValue;
	}
	native private boolean validateRenderableForRendering_CPass_CRenderable_NoVirtual(long pNativeObject, long pass, long rend);
	protected boolean validateRenderableForRendering_NoVirtual(com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Renderable rend)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		boolean returnValue = validateRenderableForRendering_CPass_CRenderable_NoVirtual(this.nativeObject.pointer, passParamValue, rendParamValue);
		return returnValue;
	}

	protected  long createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_callback(int bp, double distance, long orientation, String groupName)
	{
		com.earthview.world.graphic.SceneManager.BoxPlane bpParamValue = com.earthview.world.graphic.SceneManager.BoxPlane.toEnum(bp);
		double distanceParamValue = distance;
		com.earthview.world.spatial.math.Quaternion orientationParamValue = new com.earthview.world.spatial.math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
		orientationParamValue.setDelegate(true);
		orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		IClassFactory orientationParamValueClassFactory = GlobalClassFactoryMap.get(orientationParamValue.getCppInstanceTypeName());
		if (orientationParamValueClassFactory != null)
		{
			orientationParamValue.setDelegate(true);
			orientationParamValue = (com.earthview.world.spatial.math.Quaternion)orientationParamValueClassFactory.create();
			orientationParamValue.setDelegate(true);
			orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		}
		String groupNameParamValue = groupName;
		com.earthview.world.graphic.MeshPtr returnValue = createSkyboxPlane(bpParamValue, distanceParamValue, orientationParamValue, groupNameParamValue);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString(long pNativeObject, int bp, double distance, long orientation, String groupName);
	public com.earthview.world.graphic.MeshPtr createSkyboxPlane(com.earthview.world.graphic.SceneManager.BoxPlane bp, double distance, com.earthview.world.spatial.math.Quaternion orientation, String groupName)
	{
		int bpParamValue = bp.getValue();
		double distanceParamValue = distance;
		long orientationParamValue = orientation.nativeObject.pointer;
		String groupNameParamValue = groupName;
		long returnValue = createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString(this.nativeObject.pointer, bpParamValue, distanceParamValue, orientationParamValue, groupNameParamValue);
		com.earthview.world.graphic.MeshPtr __returnValue = new com.earthview.world.graphic.MeshPtr(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "CMeshPtr");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.MeshPtr)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CMeshPtr");
		}
		return __returnValue;
	}
	native private long createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_NoVirtual(long pNativeObject, int bp, double distance, long orientation, String groupName);
	protected com.earthview.world.graphic.MeshPtr createSkyboxPlane_NoVirtual(com.earthview.world.graphic.SceneManager.BoxPlane bp, double distance, com.earthview.world.spatial.math.Quaternion orientation, String groupName)
	{
		int bpParamValue = bp.getValue();
		double distanceParamValue = distance;
		long orientationParamValue = orientation.nativeObject.pointer;
		String groupNameParamValue = groupName;
		long returnValue = createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_NoVirtual(this.nativeObject.pointer, bpParamValue, distanceParamValue, orientationParamValue, groupNameParamValue);
		com.earthview.world.graphic.MeshPtr __returnValue = new com.earthview.world.graphic.MeshPtr(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "CMeshPtr");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.MeshPtr)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CMeshPtr");
		}
		return __returnValue;
	}

	protected  long createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback(int bp, double curvature, double tiling, double distance, long orientation, int xsegments, int ysegments, int ySegmentsToKeep, String groupName)
	{
		com.earthview.world.graphic.SceneManager.BoxPlane bpParamValue = com.earthview.world.graphic.SceneManager.BoxPlane.toEnum(bp);
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		com.earthview.world.spatial.math.Quaternion orientationParamValue = new com.earthview.world.spatial.math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
		orientationParamValue.setDelegate(true);
		orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		IClassFactory orientationParamValueClassFactory = GlobalClassFactoryMap.get(orientationParamValue.getCppInstanceTypeName());
		if (orientationParamValueClassFactory != null)
		{
			orientationParamValue.setDelegate(true);
			orientationParamValue = (com.earthview.world.spatial.math.Quaternion)orientationParamValueClassFactory.create();
			orientationParamValue.setDelegate(true);
			orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		}
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		int ySegmentsToKeepParamValue = ySegmentsToKeep;
		String groupNameParamValue = groupName;
		com.earthview.world.graphic.MeshPtr returnValue = createSkydomePlane(bpParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue, ySegmentsToKeepParamValue, groupNameParamValue);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(long pNativeObject, int bp, double curvature, double tiling, double distance, long orientation, int xsegments, int ysegments, int ySegmentsToKeep, String groupName);
	public com.earthview.world.graphic.MeshPtr createSkydomePlane(com.earthview.world.graphic.SceneManager.BoxPlane bp, double curvature, double tiling, double distance, com.earthview.world.spatial.math.Quaternion orientation, int xsegments, int ysegments, int ySegmentsToKeep, String groupName)
	{
		int bpParamValue = bp.getValue();
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		int ySegmentsToKeepParamValue = ySegmentsToKeep;
		String groupNameParamValue = groupName;
		long returnValue = createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(this.nativeObject.pointer, bpParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue, ySegmentsToKeepParamValue, groupNameParamValue);
		com.earthview.world.graphic.MeshPtr __returnValue = new com.earthview.world.graphic.MeshPtr(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "CMeshPtr");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.MeshPtr)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CMeshPtr");
		}
		return __returnValue;
	}
	native private long createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_NoVirtual(long pNativeObject, int bp, double curvature, double tiling, double distance, long orientation, int xsegments, int ysegments, int ySegmentsToKeep, String groupName);
	protected com.earthview.world.graphic.MeshPtr createSkydomePlane_NoVirtual(com.earthview.world.graphic.SceneManager.BoxPlane bp, double curvature, double tiling, double distance, com.earthview.world.spatial.math.Quaternion orientation, int xsegments, int ysegments, int ySegmentsToKeep, String groupName)
	{
		int bpParamValue = bp.getValue();
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		int ySegmentsToKeepParamValue = ySegmentsToKeep;
		String groupNameParamValue = groupName;
		long returnValue = createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_NoVirtual(this.nativeObject.pointer, bpParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue, ySegmentsToKeepParamValue, groupNameParamValue);
		com.earthview.world.graphic.MeshPtr __returnValue = new com.earthview.world.graphic.MeshPtr(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "CMeshPtr");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.MeshPtr)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CMeshPtr");
		}
		return __returnValue;
	}

	protected  void useRenderableViewProjMode_CRenderable_ev_bool_callback(long pRend, boolean fixedFunction)
	{
		com.earthview.world.graphic.Renderable pRendParamValue = (pRend == 0L ? null : new com.earthview.world.graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate));
		if(pRendParamValue != null)
		{
		pRendParamValue.setDelegate(true);
		pRendParamValue.setInstancePointer(new InstancePointer(pRend));
		IClassFactory pRendParamValueClassFactory = GlobalClassFactoryMap.get(pRendParamValue.getCppInstanceTypeName());
		if (pRendParamValueClassFactory != null)
		{
			pRendParamValue.setDelegate(true);
			pRendParamValue = (com.earthview.world.graphic.Renderable)pRendParamValueClassFactory.create();
			pRendParamValue.setDelegate(true);
			pRendParamValue.setInstancePointer(new InstancePointer(pRend));
		}
		}
		boolean fixedFunctionParamValue = fixedFunction;
		useRenderableViewProjMode(pRendParamValue, fixedFunctionParamValue);
	}

	native private void useRenderableViewProjMode_CRenderable_ev_bool(long pNativeObject, long pRend, boolean fixedFunction);
	public void useRenderableViewProjMode(com.earthview.world.graphic.Renderable pRend, boolean fixedFunction)
	{
		long pRendParamValue = (pRend == null ? 0L : pRend.nativeObject.pointer);
		boolean fixedFunctionParamValue = fixedFunction;
		useRenderableViewProjMode_CRenderable_ev_bool(this.nativeObject.pointer, pRendParamValue, fixedFunctionParamValue);
	}
	native private void useRenderableViewProjMode_CRenderable_ev_bool_NoVirtual(long pNativeObject, long pRend, boolean fixedFunction);
	protected void useRenderableViewProjMode_NoVirtual(com.earthview.world.graphic.Renderable pRend, boolean fixedFunction)
	{
		long pRendParamValue = (pRend == null ? 0L : pRend.nativeObject.pointer);
		boolean fixedFunctionParamValue = fixedFunction;
		useRenderableViewProjMode_CRenderable_ev_bool_NoVirtual(this.nativeObject.pointer, pRendParamValue, fixedFunctionParamValue);
	}

	protected  void resetViewProjMode_ev_bool_callback(boolean fixedFunction)
	{
		boolean fixedFunctionParamValue = fixedFunction;
		resetViewProjMode(fixedFunctionParamValue);
	}

	native private void resetViewProjMode_ev_bool(long pNativeObject, boolean fixedFunction);
	public void resetViewProjMode(boolean fixedFunction)
	{
		boolean fixedFunctionParamValue = fixedFunction;
		resetViewProjMode_ev_bool(this.nativeObject.pointer, fixedFunctionParamValue);
	}
	native private void resetViewProjMode_ev_bool_NoVirtual(long pNativeObject, boolean fixedFunction);
	protected void resetViewProjMode_NoVirtual(boolean fixedFunction)
	{
		boolean fixedFunctionParamValue = fixedFunction;
		resetViewProjMode_ev_bool_NoVirtual(this.nativeObject.pointer, fixedFunctionParamValue);
	}

	protected  void firePreRenderQueues_void_callback()
	{
		firePreRenderQueues();
	}

	native private void firePreRenderQueues_void(long pNativeObject);
	//// Internal method for firing the queue start event
	public void firePreRenderQueues()
	{
		firePreRenderQueues_void(this.nativeObject.pointer);
	}
	native private void firePreRenderQueues_void_NoVirtual(long pNativeObject);
	protected void firePreRenderQueues_NoVirtual()
	{
		firePreRenderQueues_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void firePostRenderQueues_void_callback()
	{
		firePostRenderQueues();
	}

	native private void firePostRenderQueues_void(long pNativeObject);
	//// Internal method for firing the queue end event
	public void firePostRenderQueues()
	{
		firePostRenderQueues_void(this.nativeObject.pointer);
	}
	native private void firePostRenderQueues_void_NoVirtual(long pNativeObject);
	protected void firePostRenderQueues_NoVirtual()
	{
		firePostRenderQueues_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  boolean fireRenderQueueStarted_ev_uint8_EVString_callback(short id, String invocation)
	{
		short idParamValue = id;
		String invocationParamValue = invocation;
		boolean returnValue = fireRenderQueueStarted(idParamValue, invocationParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean fireRenderQueueStarted_ev_uint8_EVString(long pNativeObject, short id, String invocation);
	//// Internal method for firing the queue start event, returns true if queue is to be skipped
	public boolean fireRenderQueueStarted(short id, String invocation)
	{
		short idParamValue = id;
		String invocationParamValue = invocation;
		boolean returnValue = fireRenderQueueStarted_ev_uint8_EVString(this.nativeObject.pointer, idParamValue, invocationParamValue);
		return returnValue;
	}
	native private boolean fireRenderQueueStarted_ev_uint8_EVString_NoVirtual(long pNativeObject, short id, String invocation);
	protected boolean fireRenderQueueStarted_NoVirtual(short id, String invocation)
	{
		short idParamValue = id;
		String invocationParamValue = invocation;
		boolean returnValue = fireRenderQueueStarted_ev_uint8_EVString_NoVirtual(this.nativeObject.pointer, idParamValue, invocationParamValue);
		return returnValue;
	}

	protected  boolean fireRenderQueueEnded_ev_uint8_EVString_callback(short id, String invocation)
	{
		short idParamValue = id;
		String invocationParamValue = invocation;
		boolean returnValue = fireRenderQueueEnded(idParamValue, invocationParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean fireRenderQueueEnded_ev_uint8_EVString(long pNativeObject, short id, String invocation);
	//// Internal method for firing the queue end event, returns true if queue is to be repeated
	public boolean fireRenderQueueEnded(short id, String invocation)
	{
		short idParamValue = id;
		String invocationParamValue = invocation;
		boolean returnValue = fireRenderQueueEnded_ev_uint8_EVString(this.nativeObject.pointer, idParamValue, invocationParamValue);
		return returnValue;
	}
	native private boolean fireRenderQueueEnded_ev_uint8_EVString_NoVirtual(long pNativeObject, short id, String invocation);
	protected boolean fireRenderQueueEnded_NoVirtual(short id, String invocation)
	{
		short idParamValue = id;
		String invocationParamValue = invocation;
		boolean returnValue = fireRenderQueueEnded_ev_uint8_EVString_NoVirtual(this.nativeObject.pointer, idParamValue, invocationParamValue);
		return returnValue;
	}

	protected  void fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback(long rend, long pass, long source, long pLightList, boolean suppressRenderStateChanges)
	{
		com.earthview.world.graphic.Renderable rendParamValue = (rend == 0L ? null : new com.earthview.world.graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate));
		if(rendParamValue != null)
		{
		rendParamValue.setDelegate(true);
		rendParamValue.setInstancePointer(new InstancePointer(rend));
		IClassFactory rendParamValueClassFactory = GlobalClassFactoryMap.get(rendParamValue.getCppInstanceTypeName());
		if (rendParamValueClassFactory != null)
		{
			rendParamValue.setDelegate(true);
			rendParamValue = (com.earthview.world.graphic.Renderable)rendParamValueClassFactory.create();
			rendParamValue.setDelegate(true);
			rendParamValue.setInstancePointer(new InstancePointer(rend));
		}
		}
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.AutoParamDataSource sourceParamValue = (source == 0L ? null : new com.earthview.world.graphic.AutoParamDataSource(CreatedWhenConstruct.CWC_NotToCreate));
		if(sourceParamValue != null)
		{
		sourceParamValue.setDelegate(true);
		sourceParamValue.setInstancePointer(new InstancePointer(source));
		IClassFactory sourceParamValueClassFactory = GlobalClassFactoryMap.get(sourceParamValue.getCppInstanceTypeName());
		if (sourceParamValueClassFactory != null)
		{
			sourceParamValue.setDelegate(true);
			sourceParamValue = (com.earthview.world.graphic.AutoParamDataSource)sourceParamValueClassFactory.create();
			sourceParamValue.setDelegate(true);
			sourceParamValue.setInstancePointer(new InstancePointer(source));
		}
		}
		com.earthview.world.graphic.LightList pLightListParamValue = (pLightList == 0L ? null : new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate));
		if(pLightListParamValue != null)
		{
		pLightListParamValue.setDelegate(true);
		pLightListParamValue.setInstancePointer(new InstancePointer(pLightList));
		IClassFactory pLightListParamValueClassFactory = GlobalClassFactoryMap.get(pLightListParamValue.getCppInstanceTypeName());
		if (pLightListParamValueClassFactory != null)
		{
			pLightListParamValue.setDelegate(true);
			pLightListParamValue = (com.earthview.world.graphic.LightList)pLightListParamValueClassFactory.create();
			pLightListParamValue.setDelegate(true);
			pLightListParamValue.setInstancePointer(new InstancePointer(pLightList));
		}
		}
		boolean suppressRenderStateChangesParamValue = suppressRenderStateChanges;
		fireRenderSingleObjectStarted(rendParamValue, passParamValue, sourceParamValue, pLightListParamValue, suppressRenderStateChangesParamValue);
	}

	native private void fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(long pNativeObject, long rend, long pass, long source, long pLightList, boolean suppressRenderStateChanges);
	//// Internal method for firing when rendering a single object.
	public void fireRenderSingleObjectStarted(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.AutoParamDataSource source, com.earthview.world.graphic.LightList pLightList, boolean suppressRenderStateChanges)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long sourceParamValue = (source == null ? 0L : source.nativeObject.pointer);
		long pLightListParamValue = (pLightList == null ? 0L : pLightList.nativeObject.pointer);
		boolean suppressRenderStateChangesParamValue = suppressRenderStateChanges;
		fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(this.nativeObject.pointer, rendParamValue, passParamValue, sourceParamValue, pLightListParamValue, suppressRenderStateChangesParamValue);
	}
	native private void fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_NoVirtual(long pNativeObject, long rend, long pass, long source, long pLightList, boolean suppressRenderStateChanges);
	protected void fireRenderSingleObjectStarted_NoVirtual(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.AutoParamDataSource source, com.earthview.world.graphic.LightList pLightList, boolean suppressRenderStateChanges)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long sourceParamValue = (source == null ? 0L : source.nativeObject.pointer);
		long pLightListParamValue = (pLightList == null ? 0L : pLightList.nativeObject.pointer);
		boolean suppressRenderStateChangesParamValue = suppressRenderStateChanges;
		fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_NoVirtual(this.nativeObject.pointer, rendParamValue, passParamValue, sourceParamValue, pLightListParamValue, suppressRenderStateChangesParamValue);
	}

	protected  void fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback(long rend, long pass, long source, long pLightList, boolean suppressRenderStateChanges)
	{
		com.earthview.world.graphic.Renderable rendParamValue = (rend == 0L ? null : new com.earthview.world.graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate));
		if(rendParamValue != null)
		{
		rendParamValue.setDelegate(true);
		rendParamValue.setInstancePointer(new InstancePointer(rend));
		IClassFactory rendParamValueClassFactory = GlobalClassFactoryMap.get(rendParamValue.getCppInstanceTypeName());
		if (rendParamValueClassFactory != null)
		{
			rendParamValue.setDelegate(true);
			rendParamValue = (com.earthview.world.graphic.Renderable)rendParamValueClassFactory.create();
			rendParamValue.setDelegate(true);
			rendParamValue.setInstancePointer(new InstancePointer(rend));
		}
		}
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.AutoParamDataSource sourceParamValue = (source == 0L ? null : new com.earthview.world.graphic.AutoParamDataSource(CreatedWhenConstruct.CWC_NotToCreate));
		if(sourceParamValue != null)
		{
		sourceParamValue.setDelegate(true);
		sourceParamValue.setInstancePointer(new InstancePointer(source));
		IClassFactory sourceParamValueClassFactory = GlobalClassFactoryMap.get(sourceParamValue.getCppInstanceTypeName());
		if (sourceParamValueClassFactory != null)
		{
			sourceParamValue.setDelegate(true);
			sourceParamValue = (com.earthview.world.graphic.AutoParamDataSource)sourceParamValueClassFactory.create();
			sourceParamValue.setDelegate(true);
			sourceParamValue.setInstancePointer(new InstancePointer(source));
		}
		}
		com.earthview.world.graphic.LightList pLightListParamValue = (pLightList == 0L ? null : new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate));
		if(pLightListParamValue != null)
		{
		pLightListParamValue.setDelegate(true);
		pLightListParamValue.setInstancePointer(new InstancePointer(pLightList));
		IClassFactory pLightListParamValueClassFactory = GlobalClassFactoryMap.get(pLightListParamValue.getCppInstanceTypeName());
		if (pLightListParamValueClassFactory != null)
		{
			pLightListParamValue.setDelegate(true);
			pLightListParamValue = (com.earthview.world.graphic.LightList)pLightListParamValueClassFactory.create();
			pLightListParamValue.setDelegate(true);
			pLightListParamValue.setInstancePointer(new InstancePointer(pLightList));
		}
		}
		boolean suppressRenderStateChangesParamValue = suppressRenderStateChanges;
		fireRenderSingleObjectEnd(rendParamValue, passParamValue, sourceParamValue, pLightListParamValue, suppressRenderStateChangesParamValue);
	}

	native private void fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(long pNativeObject, long rend, long pass, long source, long pLightList, boolean suppressRenderStateChanges);
	public void fireRenderSingleObjectEnd(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.AutoParamDataSource source, com.earthview.world.graphic.LightList pLightList, boolean suppressRenderStateChanges)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long sourceParamValue = (source == null ? 0L : source.nativeObject.pointer);
		long pLightListParamValue = (pLightList == null ? 0L : pLightList.nativeObject.pointer);
		boolean suppressRenderStateChangesParamValue = suppressRenderStateChanges;
		fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(this.nativeObject.pointer, rendParamValue, passParamValue, sourceParamValue, pLightListParamValue, suppressRenderStateChangesParamValue);
	}
	native private void fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_NoVirtual(long pNativeObject, long rend, long pass, long source, long pLightList, boolean suppressRenderStateChanges);
	protected void fireRenderSingleObjectEnd_NoVirtual(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.AutoParamDataSource source, com.earthview.world.graphic.LightList pLightList, boolean suppressRenderStateChanges)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long sourceParamValue = (source == null ? 0L : source.nativeObject.pointer);
		long pLightListParamValue = (pLightList == null ? 0L : pLightList.nativeObject.pointer);
		boolean suppressRenderStateChangesParamValue = suppressRenderStateChanges;
		fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_NoVirtual(this.nativeObject.pointer, rendParamValue, passParamValue, sourceParamValue, pLightListParamValue, suppressRenderStateChangesParamValue);
	}

	protected  void fireShadowTexturesUpdated_ev_size_t_callback(long numberOfShadowTextures)
	{
		long numberOfShadowTexturesParamValue = numberOfShadowTextures;
		fireShadowTexturesUpdated(numberOfShadowTexturesParamValue);
	}

	native private void fireShadowTexturesUpdated_ev_size_t(long pNativeObject, long numberOfShadowTextures);
	//// Internal method for firing the texture shadows updated event
	public void fireShadowTexturesUpdated(long numberOfShadowTextures)
	{
		long numberOfShadowTexturesParamValue = numberOfShadowTextures;
		fireShadowTexturesUpdated_ev_size_t(this.nativeObject.pointer, numberOfShadowTexturesParamValue);
	}
	native private void fireShadowTexturesUpdated_ev_size_t_NoVirtual(long pNativeObject, long numberOfShadowTextures);
	protected void fireShadowTexturesUpdated_NoVirtual(long numberOfShadowTextures)
	{
		long numberOfShadowTexturesParamValue = numberOfShadowTextures;
		fireShadowTexturesUpdated_ev_size_t_NoVirtual(this.nativeObject.pointer, numberOfShadowTexturesParamValue);
	}

	protected  void fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_callback(long light, long camera, long iteration)
	{
		com.earthview.world.graphic.Light lightParamValue = (light == 0L ? null : new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate));
		if(lightParamValue != null)
		{
		lightParamValue.setDelegate(true);
		lightParamValue.setInstancePointer(new InstancePointer(light));
		IClassFactory lightParamValueClassFactory = GlobalClassFactoryMap.get(lightParamValue.getCppInstanceTypeName());
		if (lightParamValueClassFactory != null)
		{
			lightParamValue.setDelegate(true);
			lightParamValue = (com.earthview.world.graphic.Light)lightParamValueClassFactory.create();
			lightParamValue.setDelegate(true);
			lightParamValue.setInstancePointer(new InstancePointer(light));
		}
		}
		com.earthview.world.graphic.Camera cameraParamValue = (camera == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
		if(cameraParamValue != null)
		{
		cameraParamValue.setDelegate(true);
		cameraParamValue.setInstancePointer(new InstancePointer(camera));
		IClassFactory cameraParamValueClassFactory = GlobalClassFactoryMap.get(cameraParamValue.getCppInstanceTypeName());
		if (cameraParamValueClassFactory != null)
		{
			cameraParamValue.setDelegate(true);
			cameraParamValue = (com.earthview.world.graphic.Camera)cameraParamValueClassFactory.create();
			cameraParamValue.setDelegate(true);
			cameraParamValue.setInstancePointer(new InstancePointer(camera));
		}
		}
		long iterationParamValue = iteration;
		fireShadowTexturesPreCaster(lightParamValue, cameraParamValue, iterationParamValue);
	}

	native private void fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t(long pNativeObject, long light, long camera, long iteration);
	//// Internal method for firing the pre caster texture shadows event
	public void fireShadowTexturesPreCaster(com.earthview.world.graphic.Light light, com.earthview.world.graphic.Camera camera, long iteration)
	{
		long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
		long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
		long iterationParamValue = iteration;
		fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t(this.nativeObject.pointer, lightParamValue, cameraParamValue, iterationParamValue);
	}
	native private void fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_NoVirtual(long pNativeObject, long light, long camera, long iteration);
	protected void fireShadowTexturesPreCaster_NoVirtual(com.earthview.world.graphic.Light light, com.earthview.world.graphic.Camera camera, long iteration)
	{
		long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
		long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
		long iterationParamValue = iteration;
		fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_NoVirtual(this.nativeObject.pointer, lightParamValue, cameraParamValue, iterationParamValue);
	}

	protected  void fireShadowTexturesPreReceiver_CLight_CFrustum_callback(long light, long f)
	{
		com.earthview.world.graphic.Light lightParamValue = (light == 0L ? null : new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate));
		if(lightParamValue != null)
		{
		lightParamValue.setDelegate(true);
		lightParamValue.setInstancePointer(new InstancePointer(light));
		IClassFactory lightParamValueClassFactory = GlobalClassFactoryMap.get(lightParamValue.getCppInstanceTypeName());
		if (lightParamValueClassFactory != null)
		{
			lightParamValue.setDelegate(true);
			lightParamValue = (com.earthview.world.graphic.Light)lightParamValueClassFactory.create();
			lightParamValue.setDelegate(true);
			lightParamValue.setInstancePointer(new InstancePointer(light));
		}
		}
		com.earthview.world.graphic.Frustum fParamValue = (f == 0L ? null : new com.earthview.world.graphic.Frustum(CreatedWhenConstruct.CWC_NotToCreate));
		if(fParamValue != null)
		{
		fParamValue.setDelegate(true);
		fParamValue.setInstancePointer(new InstancePointer(f));
		IClassFactory fParamValueClassFactory = GlobalClassFactoryMap.get(fParamValue.getCppInstanceTypeName());
		if (fParamValueClassFactory != null)
		{
			fParamValue.setDelegate(true);
			fParamValue = (com.earthview.world.graphic.Frustum)fParamValueClassFactory.create();
			fParamValue.setDelegate(true);
			fParamValue.setInstancePointer(new InstancePointer(f));
		}
		}
		fireShadowTexturesPreReceiver(lightParamValue, fParamValue);
	}

	native private void fireShadowTexturesPreReceiver_CLight_CFrustum(long pNativeObject, long light, long f);
	//// Internal method for firing the pre receiver texture shadows event
	public void fireShadowTexturesPreReceiver(com.earthview.world.graphic.Light light, com.earthview.world.graphic.Frustum f)
	{
		long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
		long fParamValue = (f == null ? 0L : f.nativeObject.pointer);
		fireShadowTexturesPreReceiver_CLight_CFrustum(this.nativeObject.pointer, lightParamValue, fParamValue);
	}
	native private void fireShadowTexturesPreReceiver_CLight_CFrustum_NoVirtual(long pNativeObject, long light, long f);
	protected void fireShadowTexturesPreReceiver_NoVirtual(com.earthview.world.graphic.Light light, com.earthview.world.graphic.Frustum f)
	{
		long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
		long fParamValue = (f == null ? 0L : f.nativeObject.pointer);
		fireShadowTexturesPreReceiver_CLight_CFrustum_NoVirtual(this.nativeObject.pointer, lightParamValue, fParamValue);
	}

	protected  void firePreUpdateSceneGraph_CCamera_callback(long camera)
	{
		com.earthview.world.graphic.Camera cameraParamValue = (camera == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
		if(cameraParamValue != null)
		{
		cameraParamValue.setDelegate(true);
		cameraParamValue.setInstancePointer(new InstancePointer(camera));
		IClassFactory cameraParamValueClassFactory = GlobalClassFactoryMap.get(cameraParamValue.getCppInstanceTypeName());
		if (cameraParamValueClassFactory != null)
		{
			cameraParamValue.setDelegate(true);
			cameraParamValue = (com.earthview.world.graphic.Camera)cameraParamValueClassFactory.create();
			cameraParamValue.setDelegate(true);
			cameraParamValue.setInstancePointer(new InstancePointer(camera));
		}
		}
		firePreUpdateSceneGraph(cameraParamValue);
	}

	native private void firePreUpdateSceneGraph_CCamera(long pNativeObject, long camera);
	///zxt add for v1.8
	//// Internal method for firing pre update scene graph event
	public void firePreUpdateSceneGraph(com.earthview.world.graphic.Camera camera)
	{
		long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
		firePreUpdateSceneGraph_CCamera(this.nativeObject.pointer, cameraParamValue);
	}
	native private void firePreUpdateSceneGraph_CCamera_NoVirtual(long pNativeObject, long camera);
	protected void firePreUpdateSceneGraph_NoVirtual(com.earthview.world.graphic.Camera camera)
	{
		long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
		firePreUpdateSceneGraph_CCamera_NoVirtual(this.nativeObject.pointer, cameraParamValue);
	}

	protected  void firePostUpdateSceneGraph_CCamera_callback(long camera)
	{
		com.earthview.world.graphic.Camera cameraParamValue = (camera == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
		if(cameraParamValue != null)
		{
		cameraParamValue.setDelegate(true);
		cameraParamValue.setInstancePointer(new InstancePointer(camera));
		IClassFactory cameraParamValueClassFactory = GlobalClassFactoryMap.get(cameraParamValue.getCppInstanceTypeName());
		if (cameraParamValueClassFactory != null)
		{
			cameraParamValue.setDelegate(true);
			cameraParamValue = (com.earthview.world.graphic.Camera)cameraParamValueClassFactory.create();
			cameraParamValue.setDelegate(true);
			cameraParamValue.setInstancePointer(new InstancePointer(camera));
		}
		}
		firePostUpdateSceneGraph(cameraParamValue);
	}

	native private void firePostUpdateSceneGraph_CCamera(long pNativeObject, long camera);
	//// Internal method for firing post update scene graph event
	public void firePostUpdateSceneGraph(com.earthview.world.graphic.Camera camera)
	{
		long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
		firePostUpdateSceneGraph_CCamera(this.nativeObject.pointer, cameraParamValue);
	}
	native private void firePostUpdateSceneGraph_CCamera_NoVirtual(long pNativeObject, long camera);
	protected void firePostUpdateSceneGraph_NoVirtual(com.earthview.world.graphic.Camera camera)
	{
		long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
		firePostUpdateSceneGraph_CCamera_NoVirtual(this.nativeObject.pointer, cameraParamValue);
	}

	protected  void firePreFindVisibleObjects_CViewport_callback(long v)
	{
		com.earthview.world.graphic.Viewport vParamValue = (v == 0L ? null : new com.earthview.world.graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate));
		if(vParamValue != null)
		{
		vParamValue.setDelegate(true);
		vParamValue.setInstancePointer(new InstancePointer(v));
		IClassFactory vParamValueClassFactory = GlobalClassFactoryMap.get(vParamValue.getCppInstanceTypeName());
		if (vParamValueClassFactory != null)
		{
			vParamValue.setDelegate(true);
			vParamValue = (com.earthview.world.graphic.Viewport)vParamValueClassFactory.create();
			vParamValue.setDelegate(true);
			vParamValue.setInstancePointer(new InstancePointer(v));
		}
		}
		firePreFindVisibleObjects(vParamValue);
	}

	native private void firePreFindVisibleObjects_CViewport(long pNativeObject, long v);
	//// Internal method for firing find visible objects event
	public void firePreFindVisibleObjects(com.earthview.world.graphic.Viewport v)
	{
		long vParamValue = (v == null ? 0L : v.nativeObject.pointer);
		firePreFindVisibleObjects_CViewport(this.nativeObject.pointer, vParamValue);
	}
	native private void firePreFindVisibleObjects_CViewport_NoVirtual(long pNativeObject, long v);
	protected void firePreFindVisibleObjects_NoVirtual(com.earthview.world.graphic.Viewport v)
	{
		long vParamValue = (v == null ? 0L : v.nativeObject.pointer);
		firePreFindVisibleObjects_CViewport_NoVirtual(this.nativeObject.pointer, vParamValue);
	}

	protected  void firePostFindVisibleObjects_CViewport_callback(long v)
	{
		com.earthview.world.graphic.Viewport vParamValue = (v == 0L ? null : new com.earthview.world.graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate));
		if(vParamValue != null)
		{
		vParamValue.setDelegate(true);
		vParamValue.setInstancePointer(new InstancePointer(v));
		IClassFactory vParamValueClassFactory = GlobalClassFactoryMap.get(vParamValue.getCppInstanceTypeName());
		if (vParamValueClassFactory != null)
		{
			vParamValue.setDelegate(true);
			vParamValue = (com.earthview.world.graphic.Viewport)vParamValueClassFactory.create();
			vParamValue.setDelegate(true);
			vParamValue.setInstancePointer(new InstancePointer(v));
		}
		}
		firePostFindVisibleObjects(vParamValue);
	}

	native private void firePostFindVisibleObjects_CViewport(long pNativeObject, long v);
	//// Internal method for firing find visible objects event
	public void firePostFindVisibleObjects(com.earthview.world.graphic.Viewport v)
	{
		long vParamValue = (v == null ? 0L : v.nativeObject.pointer);
		firePostFindVisibleObjects_CViewport(this.nativeObject.pointer, vParamValue);
	}
	native private void firePostFindVisibleObjects_CViewport_NoVirtual(long pNativeObject, long v);
	protected void firePostFindVisibleObjects_NoVirtual(com.earthview.world.graphic.Viewport v)
	{
		long vParamValue = (v == null ? 0L : v.nativeObject.pointer);
		firePostFindVisibleObjects_CViewport_NoVirtual(this.nativeObject.pointer, vParamValue);
	}

	protected  void fireSceneManagerDestroyed_void_callback()
	{
		fireSceneManagerDestroyed();
	}

	native private void fireSceneManagerDestroyed_void(long pNativeObject);
	//// Internal method for firing destruction event
	public void fireSceneManagerDestroyed()
	{
		fireSceneManagerDestroyed_void(this.nativeObject.pointer);
	}
	native private void fireSceneManagerDestroyed_void_NoVirtual(long pNativeObject);
	protected void fireSceneManagerDestroyed_NoVirtual()
	{
		fireSceneManagerDestroyed_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void setViewport_CViewport_callback(long vp)
	{
		com.earthview.world.graphic.Viewport vpParamValue = (vp == 0L ? null : new com.earthview.world.graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate));
		if(vpParamValue != null)
		{
		vpParamValue.setDelegate(true);
		vpParamValue.setInstancePointer(new InstancePointer(vp));
		IClassFactory vpParamValueClassFactory = GlobalClassFactoryMap.get(vpParamValue.getCppInstanceTypeName());
		if (vpParamValueClassFactory != null)
		{
			vpParamValue.setDelegate(true);
			vpParamValue = (com.earthview.world.graphic.Viewport)vpParamValueClassFactory.create();
			vpParamValue.setDelegate(true);
			vpParamValue.setInstancePointer(new InstancePointer(vp));
		}
		}
		setViewport(vpParamValue);
	}

	native private void setViewport_CViewport(long pNativeObject, long vp);
	public void setViewport(com.earthview.world.graphic.Viewport vp)
	{
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		setViewport_CViewport(this.nativeObject.pointer, vpParamValue);
	}
	native private void setViewport_CViewport_NoVirtual(long pNativeObject, long vp);
	protected void setViewport_NoVirtual(com.earthview.world.graphic.Viewport vp)
	{
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		setViewport_CViewport_NoVirtual(this.nativeObject.pointer, vpParamValue);
	}

	protected  void renderVisibleObjectsDefaultSequence_void_callback()
	{
		renderVisibleObjectsDefaultSequence();
	}

	native private void renderVisibleObjectsDefaultSequence_void(long pNativeObject);
	public void renderVisibleObjectsDefaultSequence()
	{
		renderVisibleObjectsDefaultSequence_void(this.nativeObject.pointer);
	}
	native private void renderVisibleObjectsDefaultSequence_void_NoVirtual(long pNativeObject);
	protected void renderVisibleObjectsDefaultSequence_NoVirtual()
	{
		renderVisibleObjectsDefaultSequence_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_callback(long s)
	{
		com.earthview.world.graphic.RenderQueueInvocationSequence sParamValue = (s == 0L ? null : new com.earthview.world.graphic.RenderQueueInvocationSequence(CreatedWhenConstruct.CWC_NotToCreate));
		if(sParamValue != null)
		{
		sParamValue.setDelegate(true);
		sParamValue.setInstancePointer(new InstancePointer(s));
		IClassFactory sParamValueClassFactory = GlobalClassFactoryMap.get(sParamValue.getCppInstanceTypeName());
		if (sParamValueClassFactory != null)
		{
			sParamValue.setDelegate(true);
			sParamValue = (com.earthview.world.graphic.RenderQueueInvocationSequence)sParamValueClassFactory.create();
			sParamValue.setDelegate(true);
			sParamValue.setInstancePointer(new InstancePointer(s));
		}
		}
		renderVisibleObjectsCustomSequence(sParamValue);
	}

	native private void renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence(long pNativeObject, long s);
	public void renderVisibleObjectsCustomSequence(com.earthview.world.graphic.RenderQueueInvocationSequence s)
	{
		long sParamValue = (s == null ? 0L : s.nativeObject.pointer);
		renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence(this.nativeObject.pointer, sParamValue);
	}
	native private void renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_NoVirtual(long pNativeObject, long s);
	protected void renderVisibleObjectsCustomSequence_NoVirtual(com.earthview.world.graphic.RenderQueueInvocationSequence s)
	{
		long sParamValue = (s == null ? 0L : s.nativeObject.pointer);
		renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_NoVirtual(this.nativeObject.pointer, sParamValue);
	}

	protected  void prepareRenderQueue_void_callback()
	{
		prepareRenderQueue();
	}

	native private void prepareRenderQueue_void(long pNativeObject);
	public void prepareRenderQueue()
	{
		prepareRenderQueue_void(this.nativeObject.pointer);
	}
	native private void prepareRenderQueue_void_NoVirtual(long pNativeObject);
	protected void prepareRenderQueue_NoVirtual()
	{
		prepareRenderQueue_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_callback(long rend, long pass, boolean lightScissoringClipping, boolean doLightIteration, long manualLightList)
	{
		com.earthview.world.graphic.Renderable rendParamValue = (rend == 0L ? null : new com.earthview.world.graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate));
		if(rendParamValue != null)
		{
		rendParamValue.setDelegate(true);
		rendParamValue.setInstancePointer(new InstancePointer(rend));
		IClassFactory rendParamValueClassFactory = GlobalClassFactoryMap.get(rendParamValue.getCppInstanceTypeName());
		if (rendParamValueClassFactory != null)
		{
			rendParamValue.setDelegate(true);
			rendParamValue = (com.earthview.world.graphic.Renderable)rendParamValueClassFactory.create();
			rendParamValue.setDelegate(true);
			rendParamValue.setInstancePointer(new InstancePointer(rend));
		}
		}
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		com.earthview.world.graphic.LightList manualLightListParamValue = (manualLightList == 0L ? null : new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate));
		if(manualLightListParamValue != null)
		{
		manualLightListParamValue.setDelegate(true);
		manualLightListParamValue.setInstancePointer(new InstancePointer(manualLightList));
		IClassFactory manualLightListParamValueClassFactory = GlobalClassFactoryMap.get(manualLightListParamValue.getCppInstanceTypeName());
		if (manualLightListParamValueClassFactory != null)
		{
			manualLightListParamValue.setDelegate(true);
			manualLightListParamValue = (com.earthview.world.graphic.LightList)manualLightListParamValueClassFactory.create();
			manualLightListParamValue.setDelegate(true);
			manualLightListParamValue.setInstancePointer(new InstancePointer(manualLightList));
		}
		}
		renderSingleObject(rendParamValue, passParamValue, lightScissoringClippingParamValue, doLightIterationParamValue, manualLightListParamValue);
	}

	native private void renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList(long pNativeObject, long rend, long pass, boolean lightScissoringClipping, boolean doLightIteration, long manualLightList);
	public void renderSingleObject(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, boolean lightScissoringClipping, boolean doLightIteration, com.earthview.world.graphic.LightList manualLightList)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		long manualLightListParamValue = (manualLightList == null ? 0L : manualLightList.nativeObject.pointer);
		renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList(this.nativeObject.pointer, rendParamValue, passParamValue, lightScissoringClippingParamValue, doLightIterationParamValue, manualLightListParamValue);
	}
	native private void renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_NoVirtual(long pNativeObject, long rend, long pass, boolean lightScissoringClipping, boolean doLightIteration, long manualLightList);
	protected void renderSingleObject_NoVirtual(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, boolean lightScissoringClipping, boolean doLightIteration, com.earthview.world.graphic.LightList manualLightList)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		long manualLightListParamValue = (manualLightList == null ? 0L : manualLightList.nativeObject.pointer);
		renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_NoVirtual(this.nativeObject.pointer, rendParamValue, passParamValue, lightScissoringClippingParamValue, doLightIterationParamValue, manualLightListParamValue);
	}

	protected  void renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_callback(long rend, long pass, boolean lightScissoringClipping, boolean doLightIteration)
	{
		com.earthview.world.graphic.Renderable rendParamValue = (rend == 0L ? null : new com.earthview.world.graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate));
		if(rendParamValue != null)
		{
		rendParamValue.setDelegate(true);
		rendParamValue.setInstancePointer(new InstancePointer(rend));
		IClassFactory rendParamValueClassFactory = GlobalClassFactoryMap.get(rendParamValue.getCppInstanceTypeName());
		if (rendParamValueClassFactory != null)
		{
			rendParamValue.setDelegate(true);
			rendParamValue = (com.earthview.world.graphic.Renderable)rendParamValueClassFactory.create();
			rendParamValue.setDelegate(true);
			rendParamValue.setInstancePointer(new InstancePointer(rend));
		}
		}
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		renderSingleObject(rendParamValue, passParamValue, lightScissoringClippingParamValue, doLightIterationParamValue);
	}

	native private void renderSingleObject_CRenderable_CPass_ev_bool_ev_bool(long pNativeObject, long rend, long pass, boolean lightScissoringClipping, boolean doLightIteration);
	public void renderSingleObject(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, boolean lightScissoringClipping, boolean doLightIteration)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		renderSingleObject_CRenderable_CPass_ev_bool_ev_bool(this.nativeObject.pointer, rendParamValue, passParamValue, lightScissoringClippingParamValue, doLightIterationParamValue);
	}
	native private void renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_NoVirtual(long pNativeObject, long rend, long pass, boolean lightScissoringClipping, boolean doLightIteration);
	protected void renderSingleObject_NoVirtual(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, boolean lightScissoringClipping, boolean doLightIteration)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_NoVirtual(this.nativeObject.pointer, rendParamValue, passParamValue, lightScissoringClippingParamValue, doLightIterationParamValue);
	}

	protected  long createAutoParamDataSource_void_callback()
	{
		com.earthview.world.graphic.AutoParamDataSource returnValue = createAutoParamDataSource();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createAutoParamDataSource_void(long pNativeObject);
	public com.earthview.world.graphic.AutoParamDataSource createAutoParamDataSource()
	{
		long returnValue = createAutoParamDataSource_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.AutoParamDataSource __returnValue = new com.earthview.world.graphic.AutoParamDataSource(CreatedWhenConstruct.CWC_NotToCreate, "CAutoParamDataSource");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.AutoParamDataSource)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CAutoParamDataSource");
		}
		return __returnValue;
	}
	native private long createAutoParamDataSource_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.AutoParamDataSource createAutoParamDataSource_NoVirtual()
	{
		long returnValue = createAutoParamDataSource_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.AutoParamDataSource __returnValue = new com.earthview.world.graphic.AutoParamDataSource(CreatedWhenConstruct.CWC_NotToCreate, "CAutoParamDataSource");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.AutoParamDataSource)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CAutoParamDataSource");
		}
		return __returnValue;
	}

	native private long getAutoParamDataSource_void(long pNativeObject);
	public com.earthview.world.graphic.AutoParamDataSource getAutoParamDataSource()
	{
		long returnValue = getAutoParamDataSource_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.AutoParamDataSource __returnValue = new com.earthview.world.graphic.AutoParamDataSource(CreatedWhenConstruct.CWC_NotToCreate, "CAutoParamDataSource");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.AutoParamDataSource)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CAutoParamDataSource");
		}
		return __returnValue;
	}
	protected  void findLightsAffectingFrustum_CCamera_callback(long camera)
	{
		com.earthview.world.graphic.Camera cameraParamValue = (camera == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
		if(cameraParamValue != null)
		{
		cameraParamValue.setDelegate(true);
		cameraParamValue.setInstancePointer(new InstancePointer(camera));
		IClassFactory cameraParamValueClassFactory = GlobalClassFactoryMap.get(cameraParamValue.getCppInstanceTypeName());
		if (cameraParamValueClassFactory != null)
		{
			cameraParamValue.setDelegate(true);
			cameraParamValue = (com.earthview.world.graphic.Camera)cameraParamValueClassFactory.create();
			cameraParamValue.setDelegate(true);
			cameraParamValue.setInstancePointer(new InstancePointer(camera));
		}
		}
		findLightsAffectingFrustum(cameraParamValue);
	}

	native private void findLightsAffectingFrustum_CCamera(long pNativeObject, long camera);
	public void findLightsAffectingFrustum(com.earthview.world.graphic.Camera camera)
	{
		long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
		findLightsAffectingFrustum_CCamera(this.nativeObject.pointer, cameraParamValue);
	}
	native private void findLightsAffectingFrustum_CCamera_NoVirtual(long pNativeObject, long camera);
	protected void findLightsAffectingFrustum_NoVirtual(com.earthview.world.graphic.Camera camera)
	{
		long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
		findLightsAffectingFrustum_CCamera_NoVirtual(this.nativeObject.pointer, cameraParamValue);
	}

	protected  void initShadowVolumeMaterials_void_callback()
	{
		initShadowVolumeMaterials();
	}

	native private void initShadowVolumeMaterials_void(long pNativeObject);
	//// Internal method for setting up materials for shadows
	public void initShadowVolumeMaterials()
	{
		initShadowVolumeMaterials_void(this.nativeObject.pointer);
	}
	native private void initShadowVolumeMaterials_void_NoVirtual(long pNativeObject);
	protected void initShadowVolumeMaterials_NoVirtual()
	{
		initShadowVolumeMaterials_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void ensureShadowTexturesCreated_void_callback()
	{
		ensureShadowTexturesCreated();
	}

	native private void ensureShadowTexturesCreated_void(long pNativeObject);
	//// Internal method for creating shadow textures (texture-based shadows)
	public void ensureShadowTexturesCreated()
	{
		ensureShadowTexturesCreated_void(this.nativeObject.pointer);
	}
	native private void ensureShadowTexturesCreated_void_NoVirtual(long pNativeObject);
	protected void ensureShadowTexturesCreated_NoVirtual()
	{
		ensureShadowTexturesCreated_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void destroyShadowTextures_void_callback()
	{
		destroyShadowTextures();
	}

	native private void destroyShadowTextures_void(long pNativeObject);
	//// Internal method for destroying shadow textures (texture-based shadows)
	public void destroyShadowTextures()
	{
		destroyShadowTextures_void(this.nativeObject.pointer);
	}
	native private void destroyShadowTextures_void_NoVirtual(long pNativeObject);
	protected void destroyShadowTextures_NoVirtual()
	{
		destroyShadowTextures_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void prepareShadowTextures_CCamera_CViewport_LightList_callback(long cam, long vp, long lightList)
	{
		com.earthview.world.graphic.Camera camParamValue = (cam == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
		if(camParamValue != null)
		{
		camParamValue.setDelegate(true);
		camParamValue.setInstancePointer(new InstancePointer(cam));
		IClassFactory camParamValueClassFactory = GlobalClassFactoryMap.get(camParamValue.getCppInstanceTypeName());
		if (camParamValueClassFactory != null)
		{
			camParamValue.setDelegate(true);
			camParamValue = (com.earthview.world.graphic.Camera)camParamValueClassFactory.create();
			camParamValue.setDelegate(true);
			camParamValue.setInstancePointer(new InstancePointer(cam));
		}
		}
		com.earthview.world.graphic.Viewport vpParamValue = (vp == 0L ? null : new com.earthview.world.graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate));
		if(vpParamValue != null)
		{
		vpParamValue.setDelegate(true);
		vpParamValue.setInstancePointer(new InstancePointer(vp));
		IClassFactory vpParamValueClassFactory = GlobalClassFactoryMap.get(vpParamValue.getCppInstanceTypeName());
		if (vpParamValueClassFactory != null)
		{
			vpParamValue.setDelegate(true);
			vpParamValue = (com.earthview.world.graphic.Viewport)vpParamValueClassFactory.create();
			vpParamValue.setDelegate(true);
			vpParamValue.setInstancePointer(new InstancePointer(vp));
		}
		}
		com.earthview.world.graphic.LightList lightListParamValue = (lightList == 0L ? null : new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate));
		if(lightListParamValue != null)
		{
		lightListParamValue.setDelegate(true);
		lightListParamValue.setInstancePointer(new InstancePointer(lightList));
		IClassFactory lightListParamValueClassFactory = GlobalClassFactoryMap.get(lightListParamValue.getCppInstanceTypeName());
		if (lightListParamValueClassFactory != null)
		{
			lightListParamValue.setDelegate(true);
			lightListParamValue = (com.earthview.world.graphic.LightList)lightListParamValueClassFactory.create();
			lightListParamValue.setDelegate(true);
			lightListParamValue.setInstancePointer(new InstancePointer(lightList));
		}
		}
		prepareShadowTextures(camParamValue, vpParamValue, lightListParamValue);
	}

	native private void prepareShadowTextures_CCamera_CViewport_LightList(long pNativeObject, long cam, long vp, long lightList);
	/**
	 * 准备阴影纹理
	 * @param cam 摄像机
	 * @param vp 视口
	 * @param lightList 光源列表，默认为空
	 */
	public void prepareShadowTextures(com.earthview.world.graphic.Camera cam, com.earthview.world.graphic.Viewport vp, com.earthview.world.graphic.LightList lightList)
	{
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		long lightListParamValue = (lightList == null ? 0L : lightList.nativeObject.pointer);
		prepareShadowTextures_CCamera_CViewport_LightList(this.nativeObject.pointer, camParamValue, vpParamValue, lightListParamValue);
	}
	native private void prepareShadowTextures_CCamera_CViewport_LightList_NoVirtual(long pNativeObject, long cam, long vp, long lightList);
	protected void prepareShadowTextures_NoVirtual(com.earthview.world.graphic.Camera cam, com.earthview.world.graphic.Viewport vp, com.earthview.world.graphic.LightList lightList)
	{
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		long lightListParamValue = (lightList == null ? 0L : lightList.nativeObject.pointer);
		prepareShadowTextures_CCamera_CViewport_LightList_NoVirtual(this.nativeObject.pointer, camParamValue, vpParamValue, lightListParamValue);
	}

	protected  void prepareShadowTextures_CCamera_CViewport_callback(long cam, long vp)
	{
		com.earthview.world.graphic.Camera camParamValue = (cam == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
		if(camParamValue != null)
		{
		camParamValue.setDelegate(true);
		camParamValue.setInstancePointer(new InstancePointer(cam));
		IClassFactory camParamValueClassFactory = GlobalClassFactoryMap.get(camParamValue.getCppInstanceTypeName());
		if (camParamValueClassFactory != null)
		{
			camParamValue.setDelegate(true);
			camParamValue = (com.earthview.world.graphic.Camera)camParamValueClassFactory.create();
			camParamValue.setDelegate(true);
			camParamValue.setInstancePointer(new InstancePointer(cam));
		}
		}
		com.earthview.world.graphic.Viewport vpParamValue = (vp == 0L ? null : new com.earthview.world.graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate));
		if(vpParamValue != null)
		{
		vpParamValue.setDelegate(true);
		vpParamValue.setInstancePointer(new InstancePointer(vp));
		IClassFactory vpParamValueClassFactory = GlobalClassFactoryMap.get(vpParamValue.getCppInstanceTypeName());
		if (vpParamValueClassFactory != null)
		{
			vpParamValue.setDelegate(true);
			vpParamValue = (com.earthview.world.graphic.Viewport)vpParamValueClassFactory.create();
			vpParamValue.setDelegate(true);
			vpParamValue.setInstancePointer(new InstancePointer(vp));
		}
		}
		prepareShadowTextures(camParamValue, vpParamValue);
	}

	native private void prepareShadowTextures_CCamera_CViewport(long pNativeObject, long cam, long vp);
	public void prepareShadowTextures(com.earthview.world.graphic.Camera cam, com.earthview.world.graphic.Viewport vp)
	{
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		prepareShadowTextures_CCamera_CViewport(this.nativeObject.pointer, camParamValue, vpParamValue);
	}
	native private void prepareShadowTextures_CCamera_CViewport_NoVirtual(long pNativeObject, long cam, long vp);
	protected void prepareShadowTextures_NoVirtual(com.earthview.world.graphic.Camera cam, com.earthview.world.graphic.Viewport vp)
	{
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		prepareShadowTextures_CCamera_CViewport_NoVirtual(this.nativeObject.pointer, camParamValue, vpParamValue);
	}

	protected  void setImageDefaultMaterial_CMaterialPtr_callback(long matPtr)
	{
		com.earthview.world.graphic.MaterialPtr matPtrParamValue = new com.earthview.world.graphic.MaterialPtr(CreatedWhenConstruct.CWC_NotToCreate);
		matPtrParamValue.setDelegate(true);
		matPtrParamValue.setInstancePointer(new InstancePointer(matPtr));
		IClassFactory matPtrParamValueClassFactory = GlobalClassFactoryMap.get(matPtrParamValue.getCppInstanceTypeName());
		if (matPtrParamValueClassFactory != null)
		{
			matPtrParamValue.setDelegate(true);
			matPtrParamValue = (com.earthview.world.graphic.MaterialPtr)matPtrParamValueClassFactory.create();
			matPtrParamValue.setDelegate(true);
			matPtrParamValue.setInstancePointer(new InstancePointer(matPtr));
		}
		setImageDefaultMaterial(matPtrParamValue);
	}

	native private void setImageDefaultMaterial_CMaterialPtr(long pNativeObject, long matPtr);
	public void setImageDefaultMaterial(com.earthview.world.graphic.MaterialPtr matPtr)
	{
		long matPtrParamValue = matPtr.nativeObject.pointer;
		setImageDefaultMaterial_CMaterialPtr(this.nativeObject.pointer, matPtrParamValue);
	}
	native private void setImageDefaultMaterial_CMaterialPtr_NoVirtual(long pNativeObject, long matPtr);
	protected void setImageDefaultMaterial_NoVirtual(com.earthview.world.graphic.MaterialPtr matPtr)
	{
		long matPtrParamValue = matPtr.nativeObject.pointer;
		setImageDefaultMaterial_CMaterialPtr_NoVirtual(this.nativeObject.pointer, matPtrParamValue);
	}

	protected  void setImageUseDefaultMaterial_ev_bool_callback(boolean useDefaultMat)
	{
		boolean useDefaultMatParamValue = useDefaultMat;
		setImageUseDefaultMaterial(useDefaultMatParamValue);
	}

	native private void setImageUseDefaultMaterial_ev_bool(long pNativeObject, boolean useDefaultMat);
	public void setImageUseDefaultMaterial(boolean useDefaultMat)
	{
		boolean useDefaultMatParamValue = useDefaultMat;
		setImageUseDefaultMaterial_ev_bool(this.nativeObject.pointer, useDefaultMatParamValue);
	}
	native private void setImageUseDefaultMaterial_ev_bool_NoVirtual(long pNativeObject, boolean useDefaultMat);
	protected void setImageUseDefaultMaterial_NoVirtual(boolean useDefaultMat)
	{
		boolean useDefaultMatParamValue = useDefaultMat;
		setImageUseDefaultMaterial_ev_bool_NoVirtual(this.nativeObject.pointer, useDefaultMatParamValue);
	}

	protected  long getSunPosition_void_callback()
	{
		com.earthview.world.spatial.math.Vector3 returnValue = getSunPosition();
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getSunPosition_void(long pNativeObject);
	public com.earthview.world.spatial.math.Vector3 getSunPosition()
	{
		long returnValue = getSunPosition_void(this.nativeObject.pointer);
		com.earthview.world.spatial.math.Vector3 __returnValue = new com.earthview.world.spatial.math.Vector3(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "CVector3");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.spatial.math.Vector3)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CVector3");
		}
		return __returnValue;
	}
	native private long getSunPosition_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.spatial.math.Vector3 getSunPosition_NoVirtual()
	{
		long returnValue = getSunPosition_void_NoVirtual(this.nativeObject.pointer);
		com.earthview.world.spatial.math.Vector3 __returnValue = new com.earthview.world.spatial.math.Vector3(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "CVector3");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.spatial.math.Vector3)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CVector3");
		}
		return __returnValue;
	}

	protected  void setAtmosphereVisible_ev_bool_callback(boolean visible)
	{
		boolean visibleParamValue = visible;
		setAtmosphereVisible(visibleParamValue);
	}

	native private void setAtmosphereVisible_ev_bool(long pNativeObject, boolean visible);
	public void setAtmosphereVisible(boolean visible)
	{
		boolean visibleParamValue = visible;
		setAtmosphereVisible_ev_bool(this.nativeObject.pointer, visibleParamValue);
	}
	native private void setAtmosphereVisible_ev_bool_NoVirtual(long pNativeObject, boolean visible);
	protected void setAtmosphereVisible_NoVirtual(boolean visible)
	{
		boolean visibleParamValue = visible;
		setAtmosphereVisible_ev_bool_NoVirtual(this.nativeObject.pointer, visibleParamValue);
	}

	protected  void storeAtmosphereVisibleState_void_callback()
	{
		storeAtmosphereVisibleState();
	}

	native private void storeAtmosphereVisibleState_void(long pNativeObject);
	public void storeAtmosphereVisibleState()
	{
		storeAtmosphereVisibleState_void(this.nativeObject.pointer);
	}
	native private void storeAtmosphereVisibleState_void_NoVirtual(long pNativeObject);
	protected void storeAtmosphereVisibleState_NoVirtual()
	{
		storeAtmosphereVisibleState_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void restoreAtmosphereVisibleState_void_callback()
	{
		restoreAtmosphereVisibleState();
	}

	native private void restoreAtmosphereVisibleState_void(long pNativeObject);
	public void restoreAtmosphereVisibleState()
	{
		restoreAtmosphereVisibleState_void(this.nativeObject.pointer);
	}
	native private void restoreAtmosphereVisibleState_void_NoVirtual(long pNativeObject);
	protected void restoreAtmosphereVisibleState_NoVirtual()
	{
		restoreAtmosphereVisibleState_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void setSunVisible_ev_bool_callback(boolean flag)
	{
		boolean flagParamValue = flag;
		setSunVisible(flagParamValue);
	}

	native private void setSunVisible_ev_bool(long pNativeObject, boolean flag);
	public void setSunVisible(boolean flag)
	{
		boolean flagParamValue = flag;
		setSunVisible_ev_bool(this.nativeObject.pointer, flagParamValue);
	}
	native private void setSunVisible_ev_bool_NoVirtual(long pNativeObject, boolean flag);
	protected void setSunVisible_NoVirtual(boolean flag)
	{
		boolean flagParamValue = flag;
		setSunVisible_ev_bool_NoVirtual(this.nativeObject.pointer, flagParamValue);
	}

	/**
	 * 内部环境类存储内部数据来暂停或者恢复渲染原来为struct
	 */
	public static class RenderContext extends com.earthview.world.core.BaseObject {
		
		static {
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::RenderContext", new RenderContextClassFactory());
		}

		public RenderContext() {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			Create("RenderContext", null);
		}

		native private long get_renderQueue_void(long pNativeObject);
		public com.earthview.world.graphic.RenderQueue get_renderQueue()
		{
			long jniValue = get_renderQueue_void(this.nativeObject.pointer);
			
			if(jniValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.RenderQueue __returnValue = new com.earthview.world.graphic.RenderQueue(CreatedWhenConstruct.CWC_NotToCreate, "CRenderQueue");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(jniValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.RenderQueue)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CRenderQueue");
			}
			return __returnValue;
		}
		
		native private void set_renderQueue_CRenderQueue (long pNativeObject, long value);
		public void set_renderQueue(com.earthview.world.graphic.RenderQueue renderQueue)
		{
			long renderQueueParamValue = (renderQueue == null ? 0L : renderQueue.nativeObject.pointer);
			
			set_renderQueue_CRenderQueue(this.nativeObject.pointer, renderQueueParamValue);
		}
		
		native private long get_viewport_void(long pNativeObject);
		public com.earthview.world.graphic.Viewport get_viewport()
		{
			long jniValue = get_viewport_void(this.nativeObject.pointer);
			
			if(jniValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.Viewport __returnValue = new com.earthview.world.graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate, "CViewport");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(jniValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.Viewport)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CViewport");
			}
			return __returnValue;
		}
		
		native private void set_viewport_CViewport (long pNativeObject, long value);
		public void set_viewport(com.earthview.world.graphic.Viewport viewport)
		{
			long viewportParamValue = (viewport == null ? 0L : viewport.nativeObject.pointer);
			
			set_viewport_CViewport(this.nativeObject.pointer, viewportParamValue);
		}
		
		native private long get_camera_void(long pNativeObject);
		public com.earthview.world.graphic.Camera get_camera()
		{
			long jniValue = get_camera_void(this.nativeObject.pointer);
			
			if(jniValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.Camera __returnValue = new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate, "CCamera");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(jniValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.Camera)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CCamera");
			}
			return __returnValue;
		}
		
		native private void set_camera_CCamera (long pNativeObject, long value);
		public void set_camera(com.earthview.world.graphic.Camera camera)
		{
			long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
			
			set_camera_CCamera(this.nativeObject.pointer, cameraParamValue);
		}
		
		native private long get_activeChain_void(long pNativeObject);
		public com.earthview.world.graphic.CompositorChain get_activeChain()
		{
			long jniValue = get_activeChain_void(this.nativeObject.pointer);
			
			if(jniValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.CompositorChain __returnValue = new com.earthview.world.graphic.CompositorChain(CreatedWhenConstruct.CWC_NotToCreate, "CCompositorChain");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(jniValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.CompositorChain)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CCompositorChain");
			}
			return __returnValue;
		}
		
		native private void set_activeChain_CCompositorChain (long pNativeObject, long value);
		public void set_activeChain(com.earthview.world.graphic.CompositorChain activeChain)
		{
			long activeChainParamValue = (activeChain == null ? 0L : activeChain.nativeObject.pointer);
			
			set_activeChain_CCompositorChain(this.nativeObject.pointer, activeChainParamValue);
		}
		
		native private long get_rsContext_void(long pNativeObject);
		public com.earthview.world.graphic.RenderSystem.RenderSystemContext get_rsContext()
		{
			long jniValue = get_rsContext_void(this.nativeObject.pointer);
			
			if(jniValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.RenderSystem.RenderSystemContext __returnValue = new com.earthview.world.graphic.RenderSystem.RenderSystemContext(new InstancePointer(jniValue));
			return __returnValue;
		}
		
		native private void set_rsContext_RenderSystemContext (long pNativeObject, long value);
		public void set_rsContext(com.earthview.world.graphic.RenderSystem.RenderSystemContext rsContext)
		{
			long rsContextParamValue = (rsContext == null ? 0L : rsContext.nativeObject.pointer);
			
			set_rsContext_RenderSystemContext(this.nativeObject.pointer, rsContextParamValue);
		}
		
		public RenderContext(CreatedWhenConstruct cwc) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
		}
		public RenderContext(CreatedWhenConstruct cwc, String classNameStr) {
			super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
		}
		
		
		
		
		public static RenderContext fromBaseObject(BaseObject baseObj)
		{
			if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
			{
				return null;
			}
			RenderContext obj = null;
 			if(baseObj instanceof RenderContext)
			{
				obj = (RenderContext)baseObj;
			} else {
				obj = new RenderContext(CreatedWhenConstruct.CWC_NotToCreate);
				obj.bindNativeObject(baseObj.nativeObject, "RenderContext");
				obj.increaseCast();
			}

			return obj;
		}
	}
	public static class RenderContextClassFactory implements IClassFactory {
		public BaseObject create()
		{
			RenderContext emptyInstance = new RenderContext(CreatedWhenConstruct.CWC_NotToCreate);
			return emptyInstance;
		}
	}
	
	protected  long _pauseRendering_void_callback()
	{
		com.earthview.world.graphic.SceneManager.RenderContext returnValue = _pauseRendering();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long _pauseRendering_void(long pNativeObject);
	/**
	 * 暂停渲染
	 * @param  
	 */
	public com.earthview.world.graphic.SceneManager.RenderContext _pauseRendering()
	{
		long returnValue = _pauseRendering_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneManager.RenderContext __returnValue = new com.earthview.world.graphic.SceneManager.RenderContext(CreatedWhenConstruct.CWC_NotToCreate, "RenderContext");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneManager.RenderContext)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "RenderContext");
		}
		return __returnValue;
	}
	native private long _pauseRendering_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.SceneManager.RenderContext _pauseRendering_NoVirtual()
	{
		long returnValue = _pauseRendering_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneManager.RenderContext __returnValue = new com.earthview.world.graphic.SceneManager.RenderContext(CreatedWhenConstruct.CWC_NotToCreate, "RenderContext");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneManager.RenderContext)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "RenderContext");
		}
		return __returnValue;
	}

	protected  void _resumeRendering_RenderContext_callback(long context)
	{
		com.earthview.world.graphic.SceneManager.RenderContext contextParamValue = (context == 0L ? null : new com.earthview.world.graphic.SceneManager.RenderContext(CreatedWhenConstruct.CWC_NotToCreate));
		if(contextParamValue != null)
		{
		contextParamValue.setDelegate(true);
		contextParamValue.setInstancePointer(new InstancePointer(context));
		IClassFactory contextParamValueClassFactory = GlobalClassFactoryMap.get(contextParamValue.getCppInstanceTypeName());
		if (contextParamValueClassFactory != null)
		{
			contextParamValue.setDelegate(true);
			contextParamValue = (com.earthview.world.graphic.SceneManager.RenderContext)contextParamValueClassFactory.create();
			contextParamValue.setDelegate(true);
			contextParamValue.setInstancePointer(new InstancePointer(context));
		}
		}
		_resumeRendering(contextParamValue);
	}

	native private void _resumeRendering_RenderContext(long pNativeObject, long context);
	/**
	 * 继续渲染
	 * @param context 渲染环境
	 */
	public void _resumeRendering(com.earthview.world.graphic.SceneManager.RenderContext context)
	{
		long contextParamValue = (context == null ? 0L : context.nativeObject.pointer);
		_resumeRendering_RenderContext(this.nativeObject.pointer, contextParamValue);
	}
	native private void _resumeRendering_RenderContext_NoVirtual(long pNativeObject, long context);
	protected void _resumeRendering_NoVirtual(com.earthview.world.graphic.SceneManager.RenderContext context)
	{
		long contextParamValue = (context == null ? 0L : context.nativeObject.pointer);
		_resumeRendering_RenderContext_NoVirtual(this.nativeObject.pointer, contextParamValue);
	}

	public static class ShadowCasterList extends com.earthview.world.core.BaseObject {
		
		static {
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::ShadowCasterList", new ShadowCasterListClassFactory());
		}

		public ShadowCasterList() {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			Create("ShadowCasterList", null);
		}

		native private void push_back_CShadowCaster(long pNativeObject, long ref_t);
		public void push_back(NativeObjectPointer<com.earthview.world.graphic.ShadowCaster> ref_t)
		{
			long ref_tParamValue = ref_t.nativeObject.pointer;
			push_back_CShadowCaster(this.nativeObject.pointer, ref_tParamValue);
		}
		native private void remove_ev_size_t(long pNativeObject, long pos);
		public void remove(long pos)
		{
			long posParamValue = pos;
			remove_ev_size_t(this.nativeObject.pointer, posParamValue);
		}
		native private boolean empty_void(long pNativeObject);
		public boolean empty()
		{
			boolean returnValue = empty_void(this.nativeObject.pointer);
			return returnValue;
		}
		native private long OperatorIndex_ev_size_t(long pNativeObject, long n);
		public NativeObjectPointer<com.earthview.world.graphic.ShadowCaster> OperatorIndex(long n)
		{
			long nParamValue = n;
			long returnValue = OperatorIndex_ev_size_t(this.nativeObject.pointer, nParamValue);
			NativeObjectPointer<com.earthview.world.graphic.ShadowCaster> __returnValue = new NativeObjectPointer<com.earthview.world.graphic.ShadowCaster>(new InstancePointer(returnValue));
			return __returnValue;
		}
		native private long at_ev_size_t(long pNativeObject, long n);
		public NativeObjectPointer<com.earthview.world.graphic.ShadowCaster> at(long n)
		{
			long nParamValue = n;
			long returnValue = at_ev_size_t(this.nativeObject.pointer, nParamValue);
			NativeObjectPointer<com.earthview.world.graphic.ShadowCaster> __returnValue = new NativeObjectPointer<com.earthview.world.graphic.ShadowCaster>(new InstancePointer(returnValue));
			return __returnValue;
		}
		native private long size_void(long pNativeObject);
		public long size()
		{
			long returnValue = size_void(this.nativeObject.pointer);
			return returnValue;
		}
		native private void resize_ev_size_t(long pNativeObject, long newSize);
		public void resize(long newSize)
		{
			long newSizeParamValue = newSize;
			resize_ev_size_t(this.nativeObject.pointer, newSizeParamValue);
		}
		native private void reserve_ev_size_t(long pNativeObject, long count);
		public void reserve(long count)
		{
			long countParamValue = count;
			reserve_ev_size_t(this.nativeObject.pointer, countParamValue);
		}
		native private void clear_void(long pNativeObject);
		public void clear()
		{
			clear_void(this.nativeObject.pointer);
		}
		public ShadowCasterList(CreatedWhenConstruct cwc) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
		}
		public ShadowCasterList(CreatedWhenConstruct cwc, String classNameStr) {
			super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
		}
		
		
		
		
		public static ShadowCasterList fromBaseObject(BaseObject baseObj)
		{
			if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
			{
				return null;
			}
			ShadowCasterList obj = null;
 			if(baseObj instanceof ShadowCasterList)
			{
				obj = (ShadowCasterList)baseObj;
			} else {
				obj = new ShadowCasterList(CreatedWhenConstruct.CWC_NotToCreate);
				obj.bindNativeObject(baseObj.nativeObject, "ShadowCasterList");
				obj.increaseCast();
			}

			return obj;
		}
	}
	public static class ShadowCasterListClassFactory implements IClassFactory {
		public BaseObject create()
		{
			ShadowCasterList emptyInstance = new ShadowCasterList(CreatedWhenConstruct.CWC_NotToCreate);
			return emptyInstance;
		}
	}
	
	/**
	 * 阴影投射场景询问监听器内部类
	 */
	public static class ShadowCasterSceneQueryListener extends com.earthview.world.graphic.SceneQueryListener {
		
		static {
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListener", new ShadowCasterSceneQueryListenerClassFactory());
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::JCShadowCasterSceneQueryListenerProxy", new ShadowCasterSceneQueryListenerClassFactory());
		}

		public ShadowCasterSceneQueryListener(com.earthview.world.graphic.SceneManager sm) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			NameValuePairList list = new NameValuePairList();
			BasePointer smPtr = new BasePointer(sm);
			list.add("sm", smPtr.get());
			Create("JCShadowCasterSceneQueryListenerProxy", list, true);
			this.registerCallback();
			if (!"com.earthview.world.graphic.SceneManager$ShadowCasterSceneQueryListener".equals(this.getClass().getName()))
			{
				this.setCustomExtend(true);
			}
		}

		native private void prepare_ev_bool_PlaneBoundedVolumeList_CLight_CCamera_ShadowCasterList_Real(long pNativeObject, boolean lightInFrustum, long lightClipVolumes, long light, long cam, long casterList, double farDistSquared);
		public void prepare(boolean lightInFrustum, com.earthview.world.spatial.math.PlaneBoundedVolumeList lightClipVolumes, com.earthview.world.graphic.Light light, com.earthview.world.graphic.Camera cam, com.earthview.world.graphic.SceneManager.ShadowCasterList casterList, double farDistSquared)
		{
			boolean lightInFrustumParamValue = lightInFrustum;
			long lightClipVolumesParamValue = (lightClipVolumes == null ? 0L : lightClipVolumes.nativeObject.pointer);
			long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
			long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
			long casterListParamValue = (casterList == null ? 0L : casterList.nativeObject.pointer);
			double farDistSquaredParamValue = farDistSquared;
			prepare_ev_bool_PlaneBoundedVolumeList_CLight_CCamera_ShadowCasterList_Real(this.nativeObject.pointer, lightInFrustumParamValue, lightClipVolumesParamValue, lightParamValue, camParamValue, casterListParamValue, farDistSquaredParamValue);
		}
		native private boolean queryResult_CMovableObject(long pNativeObject, long object);
		public boolean queryResult(com.earthview.world.graphic.MovableObject object)
		{
			long objectParamValue = (object == null ? 0L : object.nativeObject.pointer);
			boolean returnValue = queryResult_CMovableObject(this.nativeObject.pointer, objectParamValue);
			return returnValue;
		}
		native private boolean queryResult_CMovableObject_NoVirtual(long pNativeObject, long object);
		protected boolean queryResult_NoVirtual(com.earthview.world.graphic.MovableObject object)
		{
			long objectParamValue = (object == null ? 0L : object.nativeObject.pointer);
			boolean returnValue = queryResult_CMovableObject_NoVirtual(this.nativeObject.pointer, objectParamValue);
			return returnValue;
		}

		native private boolean queryResult_WorldFragment(long pNativeObject, long fragment);
		public boolean queryResult(com.earthview.world.graphic.SceneQuery.WorldFragment fragment)
		{
			long fragmentParamValue = (fragment == null ? 0L : fragment.nativeObject.pointer);
			boolean returnValue = queryResult_WorldFragment(this.nativeObject.pointer, fragmentParamValue);
			return returnValue;
		}
		native private boolean queryResult_WorldFragment_NoVirtual(long pNativeObject, long fragment);
		protected boolean queryResult_NoVirtual(com.earthview.world.graphic.SceneQuery.WorldFragment fragment)
		{
			long fragmentParamValue = (fragment == null ? 0L : fragment.nativeObject.pointer);
			boolean returnValue = queryResult_WorldFragment_NoVirtual(this.nativeObject.pointer, fragmentParamValue);
			return returnValue;
		}

		public ShadowCasterSceneQueryListener(CreatedWhenConstruct cwc) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
		}
		public ShadowCasterSceneQueryListener(CreatedWhenConstruct cwc, String classNameStr) {
			super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
		}
		
		public boolean queryResult(com.earthview.world.graphic.MovableObject object, com.earthview.world.core.IntVector indexVec)
		{
			return super.queryResult_NoVirtual(object, indexVec);
		}
		
		native protected void register_queryResult_CMovableObject(long pNativeObject, String method);
		native protected void register_queryResult_CMovableObject_IntVector(long pNativeObject, String method);
		native protected void register_queryResult_WorldFragment(long pNativeObject, String method);
		
		public void registerCallback(){
			if (!this.nativeObject.equals(InstancePointer.ZERO)){
				this.register_queryResult_CMovableObject(this.nativeObject.pointer, "queryResult_CMovableObject_callback");
				this.register_queryResult_CMovableObject_IntVector(this.nativeObject.pointer, "queryResult_CMovableObject_IntVector_callback");
				this.register_queryResult_WorldFragment(this.nativeObject.pointer, "queryResult_WorldFragment_callback");
			}
		}
		
		public static ShadowCasterSceneQueryListener fromBaseObject(BaseObject baseObj)
		{
			if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
			{
				return null;
			}
			ShadowCasterSceneQueryListener obj = null;
 			if(baseObj instanceof ShadowCasterSceneQueryListener)
			{
				obj = (ShadowCasterSceneQueryListener)baseObj;
			} else {
				obj = new ShadowCasterSceneQueryListener(CreatedWhenConstruct.CWC_NotToCreate);
				obj.bindNativeObject(baseObj.nativeObject, "CShadowCasterSceneQueryListener");
				obj.increaseCast();
			}

			return obj;
		}
	}
	public static class ShadowCasterSceneQueryListenerClassFactory implements IClassFactory {
		public BaseObject create()
		{
			ShadowCasterSceneQueryListener emptyInstance = new ShadowCasterSceneQueryListener(CreatedWhenConstruct.CWC_NotToCreate);
			return emptyInstance;
		}
	}
	
	protected  void renderShadowVolumesToStencil_CLight_CCamera_ev_bool_callback(long light, long cam, boolean calcScissor)
	{
		com.earthview.world.graphic.Light lightParamValue = (light == 0L ? null : new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate));
		if(lightParamValue != null)
		{
		lightParamValue.setDelegate(true);
		lightParamValue.setInstancePointer(new InstancePointer(light));
		IClassFactory lightParamValueClassFactory = GlobalClassFactoryMap.get(lightParamValue.getCppInstanceTypeName());
		if (lightParamValueClassFactory != null)
		{
			lightParamValue.setDelegate(true);
			lightParamValue = (com.earthview.world.graphic.Light)lightParamValueClassFactory.create();
			lightParamValue.setDelegate(true);
			lightParamValue.setInstancePointer(new InstancePointer(light));
		}
		}
		com.earthview.world.graphic.Camera camParamValue = (cam == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
		if(camParamValue != null)
		{
		camParamValue.setDelegate(true);
		camParamValue.setInstancePointer(new InstancePointer(cam));
		IClassFactory camParamValueClassFactory = GlobalClassFactoryMap.get(camParamValue.getCppInstanceTypeName());
		if (camParamValueClassFactory != null)
		{
			camParamValue.setDelegate(true);
			camParamValue = (com.earthview.world.graphic.Camera)camParamValueClassFactory.create();
			camParamValue.setDelegate(true);
			camParamValue.setInstancePointer(new InstancePointer(cam));
		}
		}
		boolean calcScissorParamValue = calcScissor;
		renderShadowVolumesToStencil(lightParamValue, camParamValue, calcScissorParamValue);
	}

	native private void renderShadowVolumesToStencil_CLight_CCamera_ev_bool(long pNativeObject, long light, long cam, boolean calcScissor);
	/**
	 * 将阴影锥绘制到模板缓冲内部方法
	 * @param light 光源
	 * @param cam 摄像机
	 * @param calcScissor 是否对方法进行修改，如果为false，则已经被修改
	 */
	public void renderShadowVolumesToStencil(com.earthview.world.graphic.Light light, com.earthview.world.graphic.Camera cam, boolean calcScissor)
	{
		long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		boolean calcScissorParamValue = calcScissor;
		renderShadowVolumesToStencil_CLight_CCamera_ev_bool(this.nativeObject.pointer, lightParamValue, camParamValue, calcScissorParamValue);
	}
	native private void renderShadowVolumesToStencil_CLight_CCamera_ev_bool_NoVirtual(long pNativeObject, long light, long cam, boolean calcScissor);
	protected void renderShadowVolumesToStencil_NoVirtual(com.earthview.world.graphic.Light light, com.earthview.world.graphic.Camera cam, boolean calcScissor)
	{
		long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		boolean calcScissorParamValue = calcScissor;
		renderShadowVolumesToStencil_CLight_CCamera_ev_bool_NoVirtual(this.nativeObject.pointer, lightParamValue, camParamValue, calcScissorParamValue);
	}

	protected  void setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_callback(boolean secondpass, boolean zfail, boolean twosided)
	{
		boolean secondpassParamValue = secondpass;
		boolean zfailParamValue = zfail;
		boolean twosidedParamValue = twosided;
		setShadowVolumeStencilState(secondpassParamValue, zfailParamValue, twosidedParamValue);
	}

	native private void setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool(long pNativeObject, boolean secondpass, boolean zfail, boolean twosided);
	/**
	 * 设置阴影锥使用模板缓冲的参数
	 * @param context 渲染环境
	 */
	public void setShadowVolumeStencilState(boolean secondpass, boolean zfail, boolean twosided)
	{
		boolean secondpassParamValue = secondpass;
		boolean zfailParamValue = zfail;
		boolean twosidedParamValue = twosided;
		setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool(this.nativeObject.pointer, secondpassParamValue, zfailParamValue, twosidedParamValue);
	}
	native private void setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_NoVirtual(long pNativeObject, boolean secondpass, boolean zfail, boolean twosided);
	protected void setShadowVolumeStencilState_NoVirtual(boolean secondpass, boolean zfail, boolean twosided)
	{
		boolean secondpassParamValue = secondpass;
		boolean zfailParamValue = zfail;
		boolean twosidedParamValue = twosided;
		setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_NoVirtual(this.nativeObject.pointer, secondpassParamValue, zfailParamValue, twosidedParamValue);
	}

	protected  long findShadowCastersForLight_CLight_CCamera_callback(long light, long camera)
	{
		com.earthview.world.graphic.Light lightParamValue = (light == 0L ? null : new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate));
		if(lightParamValue != null)
		{
		lightParamValue.setDelegate(true);
		lightParamValue.setInstancePointer(new InstancePointer(light));
		IClassFactory lightParamValueClassFactory = GlobalClassFactoryMap.get(lightParamValue.getCppInstanceTypeName());
		if (lightParamValueClassFactory != null)
		{
			lightParamValue.setDelegate(true);
			lightParamValue = (com.earthview.world.graphic.Light)lightParamValueClassFactory.create();
			lightParamValue.setDelegate(true);
			lightParamValue.setInstancePointer(new InstancePointer(light));
		}
		}
		com.earthview.world.graphic.Camera cameraParamValue = (camera == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
		if(cameraParamValue != null)
		{
		cameraParamValue.setDelegate(true);
		cameraParamValue.setInstancePointer(new InstancePointer(camera));
		IClassFactory cameraParamValueClassFactory = GlobalClassFactoryMap.get(cameraParamValue.getCppInstanceTypeName());
		if (cameraParamValueClassFactory != null)
		{
			cameraParamValue.setDelegate(true);
			cameraParamValue = (com.earthview.world.graphic.Camera)cameraParamValueClassFactory.create();
			cameraParamValue.setDelegate(true);
			cameraParamValue.setInstancePointer(new InstancePointer(camera));
		}
		}
		com.earthview.world.graphic.SceneManager.ShadowCasterList returnValue = findShadowCastersForLight(lightParamValue, cameraParamValue);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long findShadowCastersForLight_CLight_CCamera(long pNativeObject, long light, long camera);
	public com.earthview.world.graphic.SceneManager.ShadowCasterList findShadowCastersForLight(com.earthview.world.graphic.Light light, com.earthview.world.graphic.Camera camera)
	{
		long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
		long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
		long returnValue = findShadowCastersForLight_CLight_CCamera(this.nativeObject.pointer, lightParamValue, cameraParamValue);
		com.earthview.world.graphic.SceneManager.ShadowCasterList __returnValue = new com.earthview.world.graphic.SceneManager.ShadowCasterList(CreatedWhenConstruct.CWC_NotToCreate, "ShadowCasterList");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneManager.ShadowCasterList)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "ShadowCasterList");
		}
		return __returnValue;
	}
	native private long findShadowCastersForLight_CLight_CCamera_NoVirtual(long pNativeObject, long light, long camera);
	protected com.earthview.world.graphic.SceneManager.ShadowCasterList findShadowCastersForLight_NoVirtual(com.earthview.world.graphic.Light light, com.earthview.world.graphic.Camera camera)
	{
		long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
		long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
		long returnValue = findShadowCastersForLight_CLight_CCamera_NoVirtual(this.nativeObject.pointer, lightParamValue, cameraParamValue);
		com.earthview.world.graphic.SceneManager.ShadowCasterList __returnValue = new com.earthview.world.graphic.SceneManager.ShadowCasterList(CreatedWhenConstruct.CWC_NotToCreate, "ShadowCasterList");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneManager.ShadowCasterList)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "ShadowCasterList");
		}
		return __returnValue;
	}

	protected  void renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(long pGroup, int om)
	{
		com.earthview.world.graphic.RenderQueueGroup pGroupParamValue = (pGroup == 0L ? null : new com.earthview.world.graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate));
		if(pGroupParamValue != null)
		{
		pGroupParamValue.setDelegate(true);
		pGroupParamValue.setInstancePointer(new InstancePointer(pGroup));
		IClassFactory pGroupParamValueClassFactory = GlobalClassFactoryMap.get(pGroupParamValue.getCppInstanceTypeName());
		if (pGroupParamValueClassFactory != null)
		{
			pGroupParamValue.setDelegate(true);
			pGroupParamValue = (com.earthview.world.graphic.RenderQueueGroup)pGroupParamValueClassFactory.create();
			pGroupParamValue.setDelegate(true);
			pGroupParamValue.setInstancePointer(new InstancePointer(pGroup));
		}
		}
		com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode omParamValue = com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode.toEnum(om);
		renderBasicQueueGroupObjects(pGroupParamValue, omParamValue);
	}

	native private void renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode(long pNativeObject, long pGroup, int om);
	public void renderBasicQueueGroupObjects(com.earthview.world.graphic.RenderQueueGroup pGroup, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om)
	{
		long pGroupParamValue = (pGroup == null ? 0L : pGroup.nativeObject.pointer);
		int omParamValue = om.getValue();
		renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode(this.nativeObject.pointer, pGroupParamValue, omParamValue);
	}
	native private void renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_NoVirtual(long pNativeObject, long pGroup, int om);
	protected void renderBasicQueueGroupObjects_NoVirtual(com.earthview.world.graphic.RenderQueueGroup pGroup, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om)
	{
		long pGroupParamValue = (pGroup == null ? 0L : pGroup.nativeObject.pointer);
		int omParamValue = om.getValue();
		renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_NoVirtual(this.nativeObject.pointer, pGroupParamValue, omParamValue);
	}

	protected  void renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(long group, int om)
	{
		com.earthview.world.graphic.RenderQueueGroup groupParamValue = (group == 0L ? null : new com.earthview.world.graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate));
		if(groupParamValue != null)
		{
		groupParamValue.setDelegate(true);
		groupParamValue.setInstancePointer(new InstancePointer(group));
		IClassFactory groupParamValueClassFactory = GlobalClassFactoryMap.get(groupParamValue.getCppInstanceTypeName());
		if (groupParamValueClassFactory != null)
		{
			groupParamValue.setDelegate(true);
			groupParamValue = (com.earthview.world.graphic.RenderQueueGroup)groupParamValueClassFactory.create();
			groupParamValue.setDelegate(true);
			groupParamValue.setInstancePointer(new InstancePointer(group));
		}
		}
		com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode omParamValue = com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode.toEnum(om);
		renderAdditiveStencilShadowedQueueGroupObjects(groupParamValue, omParamValue);
	}

	native private void renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode(long pNativeObject, long group, int om);
	public void renderAdditiveStencilShadowedQueueGroupObjects(com.earthview.world.graphic.RenderQueueGroup group, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om)
	{
		long groupParamValue = (group == null ? 0L : group.nativeObject.pointer);
		int omParamValue = om.getValue();
		renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode(this.nativeObject.pointer, groupParamValue, omParamValue);
	}
	native private void renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_NoVirtual(long pNativeObject, long group, int om);
	protected void renderAdditiveStencilShadowedQueueGroupObjects_NoVirtual(com.earthview.world.graphic.RenderQueueGroup group, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om)
	{
		long groupParamValue = (group == null ? 0L : group.nativeObject.pointer);
		int omParamValue = om.getValue();
		renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_NoVirtual(this.nativeObject.pointer, groupParamValue, omParamValue);
	}

	protected  void renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(long group, int om)
	{
		com.earthview.world.graphic.RenderQueueGroup groupParamValue = (group == 0L ? null : new com.earthview.world.graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate));
		if(groupParamValue != null)
		{
		groupParamValue.setDelegate(true);
		groupParamValue.setInstancePointer(new InstancePointer(group));
		IClassFactory groupParamValueClassFactory = GlobalClassFactoryMap.get(groupParamValue.getCppInstanceTypeName());
		if (groupParamValueClassFactory != null)
		{
			groupParamValue.setDelegate(true);
			groupParamValue = (com.earthview.world.graphic.RenderQueueGroup)groupParamValueClassFactory.create();
			groupParamValue.setDelegate(true);
			groupParamValue.setInstancePointer(new InstancePointer(group));
		}
		}
		com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode omParamValue = com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode.toEnum(om);
		renderModulativeStencilShadowedQueueGroupObjects(groupParamValue, omParamValue);
	}

	native private void renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode(long pNativeObject, long group, int om);
	public void renderModulativeStencilShadowedQueueGroupObjects(com.earthview.world.graphic.RenderQueueGroup group, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om)
	{
		long groupParamValue = (group == null ? 0L : group.nativeObject.pointer);
		int omParamValue = om.getValue();
		renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode(this.nativeObject.pointer, groupParamValue, omParamValue);
	}
	native private void renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_NoVirtual(long pNativeObject, long group, int om);
	protected void renderModulativeStencilShadowedQueueGroupObjects_NoVirtual(com.earthview.world.graphic.RenderQueueGroup group, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om)
	{
		long groupParamValue = (group == null ? 0L : group.nativeObject.pointer);
		int omParamValue = om.getValue();
		renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_NoVirtual(this.nativeObject.pointer, groupParamValue, omParamValue);
	}

	protected  void renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(long group, int om)
	{
		com.earthview.world.graphic.RenderQueueGroup groupParamValue = (group == 0L ? null : new com.earthview.world.graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate));
		if(groupParamValue != null)
		{
		groupParamValue.setDelegate(true);
		groupParamValue.setInstancePointer(new InstancePointer(group));
		IClassFactory groupParamValueClassFactory = GlobalClassFactoryMap.get(groupParamValue.getCppInstanceTypeName());
		if (groupParamValueClassFactory != null)
		{
			groupParamValue.setDelegate(true);
			groupParamValue = (com.earthview.world.graphic.RenderQueueGroup)groupParamValueClassFactory.create();
			groupParamValue.setDelegate(true);
			groupParamValue.setInstancePointer(new InstancePointer(group));
		}
		}
		com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode omParamValue = com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode.toEnum(om);
		renderTextureShadowCasterQueueGroupObjects(groupParamValue, omParamValue);
	}

	native private void renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode(long pNativeObject, long group, int om);
	public void renderTextureShadowCasterQueueGroupObjects(com.earthview.world.graphic.RenderQueueGroup group, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om)
	{
		long groupParamValue = (group == null ? 0L : group.nativeObject.pointer);
		int omParamValue = om.getValue();
		renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode(this.nativeObject.pointer, groupParamValue, omParamValue);
	}
	native private void renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_NoVirtual(long pNativeObject, long group, int om);
	protected void renderTextureShadowCasterQueueGroupObjects_NoVirtual(com.earthview.world.graphic.RenderQueueGroup group, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om)
	{
		long groupParamValue = (group == null ? 0L : group.nativeObject.pointer);
		int omParamValue = om.getValue();
		renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_NoVirtual(this.nativeObject.pointer, groupParamValue, omParamValue);
	}

	protected  void renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(long group, int om)
	{
		com.earthview.world.graphic.RenderQueueGroup groupParamValue = (group == 0L ? null : new com.earthview.world.graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate));
		if(groupParamValue != null)
		{
		groupParamValue.setDelegate(true);
		groupParamValue.setInstancePointer(new InstancePointer(group));
		IClassFactory groupParamValueClassFactory = GlobalClassFactoryMap.get(groupParamValue.getCppInstanceTypeName());
		if (groupParamValueClassFactory != null)
		{
			groupParamValue.setDelegate(true);
			groupParamValue = (com.earthview.world.graphic.RenderQueueGroup)groupParamValueClassFactory.create();
			groupParamValue.setDelegate(true);
			groupParamValue.setInstancePointer(new InstancePointer(group));
		}
		}
		com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode omParamValue = com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode.toEnum(om);
		renderTextureShadowReceiverQueueGroupObjects(groupParamValue, omParamValue);
	}

	native private void renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode(long pNativeObject, long group, int om);
	public void renderTextureShadowReceiverQueueGroupObjects(com.earthview.world.graphic.RenderQueueGroup group, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om)
	{
		long groupParamValue = (group == null ? 0L : group.nativeObject.pointer);
		int omParamValue = om.getValue();
		renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode(this.nativeObject.pointer, groupParamValue, omParamValue);
	}
	native private void renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_NoVirtual(long pNativeObject, long group, int om);
	protected void renderTextureShadowReceiverQueueGroupObjects_NoVirtual(com.earthview.world.graphic.RenderQueueGroup group, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om)
	{
		long groupParamValue = (group == null ? 0L : group.nativeObject.pointer);
		int omParamValue = om.getValue();
		renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_NoVirtual(this.nativeObject.pointer, groupParamValue, omParamValue);
	}

	protected  void renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(long group, int om)
	{
		com.earthview.world.graphic.RenderQueueGroup groupParamValue = (group == 0L ? null : new com.earthview.world.graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate));
		if(groupParamValue != null)
		{
		groupParamValue.setDelegate(true);
		groupParamValue.setInstancePointer(new InstancePointer(group));
		IClassFactory groupParamValueClassFactory = GlobalClassFactoryMap.get(groupParamValue.getCppInstanceTypeName());
		if (groupParamValueClassFactory != null)
		{
			groupParamValue.setDelegate(true);
			groupParamValue = (com.earthview.world.graphic.RenderQueueGroup)groupParamValueClassFactory.create();
			groupParamValue.setDelegate(true);
			groupParamValue.setInstancePointer(new InstancePointer(group));
		}
		}
		com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode omParamValue = com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode.toEnum(om);
		renderModulativeTextureShadowedQueueGroupObjects(groupParamValue, omParamValue);
	}

	native private void renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode(long pNativeObject, long group, int om);
	public void renderModulativeTextureShadowedQueueGroupObjects(com.earthview.world.graphic.RenderQueueGroup group, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om)
	{
		long groupParamValue = (group == null ? 0L : group.nativeObject.pointer);
		int omParamValue = om.getValue();
		renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode(this.nativeObject.pointer, groupParamValue, omParamValue);
	}
	native private void renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_NoVirtual(long pNativeObject, long group, int om);
	protected void renderModulativeTextureShadowedQueueGroupObjects_NoVirtual(com.earthview.world.graphic.RenderQueueGroup group, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om)
	{
		long groupParamValue = (group == null ? 0L : group.nativeObject.pointer);
		int omParamValue = om.getValue();
		renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_NoVirtual(this.nativeObject.pointer, groupParamValue, omParamValue);
	}

	protected  void renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(long group, int om)
	{
		com.earthview.world.graphic.RenderQueueGroup groupParamValue = (group == 0L ? null : new com.earthview.world.graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate));
		if(groupParamValue != null)
		{
		groupParamValue.setDelegate(true);
		groupParamValue.setInstancePointer(new InstancePointer(group));
		IClassFactory groupParamValueClassFactory = GlobalClassFactoryMap.get(groupParamValue.getCppInstanceTypeName());
		if (groupParamValueClassFactory != null)
		{
			groupParamValue.setDelegate(true);
			groupParamValue = (com.earthview.world.graphic.RenderQueueGroup)groupParamValueClassFactory.create();
			groupParamValue.setDelegate(true);
			groupParamValue.setInstancePointer(new InstancePointer(group));
		}
		}
		com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode omParamValue = com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode.toEnum(om);
		renderAdditiveTextureShadowedQueueGroupObjects(groupParamValue, omParamValue);
	}

	native private void renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode(long pNativeObject, long group, int om);
	public void renderAdditiveTextureShadowedQueueGroupObjects(com.earthview.world.graphic.RenderQueueGroup group, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om)
	{
		long groupParamValue = (group == null ? 0L : group.nativeObject.pointer);
		int omParamValue = om.getValue();
		renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode(this.nativeObject.pointer, groupParamValue, omParamValue);
	}
	native private void renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_NoVirtual(long pNativeObject, long group, int om);
	protected void renderAdditiveTextureShadowedQueueGroupObjects_NoVirtual(com.earthview.world.graphic.RenderQueueGroup group, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om)
	{
		long groupParamValue = (group == null ? 0L : group.nativeObject.pointer);
		int omParamValue = om.getValue();
		renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_NoVirtual(this.nativeObject.pointer, groupParamValue, omParamValue);
	}

	protected  void renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback(long objs, int om, boolean lightScissoringClipping, boolean doLightIteration, long manualLightList)
	{
		com.earthview.world.graphic.QueuedRenderableCollection objsParamValue = new com.earthview.world.graphic.QueuedRenderableCollection(CreatedWhenConstruct.CWC_NotToCreate);
		objsParamValue.setDelegate(true);
		objsParamValue.setInstancePointer(new InstancePointer(objs));
		IClassFactory objsParamValueClassFactory = GlobalClassFactoryMap.get(objsParamValue.getCppInstanceTypeName());
		if (objsParamValueClassFactory != null)
		{
			objsParamValue.setDelegate(true);
			objsParamValue = (com.earthview.world.graphic.QueuedRenderableCollection)objsParamValueClassFactory.create();
			objsParamValue.setDelegate(true);
			objsParamValue.setInstancePointer(new InstancePointer(objs));
		}
		com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode omParamValue = com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode.toEnum(om);
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		com.earthview.world.graphic.LightList manualLightListParamValue = (manualLightList == 0L ? null : new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate));
		if(manualLightListParamValue != null)
		{
		manualLightListParamValue.setDelegate(true);
		manualLightListParamValue.setInstancePointer(new InstancePointer(manualLightList));
		IClassFactory manualLightListParamValueClassFactory = GlobalClassFactoryMap.get(manualLightListParamValue.getCppInstanceTypeName());
		if (manualLightListParamValueClassFactory != null)
		{
			manualLightListParamValue.setDelegate(true);
			manualLightListParamValue = (com.earthview.world.graphic.LightList)manualLightListParamValueClassFactory.create();
			manualLightListParamValue.setDelegate(true);
			manualLightListParamValue.setInstancePointer(new InstancePointer(manualLightList));
		}
		}
		renderObjects(objsParamValue, omParamValue, lightScissoringClippingParamValue, doLightIterationParamValue, manualLightListParamValue);
	}

	native private void renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(long pNativeObject, long objs, int om, boolean lightScissoringClipping, boolean doLightIteration, long manualLightList);
	///virtual void renderObjects(const EarthView::World::Graphic::CQueuedRenderableCollection& objs,
	///	EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om, ev_bool lightScissoringClipping,
	///	ev_bool doLightIteration, const EarthView::World::Graphic::LightList* manualLightList = 0);
	public void renderObjects(com.earthview.world.graphic.QueuedRenderableCollection objs, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om, boolean lightScissoringClipping, boolean doLightIteration, com.earthview.world.graphic.LightList manualLightList)
	{
		long objsParamValue = objs.nativeObject.pointer;
		int omParamValue = om.getValue();
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		long manualLightListParamValue = (manualLightList == null ? 0L : manualLightList.nativeObject.pointer);
		renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(this.nativeObject.pointer, objsParamValue, omParamValue, lightScissoringClippingParamValue, doLightIterationParamValue, manualLightListParamValue);
	}
	native private void renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_NoVirtual(long pNativeObject, long objs, int om, boolean lightScissoringClipping, boolean doLightIteration, long manualLightList);
	protected void renderObjects_NoVirtual(com.earthview.world.graphic.QueuedRenderableCollection objs, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om, boolean lightScissoringClipping, boolean doLightIteration, com.earthview.world.graphic.LightList manualLightList)
	{
		long objsParamValue = objs.nativeObject.pointer;
		int omParamValue = om.getValue();
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		long manualLightListParamValue = (manualLightList == null ? 0L : manualLightList.nativeObject.pointer);
		renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_NoVirtual(this.nativeObject.pointer, objsParamValue, omParamValue, lightScissoringClippingParamValue, doLightIterationParamValue, manualLightListParamValue);
	}

	protected  void renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback(long objs, int om, boolean lightScissoringClipping, boolean doLightIteration)
	{
		com.earthview.world.graphic.QueuedRenderableCollection objsParamValue = new com.earthview.world.graphic.QueuedRenderableCollection(CreatedWhenConstruct.CWC_NotToCreate);
		objsParamValue.setDelegate(true);
		objsParamValue.setInstancePointer(new InstancePointer(objs));
		IClassFactory objsParamValueClassFactory = GlobalClassFactoryMap.get(objsParamValue.getCppInstanceTypeName());
		if (objsParamValueClassFactory != null)
		{
			objsParamValue.setDelegate(true);
			objsParamValue = (com.earthview.world.graphic.QueuedRenderableCollection)objsParamValueClassFactory.create();
			objsParamValue.setDelegate(true);
			objsParamValue.setInstancePointer(new InstancePointer(objs));
		}
		com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode omParamValue = com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode.toEnum(om);
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		renderObjects(objsParamValue, omParamValue, lightScissoringClippingParamValue, doLightIterationParamValue);
	}

	native private void renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(long pNativeObject, long objs, int om, boolean lightScissoringClipping, boolean doLightIteration);
	public void renderObjects(com.earthview.world.graphic.QueuedRenderableCollection objs, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om, boolean lightScissoringClipping, boolean doLightIteration)
	{
		long objsParamValue = objs.nativeObject.pointer;
		int omParamValue = om.getValue();
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(this.nativeObject.pointer, objsParamValue, omParamValue, lightScissoringClippingParamValue, doLightIterationParamValue);
	}
	native private void renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_NoVirtual(long pNativeObject, long objs, int om, boolean lightScissoringClipping, boolean doLightIteration);
	protected void renderObjects_NoVirtual(com.earthview.world.graphic.QueuedRenderableCollection objs, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om, boolean lightScissoringClipping, boolean doLightIteration)
	{
		long objsParamValue = objs.nativeObject.pointer;
		int omParamValue = om.getValue();
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_NoVirtual(this.nativeObject.pointer, objsParamValue, omParamValue, lightScissoringClippingParamValue, doLightIterationParamValue);
	}

	protected  void renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback(long objs, int om, boolean lightScissoringClipping, boolean doLightIteration, long manualLightList)
	{
		com.earthview.world.graphic.QueuedRenderableCollection objsParamValue = new com.earthview.world.graphic.QueuedRenderableCollection(CreatedWhenConstruct.CWC_NotToCreate);
		objsParamValue.setDelegate(true);
		objsParamValue.setInstancePointer(new InstancePointer(objs));
		IClassFactory objsParamValueClassFactory = GlobalClassFactoryMap.get(objsParamValue.getCppInstanceTypeName());
		if (objsParamValueClassFactory != null)
		{
			objsParamValue.setDelegate(true);
			objsParamValue = (com.earthview.world.graphic.QueuedRenderableCollection)objsParamValueClassFactory.create();
			objsParamValue.setDelegate(true);
			objsParamValue.setInstancePointer(new InstancePointer(objs));
		}
		com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode omParamValue = com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode.toEnum(om);
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		com.earthview.world.graphic.LightList manualLightListParamValue = (manualLightList == 0L ? null : new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate));
		if(manualLightListParamValue != null)
		{
		manualLightListParamValue.setDelegate(true);
		manualLightListParamValue.setInstancePointer(new InstancePointer(manualLightList));
		IClassFactory manualLightListParamValueClassFactory = GlobalClassFactoryMap.get(manualLightListParamValue.getCppInstanceTypeName());
		if (manualLightListParamValueClassFactory != null)
		{
			manualLightListParamValue.setDelegate(true);
			manualLightListParamValue = (com.earthview.world.graphic.LightList)manualLightListParamValueClassFactory.create();
			manualLightListParamValue.setDelegate(true);
			manualLightListParamValue.setInstancePointer(new InstancePointer(manualLightList));
		}
		}
		renderTransparentShadowCasterObjects(objsParamValue, omParamValue, lightScissoringClippingParamValue, doLightIterationParamValue, manualLightListParamValue);
	}

	native private void renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(long pNativeObject, long objs, int om, boolean lightScissoringClipping, boolean doLightIteration, long manualLightList);
	///virtual void renderTransparentShadowCasterObjects(const EarthView::World::Graphic::CQueuedRenderableCollection& objs,
	///	EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om, ev_bool lightScissoringClipping,
	///	ev_bool doLightIteration, const EarthView::World::Graphic::LightList* manualLightList = 0);
	public void renderTransparentShadowCasterObjects(com.earthview.world.graphic.QueuedRenderableCollection objs, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om, boolean lightScissoringClipping, boolean doLightIteration, com.earthview.world.graphic.LightList manualLightList)
	{
		long objsParamValue = objs.nativeObject.pointer;
		int omParamValue = om.getValue();
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		long manualLightListParamValue = (manualLightList == null ? 0L : manualLightList.nativeObject.pointer);
		renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(this.nativeObject.pointer, objsParamValue, omParamValue, lightScissoringClippingParamValue, doLightIterationParamValue, manualLightListParamValue);
	}
	native private void renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_NoVirtual(long pNativeObject, long objs, int om, boolean lightScissoringClipping, boolean doLightIteration, long manualLightList);
	protected void renderTransparentShadowCasterObjects_NoVirtual(com.earthview.world.graphic.QueuedRenderableCollection objs, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om, boolean lightScissoringClipping, boolean doLightIteration, com.earthview.world.graphic.LightList manualLightList)
	{
		long objsParamValue = objs.nativeObject.pointer;
		int omParamValue = om.getValue();
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		long manualLightListParamValue = (manualLightList == null ? 0L : manualLightList.nativeObject.pointer);
		renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_NoVirtual(this.nativeObject.pointer, objsParamValue, omParamValue, lightScissoringClippingParamValue, doLightIterationParamValue, manualLightListParamValue);
	}

	protected  void renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback(long objs, int om, boolean lightScissoringClipping, boolean doLightIteration)
	{
		com.earthview.world.graphic.QueuedRenderableCollection objsParamValue = new com.earthview.world.graphic.QueuedRenderableCollection(CreatedWhenConstruct.CWC_NotToCreate);
		objsParamValue.setDelegate(true);
		objsParamValue.setInstancePointer(new InstancePointer(objs));
		IClassFactory objsParamValueClassFactory = GlobalClassFactoryMap.get(objsParamValue.getCppInstanceTypeName());
		if (objsParamValueClassFactory != null)
		{
			objsParamValue.setDelegate(true);
			objsParamValue = (com.earthview.world.graphic.QueuedRenderableCollection)objsParamValueClassFactory.create();
			objsParamValue.setDelegate(true);
			objsParamValue.setInstancePointer(new InstancePointer(objs));
		}
		com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode omParamValue = com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode.toEnum(om);
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		renderTransparentShadowCasterObjects(objsParamValue, omParamValue, lightScissoringClippingParamValue, doLightIterationParamValue);
	}

	native private void renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(long pNativeObject, long objs, int om, boolean lightScissoringClipping, boolean doLightIteration);
	public void renderTransparentShadowCasterObjects(com.earthview.world.graphic.QueuedRenderableCollection objs, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om, boolean lightScissoringClipping, boolean doLightIteration)
	{
		long objsParamValue = objs.nativeObject.pointer;
		int omParamValue = om.getValue();
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(this.nativeObject.pointer, objsParamValue, omParamValue, lightScissoringClippingParamValue, doLightIterationParamValue);
	}
	native private void renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_NoVirtual(long pNativeObject, long objs, int om, boolean lightScissoringClipping, boolean doLightIteration);
	protected void renderTransparentShadowCasterObjects_NoVirtual(com.earthview.world.graphic.QueuedRenderableCollection objs, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om, boolean lightScissoringClipping, boolean doLightIteration)
	{
		long objsParamValue = objs.nativeObject.pointer;
		int omParamValue = om.getValue();
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_NoVirtual(this.nativeObject.pointer, objsParamValue, omParamValue, lightScissoringClippingParamValue, doLightIterationParamValue);
	}

	protected  void updateRenderQueueSplitOptions_void_callback()
	{
		updateRenderQueueSplitOptions();
	}

	native private void updateRenderQueueSplitOptions_void(long pNativeObject);
	public void updateRenderQueueSplitOptions()
	{
		updateRenderQueueSplitOptions_void(this.nativeObject.pointer);
	}
	native private void updateRenderQueueSplitOptions_void_NoVirtual(long pNativeObject);
	protected void updateRenderQueueSplitOptions_NoVirtual()
	{
		updateRenderQueueSplitOptions_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_callback(long group, boolean suppressShadows, boolean suppressRenderState)
	{
		com.earthview.world.graphic.RenderQueueGroup groupParamValue = (group == 0L ? null : new com.earthview.world.graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate));
		if(groupParamValue != null)
		{
		groupParamValue.setDelegate(true);
		groupParamValue.setInstancePointer(new InstancePointer(group));
		IClassFactory groupParamValueClassFactory = GlobalClassFactoryMap.get(groupParamValue.getCppInstanceTypeName());
		if (groupParamValueClassFactory != null)
		{
			groupParamValue.setDelegate(true);
			groupParamValue = (com.earthview.world.graphic.RenderQueueGroup)groupParamValueClassFactory.create();
			groupParamValue.setDelegate(true);
			groupParamValue.setInstancePointer(new InstancePointer(group));
		}
		}
		boolean suppressShadowsParamValue = suppressShadows;
		boolean suppressRenderStateParamValue = suppressRenderState;
		updateRenderQueueGroupSplitOptions(groupParamValue, suppressShadowsParamValue, suppressRenderStateParamValue);
	}

	native private void updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool(long pNativeObject, long group, boolean suppressShadows, boolean suppressRenderState);
	public void updateRenderQueueGroupSplitOptions(com.earthview.world.graphic.RenderQueueGroup group, boolean suppressShadows, boolean suppressRenderState)
	{
		long groupParamValue = (group == null ? 0L : group.nativeObject.pointer);
		boolean suppressShadowsParamValue = suppressShadows;
		boolean suppressRenderStateParamValue = suppressRenderState;
		updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool(this.nativeObject.pointer, groupParamValue, suppressShadowsParamValue, suppressRenderStateParamValue);
	}
	native private void updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_NoVirtual(long pNativeObject, long group, boolean suppressShadows, boolean suppressRenderState);
	protected void updateRenderQueueGroupSplitOptions_NoVirtual(com.earthview.world.graphic.RenderQueueGroup group, boolean suppressShadows, boolean suppressRenderState)
	{
		long groupParamValue = (group == null ? 0L : group.nativeObject.pointer);
		boolean suppressShadowsParamValue = suppressShadows;
		boolean suppressRenderStateParamValue = suppressRenderState;
		updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_NoVirtual(this.nativeObject.pointer, groupParamValue, suppressShadowsParamValue, suppressRenderStateParamValue);
	}

	protected  int buildAndSetScissor_LightList_CCamera_callback(long ll, long cam)
	{
		com.earthview.world.graphic.LightList llParamValue = new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
		llParamValue.setDelegate(true);
		llParamValue.setInstancePointer(new InstancePointer(ll));
		IClassFactory llParamValueClassFactory = GlobalClassFactoryMap.get(llParamValue.getCppInstanceTypeName());
		if (llParamValueClassFactory != null)
		{
			llParamValue.setDelegate(true);
			llParamValue = (com.earthview.world.graphic.LightList)llParamValueClassFactory.create();
			llParamValue.setDelegate(true);
			llParamValue.setInstancePointer(new InstancePointer(ll));
		}
		com.earthview.world.graphic.Camera camParamValue = (cam == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
		if(camParamValue != null)
		{
		camParamValue.setDelegate(true);
		camParamValue.setInstancePointer(new InstancePointer(cam));
		IClassFactory camParamValueClassFactory = GlobalClassFactoryMap.get(camParamValue.getCppInstanceTypeName());
		if (camParamValueClassFactory != null)
		{
			camParamValue.setDelegate(true);
			camParamValue = (com.earthview.world.graphic.Camera)camParamValueClassFactory.create();
			camParamValue.setDelegate(true);
			camParamValue.setInstancePointer(new InstancePointer(cam));
		}
		}
		com.earthview.world.graphic.ClipResult returnValue = buildAndSetScissor(llParamValue, camParamValue);
		int __returnValue = returnValue.getValue();
		return __returnValue;
	}

	native private int buildAndSetScissor_LightList_CCamera(long pNativeObject, long ll, long cam);
	//// Set up a scissor rectangle from a group of lights
	public com.earthview.world.graphic.ClipResult buildAndSetScissor(com.earthview.world.graphic.LightList ll, com.earthview.world.graphic.Camera cam)
	{
		long llParamValue = ll.nativeObject.pointer;
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		int returnValue = buildAndSetScissor_LightList_CCamera(this.nativeObject.pointer, llParamValue, camParamValue);
		return com.earthview.world.graphic.ClipResult.toEnum(returnValue);
	}
	native private int buildAndSetScissor_LightList_CCamera_NoVirtual(long pNativeObject, long ll, long cam);
	protected com.earthview.world.graphic.ClipResult buildAndSetScissor_NoVirtual(com.earthview.world.graphic.LightList ll, com.earthview.world.graphic.Camera cam)
	{
		long llParamValue = ll.nativeObject.pointer;
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		int returnValue = buildAndSetScissor_LightList_CCamera_NoVirtual(this.nativeObject.pointer, llParamValue, camParamValue);
		return com.earthview.world.graphic.ClipResult.toEnum(returnValue);
	}

	protected  void buildScissor_CLight_CCamera_RealRect_callback(long l, long cam, long rect)
	{
		com.earthview.world.graphic.Light lParamValue = (l == 0L ? null : new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate));
		if(lParamValue != null)
		{
		lParamValue.setDelegate(true);
		lParamValue.setInstancePointer(new InstancePointer(l));
		IClassFactory lParamValueClassFactory = GlobalClassFactoryMap.get(lParamValue.getCppInstanceTypeName());
		if (lParamValueClassFactory != null)
		{
			lParamValue.setDelegate(true);
			lParamValue = (com.earthview.world.graphic.Light)lParamValueClassFactory.create();
			lParamValue.setDelegate(true);
			lParamValue.setInstancePointer(new InstancePointer(l));
		}
		}
		com.earthview.world.graphic.Camera camParamValue = (cam == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
		if(camParamValue != null)
		{
		camParamValue.setDelegate(true);
		camParamValue.setInstancePointer(new InstancePointer(cam));
		IClassFactory camParamValueClassFactory = GlobalClassFactoryMap.get(camParamValue.getCppInstanceTypeName());
		if (camParamValueClassFactory != null)
		{
			camParamValue.setDelegate(true);
			camParamValue = (com.earthview.world.graphic.Camera)camParamValueClassFactory.create();
			camParamValue.setDelegate(true);
			camParamValue.setInstancePointer(new InstancePointer(cam));
		}
		}
		com.earthview.world.graphic.RealRect rectParamValue = new com.earthview.world.graphic.RealRect(CreatedWhenConstruct.CWC_NotToCreate);
		rectParamValue.setDelegate(true);
		rectParamValue.setInstancePointer(new InstancePointer(rect));
		IClassFactory rectParamValueClassFactory = GlobalClassFactoryMap.get(rectParamValue.getCppInstanceTypeName());
		if (rectParamValueClassFactory != null)
		{
			rectParamValue.setDelegate(true);
			rectParamValue = (com.earthview.world.graphic.RealRect)rectParamValueClassFactory.create();
			rectParamValue.setDelegate(true);
			rectParamValue.setInstancePointer(new InstancePointer(rect));
		}
		buildScissor(lParamValue, camParamValue, rectParamValue);
	}

	native private void buildScissor_CLight_CCamera_RealRect(long pNativeObject, long l, long cam, long rect);
	//// Update a scissor rectangle from a single light
	public void buildScissor(com.earthview.world.graphic.Light l, com.earthview.world.graphic.Camera cam, com.earthview.world.graphic.RealRect rect)
	{
		long lParamValue = (l == null ? 0L : l.nativeObject.pointer);
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		long rectParamValue = rect.nativeObject.pointer;
		buildScissor_CLight_CCamera_RealRect(this.nativeObject.pointer, lParamValue, camParamValue, rectParamValue);
	}
	native private void buildScissor_CLight_CCamera_RealRect_NoVirtual(long pNativeObject, long l, long cam, long rect);
	protected void buildScissor_NoVirtual(com.earthview.world.graphic.Light l, com.earthview.world.graphic.Camera cam, com.earthview.world.graphic.RealRect rect)
	{
		long lParamValue = (l == null ? 0L : l.nativeObject.pointer);
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		long rectParamValue = rect.nativeObject.pointer;
		buildScissor_CLight_CCamera_RealRect_NoVirtual(this.nativeObject.pointer, lParamValue, camParamValue, rectParamValue);
	}

	protected  void resetScissor_void_callback()
	{
		resetScissor();
	}

	native private void resetScissor_void(long pNativeObject);
	public void resetScissor()
	{
		resetScissor_void(this.nativeObject.pointer);
	}
	native private void resetScissor_void_NoVirtual(long pNativeObject);
	protected void resetScissor_NoVirtual()
	{
		resetScissor_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  int buildAndSetLightClip_LightList_callback(long ll)
	{
		com.earthview.world.graphic.LightList llParamValue = new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
		llParamValue.setDelegate(true);
		llParamValue.setInstancePointer(new InstancePointer(ll));
		IClassFactory llParamValueClassFactory = GlobalClassFactoryMap.get(llParamValue.getCppInstanceTypeName());
		if (llParamValueClassFactory != null)
		{
			llParamValue.setDelegate(true);
			llParamValue = (com.earthview.world.graphic.LightList)llParamValueClassFactory.create();
			llParamValue.setDelegate(true);
			llParamValue.setInstancePointer(new InstancePointer(ll));
		}
		com.earthview.world.graphic.ClipResult returnValue = buildAndSetLightClip(llParamValue);
		int __returnValue = returnValue.getValue();
		return __returnValue;
	}

	native private int buildAndSetLightClip_LightList(long pNativeObject, long ll);
	//// Build a set of user clip planes from a single non-directional light
	public com.earthview.world.graphic.ClipResult buildAndSetLightClip(com.earthview.world.graphic.LightList ll)
	{
		long llParamValue = ll.nativeObject.pointer;
		int returnValue = buildAndSetLightClip_LightList(this.nativeObject.pointer, llParamValue);
		return com.earthview.world.graphic.ClipResult.toEnum(returnValue);
	}
	native private int buildAndSetLightClip_LightList_NoVirtual(long pNativeObject, long ll);
	protected com.earthview.world.graphic.ClipResult buildAndSetLightClip_NoVirtual(com.earthview.world.graphic.LightList ll)
	{
		long llParamValue = ll.nativeObject.pointer;
		int returnValue = buildAndSetLightClip_LightList_NoVirtual(this.nativeObject.pointer, llParamValue);
		return com.earthview.world.graphic.ClipResult.toEnum(returnValue);
	}

	protected  void buildLightClip_CLight_PlaneList_callback(long l, long planes)
	{
		com.earthview.world.graphic.Light lParamValue = (l == 0L ? null : new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate));
		if(lParamValue != null)
		{
		lParamValue.setDelegate(true);
		lParamValue.setInstancePointer(new InstancePointer(l));
		IClassFactory lParamValueClassFactory = GlobalClassFactoryMap.get(lParamValue.getCppInstanceTypeName());
		if (lParamValueClassFactory != null)
		{
			lParamValue.setDelegate(true);
			lParamValue = (com.earthview.world.graphic.Light)lParamValueClassFactory.create();
			lParamValue.setDelegate(true);
			lParamValue.setInstancePointer(new InstancePointer(l));
		}
		}
		com.earthview.world.spatial.math.PlaneList planesParamValue = new com.earthview.world.spatial.math.PlaneList(CreatedWhenConstruct.CWC_NotToCreate);
		planesParamValue.setDelegate(true);
		planesParamValue.setInstancePointer(new InstancePointer(planes));
		IClassFactory planesParamValueClassFactory = GlobalClassFactoryMap.get(planesParamValue.getCppInstanceTypeName());
		if (planesParamValueClassFactory != null)
		{
			planesParamValue.setDelegate(true);
			planesParamValue = (com.earthview.world.spatial.math.PlaneList)planesParamValueClassFactory.create();
			planesParamValue.setDelegate(true);
			planesParamValue.setInstancePointer(new InstancePointer(planes));
		}
		buildLightClip(lParamValue, planesParamValue);
	}

	native private void buildLightClip_CLight_PlaneList(long pNativeObject, long l, long planes);
	public void buildLightClip(com.earthview.world.graphic.Light l, com.earthview.world.spatial.math.PlaneList planes)
	{
		long lParamValue = (l == null ? 0L : l.nativeObject.pointer);
		long planesParamValue = planes.nativeObject.pointer;
		buildLightClip_CLight_PlaneList(this.nativeObject.pointer, lParamValue, planesParamValue);
	}
	native private void buildLightClip_CLight_PlaneList_NoVirtual(long pNativeObject, long l, long planes);
	protected void buildLightClip_NoVirtual(com.earthview.world.graphic.Light l, com.earthview.world.spatial.math.PlaneList planes)
	{
		long lParamValue = (l == null ? 0L : l.nativeObject.pointer);
		long planesParamValue = planes.nativeObject.pointer;
		buildLightClip_CLight_PlaneList_NoVirtual(this.nativeObject.pointer, lParamValue, planesParamValue);
	}

	protected  void resetLightClip_void_callback()
	{
		resetLightClip();
	}

	native private void resetLightClip_void(long pNativeObject);
	public void resetLightClip()
	{
		resetLightClip_void(this.nativeObject.pointer);
	}
	native private void resetLightClip_void_NoVirtual(long pNativeObject);
	protected void resetLightClip_NoVirtual()
	{
		resetLightClip_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void checkCachedLightClippingInfo_void_callback()
	{
		checkCachedLightClippingInfo();
	}

	native private void checkCachedLightClippingInfo_void(long pNativeObject);
	public void checkCachedLightClippingInfo()
	{
		checkCachedLightClippingInfo_void(this.nativeObject.pointer);
	}
	native private void checkCachedLightClippingInfo_void_NoVirtual(long pNativeObject);
	protected void checkCachedLightClippingInfo_NoVirtual()
	{
		checkCachedLightClippingInfo_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void useLights_LightList_ev_uint16_callback(long lights, int limit)
	{
		com.earthview.world.graphic.LightList lightsParamValue = new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
		lightsParamValue.setDelegate(true);
		lightsParamValue.setInstancePointer(new InstancePointer(lights));
		IClassFactory lightsParamValueClassFactory = GlobalClassFactoryMap.get(lightsParamValue.getCppInstanceTypeName());
		if (lightsParamValueClassFactory != null)
		{
			lightsParamValue.setDelegate(true);
			lightsParamValue = (com.earthview.world.graphic.LightList)lightsParamValueClassFactory.create();
			lightsParamValue.setDelegate(true);
			lightsParamValue.setInstancePointer(new InstancePointer(lights));
		}
		int limitParamValue = limit;
		useLights(lightsParamValue, limitParamValue);
	}

	native private void useLights_LightList_ev_uint16(long pNativeObject, long lights, int limit);
	public void useLights(com.earthview.world.graphic.LightList lights, int limit)
	{
		long lightsParamValue = lights.nativeObject.pointer;
		int limitParamValue = limit;
		useLights_LightList_ev_uint16(this.nativeObject.pointer, lightsParamValue, limitParamValue);
	}
	native private void useLights_LightList_ev_uint16_NoVirtual(long pNativeObject, long lights, int limit);
	protected void useLights_NoVirtual(com.earthview.world.graphic.LightList lights, int limit)
	{
		long lightsParamValue = lights.nativeObject.pointer;
		int limitParamValue = limit;
		useLights_LightList_ev_uint16_NoVirtual(this.nativeObject.pointer, lightsParamValue, limitParamValue);
	}

	protected  void setViewMatrix_CMatrix4_callback(long m)
	{
		com.earthview.world.spatial.math.Matrix4 mParamValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		mParamValue.setDelegate(true);
		mParamValue.setInstancePointer(new InstancePointer(m));
		IClassFactory mParamValueClassFactory = GlobalClassFactoryMap.get(mParamValue.getCppInstanceTypeName());
		if (mParamValueClassFactory != null)
		{
			mParamValue.setDelegate(true);
			mParamValue = (com.earthview.world.spatial.math.Matrix4)mParamValueClassFactory.create();
			mParamValue.setDelegate(true);
			mParamValue.setInstancePointer(new InstancePointer(m));
		}
		setViewMatrix(mParamValue);
	}

	native private void setViewMatrix_CMatrix4(long pNativeObject, long m);
	public void setViewMatrix(com.earthview.world.spatial.math.Matrix4 m)
	{
		long mParamValue = m.nativeObject.pointer;
		setViewMatrix_CMatrix4(this.nativeObject.pointer, mParamValue);
	}
	native private void setViewMatrix_CMatrix4_NoVirtual(long pNativeObject, long m);
	protected void setViewMatrix_NoVirtual(com.earthview.world.spatial.math.Matrix4 m)
	{
		long mParamValue = m.nativeObject.pointer;
		setViewMatrix_CMatrix4_NoVirtual(this.nativeObject.pointer, mParamValue);
	}

	protected  void useLightsGpuProgram_CPass_LightList_callback(long pass, long lights)
	{
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.LightList lightsParamValue = (lights == 0L ? null : new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate));
		if(lightsParamValue != null)
		{
		lightsParamValue.setDelegate(true);
		lightsParamValue.setInstancePointer(new InstancePointer(lights));
		IClassFactory lightsParamValueClassFactory = GlobalClassFactoryMap.get(lightsParamValue.getCppInstanceTypeName());
		if (lightsParamValueClassFactory != null)
		{
			lightsParamValue.setDelegate(true);
			lightsParamValue = (com.earthview.world.graphic.LightList)lightsParamValueClassFactory.create();
			lightsParamValue.setDelegate(true);
			lightsParamValue.setInstancePointer(new InstancePointer(lights));
		}
		}
		useLightsGpuProgram(passParamValue, lightsParamValue);
	}

	native private void useLightsGpuProgram_CPass_LightList(long pNativeObject, long pass, long lights);
	public void useLightsGpuProgram(com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.LightList lights)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long lightsParamValue = (lights == null ? 0L : lights.nativeObject.pointer);
		useLightsGpuProgram_CPass_LightList(this.nativeObject.pointer, passParamValue, lightsParamValue);
	}
	native private void useLightsGpuProgram_CPass_LightList_NoVirtual(long pNativeObject, long pass, long lights);
	protected void useLightsGpuProgram_NoVirtual(com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.LightList lights)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long lightsParamValue = (lights == null ? 0L : lights.nativeObject.pointer);
		useLightsGpuProgram_CPass_LightList_NoVirtual(this.nativeObject.pointer, passParamValue, lightsParamValue);
	}

	protected  void bindGpuProgram_CGpuProgram_callback(long prog)
	{
		com.earthview.world.graphic.GpuProgram progParamValue = (prog == 0L ? null : new com.earthview.world.graphic.GpuProgram(CreatedWhenConstruct.CWC_NotToCreate));
		if(progParamValue != null)
		{
		progParamValue.setDelegate(true);
		progParamValue.setInstancePointer(new InstancePointer(prog));
		IClassFactory progParamValueClassFactory = GlobalClassFactoryMap.get(progParamValue.getCppInstanceTypeName());
		if (progParamValueClassFactory != null)
		{
			progParamValue.setDelegate(true);
			progParamValue = (com.earthview.world.graphic.GpuProgram)progParamValueClassFactory.create();
			progParamValue.setDelegate(true);
			progParamValue.setInstancePointer(new InstancePointer(prog));
		}
		}
		bindGpuProgram(progParamValue);
	}

	native private void bindGpuProgram_CGpuProgram(long pNativeObject, long prog);
	public void bindGpuProgram(com.earthview.world.graphic.GpuProgram prog)
	{
		long progParamValue = (prog == null ? 0L : prog.nativeObject.pointer);
		bindGpuProgram_CGpuProgram(this.nativeObject.pointer, progParamValue);
	}
	native private void bindGpuProgram_CGpuProgram_NoVirtual(long pNativeObject, long prog);
	protected void bindGpuProgram_NoVirtual(com.earthview.world.graphic.GpuProgram prog)
	{
		long progParamValue = (prog == null ? 0L : prog.nativeObject.pointer);
		bindGpuProgram_CGpuProgram_NoVirtual(this.nativeObject.pointer, progParamValue);
	}

	protected  void updateGpuProgramParameters_CPass_callback(long p)
	{
		com.earthview.world.graphic.Pass pParamValue = (p == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(pParamValue != null)
		{
		pParamValue.setDelegate(true);
		pParamValue.setInstancePointer(new InstancePointer(p));
		IClassFactory pParamValueClassFactory = GlobalClassFactoryMap.get(pParamValue.getCppInstanceTypeName());
		if (pParamValueClassFactory != null)
		{
			pParamValue.setDelegate(true);
			pParamValue = (com.earthview.world.graphic.Pass)pParamValueClassFactory.create();
			pParamValue.setDelegate(true);
			pParamValue.setInstancePointer(new InstancePointer(p));
		}
		}
		updateGpuProgramParameters(pParamValue);
	}

	native private void updateGpuProgramParameters_CPass(long pNativeObject, long p);
	public void updateGpuProgramParameters(com.earthview.world.graphic.Pass p)
	{
		long pParamValue = (p == null ? 0L : p.nativeObject.pointer);
		updateGpuProgramParameters_CPass(this.nativeObject.pointer, pParamValue);
	}
	native private void updateGpuProgramParameters_CPass_NoVirtual(long pNativeObject, long p);
	protected void updateGpuProgramParameters_NoVirtual(com.earthview.world.graphic.Pass p)
	{
		long pParamValue = (p == null ? 0L : p.nativeObject.pointer);
		updateGpuProgramParameters_CPass_NoVirtual(this.nativeObject.pointer, pParamValue);
	}

	/**
	 * 构造函数
	 * @param instanceName 实例名称
	 */
	public SceneManager(String instanceName) {
		super(CreatedWhenConstruct.CWC_NotToCreate);
		NameValuePairList list = new NameValuePairList();
		BasePointer instanceNamePtr = new BasePointer(instanceName);
		list.add("instanceName", instanceNamePtr.get());
		Create("JCSceneManagerProxy", list, true);
		this.registerCallback();
		if (!"com.earthview.world.graphic.SceneManager".equals(this.getClass().getName()))
		{
			this.setCustomExtend(true);
		}
	}

	native private long getName_void(long pNativeObject);
	/**
	 * 获取场景管理中的实例名称
	 * @param  
	 * @return 名称值
	 */
	public StringPointer getName()
	{
		long returnValue = getName_void(this.nativeObject.pointer);
		StringPointer __returnValue = new StringPointer(new InstancePointer(returnValue));
		return __returnValue;
	}
	protected  String getTypeName_void_callback()
	{
		String returnValue = getTypeName();
		String __returnValue = returnValue;
		return __returnValue;
	}

	native private String getTypeName_void(long pNativeObject);
	/**
	 * 获取场景管理器的类型名称
	 * @param  
	 * @return 名称值
	 */
	public String getTypeName()
	{
		String returnValue = getTypeName_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private String getTypeName_void_NoVirtual(long pNativeObject);
	protected String getTypeName_NoVirtual()
	{
		String returnValue = getTypeName_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  long createCamera_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.Camera returnValue = createCamera(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createCamera_EVString(long pNativeObject, String name);
	/**
	 * 创建摄像机
	 * @param name 新名称
	 */
	public com.earthview.world.graphic.Camera createCamera(String name)
	{
		String nameParamValue = name;
		long returnValue = createCamera_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Camera __returnValue = new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate, "CCamera");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Camera)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CCamera");
		}
		return __returnValue;
	}
	native private long createCamera_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.Camera createCamera_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = createCamera_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Camera __returnValue = new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate, "CCamera");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Camera)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CCamera");
		}
		return __returnValue;
	}

	protected  long getCamera_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.Camera returnValue = getCamera(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getCamera_EVString(long pNativeObject, String name);
	/**
	 * 通过摄像机名称获得摄像机
	 * @param name 名称
	 * @return 名称值
	 */
	public com.earthview.world.graphic.Camera getCamera(String name)
	{
		String nameParamValue = name;
		long returnValue = getCamera_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Camera __returnValue = new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate, "CCamera");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Camera)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CCamera");
		}
		return __returnValue;
	}
	native private long getCamera_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.Camera getCamera_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = getCamera_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Camera __returnValue = new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate, "CCamera");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Camera)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CCamera");
		}
		return __returnValue;
	}

	protected  boolean hasCamera_EVString_callback(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasCamera(nameParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean hasCamera_EVString(long pNativeObject, String name);
	/**
	 * 判断指定名称的摄像机是否存在
	 * @param name 名称
	 * @return 成功，返回此名称，不成功，返回空
	 */
	public boolean hasCamera(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasCamera_EVString(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}
	native private boolean hasCamera_EVString_NoVirtual(long pNativeObject, String name);
	protected boolean hasCamera_NoVirtual(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasCamera_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}

	protected  void destroyCamera_CCamera_callback(long cam)
	{
		com.earthview.world.graphic.Camera camParamValue = (cam == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
		if(camParamValue != null)
		{
		camParamValue.setDelegate(true);
		camParamValue.setInstancePointer(new InstancePointer(cam));
		IClassFactory camParamValueClassFactory = GlobalClassFactoryMap.get(camParamValue.getCppInstanceTypeName());
		if (camParamValueClassFactory != null)
		{
			camParamValue.setDelegate(true);
			camParamValue = (com.earthview.world.graphic.Camera)camParamValueClassFactory.create();
			camParamValue.setDelegate(true);
			camParamValue.setInstancePointer(new InstancePointer(cam));
		}
		}
		destroyCamera(camParamValue);
	}

	native private void destroyCamera_CCamera(long pNativeObject, long cam);
	/**
	 * 通过指针删除场景中的摄像机
	 * @param cam 指向摄像机的指针
	 */
	public void destroyCamera(com.earthview.world.graphic.Camera cam)
	{
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		destroyCamera_CCamera(this.nativeObject.pointer, camParamValue);
	}
	native private void destroyCamera_CCamera_NoVirtual(long pNativeObject, long cam);
	protected void destroyCamera_NoVirtual(com.earthview.world.graphic.Camera cam)
	{
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		destroyCamera_CCamera_NoVirtual(this.nativeObject.pointer, camParamValue);
	}

	protected  void destroyCamera_EVString_callback(String name)
	{
		String nameParamValue = name;
		destroyCamera(nameParamValue);
	}

	native private void destroyCamera_EVString(long pNativeObject, String name);
	/**
	 * 通过名称删除场景中的摄像机
	 * @param name 名称
	 */
	public void destroyCamera(String name)
	{
		String nameParamValue = name;
		destroyCamera_EVString(this.nativeObject.pointer, nameParamValue);
	}
	native private void destroyCamera_EVString_NoVirtual(long pNativeObject, String name);
	protected void destroyCamera_NoVirtual(String name)
	{
		String nameParamValue = name;
		destroyCamera_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
	}

	protected  void destroyAllCameras_void_callback()
	{
		destroyAllCameras();
	}

	native private void destroyAllCameras_void(long pNativeObject);
	/**
	 * 删除场景中的所有摄像机
	 * @param  名称
	 */
	public void destroyAllCameras()
	{
		destroyAllCameras_void(this.nativeObject.pointer);
	}
	native private void destroyAllCameras_void_NoVirtual(long pNativeObject);
	protected void destroyAllCameras_NoVirtual()
	{
		destroyAllCameras_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  long createLight_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.Light returnValue = createLight(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createLight_EVString(long pNativeObject, String name);
	/**
	 * 创建光源光源可以创建在固定点，或者挂接在场景节点
	 * @param name 新创建的光源名称
	 */
	public com.earthview.world.graphic.Light createLight(String name)
	{
		String nameParamValue = name;
		long returnValue = createLight_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Light __returnValue = new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate, "CLight");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Light)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CLight");
		}
		return __returnValue;
	}
	native private long createLight_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.Light createLight_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = createLight_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Light __returnValue = new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate, "CLight");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Light)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CLight");
		}
		return __returnValue;
	}

	protected  long createLight_void_callback()
	{
		com.earthview.world.graphic.Light returnValue = createLight();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createLight_void(long pNativeObject);
	/**
	 * 创建光源
	 * @param  
	 */
	public com.earthview.world.graphic.Light createLight()
	{
		long returnValue = createLight_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Light __returnValue = new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate, "CLight");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Light)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CLight");
		}
		return __returnValue;
	}
	native private long createLight_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.Light createLight_NoVirtual()
	{
		long returnValue = createLight_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Light __returnValue = new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate, "CLight");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Light)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CLight");
		}
		return __returnValue;
	}

	protected  int getLightCount_void_callback()
	{
		int returnValue = getLightCount();
		int __returnValue = returnValue;
		return __returnValue;
	}

	native private int getLightCount_void(long pNativeObject);
	/**
	 * 获取由场景管理器创建的光源的数量
	 * @param  
	 */
	public int getLightCount()
	{
		int returnValue = getLightCount_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private int getLightCount_void_NoVirtual(long pNativeObject);
	protected int getLightCount_NoVirtual()
	{
		int returnValue = getLightCount_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  long getLight_ev_uint16_callback(int index)
	{
		int indexParamValue = index;
		com.earthview.world.graphic.Light returnValue = getLight(indexParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getLight_ev_uint16(long pNativeObject, int index);
	/**
	 * 通过序号获取光源
	 * @param index 序号
	 */
	public com.earthview.world.graphic.Light getLight(int index)
	{
		int indexParamValue = index;
		long returnValue = getLight_ev_uint16(this.nativeObject.pointer, indexParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Light __returnValue = new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate, "CLight");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Light)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CLight");
		}
		return __returnValue;
	}
	native private long getLight_ev_uint16_NoVirtual(long pNativeObject, int index);
	protected com.earthview.world.graphic.Light getLight_NoVirtual(int index)
	{
		int indexParamValue = index;
		long returnValue = getLight_ev_uint16_NoVirtual(this.nativeObject.pointer, indexParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Light __returnValue = new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate, "CLight");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Light)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CLight");
		}
		return __returnValue;
	}

	protected  long getLight_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.Light returnValue = getLight(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getLight_EVString(long pNativeObject, String name);
	/**
	 * 通过名称获取光源
	 * @param name 光源名称
	 */
	public com.earthview.world.graphic.Light getLight(String name)
	{
		String nameParamValue = name;
		long returnValue = getLight_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Light __returnValue = new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate, "CLight");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Light)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CLight");
		}
		return __returnValue;
	}
	native private long getLight_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.Light getLight_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = getLight_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Light __returnValue = new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate, "CLight");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Light)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CLight");
		}
		return __returnValue;
	}

	protected  boolean hasLight_EVString_callback(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasLight(nameParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean hasLight_EVString(long pNativeObject, String name);
	/**
	 * 判断是否存在给定名称的光源
	 * @param name 光源名称
	 */
	public boolean hasLight(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasLight_EVString(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}
	native private boolean hasLight_EVString_NoVirtual(long pNativeObject, String name);
	protected boolean hasLight_NoVirtual(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasLight_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}

	protected  long getLightClippingPlanes_CLight_callback(long l)
	{
		com.earthview.world.graphic.Light lParamValue = (l == 0L ? null : new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate));
		if(lParamValue != null)
		{
		lParamValue.setDelegate(true);
		lParamValue.setInstancePointer(new InstancePointer(l));
		IClassFactory lParamValueClassFactory = GlobalClassFactoryMap.get(lParamValue.getCppInstanceTypeName());
		if (lParamValueClassFactory != null)
		{
			lParamValue.setDelegate(true);
			lParamValue = (com.earthview.world.graphic.Light)lParamValueClassFactory.create();
			lParamValue.setDelegate(true);
			lParamValue.setInstancePointer(new InstancePointer(l));
		}
		}
		com.earthview.world.spatial.math.PlaneList returnValue = getLightClippingPlanes(lParamValue);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getLightClippingPlanes_CLight(long pNativeObject, long l);
	/**
	 * 获取光源有效照射区域的裁剪面
	 * @param l 光源
	 */
	public com.earthview.world.spatial.math.PlaneList getLightClippingPlanes(com.earthview.world.graphic.Light l)
	{
		long lParamValue = (l == null ? 0L : l.nativeObject.pointer);
		long returnValue = getLightClippingPlanes_CLight(this.nativeObject.pointer, lParamValue);
		com.earthview.world.spatial.math.PlaneList __returnValue = new com.earthview.world.spatial.math.PlaneList(CreatedWhenConstruct.CWC_NotToCreate, "PlaneList");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.spatial.math.PlaneList)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "PlaneList");
		}
		return __returnValue;
	}
	native private long getLightClippingPlanes_CLight_NoVirtual(long pNativeObject, long l);
	protected com.earthview.world.spatial.math.PlaneList getLightClippingPlanes_NoVirtual(com.earthview.world.graphic.Light l)
	{
		long lParamValue = (l == null ? 0L : l.nativeObject.pointer);
		long returnValue = getLightClippingPlanes_CLight_NoVirtual(this.nativeObject.pointer, lParamValue);
		com.earthview.world.spatial.math.PlaneList __returnValue = new com.earthview.world.spatial.math.PlaneList(CreatedWhenConstruct.CWC_NotToCreate, "PlaneList");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.spatial.math.PlaneList)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "PlaneList");
		}
		return __returnValue;
	}

	protected  long getLightScissorRect_CLight_CCamera_callback(long l, long cam)
	{
		com.earthview.world.graphic.Light lParamValue = (l == 0L ? null : new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate));
		if(lParamValue != null)
		{
		lParamValue.setDelegate(true);
		lParamValue.setInstancePointer(new InstancePointer(l));
		IClassFactory lParamValueClassFactory = GlobalClassFactoryMap.get(lParamValue.getCppInstanceTypeName());
		if (lParamValueClassFactory != null)
		{
			lParamValue.setDelegate(true);
			lParamValue = (com.earthview.world.graphic.Light)lParamValueClassFactory.create();
			lParamValue.setDelegate(true);
			lParamValue.setInstancePointer(new InstancePointer(l));
		}
		}
		com.earthview.world.graphic.Camera camParamValue = (cam == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
		if(camParamValue != null)
		{
		camParamValue.setDelegate(true);
		camParamValue.setInstancePointer(new InstancePointer(cam));
		IClassFactory camParamValueClassFactory = GlobalClassFactoryMap.get(camParamValue.getCppInstanceTypeName());
		if (camParamValueClassFactory != null)
		{
			camParamValue.setDelegate(true);
			camParamValue = (com.earthview.world.graphic.Camera)camParamValueClassFactory.create();
			camParamValue.setDelegate(true);
			camParamValue.setInstancePointer(new InstancePointer(cam));
		}
		}
		com.earthview.world.graphic.RealRect returnValue = getLightScissorRect(lParamValue, camParamValue);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getLightScissorRect_CLight_CCamera(long pNativeObject, long l, long cam);
	/**
	 * 设置光源和相机作用的裁剪矩形
	 * @param  
	 */
	public com.earthview.world.graphic.RealRect getLightScissorRect(com.earthview.world.graphic.Light l, com.earthview.world.graphic.Camera cam)
	{
		long lParamValue = (l == null ? 0L : l.nativeObject.pointer);
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		long returnValue = getLightScissorRect_CLight_CCamera(this.nativeObject.pointer, lParamValue, camParamValue);
		com.earthview.world.graphic.RealRect __returnValue = new com.earthview.world.graphic.RealRect(CreatedWhenConstruct.CWC_NotToCreate, "RealRect");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.RealRect)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "RealRect");
		}
		return __returnValue;
	}
	native private long getLightScissorRect_CLight_CCamera_NoVirtual(long pNativeObject, long l, long cam);
	protected com.earthview.world.graphic.RealRect getLightScissorRect_NoVirtual(com.earthview.world.graphic.Light l, com.earthview.world.graphic.Camera cam)
	{
		long lParamValue = (l == null ? 0L : l.nativeObject.pointer);
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		long returnValue = getLightScissorRect_CLight_CCamera_NoVirtual(this.nativeObject.pointer, lParamValue, camParamValue);
		com.earthview.world.graphic.RealRect __returnValue = new com.earthview.world.graphic.RealRect(CreatedWhenConstruct.CWC_NotToCreate, "RealRect");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.RealRect)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "RealRect");
		}
		return __returnValue;
	}

	protected  void destroyLight_EVString_callback(String name)
	{
		String nameParamValue = name;
		destroyLight(nameParamValue);
	}

	native private void destroyLight_EVString(long pNativeObject, String name);
	/**
	 * 销毁指定的光源
	 * @param  
	 */
	public void destroyLight(String name)
	{
		String nameParamValue = name;
		destroyLight_EVString(this.nativeObject.pointer, nameParamValue);
	}
	native private void destroyLight_EVString_NoVirtual(long pNativeObject, String name);
	protected void destroyLight_NoVirtual(String name)
	{
		String nameParamValue = name;
		destroyLight_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
	}

	protected  void destroyLight_CLight_callback(long light)
	{
		com.earthview.world.graphic.Light lightParamValue = (light == 0L ? null : new com.earthview.world.graphic.Light(CreatedWhenConstruct.CWC_NotToCreate));
		if(lightParamValue != null)
		{
		lightParamValue.setDelegate(true);
		lightParamValue.setInstancePointer(new InstancePointer(light));
		IClassFactory lightParamValueClassFactory = GlobalClassFactoryMap.get(lightParamValue.getCppInstanceTypeName());
		if (lightParamValueClassFactory != null)
		{
			lightParamValue.setDelegate(true);
			lightParamValue = (com.earthview.world.graphic.Light)lightParamValueClassFactory.create();
			lightParamValue.setDelegate(true);
			lightParamValue.setInstancePointer(new InstancePointer(light));
		}
		}
		destroyLight(lightParamValue);
	}

	native private void destroyLight_CLight(long pNativeObject, long light);
	public void destroyLight(com.earthview.world.graphic.Light light)
	{
		long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
		destroyLight_CLight(this.nativeObject.pointer, lightParamValue);
	}
	native private void destroyLight_CLight_NoVirtual(long pNativeObject, long light);
	protected void destroyLight_NoVirtual(com.earthview.world.graphic.Light light)
	{
		long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
		destroyLight_CLight_NoVirtual(this.nativeObject.pointer, lightParamValue);
	}

	protected  void destroyAllLights_void_callback()
	{
		destroyAllLights();
	}

	native private void destroyAllLights_void(long pNativeObject);
	/**
	 * 销毁所有光源
	 * @param  
	 */
	public void destroyAllLights()
	{
		destroyAllLights_void(this.nativeObject.pointer);
	}
	native private void destroyAllLights_void_NoVirtual(long pNativeObject);
	protected void destroyAllLights_NoVirtual()
	{
		destroyAllLights_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  String getSoftShadowTexName_void_callback()
	{
		String returnValue = getSoftShadowTexName();
		String __returnValue = returnValue;
		return __returnValue;
	}

	native private String getSoftShadowTexName_void(long pNativeObject);
	public String getSoftShadowTexName()
	{
		String returnValue = getSoftShadowTexName_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private String getSoftShadowTexName_void_NoVirtual(long pNativeObject);
	protected String getSoftShadowTexName_NoVirtual()
	{
		String returnValue = getSoftShadowTexName_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  long getShadowTexCam_void_callback()
	{
		com.earthview.world.graphic.Camera returnValue = getShadowTexCam();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getShadowTexCam_void(long pNativeObject);
	public com.earthview.world.graphic.Camera getShadowTexCam()
	{
		long returnValue = getShadowTexCam_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Camera __returnValue = new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate, "CCamera");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Camera)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CCamera");
		}
		return __returnValue;
	}
	native private long getShadowTexCam_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.Camera getShadowTexCam_NoVirtual()
	{
		long returnValue = getShadowTexCam_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Camera __returnValue = new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate, "CCamera");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Camera)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CCamera");
		}
		return __returnValue;
	}

	protected  long getSoftShadowProjMatrix_ev_uint16_callback(int index)
	{
		int indexParamValue = index;
		com.earthview.world.spatial.math.Matrix4 returnValue = getSoftShadowProjMatrix(indexParamValue);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getSoftShadowProjMatrix_ev_uint16(long pNativeObject, int index);
	public com.earthview.world.spatial.math.Matrix4 getSoftShadowProjMatrix(int index)
	{
		int indexParamValue = index;
		long returnValue = getSoftShadowProjMatrix_ev_uint16(this.nativeObject.pointer, indexParamValue);
		com.earthview.world.spatial.math.Matrix4 __returnValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "CMatrix4");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.spatial.math.Matrix4)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CMatrix4");
		}
		return __returnValue;
	}
	native private long getSoftShadowProjMatrix_ev_uint16_NoVirtual(long pNativeObject, int index);
	protected com.earthview.world.spatial.math.Matrix4 getSoftShadowProjMatrix_NoVirtual(int index)
	{
		int indexParamValue = index;
		long returnValue = getSoftShadowProjMatrix_ev_uint16_NoVirtual(this.nativeObject.pointer, indexParamValue);
		com.earthview.world.spatial.math.Matrix4 __returnValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "CMatrix4");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.spatial.math.Matrix4)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CMatrix4");
		}
		return __returnValue;
	}

	protected  long getCascadeEyeSpaceDepthArray_void_callback()
	{
		com.earthview.world.spatial.math.Vector4 returnValue = getCascadeEyeSpaceDepthArray();
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getCascadeEyeSpaceDepthArray_void(long pNativeObject);
	public com.earthview.world.spatial.math.Vector4 getCascadeEyeSpaceDepthArray()
	{
		long returnValue = getCascadeEyeSpaceDepthArray_void(this.nativeObject.pointer);
		com.earthview.world.spatial.math.Vector4 __returnValue = new com.earthview.world.spatial.math.Vector4(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "CVector4");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.spatial.math.Vector4)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CVector4");
		}
		return __returnValue;
	}
	native private long getCascadeEyeSpaceDepthArray_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.spatial.math.Vector4 getCascadeEyeSpaceDepthArray_NoVirtual()
	{
		long returnValue = getCascadeEyeSpaceDepthArray_void_NoVirtual(this.nativeObject.pointer);
		com.earthview.world.spatial.math.Vector4 __returnValue = new com.earthview.world.spatial.math.Vector4(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "CVector4");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.spatial.math.Vector4)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CVector4");
		}
		return __returnValue;
	}

	protected  float getSoftShadowNearClip_ev_uint8_callback(short index)
	{
		short indexParamValue = index;
		float returnValue = getSoftShadowNearClip(indexParamValue);
		float __returnValue = returnValue;
		return __returnValue;
	}

	native private float getSoftShadowNearClip_ev_uint8(long pNativeObject, short index);
	public float getSoftShadowNearClip(short index)
	{
		short indexParamValue = index;
		float returnValue = getSoftShadowNearClip_ev_uint8(this.nativeObject.pointer, indexParamValue);
		return returnValue;
	}
	native private float getSoftShadowNearClip_ev_uint8_NoVirtual(long pNativeObject, short index);
	protected float getSoftShadowNearClip_NoVirtual(short index)
	{
		short indexParamValue = index;
		float returnValue = getSoftShadowNearClip_ev_uint8_NoVirtual(this.nativeObject.pointer, indexParamValue);
		return returnValue;
	}

	protected  float getSoftShadowFarClip_ev_uint8_callback(short index)
	{
		short indexParamValue = index;
		float returnValue = getSoftShadowFarClip(indexParamValue);
		float __returnValue = returnValue;
		return __returnValue;
	}

	native private float getSoftShadowFarClip_ev_uint8(long pNativeObject, short index);
	public float getSoftShadowFarClip(short index)
	{
		short indexParamValue = index;
		float returnValue = getSoftShadowFarClip_ev_uint8(this.nativeObject.pointer, indexParamValue);
		return returnValue;
	}
	native private float getSoftShadowFarClip_ev_uint8_NoVirtual(long pNativeObject, short index);
	protected float getSoftShadowFarClip_NoVirtual(short index)
	{
		short indexParamValue = index;
		float returnValue = getSoftShadowFarClip_ev_uint8_NoVirtual(this.nativeObject.pointer, indexParamValue);
		return returnValue;
	}

	protected  boolean getIsUseSoftShadowFitToCascadesMode_void_callback()
	{
		boolean returnValue = getIsUseSoftShadowFitToCascadesMode();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getIsUseSoftShadowFitToCascadesMode_void(long pNativeObject);
	public boolean getIsUseSoftShadowFitToCascadesMode()
	{
		boolean returnValue = getIsUseSoftShadowFitToCascadesMode_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean getIsUseSoftShadowFitToCascadesMode_void_NoVirtual(long pNativeObject);
	protected boolean getIsUseSoftShadowFitToCascadesMode_NoVirtual()
	{
		boolean returnValue = getIsUseSoftShadowFitToCascadesMode_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void setIsUseSoftShadowFitToCascadesMode_bool_callback(boolean flag)
	{
		boolean flagParamValue = flag;
		setIsUseSoftShadowFitToCascadesMode(flagParamValue);
	}

	native private void setIsUseSoftShadowFitToCascadesMode_bool(long pNativeObject, boolean flag);
	public void setIsUseSoftShadowFitToCascadesMode(boolean flag)
	{
		boolean flagParamValue = flag;
		setIsUseSoftShadowFitToCascadesMode_bool(this.nativeObject.pointer, flagParamValue);
	}
	native private void setIsUseSoftShadowFitToCascadesMode_bool_NoVirtual(long pNativeObject, boolean flag);
	protected void setIsUseSoftShadowFitToCascadesMode_NoVirtual(boolean flag)
	{
		boolean flagParamValue = flag;
		setIsUseSoftShadowFitToCascadesMode_bool_NoVirtual(this.nativeObject.pointer, flagParamValue);
	}

	protected  short getCurrentClipIndex_void_callback()
	{
		short returnValue = getCurrentClipIndex();
		short __returnValue = returnValue;
		return __returnValue;
	}

	native private short getCurrentClipIndex_void(long pNativeObject);
	public short getCurrentClipIndex()
	{
		short returnValue = getCurrentClipIndex_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private short getCurrentClipIndex_void_NoVirtual(long pNativeObject);
	protected short getCurrentClipIndex_NoVirtual()
	{
		short returnValue = getCurrentClipIndex_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  boolean getIsUseSoftShadowTechnique_void_callback()
	{
		boolean returnValue = getIsUseSoftShadowTechnique();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getIsUseSoftShadowTechnique_void(long pNativeObject);
	public boolean getIsUseSoftShadowTechnique()
	{
		boolean returnValue = getIsUseSoftShadowTechnique_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean getIsUseSoftShadowTechnique_void_NoVirtual(long pNativeObject);
	protected boolean getIsUseSoftShadowTechnique_NoVirtual()
	{
		boolean returnValue = getIsUseSoftShadowTechnique_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void setIsUseSoftShadowTechnique_bool_callback(boolean flag)
	{
		boolean flagParamValue = flag;
		setIsUseSoftShadowTechnique(flagParamValue);
	}

	native private void setIsUseSoftShadowTechnique_bool(long pNativeObject, boolean flag);
	public void setIsUseSoftShadowTechnique(boolean flag)
	{
		boolean flagParamValue = flag;
		setIsUseSoftShadowTechnique_bool(this.nativeObject.pointer, flagParamValue);
	}
	native private void setIsUseSoftShadowTechnique_bool_NoVirtual(long pNativeObject, boolean flag);
	protected void setIsUseSoftShadowTechnique_NoVirtual(boolean flag)
	{
		boolean flagParamValue = flag;
		setIsUseSoftShadowTechnique_bool_NoVirtual(this.nativeObject.pointer, flagParamValue);
	}

	protected  float getCascadePartitionsPercent_void_callback()
	{
		float returnValue = getCascadePartitionsPercent();
		float __returnValue = returnValue;
		return __returnValue;
	}

	native private float getCascadePartitionsPercent_void(long pNativeObject);
	public float getCascadePartitionsPercent()
	{
		float returnValue = getCascadePartitionsPercent_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private float getCascadePartitionsPercent_void_NoVirtual(long pNativeObject);
	protected float getCascadePartitionsPercent_NoVirtual()
	{
		float returnValue = getCascadePartitionsPercent_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void setCascadePartitionsPercent_float_callback(float percent)
	{
		float percentParamValue = percent;
		setCascadePartitionsPercent(percentParamValue);
	}

	native private void setCascadePartitionsPercent_float(long pNativeObject, float percent);
	public void setCascadePartitionsPercent(float percent)
	{
		float percentParamValue = percent;
		setCascadePartitionsPercent_float(this.nativeObject.pointer, percentParamValue);
	}
	native private void setCascadePartitionsPercent_float_NoVirtual(long pNativeObject, float percent);
	protected void setCascadePartitionsPercent_NoVirtual(float percent)
	{
		float percentParamValue = percent;
		setCascadePartitionsPercent_float_NoVirtual(this.nativeObject.pointer, percentParamValue);
	}

	protected  int getCascadePartitionsDistance_ev_uint8_callback(short index)
	{
		short indexParamValue = index;
		int returnValue = getCascadePartitionsDistance(indexParamValue);
		int __returnValue = returnValue;
		return __returnValue;
	}

	native private int getCascadePartitionsDistance_ev_uint8(long pNativeObject, short index);
	public int getCascadePartitionsDistance(short index)
	{
		short indexParamValue = index;
		int returnValue = getCascadePartitionsDistance_ev_uint8(this.nativeObject.pointer, indexParamValue);
		return returnValue;
	}
	native private int getCascadePartitionsDistance_ev_uint8_NoVirtual(long pNativeObject, short index);
	protected int getCascadePartitionsDistance_NoVirtual(short index)
	{
		short indexParamValue = index;
		int returnValue = getCascadePartitionsDistance_ev_uint8_NoVirtual(this.nativeObject.pointer, indexParamValue);
		return returnValue;
	}

	protected  void setCascadePartitionsDistance_ev_uint8_ev_uint8_callback(short index, short distance)
	{
		short indexParamValue = index;
		short distanceParamValue = distance;
		setCascadePartitionsDistance(indexParamValue, distanceParamValue);
	}

	native private void setCascadePartitionsDistance_ev_uint8_ev_uint8(long pNativeObject, short index, short distance);
	public void setCascadePartitionsDistance(short index, short distance)
	{
		short indexParamValue = index;
		short distanceParamValue = distance;
		setCascadePartitionsDistance_ev_uint8_ev_uint8(this.nativeObject.pointer, indexParamValue, distanceParamValue);
	}
	native private void setCascadePartitionsDistance_ev_uint8_ev_uint8_NoVirtual(long pNativeObject, short index, short distance);
	protected void setCascadePartitionsDistance_NoVirtual(short index, short distance)
	{
		short indexParamValue = index;
		short distanceParamValue = distance;
		setCascadePartitionsDistance_ev_uint8_ev_uint8_NoVirtual(this.nativeObject.pointer, indexParamValue, distanceParamValue);
	}

	protected  int getSoftShadowOffsetFormat_void_callback()
	{
		com.earthview.world.graphic.PixelFormat returnValue = getSoftShadowOffsetFormat();
		int __returnValue = returnValue.getValue();
		return __returnValue;
	}

	native private int getSoftShadowOffsetFormat_void(long pNativeObject);
	public com.earthview.world.graphic.PixelFormat getSoftShadowOffsetFormat()
	{
		int returnValue = getSoftShadowOffsetFormat_void(this.nativeObject.pointer);
		return com.earthview.world.graphic.PixelFormat.toEnum(returnValue);
	}
	native private int getSoftShadowOffsetFormat_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.PixelFormat getSoftShadowOffsetFormat_NoVirtual()
	{
		int returnValue = getSoftShadowOffsetFormat_void_NoVirtual(this.nativeObject.pointer);
		return com.earthview.world.graphic.PixelFormat.toEnum(returnValue);
	}

	protected  void checkShadowCasterInFrustum_CCamera_callback(long camera)
	{
		com.earthview.world.graphic.Camera cameraParamValue = (camera == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
		if(cameraParamValue != null)
		{
		cameraParamValue.setDelegate(true);
		cameraParamValue.setInstancePointer(new InstancePointer(camera));
		IClassFactory cameraParamValueClassFactory = GlobalClassFactoryMap.get(cameraParamValue.getCppInstanceTypeName());
		if (cameraParamValueClassFactory != null)
		{
			cameraParamValue.setDelegate(true);
			cameraParamValue = (com.earthview.world.graphic.Camera)cameraParamValueClassFactory.create();
			cameraParamValue.setDelegate(true);
			cameraParamValue.setInstancePointer(new InstancePointer(camera));
		}
		}
		checkShadowCasterInFrustum(cameraParamValue);
	}

	native private void checkShadowCasterInFrustum_CCamera(long pNativeObject, long camera);
	public void checkShadowCasterInFrustum(com.earthview.world.graphic.Camera camera)
	{
		long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
		checkShadowCasterInFrustum_CCamera(this.nativeObject.pointer, cameraParamValue);
	}
	native private void checkShadowCasterInFrustum_CCamera_NoVirtual(long pNativeObject, long camera);
	protected void checkShadowCasterInFrustum_NoVirtual(com.earthview.world.graphic.Camera camera)
	{
		long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
		checkShadowCasterInFrustum_CCamera_NoVirtual(this.nativeObject.pointer, cameraParamValue);
	}

	protected  boolean hasShadowCasterInFrustum_void_callback()
	{
		boolean returnValue = hasShadowCasterInFrustum();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean hasShadowCasterInFrustum_void(long pNativeObject);
	public boolean hasShadowCasterInFrustum()
	{
		boolean returnValue = hasShadowCasterInFrustum_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean hasShadowCasterInFrustum_void_NoVirtual(long pNativeObject);
	protected boolean hasShadowCasterInFrustum_NoVirtual()
	{
		boolean returnValue = hasShadowCasterInFrustum_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  double getSoftShadowLightBleedPower_void_callback()
	{
		double returnValue = getSoftShadowLightBleedPower();
		double __returnValue = returnValue;
		return __returnValue;
	}

	native private double getSoftShadowLightBleedPower_void(long pNativeObject);
	public double getSoftShadowLightBleedPower()
	{
		double returnValue = getSoftShadowLightBleedPower_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private double getSoftShadowLightBleedPower_void_NoVirtual(long pNativeObject);
	protected double getSoftShadowLightBleedPower_NoVirtual()
	{
		double returnValue = getSoftShadowLightBleedPower_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void setSoftShadowLightBleedPower_Real_callback(double power)
	{
		double powerParamValue = power;
		setSoftShadowLightBleedPower(powerParamValue);
	}

	native private void setSoftShadowLightBleedPower_Real(long pNativeObject, double power);
	public void setSoftShadowLightBleedPower(double power)
	{
		double powerParamValue = power;
		setSoftShadowLightBleedPower_Real(this.nativeObject.pointer, powerParamValue);
	}
	native private void setSoftShadowLightBleedPower_Real_NoVirtual(long pNativeObject, double power);
	protected void setSoftShadowLightBleedPower_NoVirtual(double power)
	{
		double powerParamValue = power;
		setSoftShadowLightBleedPower_Real_NoVirtual(this.nativeObject.pointer, powerParamValue);
	}

	protected  double getSoftShadowDepthOffset_void_callback()
	{
		double returnValue = getSoftShadowDepthOffset();
		double __returnValue = returnValue;
		return __returnValue;
	}

	native private double getSoftShadowDepthOffset_void(long pNativeObject);
	public double getSoftShadowDepthOffset()
	{
		double returnValue = getSoftShadowDepthOffset_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private double getSoftShadowDepthOffset_void_NoVirtual(long pNativeObject);
	protected double getSoftShadowDepthOffset_NoVirtual()
	{
		double returnValue = getSoftShadowDepthOffset_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void setSoftShadowDepthOffset_Real_callback(double offset)
	{
		double offsetParamValue = offset;
		setSoftShadowDepthOffset(offsetParamValue);
	}

	native private void setSoftShadowDepthOffset_Real(long pNativeObject, double offset);
	public void setSoftShadowDepthOffset(double offset)
	{
		double offsetParamValue = offset;
		setSoftShadowDepthOffset_Real(this.nativeObject.pointer, offsetParamValue);
	}
	native private void setSoftShadowDepthOffset_Real_NoVirtual(long pNativeObject, double offset);
	protected void setSoftShadowDepthOffset_NoVirtual(double offset)
	{
		double offsetParamValue = offset;
		setSoftShadowDepthOffset_Real_NoVirtual(this.nativeObject.pointer, offsetParamValue);
	}

	protected  float getSoftShadowNormalFactor_void_callback()
	{
		float returnValue = getSoftShadowNormalFactor();
		float __returnValue = returnValue;
		return __returnValue;
	}

	native private float getSoftShadowNormalFactor_void(long pNativeObject);
	public float getSoftShadowNormalFactor()
	{
		float returnValue = getSoftShadowNormalFactor_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private float getSoftShadowNormalFactor_void_NoVirtual(long pNativeObject);
	protected float getSoftShadowNormalFactor_NoVirtual()
	{
		float returnValue = getSoftShadowNormalFactor_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void setSoftShadowNormalFactor_float_callback(float factor)
	{
		float factorParamValue = factor;
		setSoftShadowNormalFactor(factorParamValue);
	}

	native private void setSoftShadowNormalFactor_float(long pNativeObject, float factor);
	public void setSoftShadowNormalFactor(float factor)
	{
		float factorParamValue = factor;
		setSoftShadowNormalFactor_float(this.nativeObject.pointer, factorParamValue);
	}
	native private void setSoftShadowNormalFactor_float_NoVirtual(long pNativeObject, float factor);
	protected void setSoftShadowNormalFactor_NoVirtual(float factor)
	{
		float factorParamValue = factor;
		setSoftShadowNormalFactor_float_NoVirtual(this.nativeObject.pointer, factorParamValue);
	}

	protected  void _notifyLightsDirty_void_callback()
	{
		_notifyLightsDirty();
	}

	native private void _notifyLightsDirty_void(long pNativeObject);
	public void _notifyLightsDirty()
	{
		_notifyLightsDirty_void(this.nativeObject.pointer);
	}
	native private void _notifyLightsDirty_void_NoVirtual(long pNativeObject);
	protected void _notifyLightsDirty_NoVirtual()
	{
		_notifyLightsDirty_void_NoVirtual(this.nativeObject.pointer);
	}

	native private long _getLightsDirtyCounter_void(long pNativeObject);
	public long _getLightsDirtyCounter()
	{
		long returnValue = _getLightsDirtyCounter_void(this.nativeObject.pointer);
		return returnValue;
	}
	protected  long _getLightsAffectingFrustum_void_callback()
	{
		com.earthview.world.graphic.LightList returnValue = _getLightsAffectingFrustum();
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long _getLightsAffectingFrustum_void(long pNativeObject);
	public com.earthview.world.graphic.LightList _getLightsAffectingFrustum()
	{
		long returnValue = _getLightsAffectingFrustum_void(this.nativeObject.pointer);
		com.earthview.world.graphic.LightList __returnValue = new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate, "LightList");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.LightList)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "LightList");
		}
		return __returnValue;
	}
	native private long _getLightsAffectingFrustum_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.LightList _getLightsAffectingFrustum_NoVirtual()
	{
		long returnValue = _getLightsAffectingFrustum_void_NoVirtual(this.nativeObject.pointer);
		com.earthview.world.graphic.LightList __returnValue = new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate, "LightList");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.LightList)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "LightList");
		}
		return __returnValue;
	}

	protected  void _populateLightList_CVector3_Real_LightList_ev_uint32_callback(long position, double radius, long destList, long lightMask)
	{
		com.earthview.world.spatial.math.Vector3 positionParamValue = new com.earthview.world.spatial.math.Vector3(CreatedWhenConstruct.CWC_NotToCreate);
		positionParamValue.setDelegate(true);
		positionParamValue.setInstancePointer(new InstancePointer(position));
		IClassFactory positionParamValueClassFactory = GlobalClassFactoryMap.get(positionParamValue.getCppInstanceTypeName());
		if (positionParamValueClassFactory != null)
		{
			positionParamValue.setDelegate(true);
			positionParamValue = (com.earthview.world.spatial.math.Vector3)positionParamValueClassFactory.create();
			positionParamValue.setDelegate(true);
			positionParamValue.setInstancePointer(new InstancePointer(position));
		}
		double radiusParamValue = radius;
		com.earthview.world.graphic.LightList destListParamValue = new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
		destListParamValue.setDelegate(true);
		destListParamValue.setInstancePointer(new InstancePointer(destList));
		IClassFactory destListParamValueClassFactory = GlobalClassFactoryMap.get(destListParamValue.getCppInstanceTypeName());
		if (destListParamValueClassFactory != null)
		{
			destListParamValue.setDelegate(true);
			destListParamValue = (com.earthview.world.graphic.LightList)destListParamValueClassFactory.create();
			destListParamValue.setDelegate(true);
			destListParamValue.setInstancePointer(new InstancePointer(destList));
		}
		long lightMaskParamValue = lightMask;
		_populateLightList(positionParamValue, radiusParamValue, destListParamValue, lightMaskParamValue);
	}

	native private void _populateLightList_CVector3_Real_LightList_ev_uint32(long pNativeObject, long position, double radius, long destList, long lightMask);
	public void _populateLightList(com.earthview.world.spatial.math.Vector3 position, double radius, com.earthview.world.graphic.LightList destList, long lightMask)
	{
		long positionParamValue = position.nativeObject.pointer;
		double radiusParamValue = radius;
		long destListParamValue = destList.nativeObject.pointer;
		long lightMaskParamValue = lightMask;
		_populateLightList_CVector3_Real_LightList_ev_uint32(this.nativeObject.pointer, positionParamValue, radiusParamValue, destListParamValue, lightMaskParamValue);
	}
	native private void _populateLightList_CVector3_Real_LightList_ev_uint32_NoVirtual(long pNativeObject, long position, double radius, long destList, long lightMask);
	protected void _populateLightList_NoVirtual(com.earthview.world.spatial.math.Vector3 position, double radius, com.earthview.world.graphic.LightList destList, long lightMask)
	{
		long positionParamValue = position.nativeObject.pointer;
		double radiusParamValue = radius;
		long destListParamValue = destList.nativeObject.pointer;
		long lightMaskParamValue = lightMask;
		_populateLightList_CVector3_Real_LightList_ev_uint32_NoVirtual(this.nativeObject.pointer, positionParamValue, radiusParamValue, destListParamValue, lightMaskParamValue);
	}

	protected  void _populateLightList_CVector3_Real_LightList_callback(long position, double radius, long destList)
	{
		com.earthview.world.spatial.math.Vector3 positionParamValue = new com.earthview.world.spatial.math.Vector3(CreatedWhenConstruct.CWC_NotToCreate);
		positionParamValue.setDelegate(true);
		positionParamValue.setInstancePointer(new InstancePointer(position));
		IClassFactory positionParamValueClassFactory = GlobalClassFactoryMap.get(positionParamValue.getCppInstanceTypeName());
		if (positionParamValueClassFactory != null)
		{
			positionParamValue.setDelegate(true);
			positionParamValue = (com.earthview.world.spatial.math.Vector3)positionParamValueClassFactory.create();
			positionParamValue.setDelegate(true);
			positionParamValue.setInstancePointer(new InstancePointer(position));
		}
		double radiusParamValue = radius;
		com.earthview.world.graphic.LightList destListParamValue = new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
		destListParamValue.setDelegate(true);
		destListParamValue.setInstancePointer(new InstancePointer(destList));
		IClassFactory destListParamValueClassFactory = GlobalClassFactoryMap.get(destListParamValue.getCppInstanceTypeName());
		if (destListParamValueClassFactory != null)
		{
			destListParamValue.setDelegate(true);
			destListParamValue = (com.earthview.world.graphic.LightList)destListParamValueClassFactory.create();
			destListParamValue.setDelegate(true);
			destListParamValue.setInstancePointer(new InstancePointer(destList));
		}
		_populateLightList(positionParamValue, radiusParamValue, destListParamValue);
	}

	native private void _populateLightList_CVector3_Real_LightList(long pNativeObject, long position, double radius, long destList);
	public void _populateLightList(com.earthview.world.spatial.math.Vector3 position, double radius, com.earthview.world.graphic.LightList destList)
	{
		long positionParamValue = position.nativeObject.pointer;
		double radiusParamValue = radius;
		long destListParamValue = destList.nativeObject.pointer;
		_populateLightList_CVector3_Real_LightList(this.nativeObject.pointer, positionParamValue, radiusParamValue, destListParamValue);
	}
	native private void _populateLightList_CVector3_Real_LightList_NoVirtual(long pNativeObject, long position, double radius, long destList);
	protected void _populateLightList_NoVirtual(com.earthview.world.spatial.math.Vector3 position, double radius, com.earthview.world.graphic.LightList destList)
	{
		long positionParamValue = position.nativeObject.pointer;
		double radiusParamValue = radius;
		long destListParamValue = destList.nativeObject.pointer;
		_populateLightList_CVector3_Real_LightList_NoVirtual(this.nativeObject.pointer, positionParamValue, radiusParamValue, destListParamValue);
	}

	protected  void showImage_ev_bool_callback(boolean visible)
	{
		boolean visibleParamValue = visible;
		showImage(visibleParamValue);
	}

	native private void showImage_ev_bool(long pNativeObject, boolean visible);
	public void showImage(boolean visible)
	{
		boolean visibleParamValue = visible;
		showImage_ev_bool(this.nativeObject.pointer, visibleParamValue);
	}
	native private void showImage_ev_bool_NoVirtual(long pNativeObject, boolean visible);
	protected void showImage_NoVirtual(boolean visible)
	{
		boolean visibleParamValue = visible;
		showImage_ev_bool_NoVirtual(this.nativeObject.pointer, visibleParamValue);
	}

	protected  boolean getImageVisible_void_callback()
	{
		boolean returnValue = getImageVisible();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getImageVisible_void(long pNativeObject);
	public boolean getImageVisible()
	{
		boolean returnValue = getImageVisible_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean getImageVisible_void_NoVirtual(long pNativeObject);
	protected boolean getImageVisible_NoVirtual()
	{
		boolean returnValue = getImageVisible_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void showOcean_ev_bool_callback(boolean visible)
	{
		boolean visibleParamValue = visible;
		showOcean(visibleParamValue);
	}

	native private void showOcean_ev_bool(long pNativeObject, boolean visible);
	public void showOcean(boolean visible)
	{
		boolean visibleParamValue = visible;
		showOcean_ev_bool(this.nativeObject.pointer, visibleParamValue);
	}
	native private void showOcean_ev_bool_NoVirtual(long pNativeObject, boolean visible);
	protected void showOcean_NoVirtual(boolean visible)
	{
		boolean visibleParamValue = visible;
		showOcean_ev_bool_NoVirtual(this.nativeObject.pointer, visibleParamValue);
	}

	protected  boolean getOceanVisible_void_callback()
	{
		boolean returnValue = getOceanVisible();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getOceanVisible_void(long pNativeObject);
	public boolean getOceanVisible()
	{
		boolean returnValue = getOceanVisible_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean getOceanVisible_void_NoVirtual(long pNativeObject);
	protected boolean getOceanVisible_NoVirtual()
	{
		boolean returnValue = getOceanVisible_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void _populateLightList_CSceneNode_Real_LightList_ev_uint32_callback(long sn, double radius, long destList, long lightMask)
	{
		com.earthview.world.graphic.SceneNode snParamValue = (sn == 0L ? null : new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate));
		if(snParamValue != null)
		{
		snParamValue.setDelegate(true);
		snParamValue.setInstancePointer(new InstancePointer(sn));
		IClassFactory snParamValueClassFactory = GlobalClassFactoryMap.get(snParamValue.getCppInstanceTypeName());
		if (snParamValueClassFactory != null)
		{
			snParamValue.setDelegate(true);
			snParamValue = (com.earthview.world.graphic.SceneNode)snParamValueClassFactory.create();
			snParamValue.setDelegate(true);
			snParamValue.setInstancePointer(new InstancePointer(sn));
		}
		}
		double radiusParamValue = radius;
		com.earthview.world.graphic.LightList destListParamValue = new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
		destListParamValue.setDelegate(true);
		destListParamValue.setInstancePointer(new InstancePointer(destList));
		IClassFactory destListParamValueClassFactory = GlobalClassFactoryMap.get(destListParamValue.getCppInstanceTypeName());
		if (destListParamValueClassFactory != null)
		{
			destListParamValue.setDelegate(true);
			destListParamValue = (com.earthview.world.graphic.LightList)destListParamValueClassFactory.create();
			destListParamValue.setDelegate(true);
			destListParamValue.setInstancePointer(new InstancePointer(destList));
		}
		long lightMaskParamValue = lightMask;
		_populateLightList(snParamValue, radiusParamValue, destListParamValue, lightMaskParamValue);
	}

	native private void _populateLightList_CSceneNode_Real_LightList_ev_uint32(long pNativeObject, long sn, double radius, long destList, long lightMask);
	public void _populateLightList(com.earthview.world.graphic.SceneNode sn, double radius, com.earthview.world.graphic.LightList destList, long lightMask)
	{
		long snParamValue = (sn == null ? 0L : sn.nativeObject.pointer);
		double radiusParamValue = radius;
		long destListParamValue = destList.nativeObject.pointer;
		long lightMaskParamValue = lightMask;
		_populateLightList_CSceneNode_Real_LightList_ev_uint32(this.nativeObject.pointer, snParamValue, radiusParamValue, destListParamValue, lightMaskParamValue);
	}
	native private void _populateLightList_CSceneNode_Real_LightList_ev_uint32_NoVirtual(long pNativeObject, long sn, double radius, long destList, long lightMask);
	protected void _populateLightList_NoVirtual(com.earthview.world.graphic.SceneNode sn, double radius, com.earthview.world.graphic.LightList destList, long lightMask)
	{
		long snParamValue = (sn == null ? 0L : sn.nativeObject.pointer);
		double radiusParamValue = radius;
		long destListParamValue = destList.nativeObject.pointer;
		long lightMaskParamValue = lightMask;
		_populateLightList_CSceneNode_Real_LightList_ev_uint32_NoVirtual(this.nativeObject.pointer, snParamValue, radiusParamValue, destListParamValue, lightMaskParamValue);
	}

	protected  void _populateLightList_CSceneNode_Real_LightList_callback(long sn, double radius, long destList)
	{
		com.earthview.world.graphic.SceneNode snParamValue = (sn == 0L ? null : new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate));
		if(snParamValue != null)
		{
		snParamValue.setDelegate(true);
		snParamValue.setInstancePointer(new InstancePointer(sn));
		IClassFactory snParamValueClassFactory = GlobalClassFactoryMap.get(snParamValue.getCppInstanceTypeName());
		if (snParamValueClassFactory != null)
		{
			snParamValue.setDelegate(true);
			snParamValue = (com.earthview.world.graphic.SceneNode)snParamValueClassFactory.create();
			snParamValue.setDelegate(true);
			snParamValue.setInstancePointer(new InstancePointer(sn));
		}
		}
		double radiusParamValue = radius;
		com.earthview.world.graphic.LightList destListParamValue = new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
		destListParamValue.setDelegate(true);
		destListParamValue.setInstancePointer(new InstancePointer(destList));
		IClassFactory destListParamValueClassFactory = GlobalClassFactoryMap.get(destListParamValue.getCppInstanceTypeName());
		if (destListParamValueClassFactory != null)
		{
			destListParamValue.setDelegate(true);
			destListParamValue = (com.earthview.world.graphic.LightList)destListParamValueClassFactory.create();
			destListParamValue.setDelegate(true);
			destListParamValue.setInstancePointer(new InstancePointer(destList));
		}
		_populateLightList(snParamValue, radiusParamValue, destListParamValue);
	}

	native private void _populateLightList_CSceneNode_Real_LightList(long pNativeObject, long sn, double radius, long destList);
	public void _populateLightList(com.earthview.world.graphic.SceneNode sn, double radius, com.earthview.world.graphic.LightList destList)
	{
		long snParamValue = (sn == null ? 0L : sn.nativeObject.pointer);
		double radiusParamValue = radius;
		long destListParamValue = destList.nativeObject.pointer;
		_populateLightList_CSceneNode_Real_LightList(this.nativeObject.pointer, snParamValue, radiusParamValue, destListParamValue);
	}
	native private void _populateLightList_CSceneNode_Real_LightList_NoVirtual(long pNativeObject, long sn, double radius, long destList);
	protected void _populateLightList_NoVirtual(com.earthview.world.graphic.SceneNode sn, double radius, com.earthview.world.graphic.LightList destList)
	{
		long snParamValue = (sn == null ? 0L : sn.nativeObject.pointer);
		double radiusParamValue = radius;
		long destListParamValue = destList.nativeObject.pointer;
		_populateLightList_CSceneNode_Real_LightList_NoVirtual(this.nativeObject.pointer, snParamValue, radiusParamValue, destListParamValue);
	}

	protected  long createSceneNode_void_callback()
	{
		com.earthview.world.graphic.SceneNode returnValue = createSceneNode();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createSceneNode_void(long pNativeObject);
	/**
	 * 创建场景节点如果不传递名称，则场景管理器会自动对其命名
	 * @param name 节点名称
	 */
	public com.earthview.world.graphic.SceneNode createSceneNode()
	{
		long returnValue = createSceneNode_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}
	native private long createSceneNode_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.SceneNode createSceneNode_NoVirtual()
	{
		long returnValue = createSceneNode_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}

	protected  long createSceneNode_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.SceneNode returnValue = createSceneNode(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createSceneNode_EVString(long pNativeObject, String name);
	public com.earthview.world.graphic.SceneNode createSceneNode(String name)
	{
		String nameParamValue = name;
		long returnValue = createSceneNode_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}
	native private long createSceneNode_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.SceneNode createSceneNode_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = createSceneNode_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}

	protected  void destroySceneNode_EVString_callback(String name)
	{
		String nameParamValue = name;
		destroySceneNode(nameParamValue);
	}

	native private void destroySceneNode_EVString(long pNativeObject, String name);
	/**
	 * 销毁场景节点				
	 * @param name 节点名称
	 */
	public void destroySceneNode(String name)
	{
		String nameParamValue = name;
		destroySceneNode_EVString(this.nativeObject.pointer, nameParamValue);
	}
	native private void destroySceneNode_EVString_NoVirtual(long pNativeObject, String name);
	protected void destroySceneNode_NoVirtual(String name)
	{
		String nameParamValue = name;
		destroySceneNode_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
	}

	protected  void destroySceneNode_CSceneNode_callback(long sn)
	{
		com.earthview.world.graphic.SceneNode snParamValue = (sn == 0L ? null : new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate));
		if(snParamValue != null)
		{
		snParamValue.setDelegate(true);
		snParamValue.setInstancePointer(new InstancePointer(sn));
		IClassFactory snParamValueClassFactory = GlobalClassFactoryMap.get(snParamValue.getCppInstanceTypeName());
		if (snParamValueClassFactory != null)
		{
			snParamValue.setDelegate(true);
			snParamValue = (com.earthview.world.graphic.SceneNode)snParamValueClassFactory.create();
			snParamValue.setDelegate(true);
			snParamValue.setInstancePointer(new InstancePointer(sn));
		}
		}
		destroySceneNode(snParamValue);
	}

	native private void destroySceneNode_CSceneNode(long pNativeObject, long sn);
	public void destroySceneNode(com.earthview.world.graphic.SceneNode sn)
	{
		long snParamValue = (sn == null ? 0L : sn.nativeObject.pointer);
		destroySceneNode_CSceneNode(this.nativeObject.pointer, snParamValue);
	}
	native private void destroySceneNode_CSceneNode_NoVirtual(long pNativeObject, long sn);
	protected void destroySceneNode_NoVirtual(com.earthview.world.graphic.SceneNode sn)
	{
		long snParamValue = (sn == null ? 0L : sn.nativeObject.pointer);
		destroySceneNode_CSceneNode_NoVirtual(this.nativeObject.pointer, snParamValue);
	}

	protected  long getRootSceneNode_void_callback()
	{
		com.earthview.world.graphic.SceneNode returnValue = getRootSceneNode();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getRootSceneNode_void(long pNativeObject);
	/**
	 * 获取根节点				
	 * @param name 节点名称
	 */
	public com.earthview.world.graphic.SceneNode getRootSceneNode()
	{
		long returnValue = getRootSceneNode_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}
	native private long getRootSceneNode_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.SceneNode getRootSceneNode_NoVirtual()
	{
		long returnValue = getRootSceneNode_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}

	protected  long getSceneNode_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.SceneNode returnValue = getSceneNode(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getSceneNode_EVString(long pNativeObject, String name);
	/**
	 * 获取节点				
	 * @param name 节点名称
	 */
	public com.earthview.world.graphic.SceneNode getSceneNode(String name)
	{
		String nameParamValue = name;
		long returnValue = getSceneNode_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}
	native private long getSceneNode_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.SceneNode getSceneNode_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = getSceneNode_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}

	protected  boolean hasSceneNode_EVString_callback(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasSceneNode(nameParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean hasSceneNode_EVString(long pNativeObject, String name);
	/**
	 * 判断是否存在给定名称的节点				
	 * @param name 节点名称
	 */
	public boolean hasSceneNode(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasSceneNode_EVString(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}
	native private boolean hasSceneNode_EVString_NoVirtual(long pNativeObject, String name);
	protected boolean hasSceneNode_NoVirtual(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasSceneNode_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}

	protected  long createEntity_EVString_EVString_IntVector_EVString_callback(String entityName, String meshName, long subentityIndics, String groupName)
	{
		String entityNameParamValue = entityName;
		String meshNameParamValue = meshName;
		com.earthview.world.core.IntVector subentityIndicsParamValue = new com.earthview.world.core.IntVector(CreatedWhenConstruct.CWC_NotToCreate);
		subentityIndicsParamValue.setDelegate(true);
		subentityIndicsParamValue.setInstancePointer(new InstancePointer(subentityIndics));
		IClassFactory subentityIndicsParamValueClassFactory = GlobalClassFactoryMap.get(subentityIndicsParamValue.getCppInstanceTypeName());
		if (subentityIndicsParamValueClassFactory != null)
		{
			subentityIndicsParamValue.setDelegate(true);
			subentityIndicsParamValue = (com.earthview.world.core.IntVector)subentityIndicsParamValueClassFactory.create();
			subentityIndicsParamValue.setDelegate(true);
			subentityIndicsParamValue.setInstancePointer(new InstancePointer(subentityIndics));
		}
		String groupNameParamValue = groupName;
		com.earthview.world.graphic.Entity returnValue = createEntity(entityNameParamValue, meshNameParamValue, subentityIndicsParamValue, groupNameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createEntity_EVString_EVString_IntVector_EVString(long pNativeObject, String entityName, String meshName, long subentityIndics, String groupName);
	/**
	 * 创建模型实体				
	 * @param entityName 实体名称
	 * @param meshName mesh名称
	 * @param subentityIndics submesh部件序号集
	 * @param groupName mesh资源组名称
	 */
	public com.earthview.world.graphic.Entity createEntity(String entityName, String meshName, com.earthview.world.core.IntVector subentityIndics, String groupName)
	{
		String entityNameParamValue = entityName;
		String meshNameParamValue = meshName;
		long subentityIndicsParamValue = subentityIndics.nativeObject.pointer;
		String groupNameParamValue = groupName;
		long returnValue = createEntity_EVString_EVString_IntVector_EVString(this.nativeObject.pointer, entityNameParamValue, meshNameParamValue, subentityIndicsParamValue, groupNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}
	native private long createEntity_EVString_EVString_IntVector_EVString_NoVirtual(long pNativeObject, String entityName, String meshName, long subentityIndics, String groupName);
	protected com.earthview.world.graphic.Entity createEntity_NoVirtual(String entityName, String meshName, com.earthview.world.core.IntVector subentityIndics, String groupName)
	{
		String entityNameParamValue = entityName;
		String meshNameParamValue = meshName;
		long subentityIndicsParamValue = subentityIndics.nativeObject.pointer;
		String groupNameParamValue = groupName;
		long returnValue = createEntity_EVString_EVString_IntVector_EVString_NoVirtual(this.nativeObject.pointer, entityNameParamValue, meshNameParamValue, subentityIndicsParamValue, groupNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}

	protected  long createEntity_EVString_EVString_EVString_callback(String entityName, String meshName, String groupName)
	{
		String entityNameParamValue = entityName;
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		com.earthview.world.graphic.Entity returnValue = createEntity(entityNameParamValue, meshNameParamValue, groupNameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createEntity_EVString_EVString_EVString(long pNativeObject, String entityName, String meshName, String groupName);
	public com.earthview.world.graphic.Entity createEntity(String entityName, String meshName, String groupName)
	{
		String entityNameParamValue = entityName;
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		long returnValue = createEntity_EVString_EVString_EVString(this.nativeObject.pointer, entityNameParamValue, meshNameParamValue, groupNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}
	native private long createEntity_EVString_EVString_EVString_NoVirtual(long pNativeObject, String entityName, String meshName, String groupName);
	protected com.earthview.world.graphic.Entity createEntity_NoVirtual(String entityName, String meshName, String groupName)
	{
		String entityNameParamValue = entityName;
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		long returnValue = createEntity_EVString_EVString_EVString_NoVirtual(this.nativeObject.pointer, entityNameParamValue, meshNameParamValue, groupNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}

	protected  long createEntity_EVString_EVString_IntVector_callback(String entityName, String meshName, long subentityIndics)
	{
		String entityNameParamValue = entityName;
		String meshNameParamValue = meshName;
		com.earthview.world.core.IntVector subentityIndicsParamValue = new com.earthview.world.core.IntVector(CreatedWhenConstruct.CWC_NotToCreate);
		subentityIndicsParamValue.setDelegate(true);
		subentityIndicsParamValue.setInstancePointer(new InstancePointer(subentityIndics));
		IClassFactory subentityIndicsParamValueClassFactory = GlobalClassFactoryMap.get(subentityIndicsParamValue.getCppInstanceTypeName());
		if (subentityIndicsParamValueClassFactory != null)
		{
			subentityIndicsParamValue.setDelegate(true);
			subentityIndicsParamValue = (com.earthview.world.core.IntVector)subentityIndicsParamValueClassFactory.create();
			subentityIndicsParamValue.setDelegate(true);
			subentityIndicsParamValue.setInstancePointer(new InstancePointer(subentityIndics));
		}
		com.earthview.world.graphic.Entity returnValue = createEntity(entityNameParamValue, meshNameParamValue, subentityIndicsParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createEntity_EVString_EVString_IntVector(long pNativeObject, String entityName, String meshName, long subentityIndics);
	public com.earthview.world.graphic.Entity createEntity(String entityName, String meshName, com.earthview.world.core.IntVector subentityIndics)
	{
		String entityNameParamValue = entityName;
		String meshNameParamValue = meshName;
		long subentityIndicsParamValue = subentityIndics.nativeObject.pointer;
		long returnValue = createEntity_EVString_EVString_IntVector(this.nativeObject.pointer, entityNameParamValue, meshNameParamValue, subentityIndicsParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}
	native private long createEntity_EVString_EVString_IntVector_NoVirtual(long pNativeObject, String entityName, String meshName, long subentityIndics);
	protected com.earthview.world.graphic.Entity createEntity_NoVirtual(String entityName, String meshName, com.earthview.world.core.IntVector subentityIndics)
	{
		String entityNameParamValue = entityName;
		String meshNameParamValue = meshName;
		long subentityIndicsParamValue = subentityIndics.nativeObject.pointer;
		long returnValue = createEntity_EVString_EVString_IntVector_NoVirtual(this.nativeObject.pointer, entityNameParamValue, meshNameParamValue, subentityIndicsParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}

	protected  long createEntity_EVString_EVString_callback(String entityName, String meshName)
	{
		String entityNameParamValue = entityName;
		String meshNameParamValue = meshName;
		com.earthview.world.graphic.Entity returnValue = createEntity(entityNameParamValue, meshNameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createEntity_EVString_EVString(long pNativeObject, String entityName, String meshName);
	public com.earthview.world.graphic.Entity createEntity(String entityName, String meshName)
	{
		String entityNameParamValue = entityName;
		String meshNameParamValue = meshName;
		long returnValue = createEntity_EVString_EVString(this.nativeObject.pointer, entityNameParamValue, meshNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}
	native private long createEntity_EVString_EVString_NoVirtual(long pNativeObject, String entityName, String meshName);
	protected com.earthview.world.graphic.Entity createEntity_NoVirtual(String entityName, String meshName)
	{
		String entityNameParamValue = entityName;
		String meshNameParamValue = meshName;
		long returnValue = createEntity_EVString_EVString_NoVirtual(this.nativeObject.pointer, entityNameParamValue, meshNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}

	protected  long createEntity_EVString_CMeshPtr_IntVector_callback(String entityName, long pMesh, long subentityIndics)
	{
		String entityNameParamValue = entityName;
		com.earthview.world.graphic.MeshPtr pMeshParamValue = new com.earthview.world.graphic.MeshPtr(CreatedWhenConstruct.CWC_NotToCreate);
		pMeshParamValue.setDelegate(true);
		pMeshParamValue.setInstancePointer(new InstancePointer(pMesh));
		IClassFactory pMeshParamValueClassFactory = GlobalClassFactoryMap.get(pMeshParamValue.getCppInstanceTypeName());
		if (pMeshParamValueClassFactory != null)
		{
			pMeshParamValue.setDelegate(true);
			pMeshParamValue = (com.earthview.world.graphic.MeshPtr)pMeshParamValueClassFactory.create();
			pMeshParamValue.setDelegate(true);
			pMeshParamValue.setInstancePointer(new InstancePointer(pMesh));
		}
		com.earthview.world.core.IntVector subentityIndicsParamValue = new com.earthview.world.core.IntVector(CreatedWhenConstruct.CWC_NotToCreate);
		subentityIndicsParamValue.setDelegate(true);
		subentityIndicsParamValue.setInstancePointer(new InstancePointer(subentityIndics));
		IClassFactory subentityIndicsParamValueClassFactory = GlobalClassFactoryMap.get(subentityIndicsParamValue.getCppInstanceTypeName());
		if (subentityIndicsParamValueClassFactory != null)
		{
			subentityIndicsParamValue.setDelegate(true);
			subentityIndicsParamValue = (com.earthview.world.core.IntVector)subentityIndicsParamValueClassFactory.create();
			subentityIndicsParamValue.setDelegate(true);
			subentityIndicsParamValue.setInstancePointer(new InstancePointer(subentityIndics));
		}
		com.earthview.world.graphic.Entity returnValue = createEntity(entityNameParamValue, pMeshParamValue, subentityIndicsParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createEntity_EVString_CMeshPtr_IntVector(long pNativeObject, String entityName, long pMesh, long subentityIndics);
	public com.earthview.world.graphic.Entity createEntity(String entityName, com.earthview.world.graphic.MeshPtr pMesh, com.earthview.world.core.IntVector subentityIndics)
	{
		String entityNameParamValue = entityName;
		long pMeshParamValue = pMesh.nativeObject.pointer;
		long subentityIndicsParamValue = subentityIndics.nativeObject.pointer;
		long returnValue = createEntity_EVString_CMeshPtr_IntVector(this.nativeObject.pointer, entityNameParamValue, pMeshParamValue, subentityIndicsParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}
	native private long createEntity_EVString_CMeshPtr_IntVector_NoVirtual(long pNativeObject, String entityName, long pMesh, long subentityIndics);
	protected com.earthview.world.graphic.Entity createEntity_NoVirtual(String entityName, com.earthview.world.graphic.MeshPtr pMesh, com.earthview.world.core.IntVector subentityIndics)
	{
		String entityNameParamValue = entityName;
		long pMeshParamValue = pMesh.nativeObject.pointer;
		long subentityIndicsParamValue = subentityIndics.nativeObject.pointer;
		long returnValue = createEntity_EVString_CMeshPtr_IntVector_NoVirtual(this.nativeObject.pointer, entityNameParamValue, pMeshParamValue, subentityIndicsParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}

	protected  long createEntity_EVString_CMeshPtr_callback(String entityName, long pMesh)
	{
		String entityNameParamValue = entityName;
		com.earthview.world.graphic.MeshPtr pMeshParamValue = new com.earthview.world.graphic.MeshPtr(CreatedWhenConstruct.CWC_NotToCreate);
		pMeshParamValue.setDelegate(true);
		pMeshParamValue.setInstancePointer(new InstancePointer(pMesh));
		IClassFactory pMeshParamValueClassFactory = GlobalClassFactoryMap.get(pMeshParamValue.getCppInstanceTypeName());
		if (pMeshParamValueClassFactory != null)
		{
			pMeshParamValue.setDelegate(true);
			pMeshParamValue = (com.earthview.world.graphic.MeshPtr)pMeshParamValueClassFactory.create();
			pMeshParamValue.setDelegate(true);
			pMeshParamValue.setInstancePointer(new InstancePointer(pMesh));
		}
		com.earthview.world.graphic.Entity returnValue = createEntity(entityNameParamValue, pMeshParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createEntity_EVString_CMeshPtr(long pNativeObject, String entityName, long pMesh);
	public com.earthview.world.graphic.Entity createEntity(String entityName, com.earthview.world.graphic.MeshPtr pMesh)
	{
		String entityNameParamValue = entityName;
		long pMeshParamValue = pMesh.nativeObject.pointer;
		long returnValue = createEntity_EVString_CMeshPtr(this.nativeObject.pointer, entityNameParamValue, pMeshParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}
	native private long createEntity_EVString_CMeshPtr_NoVirtual(long pNativeObject, String entityName, long pMesh);
	protected com.earthview.world.graphic.Entity createEntity_NoVirtual(String entityName, com.earthview.world.graphic.MeshPtr pMesh)
	{
		String entityNameParamValue = entityName;
		long pMeshParamValue = pMesh.nativeObject.pointer;
		long returnValue = createEntity_EVString_CMeshPtr_NoVirtual(this.nativeObject.pointer, entityNameParamValue, pMeshParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}

	protected  long createEntity_CMeshPtr_IntVector_callback(long pMesh, long subentityIndics)
	{
		com.earthview.world.graphic.MeshPtr pMeshParamValue = new com.earthview.world.graphic.MeshPtr(CreatedWhenConstruct.CWC_NotToCreate);
		pMeshParamValue.setDelegate(true);
		pMeshParamValue.setInstancePointer(new InstancePointer(pMesh));
		IClassFactory pMeshParamValueClassFactory = GlobalClassFactoryMap.get(pMeshParamValue.getCppInstanceTypeName());
		if (pMeshParamValueClassFactory != null)
		{
			pMeshParamValue.setDelegate(true);
			pMeshParamValue = (com.earthview.world.graphic.MeshPtr)pMeshParamValueClassFactory.create();
			pMeshParamValue.setDelegate(true);
			pMeshParamValue.setInstancePointer(new InstancePointer(pMesh));
		}
		com.earthview.world.core.IntVector subentityIndicsParamValue = new com.earthview.world.core.IntVector(CreatedWhenConstruct.CWC_NotToCreate);
		subentityIndicsParamValue.setDelegate(true);
		subentityIndicsParamValue.setInstancePointer(new InstancePointer(subentityIndics));
		IClassFactory subentityIndicsParamValueClassFactory = GlobalClassFactoryMap.get(subentityIndicsParamValue.getCppInstanceTypeName());
		if (subentityIndicsParamValueClassFactory != null)
		{
			subentityIndicsParamValue.setDelegate(true);
			subentityIndicsParamValue = (com.earthview.world.core.IntVector)subentityIndicsParamValueClassFactory.create();
			subentityIndicsParamValue.setDelegate(true);
			subentityIndicsParamValue.setInstancePointer(new InstancePointer(subentityIndics));
		}
		com.earthview.world.graphic.Entity returnValue = createEntity(pMeshParamValue, subentityIndicsParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createEntity_CMeshPtr_IntVector(long pNativeObject, long pMesh, long subentityIndics);
	public com.earthview.world.graphic.Entity createEntity(com.earthview.world.graphic.MeshPtr pMesh, com.earthview.world.core.IntVector subentityIndics)
	{
		long pMeshParamValue = pMesh.nativeObject.pointer;
		long subentityIndicsParamValue = subentityIndics.nativeObject.pointer;
		long returnValue = createEntity_CMeshPtr_IntVector(this.nativeObject.pointer, pMeshParamValue, subentityIndicsParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}
	native private long createEntity_CMeshPtr_IntVector_NoVirtual(long pNativeObject, long pMesh, long subentityIndics);
	protected com.earthview.world.graphic.Entity createEntity_NoVirtual(com.earthview.world.graphic.MeshPtr pMesh, com.earthview.world.core.IntVector subentityIndics)
	{
		long pMeshParamValue = pMesh.nativeObject.pointer;
		long subentityIndicsParamValue = subentityIndics.nativeObject.pointer;
		long returnValue = createEntity_CMeshPtr_IntVector_NoVirtual(this.nativeObject.pointer, pMeshParamValue, subentityIndicsParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}

	protected  long createEntity_CMeshPtr_callback(long pMesh)
	{
		com.earthview.world.graphic.MeshPtr pMeshParamValue = new com.earthview.world.graphic.MeshPtr(CreatedWhenConstruct.CWC_NotToCreate);
		pMeshParamValue.setDelegate(true);
		pMeshParamValue.setInstancePointer(new InstancePointer(pMesh));
		IClassFactory pMeshParamValueClassFactory = GlobalClassFactoryMap.get(pMeshParamValue.getCppInstanceTypeName());
		if (pMeshParamValueClassFactory != null)
		{
			pMeshParamValue.setDelegate(true);
			pMeshParamValue = (com.earthview.world.graphic.MeshPtr)pMeshParamValueClassFactory.create();
			pMeshParamValue.setDelegate(true);
			pMeshParamValue.setInstancePointer(new InstancePointer(pMesh));
		}
		com.earthview.world.graphic.Entity returnValue = createEntity(pMeshParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createEntity_CMeshPtr(long pNativeObject, long pMesh);
	public com.earthview.world.graphic.Entity createEntity(com.earthview.world.graphic.MeshPtr pMesh)
	{
		long pMeshParamValue = pMesh.nativeObject.pointer;
		long returnValue = createEntity_CMeshPtr(this.nativeObject.pointer, pMeshParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}
	native private long createEntity_CMeshPtr_NoVirtual(long pNativeObject, long pMesh);
	protected com.earthview.world.graphic.Entity createEntity_NoVirtual(com.earthview.world.graphic.MeshPtr pMesh)
	{
		long pMeshParamValue = pMesh.nativeObject.pointer;
		long returnValue = createEntity_CMeshPtr_NoVirtual(this.nativeObject.pointer, pMeshParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}

	protected  long createEntity_EVString_IntVector_callback(String meshName, long subentityIndics)
	{
		String meshNameParamValue = meshName;
		com.earthview.world.core.IntVector subentityIndicsParamValue = new com.earthview.world.core.IntVector(CreatedWhenConstruct.CWC_NotToCreate);
		subentityIndicsParamValue.setDelegate(true);
		subentityIndicsParamValue.setInstancePointer(new InstancePointer(subentityIndics));
		IClassFactory subentityIndicsParamValueClassFactory = GlobalClassFactoryMap.get(subentityIndicsParamValue.getCppInstanceTypeName());
		if (subentityIndicsParamValueClassFactory != null)
		{
			subentityIndicsParamValue.setDelegate(true);
			subentityIndicsParamValue = (com.earthview.world.core.IntVector)subentityIndicsParamValueClassFactory.create();
			subentityIndicsParamValue.setDelegate(true);
			subentityIndicsParamValue.setInstancePointer(new InstancePointer(subentityIndics));
		}
		com.earthview.world.graphic.Entity returnValue = createEntity(meshNameParamValue, subentityIndicsParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createEntity_EVString_IntVector(long pNativeObject, String meshName, long subentityIndics);
	public com.earthview.world.graphic.Entity createEntity(String meshName, com.earthview.world.core.IntVector subentityIndics)
	{
		String meshNameParamValue = meshName;
		long subentityIndicsParamValue = subentityIndics.nativeObject.pointer;
		long returnValue = createEntity_EVString_IntVector(this.nativeObject.pointer, meshNameParamValue, subentityIndicsParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}
	native private long createEntity_EVString_IntVector_NoVirtual(long pNativeObject, String meshName, long subentityIndics);
	protected com.earthview.world.graphic.Entity createEntity_NoVirtual(String meshName, com.earthview.world.core.IntVector subentityIndics)
	{
		String meshNameParamValue = meshName;
		long subentityIndicsParamValue = subentityIndics.nativeObject.pointer;
		long returnValue = createEntity_EVString_IntVector_NoVirtual(this.nativeObject.pointer, meshNameParamValue, subentityIndicsParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}

	protected  long createEntity_EVString_callback(String meshName)
	{
		String meshNameParamValue = meshName;
		com.earthview.world.graphic.Entity returnValue = createEntity(meshNameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createEntity_EVString(long pNativeObject, String meshName);
	public com.earthview.world.graphic.Entity createEntity(String meshName)
	{
		String meshNameParamValue = meshName;
		long returnValue = createEntity_EVString(this.nativeObject.pointer, meshNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}
	native private long createEntity_EVString_NoVirtual(long pNativeObject, String meshName);
	protected com.earthview.world.graphic.Entity createEntity_NoVirtual(String meshName)
	{
		String meshNameParamValue = meshName;
		long returnValue = createEntity_EVString_NoVirtual(this.nativeObject.pointer, meshNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}

	/**
	 * 组合图形渲染模型
	 */
	public enum PrefabType implements INativeEnum<PrefabType> {
		PT_PLANE(PrefabTypeHelper.ENUM_VALUES[0]),
		PT_CUBE(PrefabTypeHelper.ENUM_VALUES[1]),
		PT_SPHERE(PrefabTypeHelper.ENUM_VALUES[2]);
		private int value;
		PrefabType(int i) {
			this.value = i;
		}
		public PrefabType getEnum(int val) {
			return toEnum(val);
		}
		public int getValue() {
			return this.value;
		}
		public static final PrefabType toEnum(int retval) {
			if(retval == PT_PLANE.value){
				return PT_PLANE;
			}
			else if(retval == PT_CUBE.value){
				return PT_CUBE;
			}
			else if(retval == PT_SPHERE.value){
				return PT_SPHERE;
			}
			throw new RuntimeException("wrong number in jni call for an enum!");
		}
	}
	static class PrefabTypeHelper {
		public static final int[] ENUM_VALUES = getEnumValues();
		private static native int[] getEnumValues();
	}
	
	protected  long createEntity_EVString_PrefabType_callback(String entityName, int ptype)
	{
		String entityNameParamValue = entityName;
		com.earthview.world.graphic.SceneManager.PrefabType ptypeParamValue = com.earthview.world.graphic.SceneManager.PrefabType.toEnum(ptype);
		com.earthview.world.graphic.Entity returnValue = createEntity(entityNameParamValue, ptypeParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createEntity_EVString_PrefabType(long pNativeObject, String entityName, int ptype);
	/**
	 * 通过图形创建实体
	 * @param entityName 实体名称
	 * @param ptype 几何类型
	 */
	public com.earthview.world.graphic.Entity createEntity(String entityName, com.earthview.world.graphic.SceneManager.PrefabType ptype)
	{
		String entityNameParamValue = entityName;
		int ptypeParamValue = ptype.getValue();
		long returnValue = createEntity_EVString_PrefabType(this.nativeObject.pointer, entityNameParamValue, ptypeParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}
	native private long createEntity_EVString_PrefabType_NoVirtual(long pNativeObject, String entityName, int ptype);
	protected com.earthview.world.graphic.Entity createEntity_NoVirtual(String entityName, com.earthview.world.graphic.SceneManager.PrefabType ptype)
	{
		String entityNameParamValue = entityName;
		int ptypeParamValue = ptype.getValue();
		long returnValue = createEntity_EVString_PrefabType_NoVirtual(this.nativeObject.pointer, entityNameParamValue, ptypeParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}

	protected  long createEntity_PrefabType_callback(int ptype)
	{
		com.earthview.world.graphic.SceneManager.PrefabType ptypeParamValue = com.earthview.world.graphic.SceneManager.PrefabType.toEnum(ptype);
		com.earthview.world.graphic.Entity returnValue = createEntity(ptypeParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createEntity_PrefabType(long pNativeObject, int ptype);
	public com.earthview.world.graphic.Entity createEntity(com.earthview.world.graphic.SceneManager.PrefabType ptype)
	{
		int ptypeParamValue = ptype.getValue();
		long returnValue = createEntity_PrefabType(this.nativeObject.pointer, ptypeParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}
	native private long createEntity_PrefabType_NoVirtual(long pNativeObject, int ptype);
	protected com.earthview.world.graphic.Entity createEntity_NoVirtual(com.earthview.world.graphic.SceneManager.PrefabType ptype)
	{
		int ptypeParamValue = ptype.getValue();
		long returnValue = createEntity_PrefabType_NoVirtual(this.nativeObject.pointer, ptypeParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}

	protected  long getEntity_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.Entity returnValue = getEntity(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getEntity_EVString(long pNativeObject, String name);
	/**
	 * 获取给定名称的实体				
	 * @param name 实体名称
	 */
	public com.earthview.world.graphic.Entity getEntity(String name)
	{
		String nameParamValue = name;
		long returnValue = getEntity_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}
	native private long getEntity_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.Entity getEntity_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = getEntity_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Entity __returnValue = new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate, "CEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Entity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CEntity");
		}
		return __returnValue;
	}

	protected  boolean hasEntity_EVString_callback(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasEntity(nameParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean hasEntity_EVString(long pNativeObject, String name);
	/**
	 * 判断给定名称的实体是否存在				
	 * @param name 实体名称
	 */
	public boolean hasEntity(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasEntity_EVString(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}
	native private boolean hasEntity_EVString_NoVirtual(long pNativeObject, String name);
	protected boolean hasEntity_NoVirtual(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasEntity_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}

	protected  void destroyEntity_CEntity_callback(long ent)
	{
		com.earthview.world.graphic.Entity entParamValue = (ent == 0L ? null : new com.earthview.world.graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate));
		if(entParamValue != null)
		{
		entParamValue.setDelegate(true);
		entParamValue.setInstancePointer(new InstancePointer(ent));
		IClassFactory entParamValueClassFactory = GlobalClassFactoryMap.get(entParamValue.getCppInstanceTypeName());
		if (entParamValueClassFactory != null)
		{
			entParamValue.setDelegate(true);
			entParamValue = (com.earthview.world.graphic.Entity)entParamValueClassFactory.create();
			entParamValue.setDelegate(true);
			entParamValue.setInstancePointer(new InstancePointer(ent));
		}
		}
		destroyEntity(entParamValue);
	}

	native private void destroyEntity_CEntity(long pNativeObject, long ent);
	/**
	 * 销毁实体				
	 * @param  
	 */
	public void destroyEntity(com.earthview.world.graphic.Entity ent)
	{
		long entParamValue = (ent == null ? 0L : ent.nativeObject.pointer);
		destroyEntity_CEntity(this.nativeObject.pointer, entParamValue);
	}
	native private void destroyEntity_CEntity_NoVirtual(long pNativeObject, long ent);
	protected void destroyEntity_NoVirtual(com.earthview.world.graphic.Entity ent)
	{
		long entParamValue = (ent == null ? 0L : ent.nativeObject.pointer);
		destroyEntity_CEntity_NoVirtual(this.nativeObject.pointer, entParamValue);
	}

	protected  void destroyEntity_EVString_callback(String name)
	{
		String nameParamValue = name;
		destroyEntity(nameParamValue);
	}

	native private void destroyEntity_EVString(long pNativeObject, String name);
	public void destroyEntity(String name)
	{
		String nameParamValue = name;
		destroyEntity_EVString(this.nativeObject.pointer, nameParamValue);
	}
	native private void destroyEntity_EVString_NoVirtual(long pNativeObject, String name);
	protected void destroyEntity_NoVirtual(String name)
	{
		String nameParamValue = name;
		destroyEntity_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
	}

	protected  void destroyAllEntities_void_callback()
	{
		destroyAllEntities();
	}

	native private void destroyAllEntities_void(long pNativeObject);
	/**
	 * 销毁所有实体				
	 * @param  
	 */
	public void destroyAllEntities()
	{
		destroyAllEntities_void(this.nativeObject.pointer);
	}
	native private void destroyAllEntities_void_NoVirtual(long pNativeObject);
	protected void destroyAllEntities_NoVirtual()
	{
		destroyAllEntities_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  long createManualObject_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.ManualObject returnValue = createManualObject(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createManualObject_EVString(long pNativeObject, String name);
	public com.earthview.world.graphic.ManualObject createManualObject(String name)
	{
		String nameParamValue = name;
		long returnValue = createManualObject_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ManualObject __returnValue = new com.earthview.world.graphic.ManualObject(CreatedWhenConstruct.CWC_NotToCreate, "CManualObject");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ManualObject)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CManualObject");
		}
		return __returnValue;
	}
	native private long createManualObject_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.ManualObject createManualObject_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = createManualObject_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ManualObject __returnValue = new com.earthview.world.graphic.ManualObject(CreatedWhenConstruct.CWC_NotToCreate, "CManualObject");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ManualObject)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CManualObject");
		}
		return __returnValue;
	}

	protected  long createManualObject_void_callback()
	{
		com.earthview.world.graphic.ManualObject returnValue = createManualObject();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createManualObject_void(long pNativeObject);
	public com.earthview.world.graphic.ManualObject createManualObject()
	{
		long returnValue = createManualObject_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ManualObject __returnValue = new com.earthview.world.graphic.ManualObject(CreatedWhenConstruct.CWC_NotToCreate, "CManualObject");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ManualObject)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CManualObject");
		}
		return __returnValue;
	}
	native private long createManualObject_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.ManualObject createManualObject_NoVirtual()
	{
		long returnValue = createManualObject_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ManualObject __returnValue = new com.earthview.world.graphic.ManualObject(CreatedWhenConstruct.CWC_NotToCreate, "CManualObject");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ManualObject)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CManualObject");
		}
		return __returnValue;
	}

	protected  long getManualObject_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.ManualObject returnValue = getManualObject(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getManualObject_EVString(long pNativeObject, String name);
	public com.earthview.world.graphic.ManualObject getManualObject(String name)
	{
		String nameParamValue = name;
		long returnValue = getManualObject_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ManualObject __returnValue = new com.earthview.world.graphic.ManualObject(CreatedWhenConstruct.CWC_NotToCreate, "CManualObject");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ManualObject)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CManualObject");
		}
		return __returnValue;
	}
	native private long getManualObject_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.ManualObject getManualObject_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = getManualObject_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ManualObject __returnValue = new com.earthview.world.graphic.ManualObject(CreatedWhenConstruct.CWC_NotToCreate, "CManualObject");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ManualObject)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CManualObject");
		}
		return __returnValue;
	}

	protected  boolean hasManualObject_EVString_callback(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasManualObject(nameParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean hasManualObject_EVString(long pNativeObject, String name);
	public boolean hasManualObject(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasManualObject_EVString(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}
	native private boolean hasManualObject_EVString_NoVirtual(long pNativeObject, String name);
	protected boolean hasManualObject_NoVirtual(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasManualObject_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}

	protected  void destroyManualObject_CManualObject_callback(long obj)
	{
		com.earthview.world.graphic.ManualObject objParamValue = (obj == 0L ? null : new com.earthview.world.graphic.ManualObject(CreatedWhenConstruct.CWC_NotToCreate));
		if(objParamValue != null)
		{
		objParamValue.setDelegate(true);
		objParamValue.setInstancePointer(new InstancePointer(obj));
		IClassFactory objParamValueClassFactory = GlobalClassFactoryMap.get(objParamValue.getCppInstanceTypeName());
		if (objParamValueClassFactory != null)
		{
			objParamValue.setDelegate(true);
			objParamValue = (com.earthview.world.graphic.ManualObject)objParamValueClassFactory.create();
			objParamValue.setDelegate(true);
			objParamValue.setInstancePointer(new InstancePointer(obj));
		}
		}
		destroyManualObject(objParamValue);
	}

	native private void destroyManualObject_CManualObject(long pNativeObject, long obj);
	public void destroyManualObject(com.earthview.world.graphic.ManualObject obj)
	{
		long objParamValue = (obj == null ? 0L : obj.nativeObject.pointer);
		destroyManualObject_CManualObject(this.nativeObject.pointer, objParamValue);
	}
	native private void destroyManualObject_CManualObject_NoVirtual(long pNativeObject, long obj);
	protected void destroyManualObject_NoVirtual(com.earthview.world.graphic.ManualObject obj)
	{
		long objParamValue = (obj == null ? 0L : obj.nativeObject.pointer);
		destroyManualObject_CManualObject_NoVirtual(this.nativeObject.pointer, objParamValue);
	}

	protected  void destroyManualObject_EVString_callback(String name)
	{
		String nameParamValue = name;
		destroyManualObject(nameParamValue);
	}

	native private void destroyManualObject_EVString(long pNativeObject, String name);
	public void destroyManualObject(String name)
	{
		String nameParamValue = name;
		destroyManualObject_EVString(this.nativeObject.pointer, nameParamValue);
	}
	native private void destroyManualObject_EVString_NoVirtual(long pNativeObject, String name);
	protected void destroyManualObject_NoVirtual(String name)
	{
		String nameParamValue = name;
		destroyManualObject_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
	}

	protected  void destroyAllManualObjects_void_callback()
	{
		destroyAllManualObjects();
	}

	native private void destroyAllManualObjects_void(long pNativeObject);
	public void destroyAllManualObjects()
	{
		destroyAllManualObjects_void(this.nativeObject.pointer);
	}
	native private void destroyAllManualObjects_void_NoVirtual(long pNativeObject);
	protected void destroyAllManualObjects_NoVirtual()
	{
		destroyAllManualObjects_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  boolean usingWebMercator_void_callback()
	{
		boolean returnValue = usingWebMercator();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean usingWebMercator_void(long pNativeObject);
	public boolean usingWebMercator()
	{
		boolean returnValue = usingWebMercator_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean usingWebMercator_void_NoVirtual(long pNativeObject);
	protected boolean usingWebMercator_NoVirtual()
	{
		boolean returnValue = usingWebMercator_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  long createBillboardChain_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.BillboardChain returnValue = createBillboardChain(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createBillboardChain_EVString(long pNativeObject, String name);
	public com.earthview.world.graphic.BillboardChain createBillboardChain(String name)
	{
		String nameParamValue = name;
		long returnValue = createBillboardChain_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.BillboardChain __returnValue = new com.earthview.world.graphic.BillboardChain(CreatedWhenConstruct.CWC_NotToCreate, "CBillboardChain");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.BillboardChain)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CBillboardChain");
		}
		return __returnValue;
	}
	native private long createBillboardChain_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.BillboardChain createBillboardChain_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = createBillboardChain_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.BillboardChain __returnValue = new com.earthview.world.graphic.BillboardChain(CreatedWhenConstruct.CWC_NotToCreate, "CBillboardChain");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.BillboardChain)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CBillboardChain");
		}
		return __returnValue;
	}

	protected  long createBillboardChain_void_callback()
	{
		com.earthview.world.graphic.BillboardChain returnValue = createBillboardChain();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createBillboardChain_void(long pNativeObject);
	public com.earthview.world.graphic.BillboardChain createBillboardChain()
	{
		long returnValue = createBillboardChain_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.BillboardChain __returnValue = new com.earthview.world.graphic.BillboardChain(CreatedWhenConstruct.CWC_NotToCreate, "CBillboardChain");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.BillboardChain)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CBillboardChain");
		}
		return __returnValue;
	}
	native private long createBillboardChain_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.BillboardChain createBillboardChain_NoVirtual()
	{
		long returnValue = createBillboardChain_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.BillboardChain __returnValue = new com.earthview.world.graphic.BillboardChain(CreatedWhenConstruct.CWC_NotToCreate, "CBillboardChain");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.BillboardChain)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CBillboardChain");
		}
		return __returnValue;
	}

	protected  long getBillboardChain_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.BillboardChain returnValue = getBillboardChain(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getBillboardChain_EVString(long pNativeObject, String name);
	public com.earthview.world.graphic.BillboardChain getBillboardChain(String name)
	{
		String nameParamValue = name;
		long returnValue = getBillboardChain_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.BillboardChain __returnValue = new com.earthview.world.graphic.BillboardChain(CreatedWhenConstruct.CWC_NotToCreate, "CBillboardChain");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.BillboardChain)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CBillboardChain");
		}
		return __returnValue;
	}
	native private long getBillboardChain_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.BillboardChain getBillboardChain_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = getBillboardChain_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.BillboardChain __returnValue = new com.earthview.world.graphic.BillboardChain(CreatedWhenConstruct.CWC_NotToCreate, "CBillboardChain");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.BillboardChain)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CBillboardChain");
		}
		return __returnValue;
	}

	protected  boolean hasBillboardChain_EVString_callback(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasBillboardChain(nameParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean hasBillboardChain_EVString(long pNativeObject, String name);
	public boolean hasBillboardChain(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasBillboardChain_EVString(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}
	native private boolean hasBillboardChain_EVString_NoVirtual(long pNativeObject, String name);
	protected boolean hasBillboardChain_NoVirtual(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasBillboardChain_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}

	protected  void destroyBillboardChain_CBillboardChain_callback(long obj)
	{
		com.earthview.world.graphic.BillboardChain objParamValue = (obj == 0L ? null : new com.earthview.world.graphic.BillboardChain(CreatedWhenConstruct.CWC_NotToCreate));
		if(objParamValue != null)
		{
		objParamValue.setDelegate(true);
		objParamValue.setInstancePointer(new InstancePointer(obj));
		IClassFactory objParamValueClassFactory = GlobalClassFactoryMap.get(objParamValue.getCppInstanceTypeName());
		if (objParamValueClassFactory != null)
		{
			objParamValue.setDelegate(true);
			objParamValue = (com.earthview.world.graphic.BillboardChain)objParamValueClassFactory.create();
			objParamValue.setDelegate(true);
			objParamValue.setInstancePointer(new InstancePointer(obj));
		}
		}
		destroyBillboardChain(objParamValue);
	}

	native private void destroyBillboardChain_CBillboardChain(long pNativeObject, long obj);
	public void destroyBillboardChain(com.earthview.world.graphic.BillboardChain obj)
	{
		long objParamValue = (obj == null ? 0L : obj.nativeObject.pointer);
		destroyBillboardChain_CBillboardChain(this.nativeObject.pointer, objParamValue);
	}
	native private void destroyBillboardChain_CBillboardChain_NoVirtual(long pNativeObject, long obj);
	protected void destroyBillboardChain_NoVirtual(com.earthview.world.graphic.BillboardChain obj)
	{
		long objParamValue = (obj == null ? 0L : obj.nativeObject.pointer);
		destroyBillboardChain_CBillboardChain_NoVirtual(this.nativeObject.pointer, objParamValue);
	}

	protected  void destroyBillboardChain_EVString_callback(String name)
	{
		String nameParamValue = name;
		destroyBillboardChain(nameParamValue);
	}

	native private void destroyBillboardChain_EVString(long pNativeObject, String name);
	public void destroyBillboardChain(String name)
	{
		String nameParamValue = name;
		destroyBillboardChain_EVString(this.nativeObject.pointer, nameParamValue);
	}
	native private void destroyBillboardChain_EVString_NoVirtual(long pNativeObject, String name);
	protected void destroyBillboardChain_NoVirtual(String name)
	{
		String nameParamValue = name;
		destroyBillboardChain_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
	}

	protected  void destroyAllBillboardChains_void_callback()
	{
		destroyAllBillboardChains();
	}

	native private void destroyAllBillboardChains_void(long pNativeObject);
	public void destroyAllBillboardChains()
	{
		destroyAllBillboardChains_void(this.nativeObject.pointer);
	}
	native private void destroyAllBillboardChains_void_NoVirtual(long pNativeObject);
	protected void destroyAllBillboardChains_NoVirtual()
	{
		destroyAllBillboardChains_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  long createRibbonTrail_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.RibbonTrail returnValue = createRibbonTrail(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createRibbonTrail_EVString(long pNativeObject, String name);
	public com.earthview.world.graphic.RibbonTrail createRibbonTrail(String name)
	{
		String nameParamValue = name;
		long returnValue = createRibbonTrail_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.RibbonTrail __returnValue = new com.earthview.world.graphic.RibbonTrail(CreatedWhenConstruct.CWC_NotToCreate, "CRibbonTrail");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.RibbonTrail)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CRibbonTrail");
		}
		return __returnValue;
	}
	native private long createRibbonTrail_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.RibbonTrail createRibbonTrail_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = createRibbonTrail_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.RibbonTrail __returnValue = new com.earthview.world.graphic.RibbonTrail(CreatedWhenConstruct.CWC_NotToCreate, "CRibbonTrail");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.RibbonTrail)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CRibbonTrail");
		}
		return __returnValue;
	}

	protected  long createRibbonTrail_void_callback()
	{
		com.earthview.world.graphic.RibbonTrail returnValue = createRibbonTrail();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createRibbonTrail_void(long pNativeObject);
	public com.earthview.world.graphic.RibbonTrail createRibbonTrail()
	{
		long returnValue = createRibbonTrail_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.RibbonTrail __returnValue = new com.earthview.world.graphic.RibbonTrail(CreatedWhenConstruct.CWC_NotToCreate, "CRibbonTrail");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.RibbonTrail)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CRibbonTrail");
		}
		return __returnValue;
	}
	native private long createRibbonTrail_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.RibbonTrail createRibbonTrail_NoVirtual()
	{
		long returnValue = createRibbonTrail_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.RibbonTrail __returnValue = new com.earthview.world.graphic.RibbonTrail(CreatedWhenConstruct.CWC_NotToCreate, "CRibbonTrail");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.RibbonTrail)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CRibbonTrail");
		}
		return __returnValue;
	}

	protected  long getRibbonTrail_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.RibbonTrail returnValue = getRibbonTrail(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getRibbonTrail_EVString(long pNativeObject, String name);
	public com.earthview.world.graphic.RibbonTrail getRibbonTrail(String name)
	{
		String nameParamValue = name;
		long returnValue = getRibbonTrail_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.RibbonTrail __returnValue = new com.earthview.world.graphic.RibbonTrail(CreatedWhenConstruct.CWC_NotToCreate, "CRibbonTrail");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.RibbonTrail)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CRibbonTrail");
		}
		return __returnValue;
	}
	native private long getRibbonTrail_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.RibbonTrail getRibbonTrail_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = getRibbonTrail_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.RibbonTrail __returnValue = new com.earthview.world.graphic.RibbonTrail(CreatedWhenConstruct.CWC_NotToCreate, "CRibbonTrail");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.RibbonTrail)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CRibbonTrail");
		}
		return __returnValue;
	}

	protected  boolean hasRibbonTrail_EVString_callback(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasRibbonTrail(nameParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean hasRibbonTrail_EVString(long pNativeObject, String name);
	public boolean hasRibbonTrail(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasRibbonTrail_EVString(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}
	native private boolean hasRibbonTrail_EVString_NoVirtual(long pNativeObject, String name);
	protected boolean hasRibbonTrail_NoVirtual(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasRibbonTrail_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}

	protected  void destroyRibbonTrail_CRibbonTrail_callback(long obj)
	{
		com.earthview.world.graphic.RibbonTrail objParamValue = (obj == 0L ? null : new com.earthview.world.graphic.RibbonTrail(CreatedWhenConstruct.CWC_NotToCreate));
		if(objParamValue != null)
		{
		objParamValue.setDelegate(true);
		objParamValue.setInstancePointer(new InstancePointer(obj));
		IClassFactory objParamValueClassFactory = GlobalClassFactoryMap.get(objParamValue.getCppInstanceTypeName());
		if (objParamValueClassFactory != null)
		{
			objParamValue.setDelegate(true);
			objParamValue = (com.earthview.world.graphic.RibbonTrail)objParamValueClassFactory.create();
			objParamValue.setDelegate(true);
			objParamValue.setInstancePointer(new InstancePointer(obj));
		}
		}
		destroyRibbonTrail(objParamValue);
	}

	native private void destroyRibbonTrail_CRibbonTrail(long pNativeObject, long obj);
	public void destroyRibbonTrail(com.earthview.world.graphic.RibbonTrail obj)
	{
		long objParamValue = (obj == null ? 0L : obj.nativeObject.pointer);
		destroyRibbonTrail_CRibbonTrail(this.nativeObject.pointer, objParamValue);
	}
	native private void destroyRibbonTrail_CRibbonTrail_NoVirtual(long pNativeObject, long obj);
	protected void destroyRibbonTrail_NoVirtual(com.earthview.world.graphic.RibbonTrail obj)
	{
		long objParamValue = (obj == null ? 0L : obj.nativeObject.pointer);
		destroyRibbonTrail_CRibbonTrail_NoVirtual(this.nativeObject.pointer, objParamValue);
	}

	protected  void destroyRibbonTrail_EVString_callback(String name)
	{
		String nameParamValue = name;
		destroyRibbonTrail(nameParamValue);
	}

	native private void destroyRibbonTrail_EVString(long pNativeObject, String name);
	public void destroyRibbonTrail(String name)
	{
		String nameParamValue = name;
		destroyRibbonTrail_EVString(this.nativeObject.pointer, nameParamValue);
	}
	native private void destroyRibbonTrail_EVString_NoVirtual(long pNativeObject, String name);
	protected void destroyRibbonTrail_NoVirtual(String name)
	{
		String nameParamValue = name;
		destroyRibbonTrail_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
	}

	protected  void destroyAllRibbonTrails_void_callback()
	{
		destroyAllRibbonTrails();
	}

	native private void destroyAllRibbonTrails_void(long pNativeObject);
	public void destroyAllRibbonTrails()
	{
		destroyAllRibbonTrails_void(this.nativeObject.pointer);
	}
	native private void destroyAllRibbonTrails_void_NoVirtual(long pNativeObject);
	protected void destroyAllRibbonTrails_NoVirtual()
	{
		destroyAllRibbonTrails_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  long createParticleSystem_EVString_EVString_callback(String name, String templateName)
	{
		String nameParamValue = name;
		String templateNameParamValue = templateName;
		com.earthview.world.graphic.ParticleSystem returnValue = createParticleSystem(nameParamValue, templateNameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createParticleSystem_EVString_EVString(long pNativeObject, String name, String templateName);
	public com.earthview.world.graphic.ParticleSystem createParticleSystem(String name, String templateName)
	{
		String nameParamValue = name;
		String templateNameParamValue = templateName;
		long returnValue = createParticleSystem_EVString_EVString(this.nativeObject.pointer, nameParamValue, templateNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ParticleSystem __returnValue = new com.earthview.world.graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate, "CParticleSystem");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ParticleSystem)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CParticleSystem");
		}
		return __returnValue;
	}
	native private long createParticleSystem_EVString_EVString_NoVirtual(long pNativeObject, String name, String templateName);
	protected com.earthview.world.graphic.ParticleSystem createParticleSystem_NoVirtual(String name, String templateName)
	{
		String nameParamValue = name;
		String templateNameParamValue = templateName;
		long returnValue = createParticleSystem_EVString_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue, templateNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ParticleSystem __returnValue = new com.earthview.world.graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate, "CParticleSystem");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ParticleSystem)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CParticleSystem");
		}
		return __returnValue;
	}

	protected  long createParticleSystem_EVString_ev_size_t_EVString_callback(String name, long quota, String resourceGroup)
	{
		String nameParamValue = name;
		long quotaParamValue = quota;
		String resourceGroupParamValue = resourceGroup;
		com.earthview.world.graphic.ParticleSystem returnValue = createParticleSystem(nameParamValue, quotaParamValue, resourceGroupParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createParticleSystem_EVString_ev_size_t_EVString(long pNativeObject, String name, long quota, String resourceGroup);
	public com.earthview.world.graphic.ParticleSystem createParticleSystem(String name, long quota, String resourceGroup)
	{
		String nameParamValue = name;
		long quotaParamValue = quota;
		String resourceGroupParamValue = resourceGroup;
		long returnValue = createParticleSystem_EVString_ev_size_t_EVString(this.nativeObject.pointer, nameParamValue, quotaParamValue, resourceGroupParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ParticleSystem __returnValue = new com.earthview.world.graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate, "CParticleSystem");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ParticleSystem)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CParticleSystem");
		}
		return __returnValue;
	}
	native private long createParticleSystem_EVString_ev_size_t_EVString_NoVirtual(long pNativeObject, String name, long quota, String resourceGroup);
	protected com.earthview.world.graphic.ParticleSystem createParticleSystem_NoVirtual(String name, long quota, String resourceGroup)
	{
		String nameParamValue = name;
		long quotaParamValue = quota;
		String resourceGroupParamValue = resourceGroup;
		long returnValue = createParticleSystem_EVString_ev_size_t_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue, quotaParamValue, resourceGroupParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ParticleSystem __returnValue = new com.earthview.world.graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate, "CParticleSystem");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ParticleSystem)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CParticleSystem");
		}
		return __returnValue;
	}

	protected  long createParticleSystem_EVString_ev_size_t_callback(String name, long quota)
	{
		String nameParamValue = name;
		long quotaParamValue = quota;
		com.earthview.world.graphic.ParticleSystem returnValue = createParticleSystem(nameParamValue, quotaParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createParticleSystem_EVString_ev_size_t(long pNativeObject, String name, long quota);
	public com.earthview.world.graphic.ParticleSystem createParticleSystem(String name, long quota)
	{
		String nameParamValue = name;
		long quotaParamValue = quota;
		long returnValue = createParticleSystem_EVString_ev_size_t(this.nativeObject.pointer, nameParamValue, quotaParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ParticleSystem __returnValue = new com.earthview.world.graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate, "CParticleSystem");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ParticleSystem)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CParticleSystem");
		}
		return __returnValue;
	}
	native private long createParticleSystem_EVString_ev_size_t_NoVirtual(long pNativeObject, String name, long quota);
	protected com.earthview.world.graphic.ParticleSystem createParticleSystem_NoVirtual(String name, long quota)
	{
		String nameParamValue = name;
		long quotaParamValue = quota;
		long returnValue = createParticleSystem_EVString_ev_size_t_NoVirtual(this.nativeObject.pointer, nameParamValue, quotaParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ParticleSystem __returnValue = new com.earthview.world.graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate, "CParticleSystem");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ParticleSystem)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CParticleSystem");
		}
		return __returnValue;
	}

	protected  long createParticleSystem_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.ParticleSystem returnValue = createParticleSystem(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createParticleSystem_EVString(long pNativeObject, String name);
	public com.earthview.world.graphic.ParticleSystem createParticleSystem(String name)
	{
		String nameParamValue = name;
		long returnValue = createParticleSystem_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ParticleSystem __returnValue = new com.earthview.world.graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate, "CParticleSystem");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ParticleSystem)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CParticleSystem");
		}
		return __returnValue;
	}
	native private long createParticleSystem_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.ParticleSystem createParticleSystem_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = createParticleSystem_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ParticleSystem __returnValue = new com.earthview.world.graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate, "CParticleSystem");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ParticleSystem)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CParticleSystem");
		}
		return __returnValue;
	}

	protected  long createParticleSystem_ev_size_t_EVString_callback(long quota, String resourceGroup)
	{
		long quotaParamValue = quota;
		String resourceGroupParamValue = resourceGroup;
		com.earthview.world.graphic.ParticleSystem returnValue = createParticleSystem(quotaParamValue, resourceGroupParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createParticleSystem_ev_size_t_EVString(long pNativeObject, long quota, String resourceGroup);
	public com.earthview.world.graphic.ParticleSystem createParticleSystem(long quota, String resourceGroup)
	{
		long quotaParamValue = quota;
		String resourceGroupParamValue = resourceGroup;
		long returnValue = createParticleSystem_ev_size_t_EVString(this.nativeObject.pointer, quotaParamValue, resourceGroupParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ParticleSystem __returnValue = new com.earthview.world.graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate, "CParticleSystem");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ParticleSystem)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CParticleSystem");
		}
		return __returnValue;
	}
	native private long createParticleSystem_ev_size_t_EVString_NoVirtual(long pNativeObject, long quota, String resourceGroup);
	protected com.earthview.world.graphic.ParticleSystem createParticleSystem_NoVirtual(long quota, String resourceGroup)
	{
		long quotaParamValue = quota;
		String resourceGroupParamValue = resourceGroup;
		long returnValue = createParticleSystem_ev_size_t_EVString_NoVirtual(this.nativeObject.pointer, quotaParamValue, resourceGroupParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ParticleSystem __returnValue = new com.earthview.world.graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate, "CParticleSystem");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ParticleSystem)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CParticleSystem");
		}
		return __returnValue;
	}

	protected  long createParticleSystem_ev_size_t_callback(long quota)
	{
		long quotaParamValue = quota;
		com.earthview.world.graphic.ParticleSystem returnValue = createParticleSystem(quotaParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createParticleSystem_ev_size_t(long pNativeObject, long quota);
	public com.earthview.world.graphic.ParticleSystem createParticleSystem(long quota)
	{
		long quotaParamValue = quota;
		long returnValue = createParticleSystem_ev_size_t(this.nativeObject.pointer, quotaParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ParticleSystem __returnValue = new com.earthview.world.graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate, "CParticleSystem");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ParticleSystem)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CParticleSystem");
		}
		return __returnValue;
	}
	native private long createParticleSystem_ev_size_t_NoVirtual(long pNativeObject, long quota);
	protected com.earthview.world.graphic.ParticleSystem createParticleSystem_NoVirtual(long quota)
	{
		long quotaParamValue = quota;
		long returnValue = createParticleSystem_ev_size_t_NoVirtual(this.nativeObject.pointer, quotaParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ParticleSystem __returnValue = new com.earthview.world.graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate, "CParticleSystem");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ParticleSystem)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CParticleSystem");
		}
		return __returnValue;
	}

	protected  long createParticleSystem_void_callback()
	{
		com.earthview.world.graphic.ParticleSystem returnValue = createParticleSystem();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createParticleSystem_void(long pNativeObject);
	public com.earthview.world.graphic.ParticleSystem createParticleSystem()
	{
		long returnValue = createParticleSystem_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ParticleSystem __returnValue = new com.earthview.world.graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate, "CParticleSystem");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ParticleSystem)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CParticleSystem");
		}
		return __returnValue;
	}
	native private long createParticleSystem_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.ParticleSystem createParticleSystem_NoVirtual()
	{
		long returnValue = createParticleSystem_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ParticleSystem __returnValue = new com.earthview.world.graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate, "CParticleSystem");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ParticleSystem)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CParticleSystem");
		}
		return __returnValue;
	}

	protected  long getParticleSystem_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.ParticleSystem returnValue = getParticleSystem(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getParticleSystem_EVString(long pNativeObject, String name);
	public com.earthview.world.graphic.ParticleSystem getParticleSystem(String name)
	{
		String nameParamValue = name;
		long returnValue = getParticleSystem_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ParticleSystem __returnValue = new com.earthview.world.graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate, "CParticleSystem");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ParticleSystem)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CParticleSystem");
		}
		return __returnValue;
	}
	native private long getParticleSystem_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.ParticleSystem getParticleSystem_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = getParticleSystem_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.ParticleSystem __returnValue = new com.earthview.world.graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate, "CParticleSystem");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ParticleSystem)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CParticleSystem");
		}
		return __returnValue;
	}

	protected  boolean hasParticleSystem_EVString_callback(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasParticleSystem(nameParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean hasParticleSystem_EVString(long pNativeObject, String name);
	public boolean hasParticleSystem(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasParticleSystem_EVString(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}
	native private boolean hasParticleSystem_EVString_NoVirtual(long pNativeObject, String name);
	protected boolean hasParticleSystem_NoVirtual(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasParticleSystem_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}

	protected  void destroyParticleSystem_CParticleSystem_callback(long obj)
	{
		com.earthview.world.graphic.ParticleSystem objParamValue = (obj == 0L ? null : new com.earthview.world.graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate));
		if(objParamValue != null)
		{
		objParamValue.setDelegate(true);
		objParamValue.setInstancePointer(new InstancePointer(obj));
		IClassFactory objParamValueClassFactory = GlobalClassFactoryMap.get(objParamValue.getCppInstanceTypeName());
		if (objParamValueClassFactory != null)
		{
			objParamValue.setDelegate(true);
			objParamValue = (com.earthview.world.graphic.ParticleSystem)objParamValueClassFactory.create();
			objParamValue.setDelegate(true);
			objParamValue.setInstancePointer(new InstancePointer(obj));
		}
		}
		destroyParticleSystem(objParamValue);
	}

	native private void destroyParticleSystem_CParticleSystem(long pNativeObject, long obj);
	public void destroyParticleSystem(com.earthview.world.graphic.ParticleSystem obj)
	{
		long objParamValue = (obj == null ? 0L : obj.nativeObject.pointer);
		destroyParticleSystem_CParticleSystem(this.nativeObject.pointer, objParamValue);
	}
	native private void destroyParticleSystem_CParticleSystem_NoVirtual(long pNativeObject, long obj);
	protected void destroyParticleSystem_NoVirtual(com.earthview.world.graphic.ParticleSystem obj)
	{
		long objParamValue = (obj == null ? 0L : obj.nativeObject.pointer);
		destroyParticleSystem_CParticleSystem_NoVirtual(this.nativeObject.pointer, objParamValue);
	}

	protected  void destroyParticleSystem_EVString_callback(String name)
	{
		String nameParamValue = name;
		destroyParticleSystem(nameParamValue);
	}

	native private void destroyParticleSystem_EVString(long pNativeObject, String name);
	public void destroyParticleSystem(String name)
	{
		String nameParamValue = name;
		destroyParticleSystem_EVString(this.nativeObject.pointer, nameParamValue);
	}
	native private void destroyParticleSystem_EVString_NoVirtual(long pNativeObject, String name);
	protected void destroyParticleSystem_NoVirtual(String name)
	{
		String nameParamValue = name;
		destroyParticleSystem_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
	}

	protected  void destroyAllParticleSystems_void_callback()
	{
		destroyAllParticleSystems();
	}

	native private void destroyAllParticleSystems_void(long pNativeObject);
	public void destroyAllParticleSystems()
	{
		destroyAllParticleSystems_void(this.nativeObject.pointer);
	}
	native private void destroyAllParticleSystems_void_NoVirtual(long pNativeObject);
	protected void destroyAllParticleSystems_NoVirtual()
	{
		destroyAllParticleSystems_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void clearScene_void_callback()
	{
		clearScene();
	}

	native private void clearScene_void(long pNativeObject);
	/**
	 * 清空场景清空场景中场景节点，光源等
	 * @param  
	 */
	public void clearScene()
	{
		clearScene_void(this.nativeObject.pointer);
	}
	native private void clearScene_void_NoVirtual(long pNativeObject);
	protected void clearScene_NoVirtual()
	{
		clearScene_void_NoVirtual(this.nativeObject.pointer);
	}

	native private void setAmbientLight_CColourValue(long pNativeObject, long colour);
	/**
	 * 设置环境光缺省的环境光是CColourValue::Black
	 * @param colour 
	 */
	public void setAmbientLight(com.earthview.world.graphic.ColourValue colour)
	{
		long colourParamValue = colour.nativeObject.pointer;
		setAmbientLight_CColourValue(this.nativeObject.pointer, colourParamValue);
	}
	native private long getAmbientLight_void(long pNativeObject);
	/**
	 * 获取环境光
	 * @param  
	 */
	public com.earthview.world.graphic.ColourValue getAmbientLight()
	{
		long returnValue = getAmbientLight_void(this.nativeObject.pointer);
		com.earthview.world.graphic.ColourValue __returnValue = new com.earthview.world.graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate, "CColourValue");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ColourValue)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CColourValue");
		}
		return __returnValue;
	}
	protected  void prepareWorldGeometry_EVString_callback(String filename)
	{
		String filenameParamValue = filename;
		prepareWorldGeometry(filenameParamValue);
	}

	native private void prepareWorldGeometry_EVString(long pNativeObject, String filename);
	public void prepareWorldGeometry(String filename)
	{
		String filenameParamValue = filename;
		prepareWorldGeometry_EVString(this.nativeObject.pointer, filenameParamValue);
	}
	native private void prepareWorldGeometry_EVString_NoVirtual(long pNativeObject, String filename);
	protected void prepareWorldGeometry_NoVirtual(String filename)
	{
		String filenameParamValue = filename;
		prepareWorldGeometry_EVString_NoVirtual(this.nativeObject.pointer, filenameParamValue);
	}

	protected  void prepareWorldGeometry_DataStreamPtr_EVString_callback(long stream, String typeName)
	{
		com.earthview.world.core.DataStreamPtr streamParamValue = new com.earthview.world.core.DataStreamPtr(CreatedWhenConstruct.CWC_NotToCreate);
		streamParamValue.setDelegate(true);
		streamParamValue.setInstancePointer(new InstancePointer(stream));
		IClassFactory streamParamValueClassFactory = GlobalClassFactoryMap.get(streamParamValue.getCppInstanceTypeName());
		if (streamParamValueClassFactory != null)
		{
			streamParamValue.setDelegate(true);
			streamParamValue = (com.earthview.world.core.DataStreamPtr)streamParamValueClassFactory.create();
			streamParamValue.setDelegate(true);
			streamParamValue.setInstancePointer(new InstancePointer(stream));
		}
		String typeNameParamValue = typeName;
		prepareWorldGeometry(streamParamValue, typeNameParamValue);
	}

	native private void prepareWorldGeometry_DataStreamPtr_EVString(long pNativeObject, long stream, String typeName);
	public void prepareWorldGeometry(com.earthview.world.core.DataStreamPtr stream, String typeName)
	{
		long streamParamValue = stream.nativeObject.pointer;
		String typeNameParamValue = typeName;
		prepareWorldGeometry_DataStreamPtr_EVString(this.nativeObject.pointer, streamParamValue, typeNameParamValue);
	}
	native private void prepareWorldGeometry_DataStreamPtr_EVString_NoVirtual(long pNativeObject, long stream, String typeName);
	protected void prepareWorldGeometry_NoVirtual(com.earthview.world.core.DataStreamPtr stream, String typeName)
	{
		long streamParamValue = stream.nativeObject.pointer;
		String typeNameParamValue = typeName;
		prepareWorldGeometry_DataStreamPtr_EVString_NoVirtual(this.nativeObject.pointer, streamParamValue, typeNameParamValue);
	}

	protected  void prepareWorldGeometry_DataStreamPtr_callback(long stream)
	{
		com.earthview.world.core.DataStreamPtr streamParamValue = new com.earthview.world.core.DataStreamPtr(CreatedWhenConstruct.CWC_NotToCreate);
		streamParamValue.setDelegate(true);
		streamParamValue.setInstancePointer(new InstancePointer(stream));
		IClassFactory streamParamValueClassFactory = GlobalClassFactoryMap.get(streamParamValue.getCppInstanceTypeName());
		if (streamParamValueClassFactory != null)
		{
			streamParamValue.setDelegate(true);
			streamParamValue = (com.earthview.world.core.DataStreamPtr)streamParamValueClassFactory.create();
			streamParamValue.setDelegate(true);
			streamParamValue.setInstancePointer(new InstancePointer(stream));
		}
		prepareWorldGeometry(streamParamValue);
	}

	native private void prepareWorldGeometry_DataStreamPtr(long pNativeObject, long stream);
	public void prepareWorldGeometry(com.earthview.world.core.DataStreamPtr stream)
	{
		long streamParamValue = stream.nativeObject.pointer;
		prepareWorldGeometry_DataStreamPtr(this.nativeObject.pointer, streamParamValue);
	}
	native private void prepareWorldGeometry_DataStreamPtr_NoVirtual(long pNativeObject, long stream);
	protected void prepareWorldGeometry_NoVirtual(com.earthview.world.core.DataStreamPtr stream)
	{
		long streamParamValue = stream.nativeObject.pointer;
		prepareWorldGeometry_DataStreamPtr_NoVirtual(this.nativeObject.pointer, streamParamValue);
	}

	protected  void setWorldGeometry_EVString_callback(String filename)
	{
		String filenameParamValue = filename;
		setWorldGeometry(filenameParamValue);
	}

	native private void setWorldGeometry_EVString(long pNativeObject, String filename);
	public void setWorldGeometry(String filename)
	{
		String filenameParamValue = filename;
		setWorldGeometry_EVString(this.nativeObject.pointer, filenameParamValue);
	}
	native private void setWorldGeometry_EVString_NoVirtual(long pNativeObject, String filename);
	protected void setWorldGeometry_NoVirtual(String filename)
	{
		String filenameParamValue = filename;
		setWorldGeometry_EVString_NoVirtual(this.nativeObject.pointer, filenameParamValue);
	}

	protected  void setWorldGeometry_DataStreamPtr_EVString_callback(long stream, String typeName)
	{
		com.earthview.world.core.DataStreamPtr streamParamValue = new com.earthview.world.core.DataStreamPtr(CreatedWhenConstruct.CWC_NotToCreate);
		streamParamValue.setDelegate(true);
		streamParamValue.setInstancePointer(new InstancePointer(stream));
		IClassFactory streamParamValueClassFactory = GlobalClassFactoryMap.get(streamParamValue.getCppInstanceTypeName());
		if (streamParamValueClassFactory != null)
		{
			streamParamValue.setDelegate(true);
			streamParamValue = (com.earthview.world.core.DataStreamPtr)streamParamValueClassFactory.create();
			streamParamValue.setDelegate(true);
			streamParamValue.setInstancePointer(new InstancePointer(stream));
		}
		String typeNameParamValue = typeName;
		setWorldGeometry(streamParamValue, typeNameParamValue);
	}

	native private void setWorldGeometry_DataStreamPtr_EVString(long pNativeObject, long stream, String typeName);
	public void setWorldGeometry(com.earthview.world.core.DataStreamPtr stream, String typeName)
	{
		long streamParamValue = stream.nativeObject.pointer;
		String typeNameParamValue = typeName;
		setWorldGeometry_DataStreamPtr_EVString(this.nativeObject.pointer, streamParamValue, typeNameParamValue);
	}
	native private void setWorldGeometry_DataStreamPtr_EVString_NoVirtual(long pNativeObject, long stream, String typeName);
	protected void setWorldGeometry_NoVirtual(com.earthview.world.core.DataStreamPtr stream, String typeName)
	{
		long streamParamValue = stream.nativeObject.pointer;
		String typeNameParamValue = typeName;
		setWorldGeometry_DataStreamPtr_EVString_NoVirtual(this.nativeObject.pointer, streamParamValue, typeNameParamValue);
	}

	protected  void setWorldGeometry_DataStreamPtr_callback(long stream)
	{
		com.earthview.world.core.DataStreamPtr streamParamValue = new com.earthview.world.core.DataStreamPtr(CreatedWhenConstruct.CWC_NotToCreate);
		streamParamValue.setDelegate(true);
		streamParamValue.setInstancePointer(new InstancePointer(stream));
		IClassFactory streamParamValueClassFactory = GlobalClassFactoryMap.get(streamParamValue.getCppInstanceTypeName());
		if (streamParamValueClassFactory != null)
		{
			streamParamValue.setDelegate(true);
			streamParamValue = (com.earthview.world.core.DataStreamPtr)streamParamValueClassFactory.create();
			streamParamValue.setDelegate(true);
			streamParamValue.setInstancePointer(new InstancePointer(stream));
		}
		setWorldGeometry(streamParamValue);
	}

	native private void setWorldGeometry_DataStreamPtr(long pNativeObject, long stream);
	public void setWorldGeometry(com.earthview.world.core.DataStreamPtr stream)
	{
		long streamParamValue = stream.nativeObject.pointer;
		setWorldGeometry_DataStreamPtr(this.nativeObject.pointer, streamParamValue);
	}
	native private void setWorldGeometry_DataStreamPtr_NoVirtual(long pNativeObject, long stream);
	protected void setWorldGeometry_NoVirtual(com.earthview.world.core.DataStreamPtr stream)
	{
		long streamParamValue = stream.nativeObject.pointer;
		setWorldGeometry_DataStreamPtr_NoVirtual(this.nativeObject.pointer, streamParamValue);
	}

	protected  long estimateWorldGeometry_EVString_callback(String filename)
	{
		String filenameParamValue = filename;
		long returnValue = estimateWorldGeometry(filenameParamValue);
		long __returnValue = returnValue;
		return __returnValue;
	}

	native private long estimateWorldGeometry_EVString(long pNativeObject, String filename);
	public long estimateWorldGeometry(String filename)
	{
		String filenameParamValue = filename;
		long returnValue = estimateWorldGeometry_EVString(this.nativeObject.pointer, filenameParamValue);
		return returnValue;
	}
	native private long estimateWorldGeometry_EVString_NoVirtual(long pNativeObject, String filename);
	protected long estimateWorldGeometry_NoVirtual(String filename)
	{
		String filenameParamValue = filename;
		long returnValue = estimateWorldGeometry_EVString_NoVirtual(this.nativeObject.pointer, filenameParamValue);
		return returnValue;
	}

	protected  long estimateWorldGeometry_DataStreamPtr_EVString_callback(long stream, String typeName)
	{
		com.earthview.world.core.DataStreamPtr streamParamValue = new com.earthview.world.core.DataStreamPtr(CreatedWhenConstruct.CWC_NotToCreate);
		streamParamValue.setDelegate(true);
		streamParamValue.setInstancePointer(new InstancePointer(stream));
		IClassFactory streamParamValueClassFactory = GlobalClassFactoryMap.get(streamParamValue.getCppInstanceTypeName());
		if (streamParamValueClassFactory != null)
		{
			streamParamValue.setDelegate(true);
			streamParamValue = (com.earthview.world.core.DataStreamPtr)streamParamValueClassFactory.create();
			streamParamValue.setDelegate(true);
			streamParamValue.setInstancePointer(new InstancePointer(stream));
		}
		String typeNameParamValue = typeName;
		long returnValue = estimateWorldGeometry(streamParamValue, typeNameParamValue);
		long __returnValue = returnValue;
		return __returnValue;
	}

	native private long estimateWorldGeometry_DataStreamPtr_EVString(long pNativeObject, long stream, String typeName);
	public long estimateWorldGeometry(com.earthview.world.core.DataStreamPtr stream, String typeName)
	{
		long streamParamValue = stream.nativeObject.pointer;
		String typeNameParamValue = typeName;
		long returnValue = estimateWorldGeometry_DataStreamPtr_EVString(this.nativeObject.pointer, streamParamValue, typeNameParamValue);
		return returnValue;
	}
	native private long estimateWorldGeometry_DataStreamPtr_EVString_NoVirtual(long pNativeObject, long stream, String typeName);
	protected long estimateWorldGeometry_NoVirtual(com.earthview.world.core.DataStreamPtr stream, String typeName)
	{
		long streamParamValue = stream.nativeObject.pointer;
		String typeNameParamValue = typeName;
		long returnValue = estimateWorldGeometry_DataStreamPtr_EVString_NoVirtual(this.nativeObject.pointer, streamParamValue, typeNameParamValue);
		return returnValue;
	}

	protected  long estimateWorldGeometry_DataStreamPtr_callback(long stream)
	{
		com.earthview.world.core.DataStreamPtr streamParamValue = new com.earthview.world.core.DataStreamPtr(CreatedWhenConstruct.CWC_NotToCreate);
		streamParamValue.setDelegate(true);
		streamParamValue.setInstancePointer(new InstancePointer(stream));
		IClassFactory streamParamValueClassFactory = GlobalClassFactoryMap.get(streamParamValue.getCppInstanceTypeName());
		if (streamParamValueClassFactory != null)
		{
			streamParamValue.setDelegate(true);
			streamParamValue = (com.earthview.world.core.DataStreamPtr)streamParamValueClassFactory.create();
			streamParamValue.setDelegate(true);
			streamParamValue.setInstancePointer(new InstancePointer(stream));
		}
		long returnValue = estimateWorldGeometry(streamParamValue);
		long __returnValue = returnValue;
		return __returnValue;
	}

	native private long estimateWorldGeometry_DataStreamPtr(long pNativeObject, long stream);
	public long estimateWorldGeometry(com.earthview.world.core.DataStreamPtr stream)
	{
		long streamParamValue = stream.nativeObject.pointer;
		long returnValue = estimateWorldGeometry_DataStreamPtr(this.nativeObject.pointer, streamParamValue);
		return returnValue;
	}
	native private long estimateWorldGeometry_DataStreamPtr_NoVirtual(long pNativeObject, long stream);
	protected long estimateWorldGeometry_NoVirtual(com.earthview.world.core.DataStreamPtr stream)
	{
		long streamParamValue = stream.nativeObject.pointer;
		long returnValue = estimateWorldGeometry_DataStreamPtr_NoVirtual(this.nativeObject.pointer, streamParamValue);
		return returnValue;
	}

	protected  long getSuggestedViewpoint_ev_bool_callback(boolean random)
	{
		boolean randomParamValue = random;
		com.earthview.world.graphic.ViewPoint returnValue = getSuggestedViewpoint(randomParamValue);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getSuggestedViewpoint_ev_bool(long pNativeObject, boolean random);
	/**
	 * 从场景管理获取一个推荐的观察点通常这个方法返回原点，除非设定了坐标系或者世界坐标系推荐了起始点，如果有多于一个的推荐点，返回第一个。
	 * @param random 如果为真，将随机返回一个
	 */
	public com.earthview.world.graphic.ViewPoint getSuggestedViewpoint(boolean random)
	{
		boolean randomParamValue = random;
		long returnValue = getSuggestedViewpoint_ev_bool(this.nativeObject.pointer, randomParamValue);
		com.earthview.world.graphic.ViewPoint __returnValue = new com.earthview.world.graphic.ViewPoint(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "ViewPoint");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ViewPoint)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "ViewPoint");
		}
		return __returnValue;
	}
	native private long getSuggestedViewpoint_ev_bool_NoVirtual(long pNativeObject, boolean random);
	protected com.earthview.world.graphic.ViewPoint getSuggestedViewpoint_NoVirtual(boolean random)
	{
		boolean randomParamValue = random;
		long returnValue = getSuggestedViewpoint_ev_bool_NoVirtual(this.nativeObject.pointer, randomParamValue);
		com.earthview.world.graphic.ViewPoint __returnValue = new com.earthview.world.graphic.ViewPoint(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "ViewPoint");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ViewPoint)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "ViewPoint");
		}
		return __returnValue;
	}

	protected  long getSuggestedViewpoint_void_callback()
	{
		com.earthview.world.graphic.ViewPoint returnValue = getSuggestedViewpoint();
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getSuggestedViewpoint_void(long pNativeObject);
	public com.earthview.world.graphic.ViewPoint getSuggestedViewpoint()
	{
		long returnValue = getSuggestedViewpoint_void(this.nativeObject.pointer);
		com.earthview.world.graphic.ViewPoint __returnValue = new com.earthview.world.graphic.ViewPoint(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "ViewPoint");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ViewPoint)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "ViewPoint");
		}
		return __returnValue;
	}
	native private long getSuggestedViewpoint_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.ViewPoint getSuggestedViewpoint_NoVirtual()
	{
		long returnValue = getSuggestedViewpoint_void_NoVirtual(this.nativeObject.pointer);
		com.earthview.world.graphic.ViewPoint __returnValue = new com.earthview.world.graphic.ViewPoint(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "ViewPoint");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ViewPoint)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "ViewPoint");
		}
		return __returnValue;
	}

	protected  boolean setOption_EVString_void_callback(String strKey, long pValue)
	{
		String strKeyParamValue = strKey;
		VoidPointer pValueParamValue = (pValue == 0L ? null : new VoidPointer(new InstancePointer(pValue)));
		boolean returnValue = setOption(strKeyParamValue, pValueParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean setOption_EVString_void(long pNativeObject, String strKey, long pValue);
	/**
	 * 为场景设定一个特殊实现的选项
	 * @param strKey 设置的名称
	 * @param pValue 通过键值场景管理合理计算大小
	 * @return 成功返回true,失败返回false
	 */
	public boolean setOption(String strKey, VoidPointer pValue)
	{
		String strKeyParamValue = strKey;
		long pValueParamValue = (pValue == null ? 0L : pValue.nativeObject.pointer);
		boolean returnValue = setOption_EVString_void(this.nativeObject.pointer, strKeyParamValue, pValueParamValue);
		return returnValue;
	}
	native private boolean setOption_EVString_void_NoVirtual(long pNativeObject, String strKey, long pValue);
	protected boolean setOption_NoVirtual(String strKey, VoidPointer pValue)
	{
		String strKeyParamValue = strKey;
		long pValueParamValue = (pValue == null ? 0L : pValue.nativeObject.pointer);
		boolean returnValue = setOption_EVString_void_NoVirtual(this.nativeObject.pointer, strKeyParamValue, pValueParamValue);
		return returnValue;
	}

	protected  boolean getOption_EVString_void_callback(String strKey, long pDestValue)
	{
		String strKeyParamValue = strKey;
		VoidPointer pDestValueParamValue = (pDestValue == 0L ? null : new VoidPointer(new InstancePointer(pDestValue)));
		boolean returnValue = getOption(strKeyParamValue, pDestValueParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getOption_EVString_void(long pNativeObject, String strKey, long pDestValue);
	/**
	 * 确认场景是否有一个特殊实现的选项
	 * @param strKey 设置的名称
	 * @param pValue 指针
	 * @return 成功返回设置的选项,失败返回pDestValue，其值设置为空
	 */
	public boolean getOption(String strKey, VoidPointer pDestValue)
	{
		String strKeyParamValue = strKey;
		long pDestValueParamValue = (pDestValue == null ? 0L : pDestValue.nativeObject.pointer);
		boolean returnValue = getOption_EVString_void(this.nativeObject.pointer, strKeyParamValue, pDestValueParamValue);
		return returnValue;
	}
	native private boolean getOption_EVString_void_NoVirtual(long pNativeObject, String strKey, long pDestValue);
	protected boolean getOption_NoVirtual(String strKey, VoidPointer pDestValue)
	{
		String strKeyParamValue = strKey;
		long pDestValueParamValue = (pDestValue == null ? 0L : pDestValue.nativeObject.pointer);
		boolean returnValue = getOption_EVString_void_NoVirtual(this.nativeObject.pointer, strKeyParamValue, pDestValueParamValue);
		return returnValue;
	}

	protected  boolean hasOption_EVString_callback(String strKey)
	{
		String strKeyParamValue = strKey;
		boolean returnValue = hasOption(strKeyParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean hasOption_EVString(long pNativeObject, String strKey);
	public boolean hasOption(String strKey)
	{
		String strKeyParamValue = strKey;
		boolean returnValue = hasOption_EVString(this.nativeObject.pointer, strKeyParamValue);
		return returnValue;
	}
	native private boolean hasOption_EVString_NoVirtual(long pNativeObject, String strKey);
	protected boolean hasOption_NoVirtual(String strKey)
	{
		String strKeyParamValue = strKey;
		boolean returnValue = hasOption_EVString_NoVirtual(this.nativeObject.pointer, strKeyParamValue);
		return returnValue;
	}

	protected  boolean getOptionValues_EVString_StringVector_callback(String strKey, long refValueList)
	{
		String strKeyParamValue = strKey;
		com.earthview.world.core.StringVector refValueListParamValue = new com.earthview.world.core.StringVector(CreatedWhenConstruct.CWC_NotToCreate);
		refValueListParamValue.setDelegate(true);
		refValueListParamValue.setInstancePointer(new InstancePointer(refValueList));
		IClassFactory refValueListParamValueClassFactory = GlobalClassFactoryMap.get(refValueListParamValue.getCppInstanceTypeName());
		if (refValueListParamValueClassFactory != null)
		{
			refValueListParamValue.setDelegate(true);
			refValueListParamValue = (com.earthview.world.core.StringVector)refValueListParamValueClassFactory.create();
			refValueListParamValue.setDelegate(true);
			refValueListParamValue.setInstancePointer(new InstancePointer(refValueList));
		}
		boolean returnValue = getOptionValues(strKeyParamValue, refValueListParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getOptionValues_EVString_StringVector(long pNativeObject, String strKey, long refValueList);
	public boolean getOptionValues(String strKey, com.earthview.world.core.StringVector refValueList)
	{
		String strKeyParamValue = strKey;
		long refValueListParamValue = refValueList.nativeObject.pointer;
		boolean returnValue = getOptionValues_EVString_StringVector(this.nativeObject.pointer, strKeyParamValue, refValueListParamValue);
		return returnValue;
	}
	native private boolean getOptionValues_EVString_StringVector_NoVirtual(long pNativeObject, String strKey, long refValueList);
	protected boolean getOptionValues_NoVirtual(String strKey, com.earthview.world.core.StringVector refValueList)
	{
		String strKeyParamValue = strKey;
		long refValueListParamValue = refValueList.nativeObject.pointer;
		boolean returnValue = getOptionValues_EVString_StringVector_NoVirtual(this.nativeObject.pointer, strKeyParamValue, refValueListParamValue);
		return returnValue;
	}

	protected  boolean getOptionKeys_StringVector_callback(long refKeys)
	{
		com.earthview.world.core.StringVector refKeysParamValue = new com.earthview.world.core.StringVector(CreatedWhenConstruct.CWC_NotToCreate);
		refKeysParamValue.setDelegate(true);
		refKeysParamValue.setInstancePointer(new InstancePointer(refKeys));
		IClassFactory refKeysParamValueClassFactory = GlobalClassFactoryMap.get(refKeysParamValue.getCppInstanceTypeName());
		if (refKeysParamValueClassFactory != null)
		{
			refKeysParamValue.setDelegate(true);
			refKeysParamValue = (com.earthview.world.core.StringVector)refKeysParamValueClassFactory.create();
			refKeysParamValue.setDelegate(true);
			refKeysParamValue.setInstancePointer(new InstancePointer(refKeys));
		}
		boolean returnValue = getOptionKeys(refKeysParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getOptionKeys_StringVector(long pNativeObject, long refKeys);
	public boolean getOptionKeys(com.earthview.world.core.StringVector refKeys)
	{
		long refKeysParamValue = refKeys.nativeObject.pointer;
		boolean returnValue = getOptionKeys_StringVector(this.nativeObject.pointer, refKeysParamValue);
		return returnValue;
	}
	native private boolean getOptionKeys_StringVector_NoVirtual(long pNativeObject, long refKeys);
	protected boolean getOptionKeys_NoVirtual(com.earthview.world.core.StringVector refKeys)
	{
		long refKeysParamValue = refKeys.nativeObject.pointer;
		boolean returnValue = getOptionKeys_StringVector_NoVirtual(this.nativeObject.pointer, refKeysParamValue);
		return returnValue;
	}

	protected  void _updateSceneGraph_CCamera_callback(long cam)
	{
		com.earthview.world.graphic.Camera camParamValue = (cam == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
		if(camParamValue != null)
		{
		camParamValue.setDelegate(true);
		camParamValue.setInstancePointer(new InstancePointer(cam));
		IClassFactory camParamValueClassFactory = GlobalClassFactoryMap.get(camParamValue.getCppInstanceTypeName());
		if (camParamValueClassFactory != null)
		{
			camParamValue.setDelegate(true);
			camParamValue = (com.earthview.world.graphic.Camera)camParamValueClassFactory.create();
			camParamValue.setDelegate(true);
			camParamValue.setInstancePointer(new InstancePointer(cam));
		}
		}
		_updateSceneGraph(camParamValue);
	}

	native private void _updateSceneGraph_CCamera(long pNativeObject, long cam);
	/**
	 * 更新场景图
	 * @param  
	 */
	public void _updateSceneGraph(com.earthview.world.graphic.Camera cam)
	{
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		_updateSceneGraph_CCamera(this.nativeObject.pointer, camParamValue);
	}
	native private void _updateSceneGraph_CCamera_NoVirtual(long pNativeObject, long cam);
	protected void _updateSceneGraph_NoVirtual(com.earthview.world.graphic.Camera cam)
	{
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		_updateSceneGraph_CCamera_NoVirtual(this.nativeObject.pointer, camParamValue);
	}

	protected  void _findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_callback(long cam, long visibleBounds, boolean onlyShadowCasters)
	{
		com.earthview.world.graphic.Camera camParamValue = (cam == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
		if(camParamValue != null)
		{
		camParamValue.setDelegate(true);
		camParamValue.setInstancePointer(new InstancePointer(cam));
		IClassFactory camParamValueClassFactory = GlobalClassFactoryMap.get(camParamValue.getCppInstanceTypeName());
		if (camParamValueClassFactory != null)
		{
			camParamValue.setDelegate(true);
			camParamValue = (com.earthview.world.graphic.Camera)camParamValueClassFactory.create();
			camParamValue.setDelegate(true);
			camParamValue.setInstancePointer(new InstancePointer(cam));
		}
		}
		com.earthview.world.graphic.VisibleObjectsBoundsInfo visibleBoundsParamValue = (visibleBounds == 0L ? null : new com.earthview.world.graphic.VisibleObjectsBoundsInfo(CreatedWhenConstruct.CWC_NotToCreate));
		if(visibleBoundsParamValue != null)
		{
		visibleBoundsParamValue.setDelegate(true);
		visibleBoundsParamValue.setInstancePointer(new InstancePointer(visibleBounds));
		IClassFactory visibleBoundsParamValueClassFactory = GlobalClassFactoryMap.get(visibleBoundsParamValue.getCppInstanceTypeName());
		if (visibleBoundsParamValueClassFactory != null)
		{
			visibleBoundsParamValue.setDelegate(true);
			visibleBoundsParamValue = (com.earthview.world.graphic.VisibleObjectsBoundsInfo)visibleBoundsParamValueClassFactory.create();
			visibleBoundsParamValue.setDelegate(true);
			visibleBoundsParamValue.setInstancePointer(new InstancePointer(visibleBounds));
		}
		}
		boolean onlyShadowCastersParamValue = onlyShadowCasters;
		_findVisibleObjects(camParamValue, visibleBoundsParamValue, onlyShadowCastersParamValue);
	}

	native private void _findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool(long pNativeObject, long cam, long visibleBounds, boolean onlyShadowCasters);
	/**
	 * 查找可见对象
	 * @param  
	 */
	public void _findVisibleObjects(com.earthview.world.graphic.Camera cam, com.earthview.world.graphic.VisibleObjectsBoundsInfo visibleBounds, boolean onlyShadowCasters)
	{
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		long visibleBoundsParamValue = (visibleBounds == null ? 0L : visibleBounds.nativeObject.pointer);
		boolean onlyShadowCastersParamValue = onlyShadowCasters;
		_findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool(this.nativeObject.pointer, camParamValue, visibleBoundsParamValue, onlyShadowCastersParamValue);
	}
	native private void _findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_NoVirtual(long pNativeObject, long cam, long visibleBounds, boolean onlyShadowCasters);
	protected void _findVisibleObjects_NoVirtual(com.earthview.world.graphic.Camera cam, com.earthview.world.graphic.VisibleObjectsBoundsInfo visibleBounds, boolean onlyShadowCasters)
	{
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		long visibleBoundsParamValue = (visibleBounds == null ? 0L : visibleBounds.nativeObject.pointer);
		boolean onlyShadowCastersParamValue = onlyShadowCasters;
		_findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_NoVirtual(this.nativeObject.pointer, camParamValue, visibleBoundsParamValue, onlyShadowCastersParamValue);
	}

	protected  void _applySceneAnimations_void_callback()
	{
		_applySceneAnimations();
	}

	native private void _applySceneAnimations_void(long pNativeObject);
	/**
	 * 应用场景节点动画
	 * @param  
	 */
	public void _applySceneAnimations()
	{
		_applySceneAnimations_void(this.nativeObject.pointer);
	}
	native private void _applySceneAnimations_void_NoVirtual(long pNativeObject);
	protected void _applySceneAnimations_NoVirtual()
	{
		_applySceneAnimations_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void _renderVisibleObjects_void_callback()
	{
		_renderVisibleObjects();
	}

	native private void _renderVisibleObjects_void(long pNativeObject);
	/**
	 * 渲染可见对象
	 * @param  
	 */
	public void _renderVisibleObjects()
	{
		_renderVisibleObjects_void(this.nativeObject.pointer);
	}
	native private void _renderVisibleObjects_void_NoVirtual(long pNativeObject);
	protected void _renderVisibleObjects_NoVirtual()
	{
		_renderVisibleObjects_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void _renderScene_CCamera_CViewport_ev_bool_callback(long camera, long vp, boolean includeOverlays)
	{
		com.earthview.world.graphic.Camera cameraParamValue = (camera == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
		if(cameraParamValue != null)
		{
		cameraParamValue.setDelegate(true);
		cameraParamValue.setInstancePointer(new InstancePointer(camera));
		IClassFactory cameraParamValueClassFactory = GlobalClassFactoryMap.get(cameraParamValue.getCppInstanceTypeName());
		if (cameraParamValueClassFactory != null)
		{
			cameraParamValue.setDelegate(true);
			cameraParamValue = (com.earthview.world.graphic.Camera)cameraParamValueClassFactory.create();
			cameraParamValue.setDelegate(true);
			cameraParamValue.setInstancePointer(new InstancePointer(camera));
		}
		}
		com.earthview.world.graphic.Viewport vpParamValue = (vp == 0L ? null : new com.earthview.world.graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate));
		if(vpParamValue != null)
		{
		vpParamValue.setDelegate(true);
		vpParamValue.setInstancePointer(new InstancePointer(vp));
		IClassFactory vpParamValueClassFactory = GlobalClassFactoryMap.get(vpParamValue.getCppInstanceTypeName());
		if (vpParamValueClassFactory != null)
		{
			vpParamValue.setDelegate(true);
			vpParamValue = (com.earthview.world.graphic.Viewport)vpParamValueClassFactory.create();
			vpParamValue.setDelegate(true);
			vpParamValue.setInstancePointer(new InstancePointer(vp));
		}
		}
		boolean includeOverlaysParamValue = includeOverlays;
		_renderScene(cameraParamValue, vpParamValue, includeOverlaysParamValue);
	}

	native private void _renderScene_CCamera_CViewport_ev_bool(long pNativeObject, long camera, long vp, boolean includeOverlays);
	/**
	 * 渲染场景
	 * @param  
	 */
	public void _renderScene(com.earthview.world.graphic.Camera camera, com.earthview.world.graphic.Viewport vp, boolean includeOverlays)
	{
		long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		boolean includeOverlaysParamValue = includeOverlays;
		_renderScene_CCamera_CViewport_ev_bool(this.nativeObject.pointer, cameraParamValue, vpParamValue, includeOverlaysParamValue);
	}
	native private void _renderScene_CCamera_CViewport_ev_bool_NoVirtual(long pNativeObject, long camera, long vp, boolean includeOverlays);
	protected void _renderScene_NoVirtual(com.earthview.world.graphic.Camera camera, com.earthview.world.graphic.Viewport vp, boolean includeOverlays)
	{
		long cameraParamValue = (camera == null ? 0L : camera.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		boolean includeOverlaysParamValue = includeOverlays;
		_renderScene_CCamera_CViewport_ev_bool_NoVirtual(this.nativeObject.pointer, cameraParamValue, vpParamValue, includeOverlaysParamValue);
	}

	protected  void _queueSkiesForRendering_CCamera_callback(long cam)
	{
		com.earthview.world.graphic.Camera camParamValue = (cam == 0L ? null : new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate));
		if(camParamValue != null)
		{
		camParamValue.setDelegate(true);
		camParamValue.setInstancePointer(new InstancePointer(cam));
		IClassFactory camParamValueClassFactory = GlobalClassFactoryMap.get(camParamValue.getCppInstanceTypeName());
		if (camParamValueClassFactory != null)
		{
			camParamValue.setDelegate(true);
			camParamValue = (com.earthview.world.graphic.Camera)camParamValueClassFactory.create();
			camParamValue.setDelegate(true);
			camParamValue.setInstancePointer(new InstancePointer(cam));
		}
		}
		_queueSkiesForRendering(camParamValue);
	}

	native private void _queueSkiesForRendering_CCamera(long pNativeObject, long cam);
	public void _queueSkiesForRendering(com.earthview.world.graphic.Camera cam)
	{
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		_queueSkiesForRendering_CCamera(this.nativeObject.pointer, camParamValue);
	}
	native private void _queueSkiesForRendering_CCamera_NoVirtual(long pNativeObject, long cam);
	protected void _queueSkiesForRendering_NoVirtual(com.earthview.world.graphic.Camera cam)
	{
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		_queueSkiesForRendering_CCamera_NoVirtual(this.nativeObject.pointer, camParamValue);
	}

	protected  void _setDestinationRenderSystem_CRenderSystem_callback(long ref_sys)
	{
		com.earthview.world.graphic.RenderSystem ref_sysParamValue = (ref_sys == 0L ? null : new com.earthview.world.graphic.RenderSystem(CreatedWhenConstruct.CWC_NotToCreate));
		if(ref_sysParamValue != null)
		{
		ref_sysParamValue.setDelegate(true);
		ref_sysParamValue.setInstancePointer(new InstancePointer(ref_sys));
		IClassFactory ref_sysParamValueClassFactory = GlobalClassFactoryMap.get(ref_sysParamValue.getCppInstanceTypeName());
		if (ref_sysParamValueClassFactory != null)
		{
			ref_sysParamValue.setDelegate(true);
			ref_sysParamValue = (com.earthview.world.graphic.RenderSystem)ref_sysParamValueClassFactory.create();
			ref_sysParamValue.setDelegate(true);
			ref_sysParamValue.setInstancePointer(new InstancePointer(ref_sys));
		}
		}
		_setDestinationRenderSystem(ref_sysParamValue);
	}

	native private void _setDestinationRenderSystem_CRenderSystem(long pNativeObject, long ref_sys);
	public void _setDestinationRenderSystem(com.earthview.world.graphic.RenderSystem ref_sys)
	{
		long ref_sysParamValue = (ref_sys == null ? 0L : ref_sys.nativeObject.pointer);
		_setDestinationRenderSystem_CRenderSystem(this.nativeObject.pointer, ref_sysParamValue);
	}
	native private void _setDestinationRenderSystem_CRenderSystem_NoVirtual(long pNativeObject, long ref_sys);
	protected void _setDestinationRenderSystem_NoVirtual(com.earthview.world.graphic.RenderSystem ref_sys)
	{
		long ref_sysParamValue = (ref_sys == null ? 0L : ref_sys.nativeObject.pointer);
		_setDestinationRenderSystem_CRenderSystem_NoVirtual(this.nativeObject.pointer, ref_sysParamValue);
	}

	protected  void setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_callback(boolean enable, long plane, String materialName, double scale, double tiling, boolean drawFirst, double bow, int xsegments, int ysegments, String groupName)
	{
		boolean enableParamValue = enable;
		com.earthview.world.spatial.math.Plane planeParamValue = new com.earthview.world.spatial.math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
		planeParamValue.setDelegate(true);
		planeParamValue.setInstancePointer(new InstancePointer(plane));
		IClassFactory planeParamValueClassFactory = GlobalClassFactoryMap.get(planeParamValue.getCppInstanceTypeName());
		if (planeParamValueClassFactory != null)
		{
			planeParamValue.setDelegate(true);
			planeParamValue = (com.earthview.world.spatial.math.Plane)planeParamValueClassFactory.create();
			planeParamValue.setDelegate(true);
			planeParamValue.setInstancePointer(new InstancePointer(plane));
		}
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		boolean drawFirstParamValue = drawFirst;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		String groupNameParamValue = groupName;
		setSkyPlane(enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, drawFirstParamValue, bowParamValue, xsegmentsParamValue, ysegmentsParamValue, groupNameParamValue);
	}

	native private void setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, boolean drawFirst, double bow, int xsegments, int ysegments, String groupName);
	/**
	 * 设置是否启用一个天空平面
	 * @param enable ture为启用，false为不启用
	 * @param plane 平面的细节描述，它到摄像机的距离
	 * @param materialName 天空使用材质的名称
	 * @param scale 比例变换以适应天空平面
	 * @param tiling 指针
	 * @param drawFirst 指针
	 * @param bow 指针
	 * @param xsegments 指针
	 * @param ysegments 指针
	 * @param groupName 指针
	 */
	public void setSkyPlane(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, boolean drawFirst, double bow, int xsegments, int ysegments, String groupName)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		boolean drawFirstParamValue = drawFirst;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		String groupNameParamValue = groupName;
		setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, drawFirstParamValue, bowParamValue, xsegmentsParamValue, ysegmentsParamValue, groupNameParamValue);
	}
	native private void setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_NoVirtual(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, boolean drawFirst, double bow, int xsegments, int ysegments, String groupName);
	protected void setSkyPlane_NoVirtual(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, boolean drawFirst, double bow, int xsegments, int ysegments, String groupName)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		boolean drawFirstParamValue = drawFirst;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		String groupNameParamValue = groupName;
		setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_NoVirtual(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, drawFirstParamValue, bowParamValue, xsegmentsParamValue, ysegmentsParamValue, groupNameParamValue);
	}

	protected  void setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_callback(boolean enable, long plane, String materialName, double scale, double tiling, boolean drawFirst, double bow, int xsegments, int ysegments)
	{
		boolean enableParamValue = enable;
		com.earthview.world.spatial.math.Plane planeParamValue = new com.earthview.world.spatial.math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
		planeParamValue.setDelegate(true);
		planeParamValue.setInstancePointer(new InstancePointer(plane));
		IClassFactory planeParamValueClassFactory = GlobalClassFactoryMap.get(planeParamValue.getCppInstanceTypeName());
		if (planeParamValueClassFactory != null)
		{
			planeParamValue.setDelegate(true);
			planeParamValue = (com.earthview.world.spatial.math.Plane)planeParamValueClassFactory.create();
			planeParamValue.setDelegate(true);
			planeParamValue.setInstancePointer(new InstancePointer(plane));
		}
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		boolean drawFirstParamValue = drawFirst;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		setSkyPlane(enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, drawFirstParamValue, bowParamValue, xsegmentsParamValue, ysegmentsParamValue);
	}

	native private void setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, boolean drawFirst, double bow, int xsegments, int ysegments);
	public void setSkyPlane(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, boolean drawFirst, double bow, int xsegments, int ysegments)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		boolean drawFirstParamValue = drawFirst;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, drawFirstParamValue, bowParamValue, xsegmentsParamValue, ysegmentsParamValue);
	}
	native private void setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_NoVirtual(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, boolean drawFirst, double bow, int xsegments, int ysegments);
	protected void setSkyPlane_NoVirtual(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, boolean drawFirst, double bow, int xsegments, int ysegments)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		boolean drawFirstParamValue = drawFirst;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_NoVirtual(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, drawFirstParamValue, bowParamValue, xsegmentsParamValue, ysegmentsParamValue);
	}

	protected  void setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_callback(boolean enable, long plane, String materialName, double scale, double tiling, boolean drawFirst, double bow, int xsegments)
	{
		boolean enableParamValue = enable;
		com.earthview.world.spatial.math.Plane planeParamValue = new com.earthview.world.spatial.math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
		planeParamValue.setDelegate(true);
		planeParamValue.setInstancePointer(new InstancePointer(plane));
		IClassFactory planeParamValueClassFactory = GlobalClassFactoryMap.get(planeParamValue.getCppInstanceTypeName());
		if (planeParamValueClassFactory != null)
		{
			planeParamValue.setDelegate(true);
			planeParamValue = (com.earthview.world.spatial.math.Plane)planeParamValueClassFactory.create();
			planeParamValue.setDelegate(true);
			planeParamValue.setInstancePointer(new InstancePointer(plane));
		}
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		boolean drawFirstParamValue = drawFirst;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		setSkyPlane(enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, drawFirstParamValue, bowParamValue, xsegmentsParamValue);
	}

	native private void setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, boolean drawFirst, double bow, int xsegments);
	public void setSkyPlane(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, boolean drawFirst, double bow, int xsegments)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		boolean drawFirstParamValue = drawFirst;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, drawFirstParamValue, bowParamValue, xsegmentsParamValue);
	}
	native private void setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_NoVirtual(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, boolean drawFirst, double bow, int xsegments);
	protected void setSkyPlane_NoVirtual(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, boolean drawFirst, double bow, int xsegments)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		boolean drawFirstParamValue = drawFirst;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_NoVirtual(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, drawFirstParamValue, bowParamValue, xsegmentsParamValue);
	}

	protected  void setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_callback(boolean enable, long plane, String materialName, double scale, double tiling, boolean drawFirst, double bow)
	{
		boolean enableParamValue = enable;
		com.earthview.world.spatial.math.Plane planeParamValue = new com.earthview.world.spatial.math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
		planeParamValue.setDelegate(true);
		planeParamValue.setInstancePointer(new InstancePointer(plane));
		IClassFactory planeParamValueClassFactory = GlobalClassFactoryMap.get(planeParamValue.getCppInstanceTypeName());
		if (planeParamValueClassFactory != null)
		{
			planeParamValue.setDelegate(true);
			planeParamValue = (com.earthview.world.spatial.math.Plane)planeParamValueClassFactory.create();
			planeParamValue.setDelegate(true);
			planeParamValue.setInstancePointer(new InstancePointer(plane));
		}
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		boolean drawFirstParamValue = drawFirst;
		double bowParamValue = bow;
		setSkyPlane(enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, drawFirstParamValue, bowParamValue);
	}

	native private void setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, boolean drawFirst, double bow);
	public void setSkyPlane(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, boolean drawFirst, double bow)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		boolean drawFirstParamValue = drawFirst;
		double bowParamValue = bow;
		setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, drawFirstParamValue, bowParamValue);
	}
	native private void setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_NoVirtual(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, boolean drawFirst, double bow);
	protected void setSkyPlane_NoVirtual(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, boolean drawFirst, double bow)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		boolean drawFirstParamValue = drawFirst;
		double bowParamValue = bow;
		setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_NoVirtual(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, drawFirstParamValue, bowParamValue);
	}

	protected  void setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_callback(boolean enable, long plane, String materialName, double scale, double tiling, boolean drawFirst)
	{
		boolean enableParamValue = enable;
		com.earthview.world.spatial.math.Plane planeParamValue = new com.earthview.world.spatial.math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
		planeParamValue.setDelegate(true);
		planeParamValue.setInstancePointer(new InstancePointer(plane));
		IClassFactory planeParamValueClassFactory = GlobalClassFactoryMap.get(planeParamValue.getCppInstanceTypeName());
		if (planeParamValueClassFactory != null)
		{
			planeParamValue.setDelegate(true);
			planeParamValue = (com.earthview.world.spatial.math.Plane)planeParamValueClassFactory.create();
			planeParamValue.setDelegate(true);
			planeParamValue.setInstancePointer(new InstancePointer(plane));
		}
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		boolean drawFirstParamValue = drawFirst;
		setSkyPlane(enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, drawFirstParamValue);
	}

	native private void setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, boolean drawFirst);
	public void setSkyPlane(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, boolean drawFirst)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		boolean drawFirstParamValue = drawFirst;
		setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, drawFirstParamValue);
	}
	native private void setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_NoVirtual(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, boolean drawFirst);
	protected void setSkyPlane_NoVirtual(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, boolean drawFirst)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		boolean drawFirstParamValue = drawFirst;
		setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_NoVirtual(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, drawFirstParamValue);
	}

	protected  void setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback(boolean enable, long plane, String materialName, double scale, double tiling)
	{
		boolean enableParamValue = enable;
		com.earthview.world.spatial.math.Plane planeParamValue = new com.earthview.world.spatial.math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
		planeParamValue.setDelegate(true);
		planeParamValue.setInstancePointer(new InstancePointer(plane));
		IClassFactory planeParamValueClassFactory = GlobalClassFactoryMap.get(planeParamValue.getCppInstanceTypeName());
		if (planeParamValueClassFactory != null)
		{
			planeParamValue.setDelegate(true);
			planeParamValue = (com.earthview.world.spatial.math.Plane)planeParamValueClassFactory.create();
			planeParamValue.setDelegate(true);
			planeParamValue.setInstancePointer(new InstancePointer(plane));
		}
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		setSkyPlane(enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue);
	}

	native private void setSkyPlane_ev_bool_CPlane_EVString_Real_Real(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling);
	public void setSkyPlane(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		setSkyPlane_ev_bool_CPlane_EVString_Real_Real(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue);
	}
	native private void setSkyPlane_ev_bool_CPlane_EVString_Real_Real_NoVirtual(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling);
	protected void setSkyPlane_NoVirtual(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		setSkyPlane_ev_bool_CPlane_EVString_Real_Real_NoVirtual(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue);
	}

	protected  void setSkyPlane_ev_bool_CPlane_EVString_Real_callback(boolean enable, long plane, String materialName, double scale)
	{
		boolean enableParamValue = enable;
		com.earthview.world.spatial.math.Plane planeParamValue = new com.earthview.world.spatial.math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
		planeParamValue.setDelegate(true);
		planeParamValue.setInstancePointer(new InstancePointer(plane));
		IClassFactory planeParamValueClassFactory = GlobalClassFactoryMap.get(planeParamValue.getCppInstanceTypeName());
		if (planeParamValueClassFactory != null)
		{
			planeParamValue.setDelegate(true);
			planeParamValue = (com.earthview.world.spatial.math.Plane)planeParamValueClassFactory.create();
			planeParamValue.setDelegate(true);
			planeParamValue.setInstancePointer(new InstancePointer(plane));
		}
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		setSkyPlane(enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue);
	}

	native private void setSkyPlane_ev_bool_CPlane_EVString_Real(long pNativeObject, boolean enable, long plane, String materialName, double scale);
	public void setSkyPlane(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		setSkyPlane_ev_bool_CPlane_EVString_Real(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue);
	}
	native private void setSkyPlane_ev_bool_CPlane_EVString_Real_NoVirtual(long pNativeObject, boolean enable, long plane, String materialName, double scale);
	protected void setSkyPlane_NoVirtual(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		setSkyPlane_ev_bool_CPlane_EVString_Real_NoVirtual(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue);
	}

	protected  void setSkyPlane_ev_bool_CPlane_EVString_callback(boolean enable, long plane, String materialName)
	{
		boolean enableParamValue = enable;
		com.earthview.world.spatial.math.Plane planeParamValue = new com.earthview.world.spatial.math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
		planeParamValue.setDelegate(true);
		planeParamValue.setInstancePointer(new InstancePointer(plane));
		IClassFactory planeParamValueClassFactory = GlobalClassFactoryMap.get(planeParamValue.getCppInstanceTypeName());
		if (planeParamValueClassFactory != null)
		{
			planeParamValue.setDelegate(true);
			planeParamValue = (com.earthview.world.spatial.math.Plane)planeParamValueClassFactory.create();
			planeParamValue.setDelegate(true);
			planeParamValue.setInstancePointer(new InstancePointer(plane));
		}
		String materialNameParamValue = materialName;
		setSkyPlane(enableParamValue, planeParamValue, materialNameParamValue);
	}

	native private void setSkyPlane_ev_bool_CPlane_EVString(long pNativeObject, boolean enable, long plane, String materialName);
	public void setSkyPlane(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		setSkyPlane_ev_bool_CPlane_EVString(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue);
	}
	native private void setSkyPlane_ev_bool_CPlane_EVString_NoVirtual(long pNativeObject, boolean enable, long plane, String materialName);
	protected void setSkyPlane_NoVirtual(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		setSkyPlane_ev_bool_CPlane_EVString_NoVirtual(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue);
	}

	protected  void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_callback(boolean enable, long plane, String materialName, double scale, double tiling, short renderQueue, double bow, int xsegments, int ysegments, String groupName)
	{
		boolean enableParamValue = enable;
		com.earthview.world.spatial.math.Plane planeParamValue = new com.earthview.world.spatial.math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
		planeParamValue.setDelegate(true);
		planeParamValue.setInstancePointer(new InstancePointer(plane));
		IClassFactory planeParamValueClassFactory = GlobalClassFactoryMap.get(planeParamValue.getCppInstanceTypeName());
		if (planeParamValueClassFactory != null)
		{
			planeParamValue.setDelegate(true);
			planeParamValue = (com.earthview.world.spatial.math.Plane)planeParamValueClassFactory.create();
			planeParamValue.setDelegate(true);
			planeParamValue.setInstancePointer(new InstancePointer(plane));
		}
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		short renderQueueParamValue = renderQueue;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		String groupNameParamValue = groupName;
		_setSkyPlane(enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, renderQueueParamValue, bowParamValue, xsegmentsParamValue, ysegmentsParamValue, groupNameParamValue);
	}

	native private void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, short renderQueue, double bow, int xsegments, int ysegments, String groupName);
	///     virtual void _setSkyPlane(
	///         ev_bool enable,
	///         const EarthView::World::Spatial::Math::CPlane& plane,
	///const EVString& materialName,
	///Real scale = 1000,
	///         Real tiling = 10,
	///ev_uint8 renderQueue = RENDER_QUEUE_SKIES_EARLY,
	///Real bow = 0,
	///         ev_int32 xsegments = 1,
	///ev_int32 ysegments = 1,
	///         const EVString& groupName = CResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME);
	public void _setSkyPlane(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, short renderQueue, double bow, int xsegments, int ysegments, String groupName)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		short renderQueueParamValue = renderQueue;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		String groupNameParamValue = groupName;
		_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, renderQueueParamValue, bowParamValue, xsegmentsParamValue, ysegmentsParamValue, groupNameParamValue);
	}
	native private void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_NoVirtual(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, short renderQueue, double bow, int xsegments, int ysegments, String groupName);
	protected void _setSkyPlane_NoVirtual(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, short renderQueue, double bow, int xsegments, int ysegments, String groupName)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		short renderQueueParamValue = renderQueue;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		String groupNameParamValue = groupName;
		_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_NoVirtual(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, renderQueueParamValue, bowParamValue, xsegmentsParamValue, ysegmentsParamValue, groupNameParamValue);
	}

	protected  void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_callback(boolean enable, long plane, String materialName, double scale, double tiling, short renderQueue, double bow, int xsegments, int ysegments)
	{
		boolean enableParamValue = enable;
		com.earthview.world.spatial.math.Plane planeParamValue = new com.earthview.world.spatial.math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
		planeParamValue.setDelegate(true);
		planeParamValue.setInstancePointer(new InstancePointer(plane));
		IClassFactory planeParamValueClassFactory = GlobalClassFactoryMap.get(planeParamValue.getCppInstanceTypeName());
		if (planeParamValueClassFactory != null)
		{
			planeParamValue.setDelegate(true);
			planeParamValue = (com.earthview.world.spatial.math.Plane)planeParamValueClassFactory.create();
			planeParamValue.setDelegate(true);
			planeParamValue.setInstancePointer(new InstancePointer(plane));
		}
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		short renderQueueParamValue = renderQueue;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		_setSkyPlane(enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, renderQueueParamValue, bowParamValue, xsegmentsParamValue, ysegmentsParamValue);
	}

	native private void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, short renderQueue, double bow, int xsegments, int ysegments);
	public void _setSkyPlane(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, short renderQueue, double bow, int xsegments, int ysegments)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		short renderQueueParamValue = renderQueue;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, renderQueueParamValue, bowParamValue, xsegmentsParamValue, ysegmentsParamValue);
	}
	native private void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_NoVirtual(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, short renderQueue, double bow, int xsegments, int ysegments);
	protected void _setSkyPlane_NoVirtual(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, short renderQueue, double bow, int xsegments, int ysegments)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		short renderQueueParamValue = renderQueue;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_NoVirtual(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, renderQueueParamValue, bowParamValue, xsegmentsParamValue, ysegmentsParamValue);
	}

	protected  void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_callback(boolean enable, long plane, String materialName, double scale, double tiling, short renderQueue, double bow, int xsegments)
	{
		boolean enableParamValue = enable;
		com.earthview.world.spatial.math.Plane planeParamValue = new com.earthview.world.spatial.math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
		planeParamValue.setDelegate(true);
		planeParamValue.setInstancePointer(new InstancePointer(plane));
		IClassFactory planeParamValueClassFactory = GlobalClassFactoryMap.get(planeParamValue.getCppInstanceTypeName());
		if (planeParamValueClassFactory != null)
		{
			planeParamValue.setDelegate(true);
			planeParamValue = (com.earthview.world.spatial.math.Plane)planeParamValueClassFactory.create();
			planeParamValue.setDelegate(true);
			planeParamValue.setInstancePointer(new InstancePointer(plane));
		}
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		short renderQueueParamValue = renderQueue;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		_setSkyPlane(enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, renderQueueParamValue, bowParamValue, xsegmentsParamValue);
	}

	native private void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, short renderQueue, double bow, int xsegments);
	public void _setSkyPlane(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, short renderQueue, double bow, int xsegments)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		short renderQueueParamValue = renderQueue;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, renderQueueParamValue, bowParamValue, xsegmentsParamValue);
	}
	native private void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_NoVirtual(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, short renderQueue, double bow, int xsegments);
	protected void _setSkyPlane_NoVirtual(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, short renderQueue, double bow, int xsegments)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		short renderQueueParamValue = renderQueue;
		double bowParamValue = bow;
		int xsegmentsParamValue = xsegments;
		_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_NoVirtual(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, renderQueueParamValue, bowParamValue, xsegmentsParamValue);
	}

	protected  void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_callback(boolean enable, long plane, String materialName, double scale, double tiling, short renderQueue, double bow)
	{
		boolean enableParamValue = enable;
		com.earthview.world.spatial.math.Plane planeParamValue = new com.earthview.world.spatial.math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
		planeParamValue.setDelegate(true);
		planeParamValue.setInstancePointer(new InstancePointer(plane));
		IClassFactory planeParamValueClassFactory = GlobalClassFactoryMap.get(planeParamValue.getCppInstanceTypeName());
		if (planeParamValueClassFactory != null)
		{
			planeParamValue.setDelegate(true);
			planeParamValue = (com.earthview.world.spatial.math.Plane)planeParamValueClassFactory.create();
			planeParamValue.setDelegate(true);
			planeParamValue.setInstancePointer(new InstancePointer(plane));
		}
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		short renderQueueParamValue = renderQueue;
		double bowParamValue = bow;
		_setSkyPlane(enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, renderQueueParamValue, bowParamValue);
	}

	native private void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, short renderQueue, double bow);
	public void _setSkyPlane(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, short renderQueue, double bow)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		short renderQueueParamValue = renderQueue;
		double bowParamValue = bow;
		_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, renderQueueParamValue, bowParamValue);
	}
	native private void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_NoVirtual(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, short renderQueue, double bow);
	protected void _setSkyPlane_NoVirtual(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, short renderQueue, double bow)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		short renderQueueParamValue = renderQueue;
		double bowParamValue = bow;
		_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_NoVirtual(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, renderQueueParamValue, bowParamValue);
	}

	protected  void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_callback(boolean enable, long plane, String materialName, double scale, double tiling, short renderQueue)
	{
		boolean enableParamValue = enable;
		com.earthview.world.spatial.math.Plane planeParamValue = new com.earthview.world.spatial.math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
		planeParamValue.setDelegate(true);
		planeParamValue.setInstancePointer(new InstancePointer(plane));
		IClassFactory planeParamValueClassFactory = GlobalClassFactoryMap.get(planeParamValue.getCppInstanceTypeName());
		if (planeParamValueClassFactory != null)
		{
			planeParamValue.setDelegate(true);
			planeParamValue = (com.earthview.world.spatial.math.Plane)planeParamValueClassFactory.create();
			planeParamValue.setDelegate(true);
			planeParamValue.setInstancePointer(new InstancePointer(plane));
		}
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		short renderQueueParamValue = renderQueue;
		_setSkyPlane(enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, renderQueueParamValue);
	}

	native private void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, short renderQueue);
	public void _setSkyPlane(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, short renderQueue)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		short renderQueueParamValue = renderQueue;
		_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, renderQueueParamValue);
	}
	native private void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_NoVirtual(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling, short renderQueue);
	protected void _setSkyPlane_NoVirtual(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling, short renderQueue)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		short renderQueueParamValue = renderQueue;
		_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_NoVirtual(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue, renderQueueParamValue);
	}

	protected  void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback(boolean enable, long plane, String materialName, double scale, double tiling)
	{
		boolean enableParamValue = enable;
		com.earthview.world.spatial.math.Plane planeParamValue = new com.earthview.world.spatial.math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
		planeParamValue.setDelegate(true);
		planeParamValue.setInstancePointer(new InstancePointer(plane));
		IClassFactory planeParamValueClassFactory = GlobalClassFactoryMap.get(planeParamValue.getCppInstanceTypeName());
		if (planeParamValueClassFactory != null)
		{
			planeParamValue.setDelegate(true);
			planeParamValue = (com.earthview.world.spatial.math.Plane)planeParamValueClassFactory.create();
			planeParamValue.setDelegate(true);
			planeParamValue.setInstancePointer(new InstancePointer(plane));
		}
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		_setSkyPlane(enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue);
	}

	native private void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling);
	public void _setSkyPlane(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		_setSkyPlane_ev_bool_CPlane_EVString_Real_Real(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue);
	}
	native private void _setSkyPlane_ev_bool_CPlane_EVString_Real_Real_NoVirtual(long pNativeObject, boolean enable, long plane, String materialName, double scale, double tiling);
	protected void _setSkyPlane_NoVirtual(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale, double tiling)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		double tilingParamValue = tiling;
		_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_NoVirtual(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue, tilingParamValue);
	}

	protected  void _setSkyPlane_ev_bool_CPlane_EVString_Real_callback(boolean enable, long plane, String materialName, double scale)
	{
		boolean enableParamValue = enable;
		com.earthview.world.spatial.math.Plane planeParamValue = new com.earthview.world.spatial.math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
		planeParamValue.setDelegate(true);
		planeParamValue.setInstancePointer(new InstancePointer(plane));
		IClassFactory planeParamValueClassFactory = GlobalClassFactoryMap.get(planeParamValue.getCppInstanceTypeName());
		if (planeParamValueClassFactory != null)
		{
			planeParamValue.setDelegate(true);
			planeParamValue = (com.earthview.world.spatial.math.Plane)planeParamValueClassFactory.create();
			planeParamValue.setDelegate(true);
			planeParamValue.setInstancePointer(new InstancePointer(plane));
		}
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		_setSkyPlane(enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue);
	}

	native private void _setSkyPlane_ev_bool_CPlane_EVString_Real(long pNativeObject, boolean enable, long plane, String materialName, double scale);
	public void _setSkyPlane(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		_setSkyPlane_ev_bool_CPlane_EVString_Real(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue);
	}
	native private void _setSkyPlane_ev_bool_CPlane_EVString_Real_NoVirtual(long pNativeObject, boolean enable, long plane, String materialName, double scale);
	protected void _setSkyPlane_NoVirtual(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName, double scale)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		double scaleParamValue = scale;
		_setSkyPlane_ev_bool_CPlane_EVString_Real_NoVirtual(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue, scaleParamValue);
	}

	protected  void _setSkyPlane_ev_bool_CPlane_EVString_callback(boolean enable, long plane, String materialName)
	{
		boolean enableParamValue = enable;
		com.earthview.world.spatial.math.Plane planeParamValue = new com.earthview.world.spatial.math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
		planeParamValue.setDelegate(true);
		planeParamValue.setInstancePointer(new InstancePointer(plane));
		IClassFactory planeParamValueClassFactory = GlobalClassFactoryMap.get(planeParamValue.getCppInstanceTypeName());
		if (planeParamValueClassFactory != null)
		{
			planeParamValue.setDelegate(true);
			planeParamValue = (com.earthview.world.spatial.math.Plane)planeParamValueClassFactory.create();
			planeParamValue.setDelegate(true);
			planeParamValue.setInstancePointer(new InstancePointer(plane));
		}
		String materialNameParamValue = materialName;
		_setSkyPlane(enableParamValue, planeParamValue, materialNameParamValue);
	}

	native private void _setSkyPlane_ev_bool_CPlane_EVString(long pNativeObject, boolean enable, long plane, String materialName);
	public void _setSkyPlane(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		_setSkyPlane_ev_bool_CPlane_EVString(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue);
	}
	native private void _setSkyPlane_ev_bool_CPlane_EVString_NoVirtual(long pNativeObject, boolean enable, long plane, String materialName);
	protected void _setSkyPlane_NoVirtual(boolean enable, com.earthview.world.spatial.math.Plane plane, String materialName)
	{
		boolean enableParamValue = enable;
		long planeParamValue = plane.nativeObject.pointer;
		String materialNameParamValue = materialName;
		_setSkyPlane_ev_bool_CPlane_EVString_NoVirtual(this.nativeObject.pointer, enableParamValue, planeParamValue, materialNameParamValue);
	}

	protected  void setSkyPlaneEnabled_ev_bool_callback(boolean enable)
	{
		boolean enableParamValue = enable;
		setSkyPlaneEnabled(enableParamValue);
	}

	native private void setSkyPlaneEnabled_ev_bool(long pNativeObject, boolean enable);
	public void setSkyPlaneEnabled(boolean enable)
	{
		boolean enableParamValue = enable;
		setSkyPlaneEnabled_ev_bool(this.nativeObject.pointer, enableParamValue);
	}
	native private void setSkyPlaneEnabled_ev_bool_NoVirtual(long pNativeObject, boolean enable);
	protected void setSkyPlaneEnabled_NoVirtual(boolean enable)
	{
		boolean enableParamValue = enable;
		setSkyPlaneEnabled_ev_bool_NoVirtual(this.nativeObject.pointer, enableParamValue);
	}

	protected  boolean isSkyPlaneEnabled_void_callback()
	{
		boolean returnValue = isSkyPlaneEnabled();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean isSkyPlaneEnabled_void(long pNativeObject);
	public boolean isSkyPlaneEnabled()
	{
		boolean returnValue = isSkyPlaneEnabled_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean isSkyPlaneEnabled_void_NoVirtual(long pNativeObject);
	protected boolean isSkyPlaneEnabled_NoVirtual()
	{
		boolean returnValue = isSkyPlaneEnabled_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  long getSkyPlaneNode_void_callback()
	{
		com.earthview.world.graphic.SceneNode returnValue = getSkyPlaneNode();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getSkyPlaneNode_void(long pNativeObject);
	public com.earthview.world.graphic.SceneNode getSkyPlaneNode()
	{
		long returnValue = getSkyPlaneNode_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}
	native private long getSkyPlaneNode_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.SceneNode getSkyPlaneNode_NoVirtual()
	{
		long returnValue = getSkyPlaneNode_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}

	protected  long getSkyPlaneGenParameters_void_callback()
	{
		com.earthview.world.graphic.SceneManager.SkyPlaneGenParameters returnValue = getSkyPlaneGenParameters();
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getSkyPlaneGenParameters_void(long pNativeObject);
	public com.earthview.world.graphic.SceneManager.SkyPlaneGenParameters getSkyPlaneGenParameters()
	{
		long returnValue = getSkyPlaneGenParameters_void(this.nativeObject.pointer);
		com.earthview.world.graphic.SceneManager.SkyPlaneGenParameters __returnValue = new com.earthview.world.graphic.SceneManager.SkyPlaneGenParameters(new InstancePointer(returnValue));
		return __returnValue;
	}
	native private long getSkyPlaneGenParameters_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.SceneManager.SkyPlaneGenParameters getSkyPlaneGenParameters_NoVirtual()
	{
		long returnValue = getSkyPlaneGenParameters_void_NoVirtual(this.nativeObject.pointer);
		com.earthview.world.graphic.SceneManager.SkyPlaneGenParameters __returnValue = new com.earthview.world.graphic.SceneManager.SkyPlaneGenParameters(new InstancePointer(returnValue));
		return __returnValue;
	}

	protected  void setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_callback(boolean enable, String materialName, double distance, boolean drawFirst, long orientation, String groupName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		com.earthview.world.spatial.math.Quaternion orientationParamValue = new com.earthview.world.spatial.math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
		orientationParamValue.setDelegate(true);
		orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		IClassFactory orientationParamValueClassFactory = GlobalClassFactoryMap.get(orientationParamValue.getCppInstanceTypeName());
		if (orientationParamValueClassFactory != null)
		{
			orientationParamValue.setDelegate(true);
			orientationParamValue = (com.earthview.world.spatial.math.Quaternion)orientationParamValueClassFactory.create();
			orientationParamValue.setDelegate(true);
			orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		}
		String groupNameParamValue = groupName;
		setSkyBox(enableParamValue, materialNameParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue, groupNameParamValue);
	}

	native private void setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString(long pNativeObject, boolean enable, String materialName, double distance, boolean drawFirst, long orientation, String groupName);
	public void setSkyBox(boolean enable, String materialName, double distance, boolean drawFirst, com.earthview.world.spatial.math.Quaternion orientation, String groupName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		long orientationParamValue = orientation.nativeObject.pointer;
		String groupNameParamValue = groupName;
		setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString(this.nativeObject.pointer, enableParamValue, materialNameParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue, groupNameParamValue);
	}
	native private void setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_NoVirtual(long pNativeObject, boolean enable, String materialName, double distance, boolean drawFirst, long orientation, String groupName);
	protected void setSkyBox_NoVirtual(boolean enable, String materialName, double distance, boolean drawFirst, com.earthview.world.spatial.math.Quaternion orientation, String groupName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		long orientationParamValue = orientation.nativeObject.pointer;
		String groupNameParamValue = groupName;
		setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue, groupNameParamValue);
	}

	protected  void setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_callback(boolean enable, String materialName, double distance, boolean drawFirst, long orientation)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		com.earthview.world.spatial.math.Quaternion orientationParamValue = new com.earthview.world.spatial.math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
		orientationParamValue.setDelegate(true);
		orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		IClassFactory orientationParamValueClassFactory = GlobalClassFactoryMap.get(orientationParamValue.getCppInstanceTypeName());
		if (orientationParamValueClassFactory != null)
		{
			orientationParamValue.setDelegate(true);
			orientationParamValue = (com.earthview.world.spatial.math.Quaternion)orientationParamValueClassFactory.create();
			orientationParamValue.setDelegate(true);
			orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		}
		setSkyBox(enableParamValue, materialNameParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue);
	}

	native private void setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion(long pNativeObject, boolean enable, String materialName, double distance, boolean drawFirst, long orientation);
	public void setSkyBox(boolean enable, String materialName, double distance, boolean drawFirst, com.earthview.world.spatial.math.Quaternion orientation)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		long orientationParamValue = orientation.nativeObject.pointer;
		setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion(this.nativeObject.pointer, enableParamValue, materialNameParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue);
	}
	native private void setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_NoVirtual(long pNativeObject, boolean enable, String materialName, double distance, boolean drawFirst, long orientation);
	protected void setSkyBox_NoVirtual(boolean enable, String materialName, double distance, boolean drawFirst, com.earthview.world.spatial.math.Quaternion orientation)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		long orientationParamValue = orientation.nativeObject.pointer;
		setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue);
	}

	protected  void setSkyBox_ev_bool_EVString_Real_ev_bool_callback(boolean enable, String materialName, double distance, boolean drawFirst)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		setSkyBox(enableParamValue, materialNameParamValue, distanceParamValue, drawFirstParamValue);
	}

	native private void setSkyBox_ev_bool_EVString_Real_ev_bool(long pNativeObject, boolean enable, String materialName, double distance, boolean drawFirst);
	public void setSkyBox(boolean enable, String materialName, double distance, boolean drawFirst)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		setSkyBox_ev_bool_EVString_Real_ev_bool(this.nativeObject.pointer, enableParamValue, materialNameParamValue, distanceParamValue, drawFirstParamValue);
	}
	native private void setSkyBox_ev_bool_EVString_Real_ev_bool_NoVirtual(long pNativeObject, boolean enable, String materialName, double distance, boolean drawFirst);
	protected void setSkyBox_NoVirtual(boolean enable, String materialName, double distance, boolean drawFirst)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		setSkyBox_ev_bool_EVString_Real_ev_bool_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, distanceParamValue, drawFirstParamValue);
	}

	protected  void setSkyBox_ev_bool_EVString_Real_callback(boolean enable, String materialName, double distance)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		setSkyBox(enableParamValue, materialNameParamValue, distanceParamValue);
	}

	native private void setSkyBox_ev_bool_EVString_Real(long pNativeObject, boolean enable, String materialName, double distance);
	public void setSkyBox(boolean enable, String materialName, double distance)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		setSkyBox_ev_bool_EVString_Real(this.nativeObject.pointer, enableParamValue, materialNameParamValue, distanceParamValue);
	}
	native private void setSkyBox_ev_bool_EVString_Real_NoVirtual(long pNativeObject, boolean enable, String materialName, double distance);
	protected void setSkyBox_NoVirtual(boolean enable, String materialName, double distance)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		setSkyBox_ev_bool_EVString_Real_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, distanceParamValue);
	}

	protected  void setSkyBox_ev_bool_EVString_callback(boolean enable, String materialName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		setSkyBox(enableParamValue, materialNameParamValue);
	}

	native private void setSkyBox_ev_bool_EVString(long pNativeObject, boolean enable, String materialName);
	public void setSkyBox(boolean enable, String materialName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		setSkyBox_ev_bool_EVString(this.nativeObject.pointer, enableParamValue, materialNameParamValue);
	}
	native private void setSkyBox_ev_bool_EVString_NoVirtual(long pNativeObject, boolean enable, String materialName);
	protected void setSkyBox_NoVirtual(boolean enable, String materialName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		setSkyBox_ev_bool_EVString_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue);
	}

	protected  void _setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_callback(boolean enable, String materialName, double distance, short renderQueue, long orientation, String groupName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		com.earthview.world.spatial.math.Quaternion orientationParamValue = new com.earthview.world.spatial.math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
		orientationParamValue.setDelegate(true);
		orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		IClassFactory orientationParamValueClassFactory = GlobalClassFactoryMap.get(orientationParamValue.getCppInstanceTypeName());
		if (orientationParamValueClassFactory != null)
		{
			orientationParamValue.setDelegate(true);
			orientationParamValue = (com.earthview.world.spatial.math.Quaternion)orientationParamValueClassFactory.create();
			orientationParamValue.setDelegate(true);
			orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		}
		String groupNameParamValue = groupName;
		_setSkyBox(enableParamValue, materialNameParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue, groupNameParamValue);
	}

	native private void _setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString(long pNativeObject, boolean enable, String materialName, double distance, short renderQueue, long orientation, String groupName);
	///     virtual void _setSkyBox(ev_bool enable, const EVString& materialName,
	///Real distance = 5000,
	///         ev_uint8 renderQueue = RENDER_QUEUE_SKIES_EARLY,
	///const EarthView::World::Spatial::Math::CQuaternion& orientation = EarthView::World::Spatial::Math::CQuaternion::IDENTITY,
	///         const EVString& groupName = CResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME);
	public void _setSkyBox(boolean enable, String materialName, double distance, short renderQueue, com.earthview.world.spatial.math.Quaternion orientation, String groupName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		long orientationParamValue = orientation.nativeObject.pointer;
		String groupNameParamValue = groupName;
		_setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString(this.nativeObject.pointer, enableParamValue, materialNameParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue, groupNameParamValue);
	}
	native private void _setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_NoVirtual(long pNativeObject, boolean enable, String materialName, double distance, short renderQueue, long orientation, String groupName);
	protected void _setSkyBox_NoVirtual(boolean enable, String materialName, double distance, short renderQueue, com.earthview.world.spatial.math.Quaternion orientation, String groupName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		long orientationParamValue = orientation.nativeObject.pointer;
		String groupNameParamValue = groupName;
		_setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue, groupNameParamValue);
	}

	protected  void _setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_callback(boolean enable, String materialName, double distance, short renderQueue, long orientation)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		com.earthview.world.spatial.math.Quaternion orientationParamValue = new com.earthview.world.spatial.math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
		orientationParamValue.setDelegate(true);
		orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		IClassFactory orientationParamValueClassFactory = GlobalClassFactoryMap.get(orientationParamValue.getCppInstanceTypeName());
		if (orientationParamValueClassFactory != null)
		{
			orientationParamValue.setDelegate(true);
			orientationParamValue = (com.earthview.world.spatial.math.Quaternion)orientationParamValueClassFactory.create();
			orientationParamValue.setDelegate(true);
			orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		}
		_setSkyBox(enableParamValue, materialNameParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue);
	}

	native private void _setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion(long pNativeObject, boolean enable, String materialName, double distance, short renderQueue, long orientation);
	public void _setSkyBox(boolean enable, String materialName, double distance, short renderQueue, com.earthview.world.spatial.math.Quaternion orientation)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		long orientationParamValue = orientation.nativeObject.pointer;
		_setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion(this.nativeObject.pointer, enableParamValue, materialNameParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue);
	}
	native private void _setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_NoVirtual(long pNativeObject, boolean enable, String materialName, double distance, short renderQueue, long orientation);
	protected void _setSkyBox_NoVirtual(boolean enable, String materialName, double distance, short renderQueue, com.earthview.world.spatial.math.Quaternion orientation)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		long orientationParamValue = orientation.nativeObject.pointer;
		_setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue);
	}

	protected  void _setSkyBox_ev_bool_EVString_Real_ev_uint8_callback(boolean enable, String materialName, double distance, short renderQueue)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		_setSkyBox(enableParamValue, materialNameParamValue, distanceParamValue, renderQueueParamValue);
	}

	native private void _setSkyBox_ev_bool_EVString_Real_ev_uint8(long pNativeObject, boolean enable, String materialName, double distance, short renderQueue);
	public void _setSkyBox(boolean enable, String materialName, double distance, short renderQueue)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		_setSkyBox_ev_bool_EVString_Real_ev_uint8(this.nativeObject.pointer, enableParamValue, materialNameParamValue, distanceParamValue, renderQueueParamValue);
	}
	native private void _setSkyBox_ev_bool_EVString_Real_ev_uint8_NoVirtual(long pNativeObject, boolean enable, String materialName, double distance, short renderQueue);
	protected void _setSkyBox_NoVirtual(boolean enable, String materialName, double distance, short renderQueue)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		_setSkyBox_ev_bool_EVString_Real_ev_uint8_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, distanceParamValue, renderQueueParamValue);
	}

	protected  void _setSkyBox_ev_bool_EVString_Real_callback(boolean enable, String materialName, double distance)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		_setSkyBox(enableParamValue, materialNameParamValue, distanceParamValue);
	}

	native private void _setSkyBox_ev_bool_EVString_Real(long pNativeObject, boolean enable, String materialName, double distance);
	public void _setSkyBox(boolean enable, String materialName, double distance)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		_setSkyBox_ev_bool_EVString_Real(this.nativeObject.pointer, enableParamValue, materialNameParamValue, distanceParamValue);
	}
	native private void _setSkyBox_ev_bool_EVString_Real_NoVirtual(long pNativeObject, boolean enable, String materialName, double distance);
	protected void _setSkyBox_NoVirtual(boolean enable, String materialName, double distance)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double distanceParamValue = distance;
		_setSkyBox_ev_bool_EVString_Real_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, distanceParamValue);
	}

	protected  void _setSkyBox_ev_bool_EVString_callback(boolean enable, String materialName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		_setSkyBox(enableParamValue, materialNameParamValue);
	}

	native private void _setSkyBox_ev_bool_EVString(long pNativeObject, boolean enable, String materialName);
	public void _setSkyBox(boolean enable, String materialName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		_setSkyBox_ev_bool_EVString(this.nativeObject.pointer, enableParamValue, materialNameParamValue);
	}
	native private void _setSkyBox_ev_bool_EVString_NoVirtual(long pNativeObject, boolean enable, String materialName);
	protected void _setSkyBox_NoVirtual(boolean enable, String materialName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		_setSkyBox_ev_bool_EVString_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue);
	}

	protected  void setSkyBoxEnabled_ev_bool_callback(boolean enable)
	{
		boolean enableParamValue = enable;
		setSkyBoxEnabled(enableParamValue);
	}

	native private void setSkyBoxEnabled_ev_bool(long pNativeObject, boolean enable);
	public void setSkyBoxEnabled(boolean enable)
	{
		boolean enableParamValue = enable;
		setSkyBoxEnabled_ev_bool(this.nativeObject.pointer, enableParamValue);
	}
	native private void setSkyBoxEnabled_ev_bool_NoVirtual(long pNativeObject, boolean enable);
	protected void setSkyBoxEnabled_NoVirtual(boolean enable)
	{
		boolean enableParamValue = enable;
		setSkyBoxEnabled_ev_bool_NoVirtual(this.nativeObject.pointer, enableParamValue);
	}

	protected  boolean isSkyBoxEnabled_void_callback()
	{
		boolean returnValue = isSkyBoxEnabled();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean isSkyBoxEnabled_void(long pNativeObject);
	public boolean isSkyBoxEnabled()
	{
		boolean returnValue = isSkyBoxEnabled_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean isSkyBoxEnabled_void_NoVirtual(long pNativeObject);
	protected boolean isSkyBoxEnabled_NoVirtual()
	{
		boolean returnValue = isSkyBoxEnabled_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  long getSkyBoxNode_void_callback()
	{
		com.earthview.world.graphic.SceneNode returnValue = getSkyBoxNode();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getSkyBoxNode_void(long pNativeObject);
	public com.earthview.world.graphic.SceneNode getSkyBoxNode()
	{
		long returnValue = getSkyBoxNode_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}
	native private long getSkyBoxNode_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.SceneNode getSkyBoxNode_NoVirtual()
	{
		long returnValue = getSkyBoxNode_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}

	protected  long getSkyBoxGenParameters_void_callback()
	{
		com.earthview.world.graphic.SceneManager.SkyBoxGenParameters returnValue = getSkyBoxGenParameters();
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getSkyBoxGenParameters_void(long pNativeObject);
	public com.earthview.world.graphic.SceneManager.SkyBoxGenParameters getSkyBoxGenParameters()
	{
		long returnValue = getSkyBoxGenParameters_void(this.nativeObject.pointer);
		com.earthview.world.graphic.SceneManager.SkyBoxGenParameters __returnValue = new com.earthview.world.graphic.SceneManager.SkyBoxGenParameters(new InstancePointer(returnValue));
		return __returnValue;
	}
	native private long getSkyBoxGenParameters_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.SceneManager.SkyBoxGenParameters getSkyBoxGenParameters_NoVirtual()
	{
		long returnValue = getSkyBoxGenParameters_void_NoVirtual(this.nativeObject.pointer);
		com.earthview.world.graphic.SceneManager.SkyBoxGenParameters __returnValue = new com.earthview.world.graphic.SceneManager.SkyBoxGenParameters(new InstancePointer(returnValue));
		return __returnValue;
	}

	protected  void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, long orientation, int xsegments, int ysegments, int ysegments_keep, String groupName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		com.earthview.world.spatial.math.Quaternion orientationParamValue = new com.earthview.world.spatial.math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
		orientationParamValue.setDelegate(true);
		orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		IClassFactory orientationParamValueClassFactory = GlobalClassFactoryMap.get(orientationParamValue.getCppInstanceTypeName());
		if (orientationParamValueClassFactory != null)
		{
			orientationParamValue.setDelegate(true);
			orientationParamValue = (com.earthview.world.spatial.math.Quaternion)orientationParamValueClassFactory.create();
			orientationParamValue.setDelegate(true);
			orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		}
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		int ysegments_keepParamValue = ysegments_keep;
		String groupNameParamValue = groupName;
		setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue, ysegments_keepParamValue, groupNameParamValue);
	}

	native private void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, long orientation, int xsegments, int ysegments, int ysegments_keep, String groupName);
	/**
	 * 确认是否启用一个天空穹
	 * @param enable ture为启用，false为不启用
	 * @param plane 平面的细节描述，它到摄像机的距离
	 * @param materialName 天空使用材质的名称
	 * @param scale 比例变换以适应天空平面
	 * @param tiling 指针
	 * @param drawFirst 指针
	 * @param bow 指针
	 * @param xsegments 指针
	 * @param ysegments 指针
	 * @param groupName 指针
	 */
	public void setSkyDome(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, com.earthview.world.spatial.math.Quaternion orientation, int xsegments, int ysegments, int ysegments_keep, String groupName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		int ysegments_keepParamValue = ysegments_keep;
		String groupNameParamValue = groupName;
		setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue, ysegments_keepParamValue, groupNameParamValue);
	}
	native private void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, long orientation, int xsegments, int ysegments, int ysegments_keep, String groupName);
	protected void setSkyDome_NoVirtual(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, com.earthview.world.spatial.math.Quaternion orientation, int xsegments, int ysegments, int ysegments_keep, String groupName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		int ysegments_keepParamValue = ysegments_keep;
		String groupNameParamValue = groupName;
		setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue, ysegments_keepParamValue, groupNameParamValue);
	}

	protected  void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_callback(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, long orientation, int xsegments, int ysegments, int ysegments_keep)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		com.earthview.world.spatial.math.Quaternion orientationParamValue = new com.earthview.world.spatial.math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
		orientationParamValue.setDelegate(true);
		orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		IClassFactory orientationParamValueClassFactory = GlobalClassFactoryMap.get(orientationParamValue.getCppInstanceTypeName());
		if (orientationParamValueClassFactory != null)
		{
			orientationParamValue.setDelegate(true);
			orientationParamValue = (com.earthview.world.spatial.math.Quaternion)orientationParamValueClassFactory.create();
			orientationParamValue.setDelegate(true);
			orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		}
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		int ysegments_keepParamValue = ysegments_keep;
		setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue, ysegments_keepParamValue);
	}

	native private void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, long orientation, int xsegments, int ysegments, int ysegments_keep);
	public void setSkyDome(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, com.earthview.world.spatial.math.Quaternion orientation, int xsegments, int ysegments, int ysegments_keep)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		int ysegments_keepParamValue = ysegments_keep;
		setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue, ysegments_keepParamValue);
	}
	native private void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, long orientation, int xsegments, int ysegments, int ysegments_keep);
	protected void setSkyDome_NoVirtual(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, com.earthview.world.spatial.math.Quaternion orientation, int xsegments, int ysegments, int ysegments_keep)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		int ysegments_keepParamValue = ysegments_keep;
		setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue, ysegments_keepParamValue);
	}

	protected  void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_callback(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, long orientation, int xsegments, int ysegments)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		com.earthview.world.spatial.math.Quaternion orientationParamValue = new com.earthview.world.spatial.math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
		orientationParamValue.setDelegate(true);
		orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		IClassFactory orientationParamValueClassFactory = GlobalClassFactoryMap.get(orientationParamValue.getCppInstanceTypeName());
		if (orientationParamValueClassFactory != null)
		{
			orientationParamValue.setDelegate(true);
			orientationParamValue = (com.earthview.world.spatial.math.Quaternion)orientationParamValueClassFactory.create();
			orientationParamValue.setDelegate(true);
			orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		}
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue);
	}

	native private void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, long orientation, int xsegments, int ysegments);
	public void setSkyDome(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, com.earthview.world.spatial.math.Quaternion orientation, int xsegments, int ysegments)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue);
	}
	native private void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, long orientation, int xsegments, int ysegments);
	protected void setSkyDome_NoVirtual(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, com.earthview.world.spatial.math.Quaternion orientation, int xsegments, int ysegments)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue);
	}

	protected  void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_callback(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, long orientation, int xsegments)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		com.earthview.world.spatial.math.Quaternion orientationParamValue = new com.earthview.world.spatial.math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
		orientationParamValue.setDelegate(true);
		orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		IClassFactory orientationParamValueClassFactory = GlobalClassFactoryMap.get(orientationParamValue.getCppInstanceTypeName());
		if (orientationParamValueClassFactory != null)
		{
			orientationParamValue.setDelegate(true);
			orientationParamValue = (com.earthview.world.spatial.math.Quaternion)orientationParamValueClassFactory.create();
			orientationParamValue.setDelegate(true);
			orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		}
		int xsegmentsParamValue = xsegments;
		setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue, xsegmentsParamValue);
	}

	native private void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, long orientation, int xsegments);
	public void setSkyDome(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, com.earthview.world.spatial.math.Quaternion orientation, int xsegments)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue, xsegmentsParamValue);
	}
	native private void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, long orientation, int xsegments);
	protected void setSkyDome_NoVirtual(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, com.earthview.world.spatial.math.Quaternion orientation, int xsegments)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue, xsegmentsParamValue);
	}

	protected  void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_callback(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, long orientation)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		com.earthview.world.spatial.math.Quaternion orientationParamValue = new com.earthview.world.spatial.math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
		orientationParamValue.setDelegate(true);
		orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		IClassFactory orientationParamValueClassFactory = GlobalClassFactoryMap.get(orientationParamValue.getCppInstanceTypeName());
		if (orientationParamValueClassFactory != null)
		{
			orientationParamValue.setDelegate(true);
			orientationParamValue = (com.earthview.world.spatial.math.Quaternion)orientationParamValueClassFactory.create();
			orientationParamValue.setDelegate(true);
			orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		}
		setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue);
	}

	native private void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, long orientation);
	public void setSkyDome(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, com.earthview.world.spatial.math.Quaternion orientation)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		long orientationParamValue = orientation.nativeObject.pointer;
		setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue);
	}
	native private void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, long orientation);
	protected void setSkyDome_NoVirtual(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst, com.earthview.world.spatial.math.Quaternion orientation)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		long orientationParamValue = orientation.nativeObject.pointer;
		setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue, orientationParamValue);
	}

	protected  void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_callback(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue);
	}

	native private void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst);
	public void setSkyDome(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue);
	}
	native private void setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst);
	protected void setSkyDome_NoVirtual(boolean enable, String materialName, double curvature, double tiling, double distance, boolean drawFirst)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		boolean drawFirstParamValue = drawFirst;
		setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, drawFirstParamValue);
	}

	protected  void setSkyDome_ev_bool_EVString_Real_Real_Real_callback(boolean enable, String materialName, double curvature, double tiling, double distance)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue);
	}

	native private void setSkyDome_ev_bool_EVString_Real_Real_Real(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance);
	public void setSkyDome(boolean enable, String materialName, double curvature, double tiling, double distance)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		setSkyDome_ev_bool_EVString_Real_Real_Real(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue);
	}
	native private void setSkyDome_ev_bool_EVString_Real_Real_Real_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance);
	protected void setSkyDome_NoVirtual(boolean enable, String materialName, double curvature, double tiling, double distance)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		setSkyDome_ev_bool_EVString_Real_Real_Real_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue);
	}

	protected  void setSkyDome_ev_bool_EVString_Real_Real_callback(boolean enable, String materialName, double curvature, double tiling)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue);
	}

	native private void setSkyDome_ev_bool_EVString_Real_Real(long pNativeObject, boolean enable, String materialName, double curvature, double tiling);
	public void setSkyDome(boolean enable, String materialName, double curvature, double tiling)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		setSkyDome_ev_bool_EVString_Real_Real(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue);
	}
	native private void setSkyDome_ev_bool_EVString_Real_Real_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature, double tiling);
	protected void setSkyDome_NoVirtual(boolean enable, String materialName, double curvature, double tiling)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		setSkyDome_ev_bool_EVString_Real_Real_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue);
	}

	protected  void setSkyDome_ev_bool_EVString_Real_callback(boolean enable, String materialName, double curvature)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue);
	}

	native private void setSkyDome_ev_bool_EVString_Real(long pNativeObject, boolean enable, String materialName, double curvature);
	public void setSkyDome(boolean enable, String materialName, double curvature)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		setSkyDome_ev_bool_EVString_Real(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue);
	}
	native private void setSkyDome_ev_bool_EVString_Real_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature);
	protected void setSkyDome_NoVirtual(boolean enable, String materialName, double curvature)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		setSkyDome_ev_bool_EVString_Real_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue);
	}

	protected  void setSkyDome_ev_bool_EVString_callback(boolean enable, String materialName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		setSkyDome(enableParamValue, materialNameParamValue);
	}

	native private void setSkyDome_ev_bool_EVString(long pNativeObject, boolean enable, String materialName);
	public void setSkyDome(boolean enable, String materialName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		setSkyDome_ev_bool_EVString(this.nativeObject.pointer, enableParamValue, materialNameParamValue);
	}
	native private void setSkyDome_ev_bool_EVString_NoVirtual(long pNativeObject, boolean enable, String materialName);
	protected void setSkyDome_NoVirtual(boolean enable, String materialName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		setSkyDome_ev_bool_EVString_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue);
	}

	protected  void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, long orientation, int xsegments, int ysegments, int ysegments_keep, String groupName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		com.earthview.world.spatial.math.Quaternion orientationParamValue = new com.earthview.world.spatial.math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
		orientationParamValue.setDelegate(true);
		orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		IClassFactory orientationParamValueClassFactory = GlobalClassFactoryMap.get(orientationParamValue.getCppInstanceTypeName());
		if (orientationParamValueClassFactory != null)
		{
			orientationParamValue.setDelegate(true);
			orientationParamValue = (com.earthview.world.spatial.math.Quaternion)orientationParamValueClassFactory.create();
			orientationParamValue.setDelegate(true);
			orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		}
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		int ysegments_keepParamValue = ysegments_keep;
		String groupNameParamValue = groupName;
		_setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue, ysegments_keepParamValue, groupNameParamValue);
	}

	native private void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, long orientation, int xsegments, int ysegments, int ysegments_keep, String groupName);
	///     virtual void _setSkyDome(ev_bool enable, const EVString& materialName,
	///Real curvature = 10,
	///         Real tiling = 8, Real distance = 4000, ev_uint8 renderQueue = RENDER_QUEUE_SKIES_EARLY,
	///         const EarthView::World::Spatial::Math::CQuaternion& orientation = EarthView::World::Spatial::Math::CQuaternion::IDENTITY,
	///         ev_int32 xsegments = 16, ev_int32 ysegments = 16, ev_int32 ysegments_keep = -1,
	///         const EVString& groupName = CResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME);
	public void _setSkyDome(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, com.earthview.world.spatial.math.Quaternion orientation, int xsegments, int ysegments, int ysegments_keep, String groupName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		int ysegments_keepParamValue = ysegments_keep;
		String groupNameParamValue = groupName;
		_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue, ysegments_keepParamValue, groupNameParamValue);
	}
	native private void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, long orientation, int xsegments, int ysegments, int ysegments_keep, String groupName);
	protected void _setSkyDome_NoVirtual(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, com.earthview.world.spatial.math.Quaternion orientation, int xsegments, int ysegments, int ysegments_keep, String groupName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		int ysegments_keepParamValue = ysegments_keep;
		String groupNameParamValue = groupName;
		_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue, ysegments_keepParamValue, groupNameParamValue);
	}

	protected  void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_callback(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, long orientation, int xsegments, int ysegments, int ysegments_keep)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		com.earthview.world.spatial.math.Quaternion orientationParamValue = new com.earthview.world.spatial.math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
		orientationParamValue.setDelegate(true);
		orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		IClassFactory orientationParamValueClassFactory = GlobalClassFactoryMap.get(orientationParamValue.getCppInstanceTypeName());
		if (orientationParamValueClassFactory != null)
		{
			orientationParamValue.setDelegate(true);
			orientationParamValue = (com.earthview.world.spatial.math.Quaternion)orientationParamValueClassFactory.create();
			orientationParamValue.setDelegate(true);
			orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		}
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		int ysegments_keepParamValue = ysegments_keep;
		_setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue, ysegments_keepParamValue);
	}

	native private void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, long orientation, int xsegments, int ysegments, int ysegments_keep);
	public void _setSkyDome(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, com.earthview.world.spatial.math.Quaternion orientation, int xsegments, int ysegments, int ysegments_keep)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		int ysegments_keepParamValue = ysegments_keep;
		_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue, ysegments_keepParamValue);
	}
	native private void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, long orientation, int xsegments, int ysegments, int ysegments_keep);
	protected void _setSkyDome_NoVirtual(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, com.earthview.world.spatial.math.Quaternion orientation, int xsegments, int ysegments, int ysegments_keep)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		int ysegments_keepParamValue = ysegments_keep;
		_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue, ysegments_keepParamValue);
	}

	protected  void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_callback(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, long orientation, int xsegments, int ysegments)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		com.earthview.world.spatial.math.Quaternion orientationParamValue = new com.earthview.world.spatial.math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
		orientationParamValue.setDelegate(true);
		orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		IClassFactory orientationParamValueClassFactory = GlobalClassFactoryMap.get(orientationParamValue.getCppInstanceTypeName());
		if (orientationParamValueClassFactory != null)
		{
			orientationParamValue.setDelegate(true);
			orientationParamValue = (com.earthview.world.spatial.math.Quaternion)orientationParamValueClassFactory.create();
			orientationParamValue.setDelegate(true);
			orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		}
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		_setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue);
	}

	native private void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, long orientation, int xsegments, int ysegments);
	public void _setSkyDome(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, com.earthview.world.spatial.math.Quaternion orientation, int xsegments, int ysegments)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue);
	}
	native private void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, long orientation, int xsegments, int ysegments);
	protected void _setSkyDome_NoVirtual(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, com.earthview.world.spatial.math.Quaternion orientation, int xsegments, int ysegments)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		int ysegmentsParamValue = ysegments;
		_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue, xsegmentsParamValue, ysegmentsParamValue);
	}

	protected  void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_callback(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, long orientation, int xsegments)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		com.earthview.world.spatial.math.Quaternion orientationParamValue = new com.earthview.world.spatial.math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
		orientationParamValue.setDelegate(true);
		orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		IClassFactory orientationParamValueClassFactory = GlobalClassFactoryMap.get(orientationParamValue.getCppInstanceTypeName());
		if (orientationParamValueClassFactory != null)
		{
			orientationParamValue.setDelegate(true);
			orientationParamValue = (com.earthview.world.spatial.math.Quaternion)orientationParamValueClassFactory.create();
			orientationParamValue.setDelegate(true);
			orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		}
		int xsegmentsParamValue = xsegments;
		_setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue, xsegmentsParamValue);
	}

	native private void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, long orientation, int xsegments);
	public void _setSkyDome(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, com.earthview.world.spatial.math.Quaternion orientation, int xsegments)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue, xsegmentsParamValue);
	}
	native private void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, long orientation, int xsegments);
	protected void _setSkyDome_NoVirtual(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, com.earthview.world.spatial.math.Quaternion orientation, int xsegments)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		long orientationParamValue = orientation.nativeObject.pointer;
		int xsegmentsParamValue = xsegments;
		_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue, xsegmentsParamValue);
	}

	protected  void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_callback(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, long orientation)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		com.earthview.world.spatial.math.Quaternion orientationParamValue = new com.earthview.world.spatial.math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
		orientationParamValue.setDelegate(true);
		orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		IClassFactory orientationParamValueClassFactory = GlobalClassFactoryMap.get(orientationParamValue.getCppInstanceTypeName());
		if (orientationParamValueClassFactory != null)
		{
			orientationParamValue.setDelegate(true);
			orientationParamValue = (com.earthview.world.spatial.math.Quaternion)orientationParamValueClassFactory.create();
			orientationParamValue.setDelegate(true);
			orientationParamValue.setInstancePointer(new InstancePointer(orientation));
		}
		_setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue);
	}

	native private void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, long orientation);
	public void _setSkyDome(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, com.earthview.world.spatial.math.Quaternion orientation)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		long orientationParamValue = orientation.nativeObject.pointer;
		_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue);
	}
	native private void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, long orientation);
	protected void _setSkyDome_NoVirtual(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue, com.earthview.world.spatial.math.Quaternion orientation)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		long orientationParamValue = orientation.nativeObject.pointer;
		_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue, orientationParamValue);
	}

	protected  void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_callback(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		_setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue);
	}

	native private void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue);
	public void _setSkyDome(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue);
	}
	native private void _setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue);
	protected void _setSkyDome_NoVirtual(boolean enable, String materialName, double curvature, double tiling, double distance, short renderQueue)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		short renderQueueParamValue = renderQueue;
		_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue, renderQueueParamValue);
	}

	protected  void _setSkyDome_ev_bool_EVString_Real_Real_Real_callback(boolean enable, String materialName, double curvature, double tiling, double distance)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		_setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue);
	}

	native private void _setSkyDome_ev_bool_EVString_Real_Real_Real(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance);
	public void _setSkyDome(boolean enable, String materialName, double curvature, double tiling, double distance)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		_setSkyDome_ev_bool_EVString_Real_Real_Real(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue);
	}
	native private void _setSkyDome_ev_bool_EVString_Real_Real_Real_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature, double tiling, double distance);
	protected void _setSkyDome_NoVirtual(boolean enable, String materialName, double curvature, double tiling, double distance)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		double distanceParamValue = distance;
		_setSkyDome_ev_bool_EVString_Real_Real_Real_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue, distanceParamValue);
	}

	protected  void _setSkyDome_ev_bool_EVString_Real_Real_callback(boolean enable, String materialName, double curvature, double tiling)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		_setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue);
	}

	native private void _setSkyDome_ev_bool_EVString_Real_Real(long pNativeObject, boolean enable, String materialName, double curvature, double tiling);
	public void _setSkyDome(boolean enable, String materialName, double curvature, double tiling)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		_setSkyDome_ev_bool_EVString_Real_Real(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue);
	}
	native private void _setSkyDome_ev_bool_EVString_Real_Real_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature, double tiling);
	protected void _setSkyDome_NoVirtual(boolean enable, String materialName, double curvature, double tiling)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		double tilingParamValue = tiling;
		_setSkyDome_ev_bool_EVString_Real_Real_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue, tilingParamValue);
	}

	protected  void _setSkyDome_ev_bool_EVString_Real_callback(boolean enable, String materialName, double curvature)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		_setSkyDome(enableParamValue, materialNameParamValue, curvatureParamValue);
	}

	native private void _setSkyDome_ev_bool_EVString_Real(long pNativeObject, boolean enable, String materialName, double curvature);
	public void _setSkyDome(boolean enable, String materialName, double curvature)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		_setSkyDome_ev_bool_EVString_Real(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue);
	}
	native private void _setSkyDome_ev_bool_EVString_Real_NoVirtual(long pNativeObject, boolean enable, String materialName, double curvature);
	protected void _setSkyDome_NoVirtual(boolean enable, String materialName, double curvature)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		double curvatureParamValue = curvature;
		_setSkyDome_ev_bool_EVString_Real_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue, curvatureParamValue);
	}

	protected  void _setSkyDome_ev_bool_EVString_callback(boolean enable, String materialName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		_setSkyDome(enableParamValue, materialNameParamValue);
	}

	native private void _setSkyDome_ev_bool_EVString(long pNativeObject, boolean enable, String materialName);
	public void _setSkyDome(boolean enable, String materialName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		_setSkyDome_ev_bool_EVString(this.nativeObject.pointer, enableParamValue, materialNameParamValue);
	}
	native private void _setSkyDome_ev_bool_EVString_NoVirtual(long pNativeObject, boolean enable, String materialName);
	protected void _setSkyDome_NoVirtual(boolean enable, String materialName)
	{
		boolean enableParamValue = enable;
		String materialNameParamValue = materialName;
		_setSkyDome_ev_bool_EVString_NoVirtual(this.nativeObject.pointer, enableParamValue, materialNameParamValue);
	}

	protected  void setSkyDomeEnabled_ev_bool_callback(boolean enable)
	{
		boolean enableParamValue = enable;
		setSkyDomeEnabled(enableParamValue);
	}

	native private void setSkyDomeEnabled_ev_bool(long pNativeObject, boolean enable);
	public void setSkyDomeEnabled(boolean enable)
	{
		boolean enableParamValue = enable;
		setSkyDomeEnabled_ev_bool(this.nativeObject.pointer, enableParamValue);
	}
	native private void setSkyDomeEnabled_ev_bool_NoVirtual(long pNativeObject, boolean enable);
	protected void setSkyDomeEnabled_NoVirtual(boolean enable)
	{
		boolean enableParamValue = enable;
		setSkyDomeEnabled_ev_bool_NoVirtual(this.nativeObject.pointer, enableParamValue);
	}

	protected  boolean isSkyDomeEnabled_void_callback()
	{
		boolean returnValue = isSkyDomeEnabled();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean isSkyDomeEnabled_void(long pNativeObject);
	public boolean isSkyDomeEnabled()
	{
		boolean returnValue = isSkyDomeEnabled_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean isSkyDomeEnabled_void_NoVirtual(long pNativeObject);
	protected boolean isSkyDomeEnabled_NoVirtual()
	{
		boolean returnValue = isSkyDomeEnabled_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  long getSkyDomeNode_void_callback()
	{
		com.earthview.world.graphic.SceneNode returnValue = getSkyDomeNode();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getSkyDomeNode_void(long pNativeObject);
	public com.earthview.world.graphic.SceneNode getSkyDomeNode()
	{
		long returnValue = getSkyDomeNode_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}
	native private long getSkyDomeNode_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.SceneNode getSkyDomeNode_NoVirtual()
	{
		long returnValue = getSkyDomeNode_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneNode __returnValue = new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate, "CSceneNode");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneNode)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CSceneNode");
		}
		return __returnValue;
	}

	protected  long getSkyDomeGenParameters_void_callback()
	{
		com.earthview.world.graphic.SceneManager.SkyDomeGenParameters returnValue = getSkyDomeGenParameters();
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getSkyDomeGenParameters_void(long pNativeObject);
	public com.earthview.world.graphic.SceneManager.SkyDomeGenParameters getSkyDomeGenParameters()
	{
		long returnValue = getSkyDomeGenParameters_void(this.nativeObject.pointer);
		com.earthview.world.graphic.SceneManager.SkyDomeGenParameters __returnValue = new com.earthview.world.graphic.SceneManager.SkyDomeGenParameters(new InstancePointer(returnValue));
		return __returnValue;
	}
	native private long getSkyDomeGenParameters_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.SceneManager.SkyDomeGenParameters getSkyDomeGenParameters_NoVirtual()
	{
		long returnValue = getSkyDomeGenParameters_void_NoVirtual(this.nativeObject.pointer);
		com.earthview.world.graphic.SceneManager.SkyDomeGenParameters __returnValue = new com.earthview.world.graphic.SceneManager.SkyDomeGenParameters(new InstancePointer(returnValue));
		return __returnValue;
	}

	native private void setFog_FogMode_CColourValue_Real_Real_Real(long pNativeObject, int mode, long colour, double expDensity, double linearStart, double linearEnd);
	///void setFog(
	///    EarthView::World::Graphic::FogMode mode = FOG_NONE, const EarthView::World::Graphic::CColourValue& colour = EarthView::World::Graphic::CColourValue::White,
	///    Real expDensity = 0.001, Real linearStart = 0.0, Real linearEnd = 1.0);
	public void setFog(com.earthview.world.graphic.FogMode mode, com.earthview.world.graphic.ColourValue colour, double expDensity, double linearStart, double linearEnd)
	{
		int modeParamValue = mode.getValue();
		long colourParamValue = colour.nativeObject.pointer;
		double expDensityParamValue = expDensity;
		double linearStartParamValue = linearStart;
		double linearEndParamValue = linearEnd;
		setFog_FogMode_CColourValue_Real_Real_Real(this.nativeObject.pointer, modeParamValue, colourParamValue, expDensityParamValue, linearStartParamValue, linearEndParamValue);
	}
	native private void setFog_FogMode_CColourValue_Real_Real(long pNativeObject, int mode, long colour, double expDensity, double linearStart);
	public void setFog(com.earthview.world.graphic.FogMode mode, com.earthview.world.graphic.ColourValue colour, double expDensity, double linearStart)
	{
		int modeParamValue = mode.getValue();
		long colourParamValue = colour.nativeObject.pointer;
		double expDensityParamValue = expDensity;
		double linearStartParamValue = linearStart;
		setFog_FogMode_CColourValue_Real_Real(this.nativeObject.pointer, modeParamValue, colourParamValue, expDensityParamValue, linearStartParamValue);
	}
	native private void setFog_FogMode_CColourValue_Real(long pNativeObject, int mode, long colour, double expDensity);
	public void setFog(com.earthview.world.graphic.FogMode mode, com.earthview.world.graphic.ColourValue colour, double expDensity)
	{
		int modeParamValue = mode.getValue();
		long colourParamValue = colour.nativeObject.pointer;
		double expDensityParamValue = expDensity;
		setFog_FogMode_CColourValue_Real(this.nativeObject.pointer, modeParamValue, colourParamValue, expDensityParamValue);
	}
	native private void setFog_FogMode_CColourValue(long pNativeObject, int mode, long colour);
	public void setFog(com.earthview.world.graphic.FogMode mode, com.earthview.world.graphic.ColourValue colour)
	{
		int modeParamValue = mode.getValue();
		long colourParamValue = colour.nativeObject.pointer;
		setFog_FogMode_CColourValue(this.nativeObject.pointer, modeParamValue, colourParamValue);
	}
	native private void setFog_FogMode(long pNativeObject, int mode);
	public void setFog(com.earthview.world.graphic.FogMode mode)
	{
		int modeParamValue = mode.getValue();
		setFog_FogMode(this.nativeObject.pointer, modeParamValue);
	}
	native private void setFog_void(long pNativeObject);
	public void setFog()
	{
		setFog_void(this.nativeObject.pointer);
	}
	protected  int getFogMode_void_callback()
	{
		com.earthview.world.graphic.FogMode returnValue = getFogMode();
		int __returnValue = returnValue.getValue();
		return __returnValue;
	}

	native private int getFogMode_void(long pNativeObject);
	public com.earthview.world.graphic.FogMode getFogMode()
	{
		int returnValue = getFogMode_void(this.nativeObject.pointer);
		return com.earthview.world.graphic.FogMode.toEnum(returnValue);
	}
	native private int getFogMode_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.FogMode getFogMode_NoVirtual()
	{
		int returnValue = getFogMode_void_NoVirtual(this.nativeObject.pointer);
		return com.earthview.world.graphic.FogMode.toEnum(returnValue);
	}

	protected  long getFogColour_void_callback()
	{
		com.earthview.world.graphic.ColourValue returnValue = getFogColour();
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getFogColour_void(long pNativeObject);
	public com.earthview.world.graphic.ColourValue getFogColour()
	{
		long returnValue = getFogColour_void(this.nativeObject.pointer);
		com.earthview.world.graphic.ColourValue __returnValue = new com.earthview.world.graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate, "CColourValue");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ColourValue)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CColourValue");
		}
		return __returnValue;
	}
	native private long getFogColour_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.ColourValue getFogColour_NoVirtual()
	{
		long returnValue = getFogColour_void_NoVirtual(this.nativeObject.pointer);
		com.earthview.world.graphic.ColourValue __returnValue = new com.earthview.world.graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate, "CColourValue");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ColourValue)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CColourValue");
		}
		return __returnValue;
	}

	protected  double getFogStart_void_callback()
	{
		double returnValue = getFogStart();
		double __returnValue = returnValue;
		return __returnValue;
	}

	native private double getFogStart_void(long pNativeObject);
	public double getFogStart()
	{
		double returnValue = getFogStart_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private double getFogStart_void_NoVirtual(long pNativeObject);
	protected double getFogStart_NoVirtual()
	{
		double returnValue = getFogStart_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  double getFogEnd_void_callback()
	{
		double returnValue = getFogEnd();
		double __returnValue = returnValue;
		return __returnValue;
	}

	native private double getFogEnd_void(long pNativeObject);
	public double getFogEnd()
	{
		double returnValue = getFogEnd_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private double getFogEnd_void_NoVirtual(long pNativeObject);
	protected double getFogEnd_NoVirtual()
	{
		double returnValue = getFogEnd_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  double getFogDensity_void_callback()
	{
		double returnValue = getFogDensity();
		double __returnValue = returnValue;
		return __returnValue;
	}

	native private double getFogDensity_void(long pNativeObject);
	public double getFogDensity()
	{
		double returnValue = getFogDensity_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private double getFogDensity_void_NoVirtual(long pNativeObject);
	protected double getFogDensity_NoVirtual()
	{
		double returnValue = getFogDensity_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  long createBillboardSet_EVString_ev_uint32_callback(String name, long poolSize)
	{
		String nameParamValue = name;
		long poolSizeParamValue = poolSize;
		com.earthview.world.graphic.BillboardSet returnValue = createBillboardSet(nameParamValue, poolSizeParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createBillboardSet_EVString_ev_uint32(long pNativeObject, String name, long poolSize);
	public com.earthview.world.graphic.BillboardSet createBillboardSet(String name, long poolSize)
	{
		String nameParamValue = name;
		long poolSizeParamValue = poolSize;
		long returnValue = createBillboardSet_EVString_ev_uint32(this.nativeObject.pointer, nameParamValue, poolSizeParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.BillboardSet __returnValue = new com.earthview.world.graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate, "CBillboardSet");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.BillboardSet)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CBillboardSet");
		}
		return __returnValue;
	}
	native private long createBillboardSet_EVString_ev_uint32_NoVirtual(long pNativeObject, String name, long poolSize);
	protected com.earthview.world.graphic.BillboardSet createBillboardSet_NoVirtual(String name, long poolSize)
	{
		String nameParamValue = name;
		long poolSizeParamValue = poolSize;
		long returnValue = createBillboardSet_EVString_ev_uint32_NoVirtual(this.nativeObject.pointer, nameParamValue, poolSizeParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.BillboardSet __returnValue = new com.earthview.world.graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate, "CBillboardSet");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.BillboardSet)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CBillboardSet");
		}
		return __returnValue;
	}

	protected  long createBillboardSet_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.BillboardSet returnValue = createBillboardSet(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createBillboardSet_EVString(long pNativeObject, String name);
	public com.earthview.world.graphic.BillboardSet createBillboardSet(String name)
	{
		String nameParamValue = name;
		long returnValue = createBillboardSet_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.BillboardSet __returnValue = new com.earthview.world.graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate, "CBillboardSet");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.BillboardSet)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CBillboardSet");
		}
		return __returnValue;
	}
	native private long createBillboardSet_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.BillboardSet createBillboardSet_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = createBillboardSet_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.BillboardSet __returnValue = new com.earthview.world.graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate, "CBillboardSet");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.BillboardSet)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CBillboardSet");
		}
		return __returnValue;
	}

	protected  long createBillboardSet_ev_uint32_callback(long poolSize)
	{
		long poolSizeParamValue = poolSize;
		com.earthview.world.graphic.BillboardSet returnValue = createBillboardSet(poolSizeParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createBillboardSet_ev_uint32(long pNativeObject, long poolSize);
	public com.earthview.world.graphic.BillboardSet createBillboardSet(long poolSize)
	{
		long poolSizeParamValue = poolSize;
		long returnValue = createBillboardSet_ev_uint32(this.nativeObject.pointer, poolSizeParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.BillboardSet __returnValue = new com.earthview.world.graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate, "CBillboardSet");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.BillboardSet)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CBillboardSet");
		}
		return __returnValue;
	}
	native private long createBillboardSet_ev_uint32_NoVirtual(long pNativeObject, long poolSize);
	protected com.earthview.world.graphic.BillboardSet createBillboardSet_NoVirtual(long poolSize)
	{
		long poolSizeParamValue = poolSize;
		long returnValue = createBillboardSet_ev_uint32_NoVirtual(this.nativeObject.pointer, poolSizeParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.BillboardSet __returnValue = new com.earthview.world.graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate, "CBillboardSet");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.BillboardSet)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CBillboardSet");
		}
		return __returnValue;
	}

	protected  long createBillboardSet_void_callback()
	{
		com.earthview.world.graphic.BillboardSet returnValue = createBillboardSet();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createBillboardSet_void(long pNativeObject);
	public com.earthview.world.graphic.BillboardSet createBillboardSet()
	{
		long returnValue = createBillboardSet_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.BillboardSet __returnValue = new com.earthview.world.graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate, "CBillboardSet");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.BillboardSet)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CBillboardSet");
		}
		return __returnValue;
	}
	native private long createBillboardSet_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.BillboardSet createBillboardSet_NoVirtual()
	{
		long returnValue = createBillboardSet_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.BillboardSet __returnValue = new com.earthview.world.graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate, "CBillboardSet");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.BillboardSet)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CBillboardSet");
		}
		return __returnValue;
	}

	protected  long getBillboardSet_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.BillboardSet returnValue = getBillboardSet(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getBillboardSet_EVString(long pNativeObject, String name);
	public com.earthview.world.graphic.BillboardSet getBillboardSet(String name)
	{
		String nameParamValue = name;
		long returnValue = getBillboardSet_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.BillboardSet __returnValue = new com.earthview.world.graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate, "CBillboardSet");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.BillboardSet)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CBillboardSet");
		}
		return __returnValue;
	}
	native private long getBillboardSet_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.BillboardSet getBillboardSet_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = getBillboardSet_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.BillboardSet __returnValue = new com.earthview.world.graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate, "CBillboardSet");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.BillboardSet)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CBillboardSet");
		}
		return __returnValue;
	}

	protected  boolean hasBillboardSet_EVString_callback(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasBillboardSet(nameParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean hasBillboardSet_EVString(long pNativeObject, String name);
	public boolean hasBillboardSet(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasBillboardSet_EVString(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}
	native private boolean hasBillboardSet_EVString_NoVirtual(long pNativeObject, String name);
	protected boolean hasBillboardSet_NoVirtual(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasBillboardSet_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}

	protected  void destroyBillboardSet_CBillboardSet_callback(long set)
	{
		com.earthview.world.graphic.BillboardSet setParamValue = (set == 0L ? null : new com.earthview.world.graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate));
		if(setParamValue != null)
		{
		setParamValue.setDelegate(true);
		setParamValue.setInstancePointer(new InstancePointer(set));
		IClassFactory setParamValueClassFactory = GlobalClassFactoryMap.get(setParamValue.getCppInstanceTypeName());
		if (setParamValueClassFactory != null)
		{
			setParamValue.setDelegate(true);
			setParamValue = (com.earthview.world.graphic.BillboardSet)setParamValueClassFactory.create();
			setParamValue.setDelegate(true);
			setParamValue.setInstancePointer(new InstancePointer(set));
		}
		}
		destroyBillboardSet(setParamValue);
	}

	native private void destroyBillboardSet_CBillboardSet(long pNativeObject, long set);
	public void destroyBillboardSet(com.earthview.world.graphic.BillboardSet set)
	{
		long setParamValue = (set == null ? 0L : set.nativeObject.pointer);
		destroyBillboardSet_CBillboardSet(this.nativeObject.pointer, setParamValue);
	}
	native private void destroyBillboardSet_CBillboardSet_NoVirtual(long pNativeObject, long set);
	protected void destroyBillboardSet_NoVirtual(com.earthview.world.graphic.BillboardSet set)
	{
		long setParamValue = (set == null ? 0L : set.nativeObject.pointer);
		destroyBillboardSet_CBillboardSet_NoVirtual(this.nativeObject.pointer, setParamValue);
	}

	protected  void destroyBillboardSet_EVString_callback(String name)
	{
		String nameParamValue = name;
		destroyBillboardSet(nameParamValue);
	}

	native private void destroyBillboardSet_EVString(long pNativeObject, String name);
	public void destroyBillboardSet(String name)
	{
		String nameParamValue = name;
		destroyBillboardSet_EVString(this.nativeObject.pointer, nameParamValue);
	}
	native private void destroyBillboardSet_EVString_NoVirtual(long pNativeObject, String name);
	protected void destroyBillboardSet_NoVirtual(String name)
	{
		String nameParamValue = name;
		destroyBillboardSet_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
	}

	protected  void destroyAllBillboardSets_void_callback()
	{
		destroyAllBillboardSets();
	}

	native private void destroyAllBillboardSets_void(long pNativeObject);
	public void destroyAllBillboardSets()
	{
		destroyAllBillboardSets_void(this.nativeObject.pointer);
	}
	native private void destroyAllBillboardSets_void_NoVirtual(long pNativeObject);
	protected void destroyAllBillboardSets_NoVirtual()
	{
		destroyAllBillboardSets_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void setDisplaySceneNodes_ev_bool_callback(boolean display)
	{
		boolean displayParamValue = display;
		setDisplaySceneNodes(displayParamValue);
	}

	native private void setDisplaySceneNodes_ev_bool(long pNativeObject, boolean display);
	/**
	 * 设置是否显示场景节点的坐标轴
	 */
	public void setDisplaySceneNodes(boolean display)
	{
		boolean displayParamValue = display;
		setDisplaySceneNodes_ev_bool(this.nativeObject.pointer, displayParamValue);
	}
	native private void setDisplaySceneNodes_ev_bool_NoVirtual(long pNativeObject, boolean display);
	protected void setDisplaySceneNodes_NoVirtual(boolean display)
	{
		boolean displayParamValue = display;
		setDisplaySceneNodes_ev_bool_NoVirtual(this.nativeObject.pointer, displayParamValue);
	}

	protected  boolean getDisplaySceneNodes_void_callback()
	{
		boolean returnValue = getDisplaySceneNodes();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getDisplaySceneNodes_void(long pNativeObject);
	/**
	 * 设置是否显示场景节点的坐标轴			
	 */
	public boolean getDisplaySceneNodes()
	{
		boolean returnValue = getDisplaySceneNodes_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean getDisplaySceneNodes_void_NoVirtual(long pNativeObject);
	protected boolean getDisplaySceneNodes_NoVirtual()
	{
		boolean returnValue = getDisplaySceneNodes_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  long createAnimation_EVString_Real_callback(String name, double length)
	{
		String nameParamValue = name;
		double lengthParamValue = length;
		com.earthview.world.graphic.Animation returnValue = createAnimation(nameParamValue, lengthParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createAnimation_EVString_Real(long pNativeObject, String name, double length);
	/**
	 * 创建场景节点动画
	 * @param name 动画名称
	 * @param length 动画时长:单位为秒
	 */
	public com.earthview.world.graphic.Animation createAnimation(String name, double length)
	{
		String nameParamValue = name;
		double lengthParamValue = length;
		long returnValue = createAnimation_EVString_Real(this.nativeObject.pointer, nameParamValue, lengthParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Animation __returnValue = new com.earthview.world.graphic.Animation(CreatedWhenConstruct.CWC_NotToCreate, "CAnimation");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Animation)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CAnimation");
		}
		return __returnValue;
	}
	native private long createAnimation_EVString_Real_NoVirtual(long pNativeObject, String name, double length);
	protected com.earthview.world.graphic.Animation createAnimation_NoVirtual(String name, double length)
	{
		String nameParamValue = name;
		double lengthParamValue = length;
		long returnValue = createAnimation_EVString_Real_NoVirtual(this.nativeObject.pointer, nameParamValue, lengthParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Animation __returnValue = new com.earthview.world.graphic.Animation(CreatedWhenConstruct.CWC_NotToCreate, "CAnimation");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Animation)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CAnimation");
		}
		return __returnValue;
	}

	protected  long getAnimation_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.Animation returnValue = getAnimation(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getAnimation_EVString(long pNativeObject, String name);
	/**
	 * 获取给定名称的场景节点动画
	 * @param name 动画名称
	 */
	public com.earthview.world.graphic.Animation getAnimation(String name)
	{
		String nameParamValue = name;
		long returnValue = getAnimation_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Animation __returnValue = new com.earthview.world.graphic.Animation(CreatedWhenConstruct.CWC_NotToCreate, "CAnimation");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Animation)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CAnimation");
		}
		return __returnValue;
	}
	native private long getAnimation_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.Animation getAnimation_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = getAnimation_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Animation __returnValue = new com.earthview.world.graphic.Animation(CreatedWhenConstruct.CWC_NotToCreate, "CAnimation");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Animation)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CAnimation");
		}
		return __returnValue;
	}

	protected  boolean hasAnimation_EVString_callback(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasAnimation(nameParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean hasAnimation_EVString(long pNativeObject, String name);
	/**
	 * 判断给定名称的场景节点动画是否存在
	 * @param name 动画名称
	 */
	public boolean hasAnimation(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasAnimation_EVString(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}
	native private boolean hasAnimation_EVString_NoVirtual(long pNativeObject, String name);
	protected boolean hasAnimation_NoVirtual(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasAnimation_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}

	protected  void destroyAnimation_EVString_callback(String name)
	{
		String nameParamValue = name;
		destroyAnimation(nameParamValue);
	}

	native private void destroyAnimation_EVString(long pNativeObject, String name);
	/**
	 * 销毁给定名称的场景节点动画
	 * @param name 动画名称
	 */
	public void destroyAnimation(String name)
	{
		String nameParamValue = name;
		destroyAnimation_EVString(this.nativeObject.pointer, nameParamValue);
	}
	native private void destroyAnimation_EVString_NoVirtual(long pNativeObject, String name);
	protected void destroyAnimation_NoVirtual(String name)
	{
		String nameParamValue = name;
		destroyAnimation_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
	}

	protected  void destroyAllAnimations_void_callback()
	{
		destroyAllAnimations();
	}

	native private void destroyAllAnimations_void(long pNativeObject);
	/**
	 * 销毁所有场景节点动画
	 * @param name 动画名称
	 */
	public void destroyAllAnimations()
	{
		destroyAllAnimations_void(this.nativeObject.pointer);
	}
	native private void destroyAllAnimations_void_NoVirtual(long pNativeObject);
	protected void destroyAllAnimations_NoVirtual()
	{
		destroyAllAnimations_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  long createAnimationState_EVString_callback(String animName)
	{
		String animNameParamValue = animName;
		com.earthview.world.graphic.AnimationState returnValue = createAnimationState(animNameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createAnimationState_EVString(long pNativeObject, String animName);
	/**
	 * 为给定名称的场景节点动画创建一个动画状态类(播放控制类)
	 * @param animName 动画名称
	 */
	public com.earthview.world.graphic.AnimationState createAnimationState(String animName)
	{
		String animNameParamValue = animName;
		long returnValue = createAnimationState_EVString(this.nativeObject.pointer, animNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.AnimationState __returnValue = new com.earthview.world.graphic.AnimationState(CreatedWhenConstruct.CWC_NotToCreate, "CAnimationState");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.AnimationState)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CAnimationState");
		}
		return __returnValue;
	}
	native private long createAnimationState_EVString_NoVirtual(long pNativeObject, String animName);
	protected com.earthview.world.graphic.AnimationState createAnimationState_NoVirtual(String animName)
	{
		String animNameParamValue = animName;
		long returnValue = createAnimationState_EVString_NoVirtual(this.nativeObject.pointer, animNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.AnimationState __returnValue = new com.earthview.world.graphic.AnimationState(CreatedWhenConstruct.CWC_NotToCreate, "CAnimationState");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.AnimationState)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CAnimationState");
		}
		return __returnValue;
	}

	protected  long getAnimationState_EVString_callback(String animName)
	{
		String animNameParamValue = animName;
		com.earthview.world.graphic.AnimationState returnValue = getAnimationState(animNameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getAnimationState_EVString(long pNativeObject, String animName);
	/**
	 * 获取给定名称的场景节点动画对应的动画状态类(播放控制类)
	 * @param animName 动画名称
	 */
	public com.earthview.world.graphic.AnimationState getAnimationState(String animName)
	{
		String animNameParamValue = animName;
		long returnValue = getAnimationState_EVString(this.nativeObject.pointer, animNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.AnimationState __returnValue = new com.earthview.world.graphic.AnimationState(CreatedWhenConstruct.CWC_NotToCreate, "CAnimationState");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.AnimationState)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CAnimationState");
		}
		return __returnValue;
	}
	native private long getAnimationState_EVString_NoVirtual(long pNativeObject, String animName);
	protected com.earthview.world.graphic.AnimationState getAnimationState_NoVirtual(String animName)
	{
		String animNameParamValue = animName;
		long returnValue = getAnimationState_EVString_NoVirtual(this.nativeObject.pointer, animNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.AnimationState __returnValue = new com.earthview.world.graphic.AnimationState(CreatedWhenConstruct.CWC_NotToCreate, "CAnimationState");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.AnimationState)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CAnimationState");
		}
		return __returnValue;
	}

	protected  boolean hasAnimationState_EVString_callback(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasAnimationState(nameParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean hasAnimationState_EVString(long pNativeObject, String name);
	/**
	 * 判断给定名称的场景节点动画状态类是否存在
	 * @param name 动画名称
	 */
	public boolean hasAnimationState(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasAnimationState_EVString(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}
	native private boolean hasAnimationState_EVString_NoVirtual(long pNativeObject, String name);
	protected boolean hasAnimationState_NoVirtual(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasAnimationState_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}

	protected  void destroyAnimationState_EVString_callback(String name)
	{
		String nameParamValue = name;
		destroyAnimationState(nameParamValue);
	}

	native private void destroyAnimationState_EVString(long pNativeObject, String name);
	/**
	 * 销毁给定名称的场景节点动画状态类(播放控制类)
	 * @param name 动画名称
	 */
	public void destroyAnimationState(String name)
	{
		String nameParamValue = name;
		destroyAnimationState_EVString(this.nativeObject.pointer, nameParamValue);
	}
	native private void destroyAnimationState_EVString_NoVirtual(long pNativeObject, String name);
	protected void destroyAnimationState_NoVirtual(String name)
	{
		String nameParamValue = name;
		destroyAnimationState_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
	}

	protected  void destroyAllAnimationStates_void_callback()
	{
		destroyAllAnimationStates();
	}

	native private void destroyAllAnimationStates_void(long pNativeObject);
	/**
	 * 销毁所有场景节点动画状态类(播放控制类)
	 * @param  
	 */
	public void destroyAllAnimationStates()
	{
		destroyAllAnimationStates_void(this.nativeObject.pointer);
	}
	native private void destroyAllAnimationStates_void_NoVirtual(long pNativeObject);
	protected void destroyAllAnimationStates_NoVirtual()
	{
		destroyAllAnimationStates_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_callback(long rend, long pass, long vp, long worldMatrix, long viewMatrix, long projMatrix, boolean doBeginEndFrame)
	{
		com.earthview.world.graphic.RenderOperation rendParamValue = (rend == 0L ? null : new com.earthview.world.graphic.RenderOperation(CreatedWhenConstruct.CWC_NotToCreate));
		if(rendParamValue != null)
		{
		rendParamValue.setDelegate(true);
		rendParamValue.setInstancePointer(new InstancePointer(rend));
		IClassFactory rendParamValueClassFactory = GlobalClassFactoryMap.get(rendParamValue.getCppInstanceTypeName());
		if (rendParamValueClassFactory != null)
		{
			rendParamValue.setDelegate(true);
			rendParamValue = (com.earthview.world.graphic.RenderOperation)rendParamValueClassFactory.create();
			rendParamValue.setDelegate(true);
			rendParamValue.setInstancePointer(new InstancePointer(rend));
		}
		}
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.Viewport vpParamValue = (vp == 0L ? null : new com.earthview.world.graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate));
		if(vpParamValue != null)
		{
		vpParamValue.setDelegate(true);
		vpParamValue.setInstancePointer(new InstancePointer(vp));
		IClassFactory vpParamValueClassFactory = GlobalClassFactoryMap.get(vpParamValue.getCppInstanceTypeName());
		if (vpParamValueClassFactory != null)
		{
			vpParamValue.setDelegate(true);
			vpParamValue = (com.earthview.world.graphic.Viewport)vpParamValueClassFactory.create();
			vpParamValue.setDelegate(true);
			vpParamValue.setInstancePointer(new InstancePointer(vp));
		}
		}
		com.earthview.world.spatial.math.Matrix4 worldMatrixParamValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		worldMatrixParamValue.setDelegate(true);
		worldMatrixParamValue.setInstancePointer(new InstancePointer(worldMatrix));
		IClassFactory worldMatrixParamValueClassFactory = GlobalClassFactoryMap.get(worldMatrixParamValue.getCppInstanceTypeName());
		if (worldMatrixParamValueClassFactory != null)
		{
			worldMatrixParamValue.setDelegate(true);
			worldMatrixParamValue = (com.earthview.world.spatial.math.Matrix4)worldMatrixParamValueClassFactory.create();
			worldMatrixParamValue.setDelegate(true);
			worldMatrixParamValue.setInstancePointer(new InstancePointer(worldMatrix));
		}
		com.earthview.world.spatial.math.Matrix4 viewMatrixParamValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		viewMatrixParamValue.setDelegate(true);
		viewMatrixParamValue.setInstancePointer(new InstancePointer(viewMatrix));
		IClassFactory viewMatrixParamValueClassFactory = GlobalClassFactoryMap.get(viewMatrixParamValue.getCppInstanceTypeName());
		if (viewMatrixParamValueClassFactory != null)
		{
			viewMatrixParamValue.setDelegate(true);
			viewMatrixParamValue = (com.earthview.world.spatial.math.Matrix4)viewMatrixParamValueClassFactory.create();
			viewMatrixParamValue.setDelegate(true);
			viewMatrixParamValue.setInstancePointer(new InstancePointer(viewMatrix));
		}
		com.earthview.world.spatial.math.Matrix4 projMatrixParamValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		projMatrixParamValue.setDelegate(true);
		projMatrixParamValue.setInstancePointer(new InstancePointer(projMatrix));
		IClassFactory projMatrixParamValueClassFactory = GlobalClassFactoryMap.get(projMatrixParamValue.getCppInstanceTypeName());
		if (projMatrixParamValueClassFactory != null)
		{
			projMatrixParamValue.setDelegate(true);
			projMatrixParamValue = (com.earthview.world.spatial.math.Matrix4)projMatrixParamValueClassFactory.create();
			projMatrixParamValue.setDelegate(true);
			projMatrixParamValue.setInstancePointer(new InstancePointer(projMatrix));
		}
		boolean doBeginEndFrameParamValue = doBeginEndFrame;
		manualRender(rendParamValue, passParamValue, vpParamValue, worldMatrixParamValue, viewMatrixParamValue, projMatrixParamValue, doBeginEndFrameParamValue);
	}

	native private void manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool(long pNativeObject, long rend, long pass, long vp, long worldMatrix, long viewMatrix, long projMatrix, boolean doBeginEndFrame);
	public void manualRender(com.earthview.world.graphic.RenderOperation rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Viewport vp, com.earthview.world.spatial.math.Matrix4 worldMatrix, com.earthview.world.spatial.math.Matrix4 viewMatrix, com.earthview.world.spatial.math.Matrix4 projMatrix, boolean doBeginEndFrame)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		long worldMatrixParamValue = worldMatrix.nativeObject.pointer;
		long viewMatrixParamValue = viewMatrix.nativeObject.pointer;
		long projMatrixParamValue = projMatrix.nativeObject.pointer;
		boolean doBeginEndFrameParamValue = doBeginEndFrame;
		manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool(this.nativeObject.pointer, rendParamValue, passParamValue, vpParamValue, worldMatrixParamValue, viewMatrixParamValue, projMatrixParamValue, doBeginEndFrameParamValue);
	}
	native private void manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_NoVirtual(long pNativeObject, long rend, long pass, long vp, long worldMatrix, long viewMatrix, long projMatrix, boolean doBeginEndFrame);
	protected void manualRender_NoVirtual(com.earthview.world.graphic.RenderOperation rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Viewport vp, com.earthview.world.spatial.math.Matrix4 worldMatrix, com.earthview.world.spatial.math.Matrix4 viewMatrix, com.earthview.world.spatial.math.Matrix4 projMatrix, boolean doBeginEndFrame)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		long worldMatrixParamValue = worldMatrix.nativeObject.pointer;
		long viewMatrixParamValue = viewMatrix.nativeObject.pointer;
		long projMatrixParamValue = projMatrix.nativeObject.pointer;
		boolean doBeginEndFrameParamValue = doBeginEndFrame;
		manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_NoVirtual(this.nativeObject.pointer, rendParamValue, passParamValue, vpParamValue, worldMatrixParamValue, viewMatrixParamValue, projMatrixParamValue, doBeginEndFrameParamValue);
	}

	protected  void manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_callback(long rend, long pass, long vp, long worldMatrix, long viewMatrix, long projMatrix)
	{
		com.earthview.world.graphic.RenderOperation rendParamValue = (rend == 0L ? null : new com.earthview.world.graphic.RenderOperation(CreatedWhenConstruct.CWC_NotToCreate));
		if(rendParamValue != null)
		{
		rendParamValue.setDelegate(true);
		rendParamValue.setInstancePointer(new InstancePointer(rend));
		IClassFactory rendParamValueClassFactory = GlobalClassFactoryMap.get(rendParamValue.getCppInstanceTypeName());
		if (rendParamValueClassFactory != null)
		{
			rendParamValue.setDelegate(true);
			rendParamValue = (com.earthview.world.graphic.RenderOperation)rendParamValueClassFactory.create();
			rendParamValue.setDelegate(true);
			rendParamValue.setInstancePointer(new InstancePointer(rend));
		}
		}
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.Viewport vpParamValue = (vp == 0L ? null : new com.earthview.world.graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate));
		if(vpParamValue != null)
		{
		vpParamValue.setDelegate(true);
		vpParamValue.setInstancePointer(new InstancePointer(vp));
		IClassFactory vpParamValueClassFactory = GlobalClassFactoryMap.get(vpParamValue.getCppInstanceTypeName());
		if (vpParamValueClassFactory != null)
		{
			vpParamValue.setDelegate(true);
			vpParamValue = (com.earthview.world.graphic.Viewport)vpParamValueClassFactory.create();
			vpParamValue.setDelegate(true);
			vpParamValue.setInstancePointer(new InstancePointer(vp));
		}
		}
		com.earthview.world.spatial.math.Matrix4 worldMatrixParamValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		worldMatrixParamValue.setDelegate(true);
		worldMatrixParamValue.setInstancePointer(new InstancePointer(worldMatrix));
		IClassFactory worldMatrixParamValueClassFactory = GlobalClassFactoryMap.get(worldMatrixParamValue.getCppInstanceTypeName());
		if (worldMatrixParamValueClassFactory != null)
		{
			worldMatrixParamValue.setDelegate(true);
			worldMatrixParamValue = (com.earthview.world.spatial.math.Matrix4)worldMatrixParamValueClassFactory.create();
			worldMatrixParamValue.setDelegate(true);
			worldMatrixParamValue.setInstancePointer(new InstancePointer(worldMatrix));
		}
		com.earthview.world.spatial.math.Matrix4 viewMatrixParamValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		viewMatrixParamValue.setDelegate(true);
		viewMatrixParamValue.setInstancePointer(new InstancePointer(viewMatrix));
		IClassFactory viewMatrixParamValueClassFactory = GlobalClassFactoryMap.get(viewMatrixParamValue.getCppInstanceTypeName());
		if (viewMatrixParamValueClassFactory != null)
		{
			viewMatrixParamValue.setDelegate(true);
			viewMatrixParamValue = (com.earthview.world.spatial.math.Matrix4)viewMatrixParamValueClassFactory.create();
			viewMatrixParamValue.setDelegate(true);
			viewMatrixParamValue.setInstancePointer(new InstancePointer(viewMatrix));
		}
		com.earthview.world.spatial.math.Matrix4 projMatrixParamValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		projMatrixParamValue.setDelegate(true);
		projMatrixParamValue.setInstancePointer(new InstancePointer(projMatrix));
		IClassFactory projMatrixParamValueClassFactory = GlobalClassFactoryMap.get(projMatrixParamValue.getCppInstanceTypeName());
		if (projMatrixParamValueClassFactory != null)
		{
			projMatrixParamValue.setDelegate(true);
			projMatrixParamValue = (com.earthview.world.spatial.math.Matrix4)projMatrixParamValueClassFactory.create();
			projMatrixParamValue.setDelegate(true);
			projMatrixParamValue.setInstancePointer(new InstancePointer(projMatrix));
		}
		manualRender(rendParamValue, passParamValue, vpParamValue, worldMatrixParamValue, viewMatrixParamValue, projMatrixParamValue);
	}

	native private void manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4(long pNativeObject, long rend, long pass, long vp, long worldMatrix, long viewMatrix, long projMatrix);
	///virtual void manualRender(EarthView::World::Graphic::CRenderOperation* rend, EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CViewport* vp,
	///	const EarthView::World::Spatial::Math::CMatrix4& worldMatrix, const EarthView::World::Spatial::Math::CMatrix4& viewMatrix, const EarthView::World::Spatial::Math::CMatrix4& projMatrix,
	///	ev_bool doBeginEndFrame = false) ;
	public void manualRender(com.earthview.world.graphic.RenderOperation rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Viewport vp, com.earthview.world.spatial.math.Matrix4 worldMatrix, com.earthview.world.spatial.math.Matrix4 viewMatrix, com.earthview.world.spatial.math.Matrix4 projMatrix)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		long worldMatrixParamValue = worldMatrix.nativeObject.pointer;
		long viewMatrixParamValue = viewMatrix.nativeObject.pointer;
		long projMatrixParamValue = projMatrix.nativeObject.pointer;
		manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4(this.nativeObject.pointer, rendParamValue, passParamValue, vpParamValue, worldMatrixParamValue, viewMatrixParamValue, projMatrixParamValue);
	}
	native private void manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_NoVirtual(long pNativeObject, long rend, long pass, long vp, long worldMatrix, long viewMatrix, long projMatrix);
	protected void manualRender_NoVirtual(com.earthview.world.graphic.RenderOperation rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Viewport vp, com.earthview.world.spatial.math.Matrix4 worldMatrix, com.earthview.world.spatial.math.Matrix4 viewMatrix, com.earthview.world.spatial.math.Matrix4 projMatrix)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		long worldMatrixParamValue = worldMatrix.nativeObject.pointer;
		long viewMatrixParamValue = viewMatrix.nativeObject.pointer;
		long projMatrixParamValue = projMatrix.nativeObject.pointer;
		manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_NoVirtual(this.nativeObject.pointer, rendParamValue, passParamValue, vpParamValue, worldMatrixParamValue, viewMatrixParamValue, projMatrixParamValue);
	}

	protected  void manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_callback(long rend, long pass, long vp, long viewMatrix, long projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping, boolean doLightIteration, long manualLightList)
	{
		com.earthview.world.graphic.Renderable rendParamValue = (rend == 0L ? null : new com.earthview.world.graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate));
		if(rendParamValue != null)
		{
		rendParamValue.setDelegate(true);
		rendParamValue.setInstancePointer(new InstancePointer(rend));
		IClassFactory rendParamValueClassFactory = GlobalClassFactoryMap.get(rendParamValue.getCppInstanceTypeName());
		if (rendParamValueClassFactory != null)
		{
			rendParamValue.setDelegate(true);
			rendParamValue = (com.earthview.world.graphic.Renderable)rendParamValueClassFactory.create();
			rendParamValue.setDelegate(true);
			rendParamValue.setInstancePointer(new InstancePointer(rend));
		}
		}
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.Viewport vpParamValue = (vp == 0L ? null : new com.earthview.world.graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate));
		if(vpParamValue != null)
		{
		vpParamValue.setDelegate(true);
		vpParamValue.setInstancePointer(new InstancePointer(vp));
		IClassFactory vpParamValueClassFactory = GlobalClassFactoryMap.get(vpParamValue.getCppInstanceTypeName());
		if (vpParamValueClassFactory != null)
		{
			vpParamValue.setDelegate(true);
			vpParamValue = (com.earthview.world.graphic.Viewport)vpParamValueClassFactory.create();
			vpParamValue.setDelegate(true);
			vpParamValue.setInstancePointer(new InstancePointer(vp));
		}
		}
		com.earthview.world.spatial.math.Matrix4 viewMatrixParamValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		viewMatrixParamValue.setDelegate(true);
		viewMatrixParamValue.setInstancePointer(new InstancePointer(viewMatrix));
		IClassFactory viewMatrixParamValueClassFactory = GlobalClassFactoryMap.get(viewMatrixParamValue.getCppInstanceTypeName());
		if (viewMatrixParamValueClassFactory != null)
		{
			viewMatrixParamValue.setDelegate(true);
			viewMatrixParamValue = (com.earthview.world.spatial.math.Matrix4)viewMatrixParamValueClassFactory.create();
			viewMatrixParamValue.setDelegate(true);
			viewMatrixParamValue.setInstancePointer(new InstancePointer(viewMatrix));
		}
		com.earthview.world.spatial.math.Matrix4 projMatrixParamValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		projMatrixParamValue.setDelegate(true);
		projMatrixParamValue.setInstancePointer(new InstancePointer(projMatrix));
		IClassFactory projMatrixParamValueClassFactory = GlobalClassFactoryMap.get(projMatrixParamValue.getCppInstanceTypeName());
		if (projMatrixParamValueClassFactory != null)
		{
			projMatrixParamValue.setDelegate(true);
			projMatrixParamValue = (com.earthview.world.spatial.math.Matrix4)projMatrixParamValueClassFactory.create();
			projMatrixParamValue.setDelegate(true);
			projMatrixParamValue.setInstancePointer(new InstancePointer(projMatrix));
		}
		boolean doBeginEndFrameParamValue = doBeginEndFrame;
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		com.earthview.world.graphic.LightList manualLightListParamValue = (manualLightList == 0L ? null : new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate));
		if(manualLightListParamValue != null)
		{
		manualLightListParamValue.setDelegate(true);
		manualLightListParamValue.setInstancePointer(new InstancePointer(manualLightList));
		IClassFactory manualLightListParamValueClassFactory = GlobalClassFactoryMap.get(manualLightListParamValue.getCppInstanceTypeName());
		if (manualLightListParamValueClassFactory != null)
		{
			manualLightListParamValue.setDelegate(true);
			manualLightListParamValue = (com.earthview.world.graphic.LightList)manualLightListParamValueClassFactory.create();
			manualLightListParamValue.setDelegate(true);
			manualLightListParamValue.setInstancePointer(new InstancePointer(manualLightList));
		}
		}
		manualRender(rendParamValue, passParamValue, vpParamValue, viewMatrixParamValue, projMatrixParamValue, doBeginEndFrameParamValue, lightScissoringClippingParamValue, doLightIterationParamValue, manualLightListParamValue);
	}

	native private void manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList(long pNativeObject, long rend, long pass, long vp, long viewMatrix, long projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping, boolean doLightIteration, long manualLightList);
	public void manualRender(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Viewport vp, com.earthview.world.spatial.math.Matrix4 viewMatrix, com.earthview.world.spatial.math.Matrix4 projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping, boolean doLightIteration, com.earthview.world.graphic.LightList manualLightList)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		long viewMatrixParamValue = viewMatrix.nativeObject.pointer;
		long projMatrixParamValue = projMatrix.nativeObject.pointer;
		boolean doBeginEndFrameParamValue = doBeginEndFrame;
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		long manualLightListParamValue = (manualLightList == null ? 0L : manualLightList.nativeObject.pointer);
		manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList(this.nativeObject.pointer, rendParamValue, passParamValue, vpParamValue, viewMatrixParamValue, projMatrixParamValue, doBeginEndFrameParamValue, lightScissoringClippingParamValue, doLightIterationParamValue, manualLightListParamValue);
	}
	native private void manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_NoVirtual(long pNativeObject, long rend, long pass, long vp, long viewMatrix, long projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping, boolean doLightIteration, long manualLightList);
	protected void manualRender_NoVirtual(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Viewport vp, com.earthview.world.spatial.math.Matrix4 viewMatrix, com.earthview.world.spatial.math.Matrix4 projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping, boolean doLightIteration, com.earthview.world.graphic.LightList manualLightList)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		long viewMatrixParamValue = viewMatrix.nativeObject.pointer;
		long projMatrixParamValue = projMatrix.nativeObject.pointer;
		boolean doBeginEndFrameParamValue = doBeginEndFrame;
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		long manualLightListParamValue = (manualLightList == null ? 0L : manualLightList.nativeObject.pointer);
		manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_NoVirtual(this.nativeObject.pointer, rendParamValue, passParamValue, vpParamValue, viewMatrixParamValue, projMatrixParamValue, doBeginEndFrameParamValue, lightScissoringClippingParamValue, doLightIterationParamValue, manualLightListParamValue);
	}

	protected  void manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_callback(long rend, long pass, long vp, long viewMatrix, long projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping, boolean doLightIteration)
	{
		com.earthview.world.graphic.Renderable rendParamValue = (rend == 0L ? null : new com.earthview.world.graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate));
		if(rendParamValue != null)
		{
		rendParamValue.setDelegate(true);
		rendParamValue.setInstancePointer(new InstancePointer(rend));
		IClassFactory rendParamValueClassFactory = GlobalClassFactoryMap.get(rendParamValue.getCppInstanceTypeName());
		if (rendParamValueClassFactory != null)
		{
			rendParamValue.setDelegate(true);
			rendParamValue = (com.earthview.world.graphic.Renderable)rendParamValueClassFactory.create();
			rendParamValue.setDelegate(true);
			rendParamValue.setInstancePointer(new InstancePointer(rend));
		}
		}
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.Viewport vpParamValue = (vp == 0L ? null : new com.earthview.world.graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate));
		if(vpParamValue != null)
		{
		vpParamValue.setDelegate(true);
		vpParamValue.setInstancePointer(new InstancePointer(vp));
		IClassFactory vpParamValueClassFactory = GlobalClassFactoryMap.get(vpParamValue.getCppInstanceTypeName());
		if (vpParamValueClassFactory != null)
		{
			vpParamValue.setDelegate(true);
			vpParamValue = (com.earthview.world.graphic.Viewport)vpParamValueClassFactory.create();
			vpParamValue.setDelegate(true);
			vpParamValue.setInstancePointer(new InstancePointer(vp));
		}
		}
		com.earthview.world.spatial.math.Matrix4 viewMatrixParamValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		viewMatrixParamValue.setDelegate(true);
		viewMatrixParamValue.setInstancePointer(new InstancePointer(viewMatrix));
		IClassFactory viewMatrixParamValueClassFactory = GlobalClassFactoryMap.get(viewMatrixParamValue.getCppInstanceTypeName());
		if (viewMatrixParamValueClassFactory != null)
		{
			viewMatrixParamValue.setDelegate(true);
			viewMatrixParamValue = (com.earthview.world.spatial.math.Matrix4)viewMatrixParamValueClassFactory.create();
			viewMatrixParamValue.setDelegate(true);
			viewMatrixParamValue.setInstancePointer(new InstancePointer(viewMatrix));
		}
		com.earthview.world.spatial.math.Matrix4 projMatrixParamValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		projMatrixParamValue.setDelegate(true);
		projMatrixParamValue.setInstancePointer(new InstancePointer(projMatrix));
		IClassFactory projMatrixParamValueClassFactory = GlobalClassFactoryMap.get(projMatrixParamValue.getCppInstanceTypeName());
		if (projMatrixParamValueClassFactory != null)
		{
			projMatrixParamValue.setDelegate(true);
			projMatrixParamValue = (com.earthview.world.spatial.math.Matrix4)projMatrixParamValueClassFactory.create();
			projMatrixParamValue.setDelegate(true);
			projMatrixParamValue.setInstancePointer(new InstancePointer(projMatrix));
		}
		boolean doBeginEndFrameParamValue = doBeginEndFrame;
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		manualRender(rendParamValue, passParamValue, vpParamValue, viewMatrixParamValue, projMatrixParamValue, doBeginEndFrameParamValue, lightScissoringClippingParamValue, doLightIterationParamValue);
	}

	native private void manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool(long pNativeObject, long rend, long pass, long vp, long viewMatrix, long projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping, boolean doLightIteration);
	///virtual void manualRender(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CViewport* vp, const EarthView::World::Spatial::Math::CMatrix4& viewMatrix, const EarthView::World::Spatial::Math::CMatrix4& projMatrix,
	///	ev_bool doBeginEndFrame = false, ev_bool lightScissoringClipping = true,
	///	ev_bool doLightIteration = true, const EarthView::World::Graphic::LightList* manualLightList = 0);
	public void manualRender(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Viewport vp, com.earthview.world.spatial.math.Matrix4 viewMatrix, com.earthview.world.spatial.math.Matrix4 projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping, boolean doLightIteration)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		long viewMatrixParamValue = viewMatrix.nativeObject.pointer;
		long projMatrixParamValue = projMatrix.nativeObject.pointer;
		boolean doBeginEndFrameParamValue = doBeginEndFrame;
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool(this.nativeObject.pointer, rendParamValue, passParamValue, vpParamValue, viewMatrixParamValue, projMatrixParamValue, doBeginEndFrameParamValue, lightScissoringClippingParamValue, doLightIterationParamValue);
	}
	native private void manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_NoVirtual(long pNativeObject, long rend, long pass, long vp, long viewMatrix, long projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping, boolean doLightIteration);
	protected void manualRender_NoVirtual(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Viewport vp, com.earthview.world.spatial.math.Matrix4 viewMatrix, com.earthview.world.spatial.math.Matrix4 projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping, boolean doLightIteration)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		long viewMatrixParamValue = viewMatrix.nativeObject.pointer;
		long projMatrixParamValue = projMatrix.nativeObject.pointer;
		boolean doBeginEndFrameParamValue = doBeginEndFrame;
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		boolean doLightIterationParamValue = doLightIteration;
		manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_NoVirtual(this.nativeObject.pointer, rendParamValue, passParamValue, vpParamValue, viewMatrixParamValue, projMatrixParamValue, doBeginEndFrameParamValue, lightScissoringClippingParamValue, doLightIterationParamValue);
	}

	protected  void manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_callback(long rend, long pass, long vp, long viewMatrix, long projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping)
	{
		com.earthview.world.graphic.Renderable rendParamValue = (rend == 0L ? null : new com.earthview.world.graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate));
		if(rendParamValue != null)
		{
		rendParamValue.setDelegate(true);
		rendParamValue.setInstancePointer(new InstancePointer(rend));
		IClassFactory rendParamValueClassFactory = GlobalClassFactoryMap.get(rendParamValue.getCppInstanceTypeName());
		if (rendParamValueClassFactory != null)
		{
			rendParamValue.setDelegate(true);
			rendParamValue = (com.earthview.world.graphic.Renderable)rendParamValueClassFactory.create();
			rendParamValue.setDelegate(true);
			rendParamValue.setInstancePointer(new InstancePointer(rend));
		}
		}
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.Viewport vpParamValue = (vp == 0L ? null : new com.earthview.world.graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate));
		if(vpParamValue != null)
		{
		vpParamValue.setDelegate(true);
		vpParamValue.setInstancePointer(new InstancePointer(vp));
		IClassFactory vpParamValueClassFactory = GlobalClassFactoryMap.get(vpParamValue.getCppInstanceTypeName());
		if (vpParamValueClassFactory != null)
		{
			vpParamValue.setDelegate(true);
			vpParamValue = (com.earthview.world.graphic.Viewport)vpParamValueClassFactory.create();
			vpParamValue.setDelegate(true);
			vpParamValue.setInstancePointer(new InstancePointer(vp));
		}
		}
		com.earthview.world.spatial.math.Matrix4 viewMatrixParamValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		viewMatrixParamValue.setDelegate(true);
		viewMatrixParamValue.setInstancePointer(new InstancePointer(viewMatrix));
		IClassFactory viewMatrixParamValueClassFactory = GlobalClassFactoryMap.get(viewMatrixParamValue.getCppInstanceTypeName());
		if (viewMatrixParamValueClassFactory != null)
		{
			viewMatrixParamValue.setDelegate(true);
			viewMatrixParamValue = (com.earthview.world.spatial.math.Matrix4)viewMatrixParamValueClassFactory.create();
			viewMatrixParamValue.setDelegate(true);
			viewMatrixParamValue.setInstancePointer(new InstancePointer(viewMatrix));
		}
		com.earthview.world.spatial.math.Matrix4 projMatrixParamValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		projMatrixParamValue.setDelegate(true);
		projMatrixParamValue.setInstancePointer(new InstancePointer(projMatrix));
		IClassFactory projMatrixParamValueClassFactory = GlobalClassFactoryMap.get(projMatrixParamValue.getCppInstanceTypeName());
		if (projMatrixParamValueClassFactory != null)
		{
			projMatrixParamValue.setDelegate(true);
			projMatrixParamValue = (com.earthview.world.spatial.math.Matrix4)projMatrixParamValueClassFactory.create();
			projMatrixParamValue.setDelegate(true);
			projMatrixParamValue.setInstancePointer(new InstancePointer(projMatrix));
		}
		boolean doBeginEndFrameParamValue = doBeginEndFrame;
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		manualRender(rendParamValue, passParamValue, vpParamValue, viewMatrixParamValue, projMatrixParamValue, doBeginEndFrameParamValue, lightScissoringClippingParamValue);
	}

	native private void manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool(long pNativeObject, long rend, long pass, long vp, long viewMatrix, long projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping);
	public void manualRender(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Viewport vp, com.earthview.world.spatial.math.Matrix4 viewMatrix, com.earthview.world.spatial.math.Matrix4 projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		long viewMatrixParamValue = viewMatrix.nativeObject.pointer;
		long projMatrixParamValue = projMatrix.nativeObject.pointer;
		boolean doBeginEndFrameParamValue = doBeginEndFrame;
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool(this.nativeObject.pointer, rendParamValue, passParamValue, vpParamValue, viewMatrixParamValue, projMatrixParamValue, doBeginEndFrameParamValue, lightScissoringClippingParamValue);
	}
	native private void manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_NoVirtual(long pNativeObject, long rend, long pass, long vp, long viewMatrix, long projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping);
	protected void manualRender_NoVirtual(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Viewport vp, com.earthview.world.spatial.math.Matrix4 viewMatrix, com.earthview.world.spatial.math.Matrix4 projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		long viewMatrixParamValue = viewMatrix.nativeObject.pointer;
		long projMatrixParamValue = projMatrix.nativeObject.pointer;
		boolean doBeginEndFrameParamValue = doBeginEndFrame;
		boolean lightScissoringClippingParamValue = lightScissoringClipping;
		manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_NoVirtual(this.nativeObject.pointer, rendParamValue, passParamValue, vpParamValue, viewMatrixParamValue, projMatrixParamValue, doBeginEndFrameParamValue, lightScissoringClippingParamValue);
	}

	protected  void manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_callback(long rend, long pass, long vp, long viewMatrix, long projMatrix, boolean doBeginEndFrame)
	{
		com.earthview.world.graphic.Renderable rendParamValue = (rend == 0L ? null : new com.earthview.world.graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate));
		if(rendParamValue != null)
		{
		rendParamValue.setDelegate(true);
		rendParamValue.setInstancePointer(new InstancePointer(rend));
		IClassFactory rendParamValueClassFactory = GlobalClassFactoryMap.get(rendParamValue.getCppInstanceTypeName());
		if (rendParamValueClassFactory != null)
		{
			rendParamValue.setDelegate(true);
			rendParamValue = (com.earthview.world.graphic.Renderable)rendParamValueClassFactory.create();
			rendParamValue.setDelegate(true);
			rendParamValue.setInstancePointer(new InstancePointer(rend));
		}
		}
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.Viewport vpParamValue = (vp == 0L ? null : new com.earthview.world.graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate));
		if(vpParamValue != null)
		{
		vpParamValue.setDelegate(true);
		vpParamValue.setInstancePointer(new InstancePointer(vp));
		IClassFactory vpParamValueClassFactory = GlobalClassFactoryMap.get(vpParamValue.getCppInstanceTypeName());
		if (vpParamValueClassFactory != null)
		{
			vpParamValue.setDelegate(true);
			vpParamValue = (com.earthview.world.graphic.Viewport)vpParamValueClassFactory.create();
			vpParamValue.setDelegate(true);
			vpParamValue.setInstancePointer(new InstancePointer(vp));
		}
		}
		com.earthview.world.spatial.math.Matrix4 viewMatrixParamValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		viewMatrixParamValue.setDelegate(true);
		viewMatrixParamValue.setInstancePointer(new InstancePointer(viewMatrix));
		IClassFactory viewMatrixParamValueClassFactory = GlobalClassFactoryMap.get(viewMatrixParamValue.getCppInstanceTypeName());
		if (viewMatrixParamValueClassFactory != null)
		{
			viewMatrixParamValue.setDelegate(true);
			viewMatrixParamValue = (com.earthview.world.spatial.math.Matrix4)viewMatrixParamValueClassFactory.create();
			viewMatrixParamValue.setDelegate(true);
			viewMatrixParamValue.setInstancePointer(new InstancePointer(viewMatrix));
		}
		com.earthview.world.spatial.math.Matrix4 projMatrixParamValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		projMatrixParamValue.setDelegate(true);
		projMatrixParamValue.setInstancePointer(new InstancePointer(projMatrix));
		IClassFactory projMatrixParamValueClassFactory = GlobalClassFactoryMap.get(projMatrixParamValue.getCppInstanceTypeName());
		if (projMatrixParamValueClassFactory != null)
		{
			projMatrixParamValue.setDelegate(true);
			projMatrixParamValue = (com.earthview.world.spatial.math.Matrix4)projMatrixParamValueClassFactory.create();
			projMatrixParamValue.setDelegate(true);
			projMatrixParamValue.setInstancePointer(new InstancePointer(projMatrix));
		}
		boolean doBeginEndFrameParamValue = doBeginEndFrame;
		manualRender(rendParamValue, passParamValue, vpParamValue, viewMatrixParamValue, projMatrixParamValue, doBeginEndFrameParamValue);
	}

	native private void manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool(long pNativeObject, long rend, long pass, long vp, long viewMatrix, long projMatrix, boolean doBeginEndFrame);
	public void manualRender(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Viewport vp, com.earthview.world.spatial.math.Matrix4 viewMatrix, com.earthview.world.spatial.math.Matrix4 projMatrix, boolean doBeginEndFrame)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		long viewMatrixParamValue = viewMatrix.nativeObject.pointer;
		long projMatrixParamValue = projMatrix.nativeObject.pointer;
		boolean doBeginEndFrameParamValue = doBeginEndFrame;
		manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool(this.nativeObject.pointer, rendParamValue, passParamValue, vpParamValue, viewMatrixParamValue, projMatrixParamValue, doBeginEndFrameParamValue);
	}
	native private void manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_NoVirtual(long pNativeObject, long rend, long pass, long vp, long viewMatrix, long projMatrix, boolean doBeginEndFrame);
	protected void manualRender_NoVirtual(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Viewport vp, com.earthview.world.spatial.math.Matrix4 viewMatrix, com.earthview.world.spatial.math.Matrix4 projMatrix, boolean doBeginEndFrame)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		long viewMatrixParamValue = viewMatrix.nativeObject.pointer;
		long projMatrixParamValue = projMatrix.nativeObject.pointer;
		boolean doBeginEndFrameParamValue = doBeginEndFrame;
		manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_NoVirtual(this.nativeObject.pointer, rendParamValue, passParamValue, vpParamValue, viewMatrixParamValue, projMatrixParamValue, doBeginEndFrameParamValue);
	}

	protected  void manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_callback(long rend, long pass, long vp, long viewMatrix, long projMatrix)
	{
		com.earthview.world.graphic.Renderable rendParamValue = (rend == 0L ? null : new com.earthview.world.graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate));
		if(rendParamValue != null)
		{
		rendParamValue.setDelegate(true);
		rendParamValue.setInstancePointer(new InstancePointer(rend));
		IClassFactory rendParamValueClassFactory = GlobalClassFactoryMap.get(rendParamValue.getCppInstanceTypeName());
		if (rendParamValueClassFactory != null)
		{
			rendParamValue.setDelegate(true);
			rendParamValue = (com.earthview.world.graphic.Renderable)rendParamValueClassFactory.create();
			rendParamValue.setDelegate(true);
			rendParamValue.setInstancePointer(new InstancePointer(rend));
		}
		}
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.Viewport vpParamValue = (vp == 0L ? null : new com.earthview.world.graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate));
		if(vpParamValue != null)
		{
		vpParamValue.setDelegate(true);
		vpParamValue.setInstancePointer(new InstancePointer(vp));
		IClassFactory vpParamValueClassFactory = GlobalClassFactoryMap.get(vpParamValue.getCppInstanceTypeName());
		if (vpParamValueClassFactory != null)
		{
			vpParamValue.setDelegate(true);
			vpParamValue = (com.earthview.world.graphic.Viewport)vpParamValueClassFactory.create();
			vpParamValue.setDelegate(true);
			vpParamValue.setInstancePointer(new InstancePointer(vp));
		}
		}
		com.earthview.world.spatial.math.Matrix4 viewMatrixParamValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		viewMatrixParamValue.setDelegate(true);
		viewMatrixParamValue.setInstancePointer(new InstancePointer(viewMatrix));
		IClassFactory viewMatrixParamValueClassFactory = GlobalClassFactoryMap.get(viewMatrixParamValue.getCppInstanceTypeName());
		if (viewMatrixParamValueClassFactory != null)
		{
			viewMatrixParamValue.setDelegate(true);
			viewMatrixParamValue = (com.earthview.world.spatial.math.Matrix4)viewMatrixParamValueClassFactory.create();
			viewMatrixParamValue.setDelegate(true);
			viewMatrixParamValue.setInstancePointer(new InstancePointer(viewMatrix));
		}
		com.earthview.world.spatial.math.Matrix4 projMatrixParamValue = new com.earthview.world.spatial.math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
		projMatrixParamValue.setDelegate(true);
		projMatrixParamValue.setInstancePointer(new InstancePointer(projMatrix));
		IClassFactory projMatrixParamValueClassFactory = GlobalClassFactoryMap.get(projMatrixParamValue.getCppInstanceTypeName());
		if (projMatrixParamValueClassFactory != null)
		{
			projMatrixParamValue.setDelegate(true);
			projMatrixParamValue = (com.earthview.world.spatial.math.Matrix4)projMatrixParamValueClassFactory.create();
			projMatrixParamValue.setDelegate(true);
			projMatrixParamValue.setInstancePointer(new InstancePointer(projMatrix));
		}
		manualRender(rendParamValue, passParamValue, vpParamValue, viewMatrixParamValue, projMatrixParamValue);
	}

	native private void manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4(long pNativeObject, long rend, long pass, long vp, long viewMatrix, long projMatrix);
	public void manualRender(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Viewport vp, com.earthview.world.spatial.math.Matrix4 viewMatrix, com.earthview.world.spatial.math.Matrix4 projMatrix)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		long viewMatrixParamValue = viewMatrix.nativeObject.pointer;
		long projMatrixParamValue = projMatrix.nativeObject.pointer;
		manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4(this.nativeObject.pointer, rendParamValue, passParamValue, vpParamValue, viewMatrixParamValue, projMatrixParamValue);
	}
	native private void manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_NoVirtual(long pNativeObject, long rend, long pass, long vp, long viewMatrix, long projMatrix);
	protected void manualRender_NoVirtual(com.earthview.world.graphic.Renderable rend, com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Viewport vp, com.earthview.world.spatial.math.Matrix4 viewMatrix, com.earthview.world.spatial.math.Matrix4 projMatrix)
	{
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long vpParamValue = (vp == null ? 0L : vp.nativeObject.pointer);
		long viewMatrixParamValue = viewMatrix.nativeObject.pointer;
		long projMatrixParamValue = projMatrix.nativeObject.pointer;
		manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_NoVirtual(this.nativeObject.pointer, rendParamValue, passParamValue, vpParamValue, viewMatrixParamValue, projMatrixParamValue);
	}

	protected  long getRenderQueue_void_callback()
	{
		com.earthview.world.graphic.RenderQueue returnValue = getRenderQueue();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getRenderQueue_void(long pNativeObject);
	/**
	 * 获得渲染队列
	 * @param  
	 */
	public com.earthview.world.graphic.RenderQueue getRenderQueue()
	{
		long returnValue = getRenderQueue_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.RenderQueue __returnValue = new com.earthview.world.graphic.RenderQueue(CreatedWhenConstruct.CWC_NotToCreate, "CRenderQueue");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.RenderQueue)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CRenderQueue");
		}
		return __returnValue;
	}
	native private long getRenderQueue_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.RenderQueue getRenderQueue_NoVirtual()
	{
		long returnValue = getRenderQueue_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.RenderQueue __returnValue = new com.earthview.world.graphic.RenderQueue(CreatedWhenConstruct.CWC_NotToCreate, "CRenderQueue");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.RenderQueue)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CRenderQueue");
		}
		return __returnValue;
	}

	protected  void addRenderQueueListener_CRenderQueueListener_callback(long ref_newListener)
	{
		com.earthview.world.graphic.RenderQueueListener ref_newListenerParamValue = (ref_newListener == 0L ? null : new com.earthview.world.graphic.RenderQueueListener(CreatedWhenConstruct.CWC_NotToCreate));
		if(ref_newListenerParamValue != null)
		{
		ref_newListenerParamValue.setDelegate(true);
		ref_newListenerParamValue.setInstancePointer(new InstancePointer(ref_newListener));
		IClassFactory ref_newListenerParamValueClassFactory = GlobalClassFactoryMap.get(ref_newListenerParamValue.getCppInstanceTypeName());
		if (ref_newListenerParamValueClassFactory != null)
		{
			ref_newListenerParamValue.setDelegate(true);
			ref_newListenerParamValue = (com.earthview.world.graphic.RenderQueueListener)ref_newListenerParamValueClassFactory.create();
			ref_newListenerParamValue.setDelegate(true);
			ref_newListenerParamValue.setInstancePointer(new InstancePointer(ref_newListener));
		}
		}
		addRenderQueueListener(ref_newListenerParamValue);
	}

	native private void addRenderQueueListener_CRenderQueueListener(long pNativeObject, long ref_newListener);
	/**
	 * 添加渲染队列监听者
	 * @param  
	 */
	public void addRenderQueueListener(com.earthview.world.graphic.RenderQueueListener ref_newListener)
	{
		long ref_newListenerParamValue = (ref_newListener == null ? 0L : ref_newListener.nativeObject.pointer);
		addRenderQueueListener_CRenderQueueListener(this.nativeObject.pointer, ref_newListenerParamValue);
	}
	native private void addRenderQueueListener_CRenderQueueListener_NoVirtual(long pNativeObject, long ref_newListener);
	protected void addRenderQueueListener_NoVirtual(com.earthview.world.graphic.RenderQueueListener ref_newListener)
	{
		long ref_newListenerParamValue = (ref_newListener == null ? 0L : ref_newListener.nativeObject.pointer);
		addRenderQueueListener_CRenderQueueListener_NoVirtual(this.nativeObject.pointer, ref_newListenerParamValue);
	}

	protected  void removeRenderQueueListener_CRenderQueueListener_callback(long delListener)
	{
		com.earthview.world.graphic.RenderQueueListener delListenerParamValue = (delListener == 0L ? null : new com.earthview.world.graphic.RenderQueueListener(CreatedWhenConstruct.CWC_NotToCreate));
		if(delListenerParamValue != null)
		{
		delListenerParamValue.setDelegate(true);
		delListenerParamValue.setInstancePointer(new InstancePointer(delListener));
		IClassFactory delListenerParamValueClassFactory = GlobalClassFactoryMap.get(delListenerParamValue.getCppInstanceTypeName());
		if (delListenerParamValueClassFactory != null)
		{
			delListenerParamValue.setDelegate(true);
			delListenerParamValue = (com.earthview.world.graphic.RenderQueueListener)delListenerParamValueClassFactory.create();
			delListenerParamValue.setDelegate(true);
			delListenerParamValue.setInstancePointer(new InstancePointer(delListener));
		}
		}
		removeRenderQueueListener(delListenerParamValue);
	}

	native private void removeRenderQueueListener_CRenderQueueListener(long pNativeObject, long delListener);
	/**
	 * 移除渲染队列监听者
	 * @param  
	 */
	public void removeRenderQueueListener(com.earthview.world.graphic.RenderQueueListener delListener)
	{
		long delListenerParamValue = (delListener == null ? 0L : delListener.nativeObject.pointer);
		removeRenderQueueListener_CRenderQueueListener(this.nativeObject.pointer, delListenerParamValue);
	}
	native private void removeRenderQueueListener_CRenderQueueListener_NoVirtual(long pNativeObject, long delListener);
	protected void removeRenderQueueListener_NoVirtual(com.earthview.world.graphic.RenderQueueListener delListener)
	{
		long delListenerParamValue = (delListener == null ? 0L : delListener.nativeObject.pointer);
		removeRenderQueueListener_CRenderQueueListener_NoVirtual(this.nativeObject.pointer, delListenerParamValue);
	}

	protected  void addRenderObjectListener_CRenderObjectListener_callback(long ref_newListener)
	{
		com.earthview.world.graphic.RenderObjectListener ref_newListenerParamValue = (ref_newListener == 0L ? null : new com.earthview.world.graphic.RenderObjectListener(CreatedWhenConstruct.CWC_NotToCreate));
		if(ref_newListenerParamValue != null)
		{
		ref_newListenerParamValue.setDelegate(true);
		ref_newListenerParamValue.setInstancePointer(new InstancePointer(ref_newListener));
		IClassFactory ref_newListenerParamValueClassFactory = GlobalClassFactoryMap.get(ref_newListenerParamValue.getCppInstanceTypeName());
		if (ref_newListenerParamValueClassFactory != null)
		{
			ref_newListenerParamValue.setDelegate(true);
			ref_newListenerParamValue = (com.earthview.world.graphic.RenderObjectListener)ref_newListenerParamValueClassFactory.create();
			ref_newListenerParamValue.setDelegate(true);
			ref_newListenerParamValue.setInstancePointer(new InstancePointer(ref_newListener));
		}
		}
		addRenderObjectListener(ref_newListenerParamValue);
	}

	native private void addRenderObjectListener_CRenderObjectListener(long pNativeObject, long ref_newListener);
	/**
	 * 添加渲染对象监听者
	 * @param  
	 */
	public void addRenderObjectListener(com.earthview.world.graphic.RenderObjectListener ref_newListener)
	{
		long ref_newListenerParamValue = (ref_newListener == null ? 0L : ref_newListener.nativeObject.pointer);
		addRenderObjectListener_CRenderObjectListener(this.nativeObject.pointer, ref_newListenerParamValue);
	}
	native private void addRenderObjectListener_CRenderObjectListener_NoVirtual(long pNativeObject, long ref_newListener);
	protected void addRenderObjectListener_NoVirtual(com.earthview.world.graphic.RenderObjectListener ref_newListener)
	{
		long ref_newListenerParamValue = (ref_newListener == null ? 0L : ref_newListener.nativeObject.pointer);
		addRenderObjectListener_CRenderObjectListener_NoVirtual(this.nativeObject.pointer, ref_newListenerParamValue);
	}

	protected  void removeRenderObjectListener_CRenderObjectListener_callback(long delListener)
	{
		com.earthview.world.graphic.RenderObjectListener delListenerParamValue = (delListener == 0L ? null : new com.earthview.world.graphic.RenderObjectListener(CreatedWhenConstruct.CWC_NotToCreate));
		if(delListenerParamValue != null)
		{
		delListenerParamValue.setDelegate(true);
		delListenerParamValue.setInstancePointer(new InstancePointer(delListener));
		IClassFactory delListenerParamValueClassFactory = GlobalClassFactoryMap.get(delListenerParamValue.getCppInstanceTypeName());
		if (delListenerParamValueClassFactory != null)
		{
			delListenerParamValue.setDelegate(true);
			delListenerParamValue = (com.earthview.world.graphic.RenderObjectListener)delListenerParamValueClassFactory.create();
			delListenerParamValue.setDelegate(true);
			delListenerParamValue.setInstancePointer(new InstancePointer(delListener));
		}
		}
		removeRenderObjectListener(delListenerParamValue);
	}

	native private void removeRenderObjectListener_CRenderObjectListener(long pNativeObject, long delListener);
	/**
	 * 移除渲染对象监听者
	 * @param  
	 */
	public void removeRenderObjectListener(com.earthview.world.graphic.RenderObjectListener delListener)
	{
		long delListenerParamValue = (delListener == null ? 0L : delListener.nativeObject.pointer);
		removeRenderObjectListener_CRenderObjectListener(this.nativeObject.pointer, delListenerParamValue);
	}
	native private void removeRenderObjectListener_CRenderObjectListener_NoVirtual(long pNativeObject, long delListener);
	protected void removeRenderObjectListener_NoVirtual(com.earthview.world.graphic.RenderObjectListener delListener)
	{
		long delListenerParamValue = (delListener == null ? 0L : delListener.nativeObject.pointer);
		removeRenderObjectListener_CRenderObjectListener_NoVirtual(this.nativeObject.pointer, delListenerParamValue);
	}

	protected  void addSpecialCaseRenderQueue_ev_uint8_callback(short qid)
	{
		short qidParamValue = qid;
		addSpecialCaseRenderQueue(qidParamValue);
	}

	native private void addSpecialCaseRenderQueue_ev_uint8(long pNativeObject, short qid);
	public void addSpecialCaseRenderQueue(short qid)
	{
		short qidParamValue = qid;
		addSpecialCaseRenderQueue_ev_uint8(this.nativeObject.pointer, qidParamValue);
	}
	native private void addSpecialCaseRenderQueue_ev_uint8_NoVirtual(long pNativeObject, short qid);
	protected void addSpecialCaseRenderQueue_NoVirtual(short qid)
	{
		short qidParamValue = qid;
		addSpecialCaseRenderQueue_ev_uint8_NoVirtual(this.nativeObject.pointer, qidParamValue);
	}

	protected  void removeSpecialCaseRenderQueue_ev_uint8_callback(short qid)
	{
		short qidParamValue = qid;
		removeSpecialCaseRenderQueue(qidParamValue);
	}

	native private void removeSpecialCaseRenderQueue_ev_uint8(long pNativeObject, short qid);
	public void removeSpecialCaseRenderQueue(short qid)
	{
		short qidParamValue = qid;
		removeSpecialCaseRenderQueue_ev_uint8(this.nativeObject.pointer, qidParamValue);
	}
	native private void removeSpecialCaseRenderQueue_ev_uint8_NoVirtual(long pNativeObject, short qid);
	protected void removeSpecialCaseRenderQueue_NoVirtual(short qid)
	{
		short qidParamValue = qid;
		removeSpecialCaseRenderQueue_ev_uint8_NoVirtual(this.nativeObject.pointer, qidParamValue);
	}

	protected  void clearSpecialCaseRenderQueues_void_callback()
	{
		clearSpecialCaseRenderQueues();
	}

	native private void clearSpecialCaseRenderQueues_void(long pNativeObject);
	public void clearSpecialCaseRenderQueues()
	{
		clearSpecialCaseRenderQueues_void(this.nativeObject.pointer);
	}
	native private void clearSpecialCaseRenderQueues_void_NoVirtual(long pNativeObject);
	protected void clearSpecialCaseRenderQueues_NoVirtual()
	{
		clearSpecialCaseRenderQueues_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  void setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_callback(int mode)
	{
		com.earthview.world.graphic.SceneManager.SpecialCaseRenderQueueMode modeParamValue = com.earthview.world.graphic.SceneManager.SpecialCaseRenderQueueMode.toEnum(mode);
		setSpecialCaseRenderQueueMode(modeParamValue);
	}

	native private void setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode(long pNativeObject, int mode);
	public void setSpecialCaseRenderQueueMode(com.earthview.world.graphic.SceneManager.SpecialCaseRenderQueueMode mode)
	{
		int modeParamValue = mode.getValue();
		setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode(this.nativeObject.pointer, modeParamValue);
	}
	native private void setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_NoVirtual(long pNativeObject, int mode);
	protected void setSpecialCaseRenderQueueMode_NoVirtual(com.earthview.world.graphic.SceneManager.SpecialCaseRenderQueueMode mode)
	{
		int modeParamValue = mode.getValue();
		setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_NoVirtual(this.nativeObject.pointer, modeParamValue);
	}

	protected  int getSpecialCaseRenderQueueMode_void_callback()
	{
		com.earthview.world.graphic.SceneManager.SpecialCaseRenderQueueMode returnValue = getSpecialCaseRenderQueueMode();
		int __returnValue = returnValue.getValue();
		return __returnValue;
	}

	native private int getSpecialCaseRenderQueueMode_void(long pNativeObject);
	public com.earthview.world.graphic.SceneManager.SpecialCaseRenderQueueMode getSpecialCaseRenderQueueMode()
	{
		int returnValue = getSpecialCaseRenderQueueMode_void(this.nativeObject.pointer);
		return com.earthview.world.graphic.SceneManager.SpecialCaseRenderQueueMode.toEnum(returnValue);
	}
	native private int getSpecialCaseRenderQueueMode_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.SceneManager.SpecialCaseRenderQueueMode getSpecialCaseRenderQueueMode_NoVirtual()
	{
		int returnValue = getSpecialCaseRenderQueueMode_void_NoVirtual(this.nativeObject.pointer);
		return com.earthview.world.graphic.SceneManager.SpecialCaseRenderQueueMode.toEnum(returnValue);
	}

	protected  boolean isRenderQueueToBeProcessed_ev_uint8_callback(short qid)
	{
		short qidParamValue = qid;
		boolean returnValue = isRenderQueueToBeProcessed(qidParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean isRenderQueueToBeProcessed_ev_uint8(long pNativeObject, short qid);
	public boolean isRenderQueueToBeProcessed(short qid)
	{
		short qidParamValue = qid;
		boolean returnValue = isRenderQueueToBeProcessed_ev_uint8(this.nativeObject.pointer, qidParamValue);
		return returnValue;
	}
	native private boolean isRenderQueueToBeProcessed_ev_uint8_NoVirtual(long pNativeObject, short qid);
	protected boolean isRenderQueueToBeProcessed_NoVirtual(short qid)
	{
		short qidParamValue = qid;
		boolean returnValue = isRenderQueueToBeProcessed_ev_uint8_NoVirtual(this.nativeObject.pointer, qidParamValue);
		return returnValue;
	}

	protected  void setWorldGeometryRenderQueue_ev_uint8_callback(short qid)
	{
		short qidParamValue = qid;
		setWorldGeometryRenderQueue(qidParamValue);
	}

	native private void setWorldGeometryRenderQueue_ev_uint8(long pNativeObject, short qid);
	public void setWorldGeometryRenderQueue(short qid)
	{
		short qidParamValue = qid;
		setWorldGeometryRenderQueue_ev_uint8(this.nativeObject.pointer, qidParamValue);
	}
	native private void setWorldGeometryRenderQueue_ev_uint8_NoVirtual(long pNativeObject, short qid);
	protected void setWorldGeometryRenderQueue_NoVirtual(short qid)
	{
		short qidParamValue = qid;
		setWorldGeometryRenderQueue_ev_uint8_NoVirtual(this.nativeObject.pointer, qidParamValue);
	}

	protected  short getWorldGeometryRenderQueue_void_callback()
	{
		short returnValue = getWorldGeometryRenderQueue();
		short __returnValue = returnValue;
		return __returnValue;
	}

	native private short getWorldGeometryRenderQueue_void(long pNativeObject);
	public short getWorldGeometryRenderQueue()
	{
		short returnValue = getWorldGeometryRenderQueue_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private short getWorldGeometryRenderQueue_void_NoVirtual(long pNativeObject);
	protected short getWorldGeometryRenderQueue_NoVirtual()
	{
		short returnValue = getWorldGeometryRenderQueue_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void showBoundingBoxes_ev_bool_callback(boolean bShow)
	{
		boolean bShowParamValue = bShow;
		showBoundingBoxes(bShowParamValue);
	}

	native private void showBoundingBoxes_ev_bool(long pNativeObject, boolean bShow);
	/**
	 * 设置是否显示节点的包围盒
	 * @param  
	 */
	public void showBoundingBoxes(boolean bShow)
	{
		boolean bShowParamValue = bShow;
		showBoundingBoxes_ev_bool(this.nativeObject.pointer, bShowParamValue);
	}
	native private void showBoundingBoxes_ev_bool_NoVirtual(long pNativeObject, boolean bShow);
	protected void showBoundingBoxes_NoVirtual(boolean bShow)
	{
		boolean bShowParamValue = bShow;
		showBoundingBoxes_ev_bool_NoVirtual(this.nativeObject.pointer, bShowParamValue);
	}

	protected  boolean getShowBoundingBoxes_void_callback()
	{
		boolean returnValue = getShowBoundingBoxes();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getShowBoundingBoxes_void(long pNativeObject);
	/**
	 * 获取是否显示节点的包围盒
	 * @param  
	 */
	public boolean getShowBoundingBoxes()
	{
		boolean returnValue = getShowBoundingBoxes_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean getShowBoundingBoxes_void_NoVirtual(long pNativeObject);
	protected boolean getShowBoundingBoxes_NoVirtual()
	{
		boolean returnValue = getShowBoundingBoxes_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void _notifyAutotrackingSceneNode_CSceneNode_ev_bool_callback(long node, boolean autoTrack)
	{
		com.earthview.world.graphic.SceneNode nodeParamValue = (node == 0L ? null : new com.earthview.world.graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate));
		if(nodeParamValue != null)
		{
		nodeParamValue.setDelegate(true);
		nodeParamValue.setInstancePointer(new InstancePointer(node));
		IClassFactory nodeParamValueClassFactory = GlobalClassFactoryMap.get(nodeParamValue.getCppInstanceTypeName());
		if (nodeParamValueClassFactory != null)
		{
			nodeParamValue.setDelegate(true);
			nodeParamValue = (com.earthview.world.graphic.SceneNode)nodeParamValueClassFactory.create();
			nodeParamValue.setDelegate(true);
			nodeParamValue.setInstancePointer(new InstancePointer(node));
		}
		}
		boolean autoTrackParamValue = autoTrack;
		_notifyAutotrackingSceneNode(nodeParamValue, autoTrackParamValue);
	}

	native private void _notifyAutotrackingSceneNode_CSceneNode_ev_bool(long pNativeObject, long node, boolean autoTrack);
	/**
	 * 通知场景管理器存在某个节点正被跟踪
	 * @param  
	 */
	public void _notifyAutotrackingSceneNode(com.earthview.world.graphic.SceneNode node, boolean autoTrack)
	{
		long nodeParamValue = (node == null ? 0L : node.nativeObject.pointer);
		boolean autoTrackParamValue = autoTrack;
		_notifyAutotrackingSceneNode_CSceneNode_ev_bool(this.nativeObject.pointer, nodeParamValue, autoTrackParamValue);
	}
	native private void _notifyAutotrackingSceneNode_CSceneNode_ev_bool_NoVirtual(long pNativeObject, long node, boolean autoTrack);
	protected void _notifyAutotrackingSceneNode_NoVirtual(com.earthview.world.graphic.SceneNode node, boolean autoTrack)
	{
		long nodeParamValue = (node == null ? 0L : node.nativeObject.pointer);
		boolean autoTrackParamValue = autoTrack;
		_notifyAutotrackingSceneNode_CSceneNode_ev_bool_NoVirtual(this.nativeObject.pointer, nodeParamValue, autoTrackParamValue);
	}

	protected  long createAABBQuery_CAxisAlignedBox_ev_uint32_callback(long box, long mask)
	{
		com.earthview.world.spatial.math.AxisAlignedBox boxParamValue = new com.earthview.world.spatial.math.AxisAlignedBox(CreatedWhenConstruct.CWC_NotToCreate);
		boxParamValue.setDelegate(true);
		boxParamValue.setInstancePointer(new InstancePointer(box));
		IClassFactory boxParamValueClassFactory = GlobalClassFactoryMap.get(boxParamValue.getCppInstanceTypeName());
		if (boxParamValueClassFactory != null)
		{
			boxParamValue.setDelegate(true);
			boxParamValue = (com.earthview.world.spatial.math.AxisAlignedBox)boxParamValueClassFactory.create();
			boxParamValue.setDelegate(true);
			boxParamValue.setInstancePointer(new InstancePointer(box));
		}
		long maskParamValue = mask;
		com.earthview.world.graphic.AxisAlignedBoxSceneQuery returnValue = createAABBQuery(boxParamValue, maskParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createAABBQuery_CAxisAlignedBox_ev_uint32(long pNativeObject, long box, long mask);
	/**
	 * 创建包围盒查询对象
	 * @param  
	 */
	public com.earthview.world.graphic.AxisAlignedBoxSceneQuery createAABBQuery(com.earthview.world.spatial.math.AxisAlignedBox box, long mask)
	{
		long boxParamValue = box.nativeObject.pointer;
		long maskParamValue = mask;
		long returnValue = createAABBQuery_CAxisAlignedBox_ev_uint32(this.nativeObject.pointer, boxParamValue, maskParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.AxisAlignedBoxSceneQuery __returnValue = new com.earthview.world.graphic.AxisAlignedBoxSceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CAxisAlignedBoxSceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.AxisAlignedBoxSceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CAxisAlignedBoxSceneQuery");
		}
		return __returnValue;
	}
	native private long createAABBQuery_CAxisAlignedBox_ev_uint32_NoVirtual(long pNativeObject, long box, long mask);
	protected com.earthview.world.graphic.AxisAlignedBoxSceneQuery createAABBQuery_NoVirtual(com.earthview.world.spatial.math.AxisAlignedBox box, long mask)
	{
		long boxParamValue = box.nativeObject.pointer;
		long maskParamValue = mask;
		long returnValue = createAABBQuery_CAxisAlignedBox_ev_uint32_NoVirtual(this.nativeObject.pointer, boxParamValue, maskParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.AxisAlignedBoxSceneQuery __returnValue = new com.earthview.world.graphic.AxisAlignedBoxSceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CAxisAlignedBoxSceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.AxisAlignedBoxSceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CAxisAlignedBoxSceneQuery");
		}
		return __returnValue;
	}

	protected  long createAABBQuery_CAxisAlignedBox_callback(long box)
	{
		com.earthview.world.spatial.math.AxisAlignedBox boxParamValue = new com.earthview.world.spatial.math.AxisAlignedBox(CreatedWhenConstruct.CWC_NotToCreate);
		boxParamValue.setDelegate(true);
		boxParamValue.setInstancePointer(new InstancePointer(box));
		IClassFactory boxParamValueClassFactory = GlobalClassFactoryMap.get(boxParamValue.getCppInstanceTypeName());
		if (boxParamValueClassFactory != null)
		{
			boxParamValue.setDelegate(true);
			boxParamValue = (com.earthview.world.spatial.math.AxisAlignedBox)boxParamValueClassFactory.create();
			boxParamValue.setDelegate(true);
			boxParamValue.setInstancePointer(new InstancePointer(box));
		}
		com.earthview.world.graphic.AxisAlignedBoxSceneQuery returnValue = createAABBQuery(boxParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createAABBQuery_CAxisAlignedBox(long pNativeObject, long box);
	public com.earthview.world.graphic.AxisAlignedBoxSceneQuery createAABBQuery(com.earthview.world.spatial.math.AxisAlignedBox box)
	{
		long boxParamValue = box.nativeObject.pointer;
		long returnValue = createAABBQuery_CAxisAlignedBox(this.nativeObject.pointer, boxParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.AxisAlignedBoxSceneQuery __returnValue = new com.earthview.world.graphic.AxisAlignedBoxSceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CAxisAlignedBoxSceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.AxisAlignedBoxSceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CAxisAlignedBoxSceneQuery");
		}
		return __returnValue;
	}
	native private long createAABBQuery_CAxisAlignedBox_NoVirtual(long pNativeObject, long box);
	protected com.earthview.world.graphic.AxisAlignedBoxSceneQuery createAABBQuery_NoVirtual(com.earthview.world.spatial.math.AxisAlignedBox box)
	{
		long boxParamValue = box.nativeObject.pointer;
		long returnValue = createAABBQuery_CAxisAlignedBox_NoVirtual(this.nativeObject.pointer, boxParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.AxisAlignedBoxSceneQuery __returnValue = new com.earthview.world.graphic.AxisAlignedBoxSceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CAxisAlignedBoxSceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.AxisAlignedBoxSceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CAxisAlignedBoxSceneQuery");
		}
		return __returnValue;
	}

	protected  long createSphereQuery_CSphere_ev_uint32_callback(long sphere, long mask)
	{
		com.earthview.world.spatial.math.Sphere sphereParamValue = new com.earthview.world.spatial.math.Sphere(CreatedWhenConstruct.CWC_NotToCreate);
		sphereParamValue.setDelegate(true);
		sphereParamValue.setInstancePointer(new InstancePointer(sphere));
		IClassFactory sphereParamValueClassFactory = GlobalClassFactoryMap.get(sphereParamValue.getCppInstanceTypeName());
		if (sphereParamValueClassFactory != null)
		{
			sphereParamValue.setDelegate(true);
			sphereParamValue = (com.earthview.world.spatial.math.Sphere)sphereParamValueClassFactory.create();
			sphereParamValue.setDelegate(true);
			sphereParamValue.setInstancePointer(new InstancePointer(sphere));
		}
		long maskParamValue = mask;
		com.earthview.world.graphic.SphereSceneQuery returnValue = createSphereQuery(sphereParamValue, maskParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createSphereQuery_CSphere_ev_uint32(long pNativeObject, long sphere, long mask);
	/**
	 * 创建球查询对象
	 * @param  
	 */
	public com.earthview.world.graphic.SphereSceneQuery createSphereQuery(com.earthview.world.spatial.math.Sphere sphere, long mask)
	{
		long sphereParamValue = sphere.nativeObject.pointer;
		long maskParamValue = mask;
		long returnValue = createSphereQuery_CSphere_ev_uint32(this.nativeObject.pointer, sphereParamValue, maskParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SphereSceneQuery __returnValue = new com.earthview.world.graphic.SphereSceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CSphereSceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SphereSceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CSphereSceneQuery");
		}
		return __returnValue;
	}
	native private long createSphereQuery_CSphere_ev_uint32_NoVirtual(long pNativeObject, long sphere, long mask);
	protected com.earthview.world.graphic.SphereSceneQuery createSphereQuery_NoVirtual(com.earthview.world.spatial.math.Sphere sphere, long mask)
	{
		long sphereParamValue = sphere.nativeObject.pointer;
		long maskParamValue = mask;
		long returnValue = createSphereQuery_CSphere_ev_uint32_NoVirtual(this.nativeObject.pointer, sphereParamValue, maskParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SphereSceneQuery __returnValue = new com.earthview.world.graphic.SphereSceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CSphereSceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SphereSceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CSphereSceneQuery");
		}
		return __returnValue;
	}

	protected  long createSphereQuery_CSphere_callback(long sphere)
	{
		com.earthview.world.spatial.math.Sphere sphereParamValue = new com.earthview.world.spatial.math.Sphere(CreatedWhenConstruct.CWC_NotToCreate);
		sphereParamValue.setDelegate(true);
		sphereParamValue.setInstancePointer(new InstancePointer(sphere));
		IClassFactory sphereParamValueClassFactory = GlobalClassFactoryMap.get(sphereParamValue.getCppInstanceTypeName());
		if (sphereParamValueClassFactory != null)
		{
			sphereParamValue.setDelegate(true);
			sphereParamValue = (com.earthview.world.spatial.math.Sphere)sphereParamValueClassFactory.create();
			sphereParamValue.setDelegate(true);
			sphereParamValue.setInstancePointer(new InstancePointer(sphere));
		}
		com.earthview.world.graphic.SphereSceneQuery returnValue = createSphereQuery(sphereParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createSphereQuery_CSphere(long pNativeObject, long sphere);
	public com.earthview.world.graphic.SphereSceneQuery createSphereQuery(com.earthview.world.spatial.math.Sphere sphere)
	{
		long sphereParamValue = sphere.nativeObject.pointer;
		long returnValue = createSphereQuery_CSphere(this.nativeObject.pointer, sphereParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SphereSceneQuery __returnValue = new com.earthview.world.graphic.SphereSceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CSphereSceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SphereSceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CSphereSceneQuery");
		}
		return __returnValue;
	}
	native private long createSphereQuery_CSphere_NoVirtual(long pNativeObject, long sphere);
	protected com.earthview.world.graphic.SphereSceneQuery createSphereQuery_NoVirtual(com.earthview.world.spatial.math.Sphere sphere)
	{
		long sphereParamValue = sphere.nativeObject.pointer;
		long returnValue = createSphereQuery_CSphere_NoVirtual(this.nativeObject.pointer, sphereParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SphereSceneQuery __returnValue = new com.earthview.world.graphic.SphereSceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CSphereSceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SphereSceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CSphereSceneQuery");
		}
		return __returnValue;
	}

	protected  long createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_callback(long volumes, long mask)
	{
		com.earthview.world.spatial.math.PlaneBoundedVolumeList volumesParamValue = new com.earthview.world.spatial.math.PlaneBoundedVolumeList(CreatedWhenConstruct.CWC_NotToCreate);
		volumesParamValue.setDelegate(true);
		volumesParamValue.setInstancePointer(new InstancePointer(volumes));
		IClassFactory volumesParamValueClassFactory = GlobalClassFactoryMap.get(volumesParamValue.getCppInstanceTypeName());
		if (volumesParamValueClassFactory != null)
		{
			volumesParamValue.setDelegate(true);
			volumesParamValue = (com.earthview.world.spatial.math.PlaneBoundedVolumeList)volumesParamValueClassFactory.create();
			volumesParamValue.setDelegate(true);
			volumesParamValue.setInstancePointer(new InstancePointer(volumes));
		}
		long maskParamValue = mask;
		com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery returnValue = createPlaneBoundedVolumeQuery(volumesParamValue, maskParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32(long pNativeObject, long volumes, long mask);
	/**
	 * 创建平面包围体查询对象
	 * @param  
	 */
	public com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery createPlaneBoundedVolumeQuery(com.earthview.world.spatial.math.PlaneBoundedVolumeList volumes, long mask)
	{
		long volumesParamValue = volumes.nativeObject.pointer;
		long maskParamValue = mask;
		long returnValue = createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32(this.nativeObject.pointer, volumesParamValue, maskParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery __returnValue = new com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CPlaneBoundedVolumeListSceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CPlaneBoundedVolumeListSceneQuery");
		}
		return __returnValue;
	}
	native private long createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_NoVirtual(long pNativeObject, long volumes, long mask);
	protected com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery createPlaneBoundedVolumeQuery_NoVirtual(com.earthview.world.spatial.math.PlaneBoundedVolumeList volumes, long mask)
	{
		long volumesParamValue = volumes.nativeObject.pointer;
		long maskParamValue = mask;
		long returnValue = createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_NoVirtual(this.nativeObject.pointer, volumesParamValue, maskParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery __returnValue = new com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CPlaneBoundedVolumeListSceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CPlaneBoundedVolumeListSceneQuery");
		}
		return __returnValue;
	}

	protected  long createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_callback(long volumes)
	{
		com.earthview.world.spatial.math.PlaneBoundedVolumeList volumesParamValue = new com.earthview.world.spatial.math.PlaneBoundedVolumeList(CreatedWhenConstruct.CWC_NotToCreate);
		volumesParamValue.setDelegate(true);
		volumesParamValue.setInstancePointer(new InstancePointer(volumes));
		IClassFactory volumesParamValueClassFactory = GlobalClassFactoryMap.get(volumesParamValue.getCppInstanceTypeName());
		if (volumesParamValueClassFactory != null)
		{
			volumesParamValue.setDelegate(true);
			volumesParamValue = (com.earthview.world.spatial.math.PlaneBoundedVolumeList)volumesParamValueClassFactory.create();
			volumesParamValue.setDelegate(true);
			volumesParamValue.setInstancePointer(new InstancePointer(volumes));
		}
		com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery returnValue = createPlaneBoundedVolumeQuery(volumesParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList(long pNativeObject, long volumes);
	public com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery createPlaneBoundedVolumeQuery(com.earthview.world.spatial.math.PlaneBoundedVolumeList volumes)
	{
		long volumesParamValue = volumes.nativeObject.pointer;
		long returnValue = createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList(this.nativeObject.pointer, volumesParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery __returnValue = new com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CPlaneBoundedVolumeListSceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CPlaneBoundedVolumeListSceneQuery");
		}
		return __returnValue;
	}
	native private long createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_NoVirtual(long pNativeObject, long volumes);
	protected com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery createPlaneBoundedVolumeQuery_NoVirtual(com.earthview.world.spatial.math.PlaneBoundedVolumeList volumes)
	{
		long volumesParamValue = volumes.nativeObject.pointer;
		long returnValue = createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_NoVirtual(this.nativeObject.pointer, volumesParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery __returnValue = new com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CPlaneBoundedVolumeListSceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.PlaneBoundedVolumeListSceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CPlaneBoundedVolumeListSceneQuery");
		}
		return __returnValue;
	}

	protected  long createRayQuery_CRay_ev_uint32_callback(long ray, long mask)
	{
		com.earthview.world.spatial.math.Ray rayParamValue = new com.earthview.world.spatial.math.Ray(CreatedWhenConstruct.CWC_NotToCreate);
		rayParamValue.setDelegate(true);
		rayParamValue.setInstancePointer(new InstancePointer(ray));
		IClassFactory rayParamValueClassFactory = GlobalClassFactoryMap.get(rayParamValue.getCppInstanceTypeName());
		if (rayParamValueClassFactory != null)
		{
			rayParamValue.setDelegate(true);
			rayParamValue = (com.earthview.world.spatial.math.Ray)rayParamValueClassFactory.create();
			rayParamValue.setDelegate(true);
			rayParamValue.setInstancePointer(new InstancePointer(ray));
		}
		long maskParamValue = mask;
		com.earthview.world.graphic.RaySceneQuery returnValue = createRayQuery(rayParamValue, maskParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createRayQuery_CRay_ev_uint32(long pNativeObject, long ray, long mask);
	/**
	 * 创建射线查询对象
	 * @param  
	 */
	public com.earthview.world.graphic.RaySceneQuery createRayQuery(com.earthview.world.spatial.math.Ray ray, long mask)
	{
		long rayParamValue = ray.nativeObject.pointer;
		long maskParamValue = mask;
		long returnValue = createRayQuery_CRay_ev_uint32(this.nativeObject.pointer, rayParamValue, maskParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.RaySceneQuery __returnValue = new com.earthview.world.graphic.RaySceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CRaySceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.RaySceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CRaySceneQuery");
		}
		return __returnValue;
	}
	native private long createRayQuery_CRay_ev_uint32_NoVirtual(long pNativeObject, long ray, long mask);
	protected com.earthview.world.graphic.RaySceneQuery createRayQuery_NoVirtual(com.earthview.world.spatial.math.Ray ray, long mask)
	{
		long rayParamValue = ray.nativeObject.pointer;
		long maskParamValue = mask;
		long returnValue = createRayQuery_CRay_ev_uint32_NoVirtual(this.nativeObject.pointer, rayParamValue, maskParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.RaySceneQuery __returnValue = new com.earthview.world.graphic.RaySceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CRaySceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.RaySceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CRaySceneQuery");
		}
		return __returnValue;
	}

	protected  long createRayQuery_CRay_callback(long ray)
	{
		com.earthview.world.spatial.math.Ray rayParamValue = new com.earthview.world.spatial.math.Ray(CreatedWhenConstruct.CWC_NotToCreate);
		rayParamValue.setDelegate(true);
		rayParamValue.setInstancePointer(new InstancePointer(ray));
		IClassFactory rayParamValueClassFactory = GlobalClassFactoryMap.get(rayParamValue.getCppInstanceTypeName());
		if (rayParamValueClassFactory != null)
		{
			rayParamValue.setDelegate(true);
			rayParamValue = (com.earthview.world.spatial.math.Ray)rayParamValueClassFactory.create();
			rayParamValue.setDelegate(true);
			rayParamValue.setInstancePointer(new InstancePointer(ray));
		}
		com.earthview.world.graphic.RaySceneQuery returnValue = createRayQuery(rayParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createRayQuery_CRay(long pNativeObject, long ray);
	public com.earthview.world.graphic.RaySceneQuery createRayQuery(com.earthview.world.spatial.math.Ray ray)
	{
		long rayParamValue = ray.nativeObject.pointer;
		long returnValue = createRayQuery_CRay(this.nativeObject.pointer, rayParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.RaySceneQuery __returnValue = new com.earthview.world.graphic.RaySceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CRaySceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.RaySceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CRaySceneQuery");
		}
		return __returnValue;
	}
	native private long createRayQuery_CRay_NoVirtual(long pNativeObject, long ray);
	protected com.earthview.world.graphic.RaySceneQuery createRayQuery_NoVirtual(com.earthview.world.spatial.math.Ray ray)
	{
		long rayParamValue = ray.nativeObject.pointer;
		long returnValue = createRayQuery_CRay_NoVirtual(this.nativeObject.pointer, rayParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.RaySceneQuery __returnValue = new com.earthview.world.graphic.RaySceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CRaySceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.RaySceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CRaySceneQuery");
		}
		return __returnValue;
	}

	protected  long createIntersectionQuery_ev_uint32_callback(long mask)
	{
		long maskParamValue = mask;
		com.earthview.world.graphic.IntersectionSceneQuery returnValue = createIntersectionQuery(maskParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createIntersectionQuery_ev_uint32(long pNativeObject, long mask);
	/**
	 * 创建相交查询对象
	 * @param  
	 */
	public com.earthview.world.graphic.IntersectionSceneQuery createIntersectionQuery(long mask)
	{
		long maskParamValue = mask;
		long returnValue = createIntersectionQuery_ev_uint32(this.nativeObject.pointer, maskParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.IntersectionSceneQuery __returnValue = new com.earthview.world.graphic.IntersectionSceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CIntersectionSceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.IntersectionSceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CIntersectionSceneQuery");
		}
		return __returnValue;
	}
	native private long createIntersectionQuery_ev_uint32_NoVirtual(long pNativeObject, long mask);
	protected com.earthview.world.graphic.IntersectionSceneQuery createIntersectionQuery_NoVirtual(long mask)
	{
		long maskParamValue = mask;
		long returnValue = createIntersectionQuery_ev_uint32_NoVirtual(this.nativeObject.pointer, maskParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.IntersectionSceneQuery __returnValue = new com.earthview.world.graphic.IntersectionSceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CIntersectionSceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.IntersectionSceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CIntersectionSceneQuery");
		}
		return __returnValue;
	}

	protected  long createIntersectionQuery_void_callback()
	{
		com.earthview.world.graphic.IntersectionSceneQuery returnValue = createIntersectionQuery();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createIntersectionQuery_void(long pNativeObject);
	public com.earthview.world.graphic.IntersectionSceneQuery createIntersectionQuery()
	{
		long returnValue = createIntersectionQuery_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.IntersectionSceneQuery __returnValue = new com.earthview.world.graphic.IntersectionSceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CIntersectionSceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.IntersectionSceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CIntersectionSceneQuery");
		}
		return __returnValue;
	}
	native private long createIntersectionQuery_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.IntersectionSceneQuery createIntersectionQuery_NoVirtual()
	{
		long returnValue = createIntersectionQuery_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.IntersectionSceneQuery __returnValue = new com.earthview.world.graphic.IntersectionSceneQuery(CreatedWhenConstruct.CWC_NotToCreate, "CIntersectionSceneQuery");
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.IntersectionSceneQuery)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CIntersectionSceneQuery");
		}
		return __returnValue;
	}

	protected  void destroyQuery_CSceneQuery_callback(long query)
	{
		com.earthview.world.graphic.SceneQuery queryParamValue = (query == 0L ? null : new com.earthview.world.graphic.SceneQuery(CreatedWhenConstruct.CWC_NotToCreate));
		if(queryParamValue != null)
		{
		queryParamValue.setDelegate(true);
		queryParamValue.setInstancePointer(new InstancePointer(query));
		IClassFactory queryParamValueClassFactory = GlobalClassFactoryMap.get(queryParamValue.getCppInstanceTypeName());
		if (queryParamValueClassFactory != null)
		{
			queryParamValue.setDelegate(true);
			queryParamValue = (com.earthview.world.graphic.SceneQuery)queryParamValueClassFactory.create();
			queryParamValue.setDelegate(true);
			queryParamValue.setInstancePointer(new InstancePointer(query));
		}
		}
		destroyQuery(queryParamValue);
	}

	native private void destroyQuery_CSceneQuery(long pNativeObject, long query);
	/**
	 * 销毁查询对象
	 * @param  
	 */
	public void destroyQuery(com.earthview.world.graphic.SceneQuery query)
	{
		long queryParamValue = (query == null ? 0L : query.nativeObject.pointer);
		destroyQuery_CSceneQuery(this.nativeObject.pointer, queryParamValue);
	}
	native private void destroyQuery_CSceneQuery_NoVirtual(long pNativeObject, long query);
	protected void destroyQuery_NoVirtual(com.earthview.world.graphic.SceneQuery query)
	{
		long queryParamValue = (query == null ? 0L : query.nativeObject.pointer);
		destroyQuery_CSceneQuery_NoVirtual(this.nativeObject.pointer, queryParamValue);
	}

	public static class CameraIteratorPair extends com.earthview.world.core.BaseObject {
		
		static {
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::CameraIteratorPair", new CameraIteratorPairClassFactory());
		}

		native private String get_first_void(long pNativeObject);
		public String get_first()
		{
			String jniValue = get_first_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_first_EVString (long pNativeObject, String value);
		public void set_first(String first)
		{
			String firstParamValue = first;
			
			set_first_EVString(this.nativeObject.pointer, firstParamValue);
		}
		
		native private long get_second_void(long pNativeObject);
		public com.earthview.world.graphic.Camera get_second()
		{
			long jniValue = get_second_void(this.nativeObject.pointer);
			
			if(jniValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.Camera __returnValue = new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate, "CCamera");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(jniValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.Camera)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CCamera");
			}
			return __returnValue;
		}
		
		native private void set_second_CCamera (long pNativeObject, long value);
		public void set_second(com.earthview.world.graphic.Camera second)
		{
			long secondParamValue = (second == null ? 0L : second.nativeObject.pointer);
			
			set_second_CCamera(this.nativeObject.pointer, secondParamValue);
		}
		
		public CameraIteratorPair() {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			Create("CameraIteratorPair", null);
		}

		public CameraIteratorPair(CreatedWhenConstruct cwc) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
		}
		public CameraIteratorPair(CreatedWhenConstruct cwc, String classNameStr) {
			super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
		}
		
		
		
		
		public static CameraIteratorPair fromBaseObject(BaseObject baseObj)
		{
			if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
			{
				return null;
			}
			CameraIteratorPair obj = null;
 			if(baseObj instanceof CameraIteratorPair)
			{
				obj = (CameraIteratorPair)baseObj;
			} else {
				obj = new CameraIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
				obj.bindNativeObject(baseObj.nativeObject, "CameraIteratorPair");
				obj.increaseCast();
			}

			return obj;
		}
	}
	public static class CameraIteratorPairClassFactory implements IClassFactory {
		public BaseObject create()
		{
			CameraIteratorPair emptyInstance = new CameraIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
			return emptyInstance;
		}
	}
	
	public static class CameraIterator extends com.earthview.world.core.BaseObject {
		
		static {
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::CameraIterator", new CameraIteratorClassFactory());
		}

		public CameraIterator(com.earthview.world.graphic.SceneManager.CameraList lst) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			NameValuePairList list = new NameValuePairList();
			BasePointer lstPtr = new BasePointer(lst);
			list.add("lst", lstPtr.get());
			Create("CameraIterator", list);
		}

		public CameraIterator(com.earthview.world.graphic.SceneManager.CameraIterator other) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			NameValuePairList list = new NameValuePairList();
			BasePointer otherPtr = new BasePointer(other);
			list.add("other", otherPtr.get());
			Create("CameraIterator", list);
		}

		native private boolean hasMoreElements_void(long pNativeObject);
		public boolean hasMoreElements()
		{
			boolean returnValue = hasMoreElements_void(this.nativeObject.pointer);
			return returnValue;
		}
		native private void moveNext_void(long pNativeObject);
		public void moveNext()
		{
			moveNext_void(this.nativeObject.pointer);
		}
		native private int nextKey_void(long pNativeObject);
		public int nextKey()
		{
			int returnValue = nextKey_void(this.nativeObject.pointer);
			return returnValue;
		}
		native private long nextValue_void(long pNativeObject);
		public com.earthview.world.graphic.Camera nextValue()
		{
			long returnValue = nextValue_void(this.nativeObject.pointer);
			if(returnValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.Camera __returnValue = new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate, "CCamera");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(returnValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.Camera)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CCamera");
			}
			return __returnValue;
		}
		native private long nextValuePtr_void(long pNativeObject);
		public NativeObjectPointer<com.earthview.world.graphic.Camera> nextValuePtr()
		{
			long returnValue = nextValuePtr_void(this.nativeObject.pointer);
			if(returnValue == 0L) {
				return null;
			}
			NativeObjectPointer<com.earthview.world.graphic.Camera> __returnValue = new NativeObjectPointer<com.earthview.world.graphic.Camera>(new InstancePointer(returnValue));
			return __returnValue;
		}
		native private long next_void(long pNativeObject);
		public com.earthview.world.graphic.Camera next()
		{
			long returnValue = next_void(this.nativeObject.pointer);
			if(returnValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.Camera __returnValue = new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate, "CCamera");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(returnValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.Camera)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CCamera");
			}
			return __returnValue;
		}
		native private long getBegin_void(long pNativeObject);
		public com.earthview.world.graphic.SceneManager.CameraIteratorPair getBegin()
		{
			long returnValue = getBegin_void(this.nativeObject.pointer);
			com.earthview.world.graphic.SceneManager.CameraIteratorPair __returnValue = new com.earthview.world.graphic.SceneManager.CameraIteratorPair(CreatedWhenConstruct.CWC_NotToCreate, "CameraIteratorPair");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(returnValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.SceneManager.CameraIteratorPair)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CameraIteratorPair");
			}
			return __returnValue;
		}
		native private long getEnd_void(long pNativeObject);
		public com.earthview.world.graphic.SceneManager.CameraIteratorPair getEnd()
		{
			long returnValue = getEnd_void(this.nativeObject.pointer);
			com.earthview.world.graphic.SceneManager.CameraIteratorPair __returnValue = new com.earthview.world.graphic.SceneManager.CameraIteratorPair(CreatedWhenConstruct.CWC_NotToCreate, "CameraIteratorPair");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(returnValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.SceneManager.CameraIteratorPair)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CameraIteratorPair");
			}
			return __returnValue;
		}
		native private long getCurrent_void(long pNativeObject);
		public com.earthview.world.graphic.SceneManager.CameraIteratorPair getCurrent()
		{
			long returnValue = getCurrent_void(this.nativeObject.pointer);
			com.earthview.world.graphic.SceneManager.CameraIteratorPair __returnValue = new com.earthview.world.graphic.SceneManager.CameraIteratorPair(CreatedWhenConstruct.CWC_NotToCreate, "CameraIteratorPair");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(returnValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.SceneManager.CameraIteratorPair)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CameraIteratorPair");
			}
			return __returnValue;
		}
		public CameraIterator(CreatedWhenConstruct cwc) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
		}
		public CameraIterator(CreatedWhenConstruct cwc, String classNameStr) {
			super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
		}
		
		
		
		
		public static CameraIterator fromBaseObject(BaseObject baseObj)
		{
			if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
			{
				return null;
			}
			CameraIterator obj = null;
 			if(baseObj instanceof CameraIterator)
			{
				obj = (CameraIterator)baseObj;
			} else {
				obj = new CameraIterator(CreatedWhenConstruct.CWC_NotToCreate);
				obj.bindNativeObject(baseObj.nativeObject, "CameraIterator");
				obj.increaseCast();
			}

			return obj;
		}
	}
	public static class CameraIteratorClassFactory implements IClassFactory {
		public BaseObject create()
		{
			CameraIterator emptyInstance = new CameraIterator(CreatedWhenConstruct.CWC_NotToCreate);
			return emptyInstance;
		}
	}
	
	public static class AnimationIteratorPair extends com.earthview.world.core.BaseObject {
		
		static {
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::AnimationIteratorPair", new AnimationIteratorPairClassFactory());
		}

		public AnimationIteratorPair() {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			Create("AnimationIteratorPair", null);
		}

		native private String get_first_void(long pNativeObject);
		public String get_first()
		{
			String jniValue = get_first_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_first_EVString (long pNativeObject, String value);
		public void set_first(String first)
		{
			String firstParamValue = first;
			
			set_first_EVString(this.nativeObject.pointer, firstParamValue);
		}
		
		native private long get_second_void(long pNativeObject);
		public com.earthview.world.graphic.Animation get_second()
		{
			long jniValue = get_second_void(this.nativeObject.pointer);
			
			if(jniValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.Animation __returnValue = new com.earthview.world.graphic.Animation(CreatedWhenConstruct.CWC_NotToCreate, "CAnimation");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(jniValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.Animation)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CAnimation");
			}
			return __returnValue;
		}
		
		native private void set_second_CAnimation (long pNativeObject, long value);
		public void set_second(com.earthview.world.graphic.Animation second)
		{
			long secondParamValue = (second == null ? 0L : second.nativeObject.pointer);
			
			set_second_CAnimation(this.nativeObject.pointer, secondParamValue);
		}
		
		public AnimationIteratorPair(CreatedWhenConstruct cwc) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
		}
		public AnimationIteratorPair(CreatedWhenConstruct cwc, String classNameStr) {
			super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
		}
		
		
		
		
		public static AnimationIteratorPair fromBaseObject(BaseObject baseObj)
		{
			if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
			{
				return null;
			}
			AnimationIteratorPair obj = null;
 			if(baseObj instanceof AnimationIteratorPair)
			{
				obj = (AnimationIteratorPair)baseObj;
			} else {
				obj = new AnimationIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
				obj.bindNativeObject(baseObj.nativeObject, "AnimationIteratorPair");
				obj.increaseCast();
			}

			return obj;
		}
	}
	public static class AnimationIteratorPairClassFactory implements IClassFactory {
		public BaseObject create()
		{
			AnimationIteratorPair emptyInstance = new AnimationIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
			return emptyInstance;
		}
	}
	
	///typedef EarthView::World::Core::CMapIterator<EarthView::World::Graphic::CSceneManager::AnimationList> EarthView::World::Graphic::CSceneManager::AnimationIterator;
	public static class AnimationIterator extends com.earthview.world.core.BaseObject {
		
		static {
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::AnimationIterator", new AnimationIteratorClassFactory());
		}

		public AnimationIterator(com.earthview.world.graphic.SceneManager.AnimationList lst) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			NameValuePairList list = new NameValuePairList();
			BasePointer lstPtr = new BasePointer(lst);
			list.add("lst", lstPtr.get());
			Create("AnimationIterator", list);
		}

		public AnimationIterator(com.earthview.world.graphic.SceneManager.AnimationIterator other) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			NameValuePairList list = new NameValuePairList();
			BasePointer otherPtr = new BasePointer(other);
			list.add("other", otherPtr.get());
			Create("AnimationIterator", list);
		}

		native private boolean hasMoreElements_void(long pNativeObject);
		public boolean hasMoreElements()
		{
			boolean returnValue = hasMoreElements_void(this.nativeObject.pointer);
			return returnValue;
		}
		native private void moveNext_void(long pNativeObject);
		public void moveNext()
		{
			moveNext_void(this.nativeObject.pointer);
		}
		native private int nextKey_void(long pNativeObject);
		public int nextKey()
		{
			int returnValue = nextKey_void(this.nativeObject.pointer);
			return returnValue;
		}
		native private long nextValue_void(long pNativeObject);
		public com.earthview.world.graphic.Animation nextValue()
		{
			long returnValue = nextValue_void(this.nativeObject.pointer);
			if(returnValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.Animation __returnValue = new com.earthview.world.graphic.Animation(CreatedWhenConstruct.CWC_NotToCreate, "CAnimation");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(returnValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.Animation)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CAnimation");
			}
			return __returnValue;
		}
		native private long nextValuePtr_void(long pNativeObject);
		public NativeObjectPointer<com.earthview.world.graphic.Animation> nextValuePtr()
		{
			long returnValue = nextValuePtr_void(this.nativeObject.pointer);
			if(returnValue == 0L) {
				return null;
			}
			NativeObjectPointer<com.earthview.world.graphic.Animation> __returnValue = new NativeObjectPointer<com.earthview.world.graphic.Animation>(new InstancePointer(returnValue));
			return __returnValue;
		}
		native private long next_void(long pNativeObject);
		public com.earthview.world.graphic.Animation next()
		{
			long returnValue = next_void(this.nativeObject.pointer);
			if(returnValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.Animation __returnValue = new com.earthview.world.graphic.Animation(CreatedWhenConstruct.CWC_NotToCreate, "CAnimation");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(returnValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.Animation)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CAnimation");
			}
			return __returnValue;
		}
		native private long getBegin_void(long pNativeObject);
		public com.earthview.world.graphic.SceneManager.AnimationIteratorPair getBegin()
		{
			long returnValue = getBegin_void(this.nativeObject.pointer);
			com.earthview.world.graphic.SceneManager.AnimationIteratorPair __returnValue = new com.earthview.world.graphic.SceneManager.AnimationIteratorPair(CreatedWhenConstruct.CWC_NotToCreate, "AnimationIteratorPair");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(returnValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.SceneManager.AnimationIteratorPair)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "AnimationIteratorPair");
			}
			return __returnValue;
		}
		native private long getEnd_void(long pNativeObject);
		public com.earthview.world.graphic.SceneManager.AnimationIteratorPair getEnd()
		{
			long returnValue = getEnd_void(this.nativeObject.pointer);
			com.earthview.world.graphic.SceneManager.AnimationIteratorPair __returnValue = new com.earthview.world.graphic.SceneManager.AnimationIteratorPair(CreatedWhenConstruct.CWC_NotToCreate, "AnimationIteratorPair");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(returnValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.SceneManager.AnimationIteratorPair)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "AnimationIteratorPair");
			}
			return __returnValue;
		}
		native private long getCurrent_void(long pNativeObject);
		public com.earthview.world.graphic.SceneManager.AnimationIteratorPair getCurrent()
		{
			long returnValue = getCurrent_void(this.nativeObject.pointer);
			com.earthview.world.graphic.SceneManager.AnimationIteratorPair __returnValue = new com.earthview.world.graphic.SceneManager.AnimationIteratorPair(CreatedWhenConstruct.CWC_NotToCreate, "AnimationIteratorPair");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(returnValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.SceneManager.AnimationIteratorPair)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "AnimationIteratorPair");
			}
			return __returnValue;
		}
		public AnimationIterator(CreatedWhenConstruct cwc) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
		}
		public AnimationIterator(CreatedWhenConstruct cwc, String classNameStr) {
			super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
		}
		
		
		
		
		public static AnimationIterator fromBaseObject(BaseObject baseObj)
		{
			if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
			{
				return null;
			}
			AnimationIterator obj = null;
 			if(baseObj instanceof AnimationIterator)
			{
				obj = (AnimationIterator)baseObj;
			} else {
				obj = new AnimationIterator(CreatedWhenConstruct.CWC_NotToCreate);
				obj.bindNativeObject(baseObj.nativeObject, "AnimationIterator");
				obj.increaseCast();
			}

			return obj;
		}
	}
	public static class AnimationIteratorClassFactory implements IClassFactory {
		public BaseObject create()
		{
			AnimationIterator emptyInstance = new AnimationIterator(CreatedWhenConstruct.CWC_NotToCreate);
			return emptyInstance;
		}
	}
	
	native private long getCameraIterator_void(long pNativeObject);
	/**
	 * 获得相机迭代器
	 * @param  
	 */
	public com.earthview.world.graphic.SceneManager.CameraIterator getCameraIterator()
	{
		long returnValue = getCameraIterator_void(this.nativeObject.pointer);
		com.earthview.world.graphic.SceneManager.CameraIterator __returnValue = new com.earthview.world.graphic.SceneManager.CameraIterator(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "CameraIterator");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneManager.CameraIterator)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "CameraIterator");
		}
		return __returnValue;
	}
	native private long getCameras_void(long pNativeObject);
	/**
	 * 获得相机列表
	 * @param  
	 */
	public com.earthview.world.graphic.SceneManager.CameraList getCameras()
	{
		long returnValue = getCameras_void(this.nativeObject.pointer);
		com.earthview.world.graphic.SceneManager.CameraList __returnValue = new com.earthview.world.graphic.SceneManager.CameraList(CreatedWhenConstruct.CWC_NotToCreate, "CameraList");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneManager.CameraList)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CameraList");
		}
		return __returnValue;
	}
	native private long getAnimationIterator_void(long pNativeObject);
	/**
	 * 获得节点动画迭代器
	 * @param  
	 */
	public com.earthview.world.graphic.SceneManager.AnimationIterator getAnimationIterator()
	{
		long returnValue = getAnimationIterator_void(this.nativeObject.pointer);
		com.earthview.world.graphic.SceneManager.AnimationIterator __returnValue = new com.earthview.world.graphic.SceneManager.AnimationIterator(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "AnimationIterator");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneManager.AnimationIterator)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "AnimationIterator");
		}
		return __returnValue;
	}
	native private long getAnimations_void(long pNativeObject);
	/**
	 * 获得节点动画列表
	 * @param  
	 */
	public com.earthview.world.graphic.SceneManager.AnimationList getAnimations()
	{
		long returnValue = getAnimations_void(this.nativeObject.pointer);
		com.earthview.world.graphic.SceneManager.AnimationList __returnValue = new com.earthview.world.graphic.SceneManager.AnimationList(CreatedWhenConstruct.CWC_NotToCreate, "AnimationList");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneManager.AnimationList)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "AnimationList");
		}
		return __returnValue;
	}
	native private long getAnimationStateIterator_void(long pNativeObject);
	/**
	 * 获得节点动画状态类迭代器
	 * @param  
	 */
	public com.earthview.world.graphic.AnimationStateMapIterator getAnimationStateIterator()
	{
		long returnValue = getAnimationStateIterator_void(this.nativeObject.pointer);
		com.earthview.world.graphic.AnimationStateMapIterator __returnValue = new com.earthview.world.graphic.AnimationStateMapIterator(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "AnimationStateMapIterator");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.AnimationStateMapIterator)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "AnimationStateMapIterator");
		}
		return __returnValue;
	}
	protected  void setShadowTechnique_ShadowTechnique_callback(int technique)
	{
		com.earthview.world.graphic.ShadowTechnique techniqueParamValue = com.earthview.world.graphic.ShadowTechnique.toEnum(technique);
		setShadowTechnique(techniqueParamValue);
	}

	native private void setShadowTechnique_ShadowTechnique(long pNativeObject, int technique);
	/**
	 * 设置阴影技术
	 * @param  
	 */
	public void setShadowTechnique(com.earthview.world.graphic.ShadowTechnique technique)
	{
		int techniqueParamValue = technique.getValue();
		setShadowTechnique_ShadowTechnique(this.nativeObject.pointer, techniqueParamValue);
	}
	native private void setShadowTechnique_ShadowTechnique_NoVirtual(long pNativeObject, int technique);
	protected void setShadowTechnique_NoVirtual(com.earthview.world.graphic.ShadowTechnique technique)
	{
		int techniqueParamValue = technique.getValue();
		setShadowTechnique_ShadowTechnique_NoVirtual(this.nativeObject.pointer, techniqueParamValue);
	}

	protected  int getShadowTechnique_void_callback()
	{
		com.earthview.world.graphic.ShadowTechnique returnValue = getShadowTechnique();
		int __returnValue = returnValue.getValue();
		return __returnValue;
	}

	native private int getShadowTechnique_void(long pNativeObject);
	/**
	 * 获得阴影技术
	 * @param  
	 */
	public com.earthview.world.graphic.ShadowTechnique getShadowTechnique()
	{
		int returnValue = getShadowTechnique_void(this.nativeObject.pointer);
		return com.earthview.world.graphic.ShadowTechnique.toEnum(returnValue);
	}
	native private int getShadowTechnique_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.ShadowTechnique getShadowTechnique_NoVirtual()
	{
		int returnValue = getShadowTechnique_void_NoVirtual(this.nativeObject.pointer);
		return com.earthview.world.graphic.ShadowTechnique.toEnum(returnValue);
	}

	protected  void setShowDebugShadows_ev_bool_callback(boolean debug)
	{
		boolean debugParamValue = debug;
		setShowDebugShadows(debugParamValue);
	}

	native private void setShowDebugShadows_ev_bool(long pNativeObject, boolean debug);
	public void setShowDebugShadows(boolean debug)
	{
		boolean debugParamValue = debug;
		setShowDebugShadows_ev_bool(this.nativeObject.pointer, debugParamValue);
	}
	native private void setShowDebugShadows_ev_bool_NoVirtual(long pNativeObject, boolean debug);
	protected void setShowDebugShadows_NoVirtual(boolean debug)
	{
		boolean debugParamValue = debug;
		setShowDebugShadows_ev_bool_NoVirtual(this.nativeObject.pointer, debugParamValue);
	}

	protected  boolean getShowDebugShadows_void_callback()
	{
		boolean returnValue = getShowDebugShadows();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getShowDebugShadows_void(long pNativeObject);
	public boolean getShowDebugShadows()
	{
		boolean returnValue = getShowDebugShadows_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean getShowDebugShadows_void_NoVirtual(long pNativeObject);
	protected boolean getShowDebugShadows_NoVirtual()
	{
		boolean returnValue = getShowDebugShadows_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void setShadowColour_CColourValue_callback(long colour)
	{
		com.earthview.world.graphic.ColourValue colourParamValue = new com.earthview.world.graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
		colourParamValue.setDelegate(true);
		colourParamValue.setInstancePointer(new InstancePointer(colour));
		IClassFactory colourParamValueClassFactory = GlobalClassFactoryMap.get(colourParamValue.getCppInstanceTypeName());
		if (colourParamValueClassFactory != null)
		{
			colourParamValue.setDelegate(true);
			colourParamValue = (com.earthview.world.graphic.ColourValue)colourParamValueClassFactory.create();
			colourParamValue.setDelegate(true);
			colourParamValue.setInstancePointer(new InstancePointer(colour));
		}
		setShadowColour(colourParamValue);
	}

	native private void setShadowColour_CColourValue(long pNativeObject, long colour);
	/**
	 * 设置阴影颜色
	 * @param  
	 */
	public void setShadowColour(com.earthview.world.graphic.ColourValue colour)
	{
		long colourParamValue = colour.nativeObject.pointer;
		setShadowColour_CColourValue(this.nativeObject.pointer, colourParamValue);
	}
	native private void setShadowColour_CColourValue_NoVirtual(long pNativeObject, long colour);
	protected void setShadowColour_NoVirtual(com.earthview.world.graphic.ColourValue colour)
	{
		long colourParamValue = colour.nativeObject.pointer;
		setShadowColour_CColourValue_NoVirtual(this.nativeObject.pointer, colourParamValue);
	}

	protected  long getShadowColour_void_callback()
	{
		com.earthview.world.graphic.ColourValue returnValue = getShadowColour();
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getShadowColour_void(long pNativeObject);
	/**
	 * 获得阴影颜色
	 * @param  
	 */
	public com.earthview.world.graphic.ColourValue getShadowColour()
	{
		long returnValue = getShadowColour_void(this.nativeObject.pointer);
		com.earthview.world.graphic.ColourValue __returnValue = new com.earthview.world.graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate, "CColourValue");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ColourValue)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CColourValue");
		}
		return __returnValue;
	}
	native private long getShadowColour_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.ColourValue getShadowColour_NoVirtual()
	{
		long returnValue = getShadowColour_void_NoVirtual(this.nativeObject.pointer);
		com.earthview.world.graphic.ColourValue __returnValue = new com.earthview.world.graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate, "CColourValue");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ColourValue)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CColourValue");
		}
		return __returnValue;
	}

	protected  void setShadowDirectionalLightExtrusionDistance_Real_callback(double dist)
	{
		double distParamValue = dist;
		setShadowDirectionalLightExtrusionDistance(distParamValue);
	}

	native private void setShadowDirectionalLightExtrusionDistance_Real(long pNativeObject, double dist);
	/**
	 * 获得方向光能够产生阴影的最大距离(离相机的距离)
	 * @param  
	 */
	public void setShadowDirectionalLightExtrusionDistance(double dist)
	{
		double distParamValue = dist;
		setShadowDirectionalLightExtrusionDistance_Real(this.nativeObject.pointer, distParamValue);
	}
	native private void setShadowDirectionalLightExtrusionDistance_Real_NoVirtual(long pNativeObject, double dist);
	protected void setShadowDirectionalLightExtrusionDistance_NoVirtual(double dist)
	{
		double distParamValue = dist;
		setShadowDirectionalLightExtrusionDistance_Real_NoVirtual(this.nativeObject.pointer, distParamValue);
	}

	protected  double getShadowDirectionalLightExtrusionDistance_void_callback()
	{
		double returnValue = getShadowDirectionalLightExtrusionDistance();
		double __returnValue = returnValue;
		return __returnValue;
	}

	native private double getShadowDirectionalLightExtrusionDistance_void(long pNativeObject);
	/**
	 * 获得方向光能够产生阴影的最大距离(离相机的距离)
	 * @param  
	 */
	public double getShadowDirectionalLightExtrusionDistance()
	{
		double returnValue = getShadowDirectionalLightExtrusionDistance_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private double getShadowDirectionalLightExtrusionDistance_void_NoVirtual(long pNativeObject);
	protected double getShadowDirectionalLightExtrusionDistance_NoVirtual()
	{
		double returnValue = getShadowDirectionalLightExtrusionDistance_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void setShadowColorRRatio_Real_callback(double rRatio)
	{
		double rRatioParamValue = rRatio;
		setShadowColorRRatio(rRatioParamValue);
	}

	native private void setShadowColorRRatio_Real(long pNativeObject, double rRatio);
	/**
	 * 设置阴影颜色增益(shadowcolor.r*rRatio,shadowcolor.g*gRatio,shadowcolor.b*bRatio)
	 * @param rRatio 设置r通道增益
	 * @param gRatio 设置g通道增益
	 * @param bRatio 设置b通道增益
	 */
	public void setShadowColorRRatio(double rRatio)
	{
		double rRatioParamValue = rRatio;
		setShadowColorRRatio_Real(this.nativeObject.pointer, rRatioParamValue);
	}
	native private void setShadowColorRRatio_Real_NoVirtual(long pNativeObject, double rRatio);
	protected void setShadowColorRRatio_NoVirtual(double rRatio)
	{
		double rRatioParamValue = rRatio;
		setShadowColorRRatio_Real_NoVirtual(this.nativeObject.pointer, rRatioParamValue);
	}

	protected  void setShadowColorGRatio_Real_callback(double gRatio)
	{
		double gRatioParamValue = gRatio;
		setShadowColorGRatio(gRatioParamValue);
	}

	native private void setShadowColorGRatio_Real(long pNativeObject, double gRatio);
	public void setShadowColorGRatio(double gRatio)
	{
		double gRatioParamValue = gRatio;
		setShadowColorGRatio_Real(this.nativeObject.pointer, gRatioParamValue);
	}
	native private void setShadowColorGRatio_Real_NoVirtual(long pNativeObject, double gRatio);
	protected void setShadowColorGRatio_NoVirtual(double gRatio)
	{
		double gRatioParamValue = gRatio;
		setShadowColorGRatio_Real_NoVirtual(this.nativeObject.pointer, gRatioParamValue);
	}

	protected  void setShadowColorBRatio_Real_callback(double bRatio)
	{
		double bRatioParamValue = bRatio;
		setShadowColorBRatio(bRatioParamValue);
	}

	native private void setShadowColorBRatio_Real(long pNativeObject, double bRatio);
	public void setShadowColorBRatio(double bRatio)
	{
		double bRatioParamValue = bRatio;
		setShadowColorBRatio_Real(this.nativeObject.pointer, bRatioParamValue);
	}
	native private void setShadowColorBRatio_Real_NoVirtual(long pNativeObject, double bRatio);
	protected void setShadowColorBRatio_NoVirtual(double bRatio)
	{
		double bRatioParamValue = bRatio;
		setShadowColorBRatio_Real_NoVirtual(this.nativeObject.pointer, bRatioParamValue);
	}

	protected  double getShadowColorRRatio_void_callback()
	{
		double returnValue = getShadowColorRRatio();
		double __returnValue = returnValue;
		return __returnValue;
	}

	native private double getShadowColorRRatio_void(long pNativeObject);
	/**
	 * 获取阴影颜色增益
	 */
	public double getShadowColorRRatio()
	{
		double returnValue = getShadowColorRRatio_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private double getShadowColorRRatio_void_NoVirtual(long pNativeObject);
	protected double getShadowColorRRatio_NoVirtual()
	{
		double returnValue = getShadowColorRRatio_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  double getShadowColorGRatio_void_callback()
	{
		double returnValue = getShadowColorGRatio();
		double __returnValue = returnValue;
		return __returnValue;
	}

	native private double getShadowColorGRatio_void(long pNativeObject);
	public double getShadowColorGRatio()
	{
		double returnValue = getShadowColorGRatio_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private double getShadowColorGRatio_void_NoVirtual(long pNativeObject);
	protected double getShadowColorGRatio_NoVirtual()
	{
		double returnValue = getShadowColorGRatio_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  double getShadowColorBRatio_void_callback()
	{
		double returnValue = getShadowColorBRatio();
		double __returnValue = returnValue;
		return __returnValue;
	}

	native private double getShadowColorBRatio_void(long pNativeObject);
	public double getShadowColorBRatio()
	{
		double returnValue = getShadowColorBRatio_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private double getShadowColorBRatio_void_NoVirtual(long pNativeObject);
	protected double getShadowColorBRatio_NoVirtual()
	{
		double returnValue = getShadowColorBRatio_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void setShadowFarDistance_Real_callback(double distance)
	{
		double distanceParamValue = distance;
		setShadowFarDistance(distanceParamValue);
	}

	native private void setShadowFarDistance_Real(long pNativeObject, double distance);
	/**
	 * 设置阴影的最大距离(离相机的距离)
	 * @param  
	 */
	public void setShadowFarDistance(double distance)
	{
		double distanceParamValue = distance;
		setShadowFarDistance_Real(this.nativeObject.pointer, distanceParamValue);
	}
	native private void setShadowFarDistance_Real_NoVirtual(long pNativeObject, double distance);
	protected void setShadowFarDistance_NoVirtual(double distance)
	{
		double distanceParamValue = distance;
		setShadowFarDistance_Real_NoVirtual(this.nativeObject.pointer, distanceParamValue);
	}

	protected  double getShadowFarDistance_void_callback()
	{
		double returnValue = getShadowFarDistance();
		double __returnValue = returnValue;
		return __returnValue;
	}

	native private double getShadowFarDistance_void(long pNativeObject);
	/**
	 * 获得阴影的最大距离(离相机的距离)
	 * @param  
	 */
	public double getShadowFarDistance()
	{
		double returnValue = getShadowFarDistance_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private double getShadowFarDistance_void_NoVirtual(long pNativeObject);
	protected double getShadowFarDistance_NoVirtual()
	{
		double returnValue = getShadowFarDistance_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  double getShadowFarDistanceSquared_void_callback()
	{
		double returnValue = getShadowFarDistanceSquared();
		double __returnValue = returnValue;
		return __returnValue;
	}

	native private double getShadowFarDistanceSquared_void(long pNativeObject);
	/**
	 * 获得阴影的最大距离(离相机的距离)的平方
	 * @param  
	 */
	public double getShadowFarDistanceSquared()
	{
		double returnValue = getShadowFarDistanceSquared_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private double getShadowFarDistanceSquared_void_NoVirtual(long pNativeObject);
	protected double getShadowFarDistanceSquared_NoVirtual()
	{
		double returnValue = getShadowFarDistanceSquared_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void setShadowIndexBufferSize_ev_size_t_callback(long size)
	{
		long sizeParamValue = size;
		setShadowIndexBufferSize(sizeParamValue);
	}

	native private void setShadowIndexBufferSize_ev_size_t(long pNativeObject, long size);
	/**
	 * 设置阴影锥的索引buffer的长度
	 * @param  
	 */
	public void setShadowIndexBufferSize(long size)
	{
		long sizeParamValue = size;
		setShadowIndexBufferSize_ev_size_t(this.nativeObject.pointer, sizeParamValue);
	}
	native private void setShadowIndexBufferSize_ev_size_t_NoVirtual(long pNativeObject, long size);
	protected void setShadowIndexBufferSize_NoVirtual(long size)
	{
		long sizeParamValue = size;
		setShadowIndexBufferSize_ev_size_t_NoVirtual(this.nativeObject.pointer, sizeParamValue);
	}

	protected  long getShadowIndexBufferSize_void_callback()
	{
		long returnValue = getShadowIndexBufferSize();
		long __returnValue = returnValue;
		return __returnValue;
	}

	native private long getShadowIndexBufferSize_void(long pNativeObject);
	/**
	 * 获得阴影锥的索引buffer的长度
	 * @param  
	 */
	public long getShadowIndexBufferSize()
	{
		long returnValue = getShadowIndexBufferSize_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private long getShadowIndexBufferSize_void_NoVirtual(long pNativeObject);
	protected long getShadowIndexBufferSize_NoVirtual()
	{
		long returnValue = getShadowIndexBufferSize_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void setShadowTextureSize_ev_uint16_callback(int size)
	{
		int sizeParamValue = size;
		setShadowTextureSize(sizeParamValue);
	}

	native private void setShadowTextureSize_ev_uint16(long pNativeObject, int size);
	/**
	 * 设置阴影纹理图片的尺寸
	 * @param  
	 */
	public void setShadowTextureSize(int size)
	{
		int sizeParamValue = size;
		setShadowTextureSize_ev_uint16(this.nativeObject.pointer, sizeParamValue);
	}
	native private void setShadowTextureSize_ev_uint16_NoVirtual(long pNativeObject, int size);
	protected void setShadowTextureSize_NoVirtual(int size)
	{
		int sizeParamValue = size;
		setShadowTextureSize_ev_uint16_NoVirtual(this.nativeObject.pointer, sizeParamValue);
	}

	protected  void setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_callback(long shadowIndex, int width, int height, int format)
	{
		long shadowIndexParamValue = shadowIndex;
		int widthParamValue = width;
		int heightParamValue = height;
		com.earthview.world.graphic.PixelFormat formatParamValue = com.earthview.world.graphic.PixelFormat.toEnum(format);
		setShadowTextureConfig(shadowIndexParamValue, widthParamValue, heightParamValue, formatParamValue);
	}

	native private void setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat(long pNativeObject, long shadowIndex, int width, int height, int format);
	/**
	 * 设置阴影纹理的相关参数
	 * @param  
	 */
	public void setShadowTextureConfig(long shadowIndex, int width, int height, com.earthview.world.graphic.PixelFormat format)
	{
		long shadowIndexParamValue = shadowIndex;
		int widthParamValue = width;
		int heightParamValue = height;
		int formatParamValue = format.getValue();
		setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat(this.nativeObject.pointer, shadowIndexParamValue, widthParamValue, heightParamValue, formatParamValue);
	}
	native private void setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_NoVirtual(long pNativeObject, long shadowIndex, int width, int height, int format);
	protected void setShadowTextureConfig_NoVirtual(long shadowIndex, int width, int height, com.earthview.world.graphic.PixelFormat format)
	{
		long shadowIndexParamValue = shadowIndex;
		int widthParamValue = width;
		int heightParamValue = height;
		int formatParamValue = format.getValue();
		setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_NoVirtual(this.nativeObject.pointer, shadowIndexParamValue, widthParamValue, heightParamValue, formatParamValue);
	}

	protected  void setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback(long shadowIndex, int width, int height, int format, int fsaa)
	{
		long shadowIndexParamValue = shadowIndex;
		int widthParamValue = width;
		int heightParamValue = height;
		com.earthview.world.graphic.PixelFormat formatParamValue = com.earthview.world.graphic.PixelFormat.toEnum(format);
		int fsaaParamValue = fsaa;
		setShadowTextureConfig(shadowIndexParamValue, widthParamValue, heightParamValue, formatParamValue, fsaaParamValue);
	}

	native private void setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16(long pNativeObject, long shadowIndex, int width, int height, int format, int fsaa);
	public void setShadowTextureConfig(long shadowIndex, int width, int height, com.earthview.world.graphic.PixelFormat format, int fsaa)
	{
		long shadowIndexParamValue = shadowIndex;
		int widthParamValue = width;
		int heightParamValue = height;
		int formatParamValue = format.getValue();
		int fsaaParamValue = fsaa;
		setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16(this.nativeObject.pointer, shadowIndexParamValue, widthParamValue, heightParamValue, formatParamValue, fsaaParamValue);
	}
	native private void setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_NoVirtual(long pNativeObject, long shadowIndex, int width, int height, int format, int fsaa);
	protected void setShadowTextureConfig_NoVirtual(long shadowIndex, int width, int height, com.earthview.world.graphic.PixelFormat format, int fsaa)
	{
		long shadowIndexParamValue = shadowIndex;
		int widthParamValue = width;
		int heightParamValue = height;
		int formatParamValue = format.getValue();
		int fsaaParamValue = fsaa;
		setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_NoVirtual(this.nativeObject.pointer, shadowIndexParamValue, widthParamValue, heightParamValue, formatParamValue, fsaaParamValue);
	}

	protected  void setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback(long shadowIndex, int width, int height, int format, int fsaa, int depthBufferPoolId)
	{
		long shadowIndexParamValue = shadowIndex;
		int widthParamValue = width;
		int heightParamValue = height;
		com.earthview.world.graphic.PixelFormat formatParamValue = com.earthview.world.graphic.PixelFormat.toEnum(format);
		int fsaaParamValue = fsaa;
		int depthBufferPoolIdParamValue = depthBufferPoolId;
		setShadowTextureConfig(shadowIndexParamValue, widthParamValue, heightParamValue, formatParamValue, fsaaParamValue, depthBufferPoolIdParamValue);
	}

	native private void setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(long pNativeObject, long shadowIndex, int width, int height, int format, int fsaa, int depthBufferPoolId);
	public void setShadowTextureConfig(long shadowIndex, int width, int height, com.earthview.world.graphic.PixelFormat format, int fsaa, int depthBufferPoolId)
	{
		long shadowIndexParamValue = shadowIndex;
		int widthParamValue = width;
		int heightParamValue = height;
		int formatParamValue = format.getValue();
		int fsaaParamValue = fsaa;
		int depthBufferPoolIdParamValue = depthBufferPoolId;
		setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(this.nativeObject.pointer, shadowIndexParamValue, widthParamValue, heightParamValue, formatParamValue, fsaaParamValue, depthBufferPoolIdParamValue);
	}
	native private void setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_NoVirtual(long pNativeObject, long shadowIndex, int width, int height, int format, int fsaa, int depthBufferPoolId);
	protected void setShadowTextureConfig_NoVirtual(long shadowIndex, int width, int height, com.earthview.world.graphic.PixelFormat format, int fsaa, int depthBufferPoolId)
	{
		long shadowIndexParamValue = shadowIndex;
		int widthParamValue = width;
		int heightParamValue = height;
		int formatParamValue = format.getValue();
		int fsaaParamValue = fsaa;
		int depthBufferPoolIdParamValue = depthBufferPoolId;
		setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_NoVirtual(this.nativeObject.pointer, shadowIndexParamValue, widthParamValue, heightParamValue, formatParamValue, fsaaParamValue, depthBufferPoolIdParamValue);
	}

	protected  void setShadowTextureConfig_ev_size_t_ShadowTextureConfig_callback(long shadowIndex, long config)
	{
		long shadowIndexParamValue = shadowIndex;
		com.earthview.world.graphic.ShadowTextureConfig configParamValue = new com.earthview.world.graphic.ShadowTextureConfig(CreatedWhenConstruct.CWC_NotToCreate);
		configParamValue.setDelegate(true);
		configParamValue.setInstancePointer(new InstancePointer(config));
		IClassFactory configParamValueClassFactory = GlobalClassFactoryMap.get(configParamValue.getCppInstanceTypeName());
		if (configParamValueClassFactory != null)
		{
			configParamValue.setDelegate(true);
			configParamValue = (com.earthview.world.graphic.ShadowTextureConfig)configParamValueClassFactory.create();
			configParamValue.setDelegate(true);
			configParamValue.setInstancePointer(new InstancePointer(config));
		}
		setShadowTextureConfig(shadowIndexParamValue, configParamValue);
	}

	native private void setShadowTextureConfig_ev_size_t_ShadowTextureConfig(long pNativeObject, long shadowIndex, long config);
	public void setShadowTextureConfig(long shadowIndex, com.earthview.world.graphic.ShadowTextureConfig config)
	{
		long shadowIndexParamValue = shadowIndex;
		long configParamValue = config.nativeObject.pointer;
		setShadowTextureConfig_ev_size_t_ShadowTextureConfig(this.nativeObject.pointer, shadowIndexParamValue, configParamValue);
	}
	native private void setShadowTextureConfig_ev_size_t_ShadowTextureConfig_NoVirtual(long pNativeObject, long shadowIndex, long config);
	protected void setShadowTextureConfig_NoVirtual(long shadowIndex, com.earthview.world.graphic.ShadowTextureConfig config)
	{
		long shadowIndexParamValue = shadowIndex;
		long configParamValue = config.nativeObject.pointer;
		setShadowTextureConfig_ev_size_t_ShadowTextureConfig_NoVirtual(this.nativeObject.pointer, shadowIndexParamValue, configParamValue);
	}

	native private long getShadowTextureConfigIterator_void(long pNativeObject);
	/**
	 * 获得阴影纹理的相关参数的迭代器
	 * @param  
	 */
	public com.earthview.world.graphic.ConstShadowTextureConfigIterator getShadowTextureConfigIterator()
	{
		long returnValue = getShadowTextureConfigIterator_void(this.nativeObject.pointer);
		com.earthview.world.graphic.ConstShadowTextureConfigIterator __returnValue = new com.earthview.world.graphic.ConstShadowTextureConfigIterator(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "ConstShadowTextureConfigIterator");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ConstShadowTextureConfigIterator)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "ConstShadowTextureConfigIterator");
		}
		return __returnValue;
	}
	protected  void setShadowTexturePixelFormat_PixelFormat_callback(int fmt)
	{
		com.earthview.world.graphic.PixelFormat fmtParamValue = com.earthview.world.graphic.PixelFormat.toEnum(fmt);
		setShadowTexturePixelFormat(fmtParamValue);
	}

	native private void setShadowTexturePixelFormat_PixelFormat(long pNativeObject, int fmt);
	/**
	 * 设置阴影纹理的像素格式
	 * @param  
	 */
	public void setShadowTexturePixelFormat(com.earthview.world.graphic.PixelFormat fmt)
	{
		int fmtParamValue = fmt.getValue();
		setShadowTexturePixelFormat_PixelFormat(this.nativeObject.pointer, fmtParamValue);
	}
	native private void setShadowTexturePixelFormat_PixelFormat_NoVirtual(long pNativeObject, int fmt);
	protected void setShadowTexturePixelFormat_NoVirtual(com.earthview.world.graphic.PixelFormat fmt)
	{
		int fmtParamValue = fmt.getValue();
		setShadowTexturePixelFormat_PixelFormat_NoVirtual(this.nativeObject.pointer, fmtParamValue);
	}

	protected  void setShadowTextureFSAA_ev_uint16_callback(int fsaa)
	{
		int fsaaParamValue = fsaa;
		setShadowTextureFSAA(fsaaParamValue);
	}

	native private void setShadowTextureFSAA_ev_uint16(long pNativeObject, int fsaa);
	/**
	 * 设置阴影纹理的FSAA
	 * @param  
	 */
	public void setShadowTextureFSAA(int fsaa)
	{
		int fsaaParamValue = fsaa;
		setShadowTextureFSAA_ev_uint16(this.nativeObject.pointer, fsaaParamValue);
	}
	native private void setShadowTextureFSAA_ev_uint16_NoVirtual(long pNativeObject, int fsaa);
	protected void setShadowTextureFSAA_NoVirtual(int fsaa)
	{
		int fsaaParamValue = fsaa;
		setShadowTextureFSAA_ev_uint16_NoVirtual(this.nativeObject.pointer, fsaaParamValue);
	}

	protected  void setShadowTextureCount_ev_size_t_callback(long count)
	{
		long countParamValue = count;
		setShadowTextureCount(countParamValue);
	}

	native private void setShadowTextureCount_ev_size_t(long pNativeObject, long count);
	/**
	 * 设置阴影纹理的数量
	 * @param  
	 */
	public void setShadowTextureCount(long count)
	{
		long countParamValue = count;
		setShadowTextureCount_ev_size_t(this.nativeObject.pointer, countParamValue);
	}
	native private void setShadowTextureCount_ev_size_t_NoVirtual(long pNativeObject, long count);
	protected void setShadowTextureCount_NoVirtual(long count)
	{
		long countParamValue = count;
		setShadowTextureCount_ev_size_t_NoVirtual(this.nativeObject.pointer, countParamValue);
	}

	native private long getShadowTextureCount_void(long pNativeObject);
	/**
	 * 获得阴影纹理的数量
	 * @param  
	 */
	public long getShadowTextureCount()
	{
		long returnValue = getShadowTextureCount_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private void setShadowTextureCountPerLightType_LightTypes_ev_size_t(long pNativeObject, int type, long count);
	public void setShadowTextureCountPerLightType(com.earthview.world.graphic.Light.LightTypes type, long count)
	{
		int typeParamValue = type.getValue();
		long countParamValue = count;
		setShadowTextureCountPerLightType_LightTypes_ev_size_t(this.nativeObject.pointer, typeParamValue, countParamValue);
	}
	native private long getShadowTextureCountPerLightType_LightTypes(long pNativeObject, int type);
	//// Get the number of shadow textures is assigned for the given light type.
	public long getShadowTextureCountPerLightType(com.earthview.world.graphic.Light.LightTypes type)
	{
		int typeParamValue = type.getValue();
		long returnValue = getShadowTextureCountPerLightType_LightTypes(this.nativeObject.pointer, typeParamValue);
		return returnValue;
	}
	protected  void setShadowTextureSettings_ev_uint16_ev_uint16_callback(int size, int count)
	{
		int sizeParamValue = size;
		int countParamValue = count;
		setShadowTextureSettings(sizeParamValue, countParamValue);
	}

	native private void setShadowTextureSettings_ev_uint16_ev_uint16(long pNativeObject, int size, int count);
	/**
	 * 设置阴影纹理的相关参数
	 * @param  
	 */
	public void setShadowTextureSettings(int size, int count)
	{
		int sizeParamValue = size;
		int countParamValue = count;
		setShadowTextureSettings_ev_uint16_ev_uint16(this.nativeObject.pointer, sizeParamValue, countParamValue);
	}
	native private void setShadowTextureSettings_ev_uint16_ev_uint16_NoVirtual(long pNativeObject, int size, int count);
	protected void setShadowTextureSettings_NoVirtual(int size, int count)
	{
		int sizeParamValue = size;
		int countParamValue = count;
		setShadowTextureSettings_ev_uint16_ev_uint16_NoVirtual(this.nativeObject.pointer, sizeParamValue, countParamValue);
	}

	protected  void setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_callback(int size, int count, int fmt)
	{
		int sizeParamValue = size;
		int countParamValue = count;
		com.earthview.world.graphic.PixelFormat fmtParamValue = com.earthview.world.graphic.PixelFormat.toEnum(fmt);
		setShadowTextureSettings(sizeParamValue, countParamValue, fmtParamValue);
	}

	native private void setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat(long pNativeObject, int size, int count, int fmt);
	public void setShadowTextureSettings(int size, int count, com.earthview.world.graphic.PixelFormat fmt)
	{
		int sizeParamValue = size;
		int countParamValue = count;
		int fmtParamValue = fmt.getValue();
		setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat(this.nativeObject.pointer, sizeParamValue, countParamValue, fmtParamValue);
	}
	native private void setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_NoVirtual(long pNativeObject, int size, int count, int fmt);
	protected void setShadowTextureSettings_NoVirtual(int size, int count, com.earthview.world.graphic.PixelFormat fmt)
	{
		int sizeParamValue = size;
		int countParamValue = count;
		int fmtParamValue = fmt.getValue();
		setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_NoVirtual(this.nativeObject.pointer, sizeParamValue, countParamValue, fmtParamValue);
	}

	protected  void setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback(int size, int count, int fmt, int fsaa)
	{
		int sizeParamValue = size;
		int countParamValue = count;
		com.earthview.world.graphic.PixelFormat fmtParamValue = com.earthview.world.graphic.PixelFormat.toEnum(fmt);
		int fsaaParamValue = fsaa;
		setShadowTextureSettings(sizeParamValue, countParamValue, fmtParamValue, fsaaParamValue);
	}

	native private void setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16(long pNativeObject, int size, int count, int fmt, int fsaa);
	public void setShadowTextureSettings(int size, int count, com.earthview.world.graphic.PixelFormat fmt, int fsaa)
	{
		int sizeParamValue = size;
		int countParamValue = count;
		int fmtParamValue = fmt.getValue();
		int fsaaParamValue = fsaa;
		setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16(this.nativeObject.pointer, sizeParamValue, countParamValue, fmtParamValue, fsaaParamValue);
	}
	native private void setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_NoVirtual(long pNativeObject, int size, int count, int fmt, int fsaa);
	protected void setShadowTextureSettings_NoVirtual(int size, int count, com.earthview.world.graphic.PixelFormat fmt, int fsaa)
	{
		int sizeParamValue = size;
		int countParamValue = count;
		int fmtParamValue = fmt.getValue();
		int fsaaParamValue = fsaa;
		setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_NoVirtual(this.nativeObject.pointer, sizeParamValue, countParamValue, fmtParamValue, fsaaParamValue);
	}

	protected  void setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback(int size, int count, int fmt, int fsaa, int depthBufferPoolId)
	{
		int sizeParamValue = size;
		int countParamValue = count;
		com.earthview.world.graphic.PixelFormat fmtParamValue = com.earthview.world.graphic.PixelFormat.toEnum(fmt);
		int fsaaParamValue = fsaa;
		int depthBufferPoolIdParamValue = depthBufferPoolId;
		setShadowTextureSettings(sizeParamValue, countParamValue, fmtParamValue, fsaaParamValue, depthBufferPoolIdParamValue);
	}

	native private void setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(long pNativeObject, int size, int count, int fmt, int fsaa, int depthBufferPoolId);
	public void setShadowTextureSettings(int size, int count, com.earthview.world.graphic.PixelFormat fmt, int fsaa, int depthBufferPoolId)
	{
		int sizeParamValue = size;
		int countParamValue = count;
		int fmtParamValue = fmt.getValue();
		int fsaaParamValue = fsaa;
		int depthBufferPoolIdParamValue = depthBufferPoolId;
		setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(this.nativeObject.pointer, sizeParamValue, countParamValue, fmtParamValue, fsaaParamValue, depthBufferPoolIdParamValue);
	}
	native private void setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_NoVirtual(long pNativeObject, int size, int count, int fmt, int fsaa, int depthBufferPoolId);
	protected void setShadowTextureSettings_NoVirtual(int size, int count, com.earthview.world.graphic.PixelFormat fmt, int fsaa, int depthBufferPoolId)
	{
		int sizeParamValue = size;
		int countParamValue = count;
		int fmtParamValue = fmt.getValue();
		int fsaaParamValue = fsaa;
		int depthBufferPoolIdParamValue = depthBufferPoolId;
		setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_NoVirtual(this.nativeObject.pointer, sizeParamValue, countParamValue, fmtParamValue, fsaaParamValue, depthBufferPoolIdParamValue);
	}

	protected  long getShadowTexture_ev_size_t_callback(long shadowIndex)
	{
		long shadowIndexParamValue = shadowIndex;
		com.earthview.world.graphic.TexturePtr returnValue = getShadowTexture(shadowIndexParamValue);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getShadowTexture_ev_size_t(long pNativeObject, long shadowIndex);
	/**
	 * 获得阴影纹理
	 * @param  
	 */
	public com.earthview.world.graphic.TexturePtr getShadowTexture(long shadowIndex)
	{
		long shadowIndexParamValue = shadowIndex;
		long returnValue = getShadowTexture_ev_size_t(this.nativeObject.pointer, shadowIndexParamValue);
		com.earthview.world.graphic.TexturePtr __returnValue = new com.earthview.world.graphic.TexturePtr(CreatedWhenConstruct.CWC_NotToCreate, "CTexturePtr");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.TexturePtr)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CTexturePtr");
		}
		return __returnValue;
	}
	native private long getShadowTexture_ev_size_t_NoVirtual(long pNativeObject, long shadowIndex);
	protected com.earthview.world.graphic.TexturePtr getShadowTexture_NoVirtual(long shadowIndex)
	{
		long shadowIndexParamValue = shadowIndex;
		long returnValue = getShadowTexture_ev_size_t_NoVirtual(this.nativeObject.pointer, shadowIndexParamValue);
		com.earthview.world.graphic.TexturePtr __returnValue = new com.earthview.world.graphic.TexturePtr(CreatedWhenConstruct.CWC_NotToCreate, "CTexturePtr");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.TexturePtr)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CTexturePtr");
		}
		return __returnValue;
	}

	protected  void setShadowDirLightTextureOffset_Real_callback(double offset)
	{
		double offsetParamValue = offset;
		setShadowDirLightTextureOffset(offsetParamValue);
	}

	native private void setShadowDirLightTextureOffset_Real(long pNativeObject, double offset);
	/**
	 * 设置平行光对应的阴影纹理的偏移量
	 * @param  
	 */
	public void setShadowDirLightTextureOffset(double offset)
	{
		double offsetParamValue = offset;
		setShadowDirLightTextureOffset_Real(this.nativeObject.pointer, offsetParamValue);
	}
	native private void setShadowDirLightTextureOffset_Real_NoVirtual(long pNativeObject, double offset);
	protected void setShadowDirLightTextureOffset_NoVirtual(double offset)
	{
		double offsetParamValue = offset;
		setShadowDirLightTextureOffset_Real_NoVirtual(this.nativeObject.pointer, offsetParamValue);
	}

	protected  double getShadowDirLightTextureOffset_void_callback()
	{
		double returnValue = getShadowDirLightTextureOffset();
		double __returnValue = returnValue;
		return __returnValue;
	}

	native private double getShadowDirLightTextureOffset_void(long pNativeObject);
	/**
	 * 获得平行光对应的阴影纹理的偏移量
	 * @param  
	 */
	public double getShadowDirLightTextureOffset()
	{
		double returnValue = getShadowDirLightTextureOffset_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private double getShadowDirLightTextureOffset_void_NoVirtual(long pNativeObject);
	protected double getShadowDirLightTextureOffset_NoVirtual()
	{
		double returnValue = getShadowDirLightTextureOffset_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void setShadowTextureFadeStart_Real_callback(double fadeStart)
	{
		double fadeStartParamValue = fadeStart;
		setShadowTextureFadeStart(fadeStartParamValue);
	}

	native private void setShadowTextureFadeStart_Real(long pNativeObject, double fadeStart);
	/**
	 * 设置阴影纹理消退的起始点
	 * @param  
	 */
	public void setShadowTextureFadeStart(double fadeStart)
	{
		double fadeStartParamValue = fadeStart;
		setShadowTextureFadeStart_Real(this.nativeObject.pointer, fadeStartParamValue);
	}
	native private void setShadowTextureFadeStart_Real_NoVirtual(long pNativeObject, double fadeStart);
	protected void setShadowTextureFadeStart_NoVirtual(double fadeStart)
	{
		double fadeStartParamValue = fadeStart;
		setShadowTextureFadeStart_Real_NoVirtual(this.nativeObject.pointer, fadeStartParamValue);
	}

	protected  void setShadowTextureFadeEnd_Real_callback(double fadeEnd)
	{
		double fadeEndParamValue = fadeEnd;
		setShadowTextureFadeEnd(fadeEndParamValue);
	}

	native private void setShadowTextureFadeEnd_Real(long pNativeObject, double fadeEnd);
	/**
	 * 设置阴影纹理消退的截止点
	 * @param  
	 */
	public void setShadowTextureFadeEnd(double fadeEnd)
	{
		double fadeEndParamValue = fadeEnd;
		setShadowTextureFadeEnd_Real(this.nativeObject.pointer, fadeEndParamValue);
	}
	native private void setShadowTextureFadeEnd_Real_NoVirtual(long pNativeObject, double fadeEnd);
	protected void setShadowTextureFadeEnd_NoVirtual(double fadeEnd)
	{
		double fadeEndParamValue = fadeEnd;
		setShadowTextureFadeEnd_Real_NoVirtual(this.nativeObject.pointer, fadeEndParamValue);
	}

	protected  void setShadowTextureSelfShadow_ev_bool_callback(boolean selfShadow)
	{
		boolean selfShadowParamValue = selfShadow;
		setShadowTextureSelfShadow(selfShadowParamValue);
	}

	native private void setShadowTextureSelfShadow_ev_bool(long pNativeObject, boolean selfShadow);
	/**
	 * 设置纹理阴影是否启用自投影
	 * @param  
	 */
	public void setShadowTextureSelfShadow(boolean selfShadow)
	{
		boolean selfShadowParamValue = selfShadow;
		setShadowTextureSelfShadow_ev_bool(this.nativeObject.pointer, selfShadowParamValue);
	}
	native private void setShadowTextureSelfShadow_ev_bool_NoVirtual(long pNativeObject, boolean selfShadow);
	protected void setShadowTextureSelfShadow_NoVirtual(boolean selfShadow)
	{
		boolean selfShadowParamValue = selfShadow;
		setShadowTextureSelfShadow_ev_bool_NoVirtual(this.nativeObject.pointer, selfShadowParamValue);
	}

	protected  boolean getShadowTextureSelfShadow_void_callback()
	{
		boolean returnValue = getShadowTextureSelfShadow();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getShadowTextureSelfShadow_void(long pNativeObject);
	/**
	 * 获得纹理阴影是否启用自投影
	 * @param  
	 */
	public boolean getShadowTextureSelfShadow()
	{
		boolean returnValue = getShadowTextureSelfShadow_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean getShadowTextureSelfShadow_void_NoVirtual(long pNativeObject);
	protected boolean getShadowTextureSelfShadow_NoVirtual()
	{
		boolean returnValue = getShadowTextureSelfShadow_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void setShadowTextureCasterMaterial_EVString_callback(String name)
	{
		String nameParamValue = name;
		setShadowTextureCasterMaterial(nameParamValue);
	}

	native private void setShadowTextureCasterMaterial_EVString(long pNativeObject, String name);
	/**
	 * 设置纹理阴影技术下的投射阴影的材质
	 * @param  
	 */
	public void setShadowTextureCasterMaterial(String name)
	{
		String nameParamValue = name;
		setShadowTextureCasterMaterial_EVString(this.nativeObject.pointer, nameParamValue);
	}
	native private void setShadowTextureCasterMaterial_EVString_NoVirtual(long pNativeObject, String name);
	protected void setShadowTextureCasterMaterial_NoVirtual(String name)
	{
		String nameParamValue = name;
		setShadowTextureCasterMaterial_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
	}

	protected  void setShadowTextureReceiverMaterial_EVString_callback(String name)
	{
		String nameParamValue = name;
		setShadowTextureReceiverMaterial(nameParamValue);
	}

	native private void setShadowTextureReceiverMaterial_EVString(long pNativeObject, String name);
	/**
	 * 设置纹理阴影技术下的接收阴影的材质
	 * @param  
	 */
	public void setShadowTextureReceiverMaterial(String name)
	{
		String nameParamValue = name;
		setShadowTextureReceiverMaterial_EVString(this.nativeObject.pointer, nameParamValue);
	}
	native private void setShadowTextureReceiverMaterial_EVString_NoVirtual(long pNativeObject, String name);
	protected void setShadowTextureReceiverMaterial_NoVirtual(String name)
	{
		String nameParamValue = name;
		setShadowTextureReceiverMaterial_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
	}

	protected  void setShadowCasterRenderBackFaces_ev_bool_callback(boolean bf)
	{
		boolean bfParamValue = bf;
		setShadowCasterRenderBackFaces(bfParamValue);
	}

	native private void setShadowCasterRenderBackFaces_ev_bool(long pNativeObject, boolean bf);
	/**
	 * 设置是否渲染阴影投射者的背面
	 * @param  
	 */
	public void setShadowCasterRenderBackFaces(boolean bf)
	{
		boolean bfParamValue = bf;
		setShadowCasterRenderBackFaces_ev_bool(this.nativeObject.pointer, bfParamValue);
	}
	native private void setShadowCasterRenderBackFaces_ev_bool_NoVirtual(long pNativeObject, boolean bf);
	protected void setShadowCasterRenderBackFaces_NoVirtual(boolean bf)
	{
		boolean bfParamValue = bf;
		setShadowCasterRenderBackFaces_ev_bool_NoVirtual(this.nativeObject.pointer, bfParamValue);
	}

	protected  boolean getShadowCasterRenderBackFaces_void_callback()
	{
		boolean returnValue = getShadowCasterRenderBackFaces();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getShadowCasterRenderBackFaces_void(long pNativeObject);
	/**
	 * 获取是否渲染阴影投射者的背面
	 * @param  
	 */
	public boolean getShadowCasterRenderBackFaces()
	{
		boolean returnValue = getShadowCasterRenderBackFaces_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean getShadowCasterRenderBackFaces_void_NoVirtual(long pNativeObject);
	protected boolean getShadowCasterRenderBackFaces_NoVirtual()
	{
		boolean returnValue = getShadowCasterRenderBackFaces_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void setShadowCameraSetup_ShadowCameraSetupPtr_callback(long shadowSetup)
	{
		com.earthview.world.graphic.ShadowCameraSetupPtr shadowSetupParamValue = new com.earthview.world.graphic.ShadowCameraSetupPtr(CreatedWhenConstruct.CWC_NotToCreate);
		shadowSetupParamValue.setDelegate(true);
		shadowSetupParamValue.setInstancePointer(new InstancePointer(shadowSetup));
		IClassFactory shadowSetupParamValueClassFactory = GlobalClassFactoryMap.get(shadowSetupParamValue.getCppInstanceTypeName());
		if (shadowSetupParamValueClassFactory != null)
		{
			shadowSetupParamValue.setDelegate(true);
			shadowSetupParamValue = (com.earthview.world.graphic.ShadowCameraSetupPtr)shadowSetupParamValueClassFactory.create();
			shadowSetupParamValue.setDelegate(true);
			shadowSetupParamValue.setInstancePointer(new InstancePointer(shadowSetup));
		}
		setShadowCameraSetup(shadowSetupParamValue);
	}

	native private void setShadowCameraSetup_ShadowCameraSetupPtr(long pNativeObject, long shadowSetup);
	/**
	 * 设置阴影相机
	 * @param  
	 */
	public void setShadowCameraSetup(com.earthview.world.graphic.ShadowCameraSetupPtr shadowSetup)
	{
		long shadowSetupParamValue = shadowSetup.nativeObject.pointer;
		setShadowCameraSetup_ShadowCameraSetupPtr(this.nativeObject.pointer, shadowSetupParamValue);
	}
	native private void setShadowCameraSetup_ShadowCameraSetupPtr_NoVirtual(long pNativeObject, long shadowSetup);
	protected void setShadowCameraSetup_NoVirtual(com.earthview.world.graphic.ShadowCameraSetupPtr shadowSetup)
	{
		long shadowSetupParamValue = shadowSetup.nativeObject.pointer;
		setShadowCameraSetup_ShadowCameraSetupPtr_NoVirtual(this.nativeObject.pointer, shadowSetupParamValue);
	}

	protected  long getShadowCameraSetup_void_callback()
	{
		com.earthview.world.graphic.ShadowCameraSetupPtr returnValue = getShadowCameraSetup();
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getShadowCameraSetup_void(long pNativeObject);
	/**
	 * 获得阴影相机
	 * @param  
	 */
	public com.earthview.world.graphic.ShadowCameraSetupPtr getShadowCameraSetup()
	{
		long returnValue = getShadowCameraSetup_void(this.nativeObject.pointer);
		com.earthview.world.graphic.ShadowCameraSetupPtr __returnValue = new com.earthview.world.graphic.ShadowCameraSetupPtr(CreatedWhenConstruct.CWC_NotToCreate, "ShadowCameraSetupPtr");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ShadowCameraSetupPtr)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "ShadowCameraSetupPtr");
		}
		return __returnValue;
	}
	native private long getShadowCameraSetup_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.ShadowCameraSetupPtr getShadowCameraSetup_NoVirtual()
	{
		long returnValue = getShadowCameraSetup_void_NoVirtual(this.nativeObject.pointer);
		com.earthview.world.graphic.ShadowCameraSetupPtr __returnValue = new com.earthview.world.graphic.ShadowCameraSetupPtr(CreatedWhenConstruct.CWC_NotToCreate, "ShadowCameraSetupPtr");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.ShadowCameraSetupPtr)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "ShadowCameraSetupPtr");
		}
		return __returnValue;
	}

	protected  void setShadowUseInfiniteFarPlane_ev_bool_callback(boolean enable)
	{
		boolean enableParamValue = enable;
		setShadowUseInfiniteFarPlane(enableParamValue);
	}

	native private void setShadowUseInfiniteFarPlane_ev_bool(long pNativeObject, boolean enable);
	public void setShadowUseInfiniteFarPlane(boolean enable)
	{
		boolean enableParamValue = enable;
		setShadowUseInfiniteFarPlane_ev_bool(this.nativeObject.pointer, enableParamValue);
	}
	native private void setShadowUseInfiniteFarPlane_ev_bool_NoVirtual(long pNativeObject, boolean enable);
	protected void setShadowUseInfiniteFarPlane_NoVirtual(boolean enable)
	{
		boolean enableParamValue = enable;
		setShadowUseInfiniteFarPlane_ev_bool_NoVirtual(this.nativeObject.pointer, enableParamValue);
	}

	protected  boolean isShadowTechniqueStencilBased_void_callback()
	{
		boolean returnValue = isShadowTechniqueStencilBased();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean isShadowTechniqueStencilBased_void(long pNativeObject);
	public boolean isShadowTechniqueStencilBased()
	{
		boolean returnValue = isShadowTechniqueStencilBased_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean isShadowTechniqueStencilBased_void_NoVirtual(long pNativeObject);
	protected boolean isShadowTechniqueStencilBased_NoVirtual()
	{
		boolean returnValue = isShadowTechniqueStencilBased_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  boolean isShadowTechniqueTextureBased_void_callback()
	{
		boolean returnValue = isShadowTechniqueTextureBased();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean isShadowTechniqueTextureBased_void(long pNativeObject);
	public boolean isShadowTechniqueTextureBased()
	{
		boolean returnValue = isShadowTechniqueTextureBased_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean isShadowTechniqueTextureBased_void_NoVirtual(long pNativeObject);
	protected boolean isShadowTechniqueTextureBased_NoVirtual()
	{
		boolean returnValue = isShadowTechniqueTextureBased_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  boolean isShadowTechniqueModulative_void_callback()
	{
		boolean returnValue = isShadowTechniqueModulative();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean isShadowTechniqueModulative_void(long pNativeObject);
	public boolean isShadowTechniqueModulative()
	{
		boolean returnValue = isShadowTechniqueModulative_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean isShadowTechniqueModulative_void_NoVirtual(long pNativeObject);
	protected boolean isShadowTechniqueModulative_NoVirtual()
	{
		boolean returnValue = isShadowTechniqueModulative_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  boolean isShadowTechniqueAdditive_void_callback()
	{
		boolean returnValue = isShadowTechniqueAdditive();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean isShadowTechniqueAdditive_void(long pNativeObject);
	public boolean isShadowTechniqueAdditive()
	{
		boolean returnValue = isShadowTechniqueAdditive_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean isShadowTechniqueAdditive_void_NoVirtual(long pNativeObject);
	protected boolean isShadowTechniqueAdditive_NoVirtual()
	{
		boolean returnValue = isShadowTechniqueAdditive_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  boolean isShadowTechniqueIntegrated_void_callback()
	{
		boolean returnValue = isShadowTechniqueIntegrated();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean isShadowTechniqueIntegrated_void(long pNativeObject);
	public boolean isShadowTechniqueIntegrated()
	{
		boolean returnValue = isShadowTechniqueIntegrated_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean isShadowTechniqueIntegrated_void_NoVirtual(long pNativeObject);
	protected boolean isShadowTechniqueIntegrated_NoVirtual()
	{
		boolean returnValue = isShadowTechniqueIntegrated_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  boolean isShadowTechniqueInUse_void_callback()
	{
		boolean returnValue = isShadowTechniqueInUse();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean isShadowTechniqueInUse_void(long pNativeObject);
	public boolean isShadowTechniqueInUse()
	{
		boolean returnValue = isShadowTechniqueInUse_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean isShadowTechniqueInUse_void_NoVirtual(long pNativeObject);
	protected boolean isShadowTechniqueInUse_NoVirtual()
	{
		boolean returnValue = isShadowTechniqueInUse_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void setShadowUseLightClipPlanes_ev_bool_callback(boolean enabled)
	{
		boolean enabledParamValue = enabled;
		setShadowUseLightClipPlanes(enabledParamValue);
	}

	native private void setShadowUseLightClipPlanes_ev_bool(long pNativeObject, boolean enabled);
	public void setShadowUseLightClipPlanes(boolean enabled)
	{
		boolean enabledParamValue = enabled;
		setShadowUseLightClipPlanes_ev_bool(this.nativeObject.pointer, enabledParamValue);
	}
	native private void setShadowUseLightClipPlanes_ev_bool_NoVirtual(long pNativeObject, boolean enabled);
	protected void setShadowUseLightClipPlanes_NoVirtual(boolean enabled)
	{
		boolean enabledParamValue = enabled;
		setShadowUseLightClipPlanes_ev_bool_NoVirtual(this.nativeObject.pointer, enabledParamValue);
	}

	protected  boolean getShadowUseLightClipPlanes_void_callback()
	{
		boolean returnValue = getShadowUseLightClipPlanes();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getShadowUseLightClipPlanes_void(long pNativeObject);
	public boolean getShadowUseLightClipPlanes()
	{
		boolean returnValue = getShadowUseLightClipPlanes_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean getShadowUseLightClipPlanes_void_NoVirtual(long pNativeObject);
	protected boolean getShadowUseLightClipPlanes_NoVirtual()
	{
		boolean returnValue = getShadowUseLightClipPlanes_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void _setActiveCompositorChain_CCompositorChain_callback(long chain)
	{
		com.earthview.world.graphic.CompositorChain chainParamValue = (chain == 0L ? null : new com.earthview.world.graphic.CompositorChain(CreatedWhenConstruct.CWC_NotToCreate));
		if(chainParamValue != null)
		{
		chainParamValue.setDelegate(true);
		chainParamValue.setInstancePointer(new InstancePointer(chain));
		IClassFactory chainParamValueClassFactory = GlobalClassFactoryMap.get(chainParamValue.getCppInstanceTypeName());
		if (chainParamValueClassFactory != null)
		{
			chainParamValue.setDelegate(true);
			chainParamValue = (com.earthview.world.graphic.CompositorChain)chainParamValueClassFactory.create();
			chainParamValue.setDelegate(true);
			chainParamValue.setInstancePointer(new InstancePointer(chain));
		}
		}
		_setActiveCompositorChain(chainParamValue);
	}

	native private void _setActiveCompositorChain_CCompositorChain(long pNativeObject, long chain);
	public void _setActiveCompositorChain(com.earthview.world.graphic.CompositorChain chain)
	{
		long chainParamValue = (chain == null ? 0L : chain.nativeObject.pointer);
		_setActiveCompositorChain_CCompositorChain(this.nativeObject.pointer, chainParamValue);
	}
	native private void _setActiveCompositorChain_CCompositorChain_NoVirtual(long pNativeObject, long chain);
	protected void _setActiveCompositorChain_NoVirtual(com.earthview.world.graphic.CompositorChain chain)
	{
		long chainParamValue = (chain == null ? 0L : chain.nativeObject.pointer);
		_setActiveCompositorChain_CCompositorChain_NoVirtual(this.nativeObject.pointer, chainParamValue);
	}

	protected  void setLateMaterialResolving_ev_bool_callback(boolean isLate)
	{
		boolean isLateParamValue = isLate;
		setLateMaterialResolving(isLateParamValue);
	}

	native private void setLateMaterialResolving_ev_bool(long pNativeObject, boolean isLate);
	public void setLateMaterialResolving(boolean isLate)
	{
		boolean isLateParamValue = isLate;
		setLateMaterialResolving_ev_bool(this.nativeObject.pointer, isLateParamValue);
	}
	native private void setLateMaterialResolving_ev_bool_NoVirtual(long pNativeObject, boolean isLate);
	protected void setLateMaterialResolving_NoVirtual(boolean isLate)
	{
		boolean isLateParamValue = isLate;
		setLateMaterialResolving_ev_bool_NoVirtual(this.nativeObject.pointer, isLateParamValue);
	}

	protected  boolean isLateMaterialResolving_void_callback()
	{
		boolean returnValue = isLateMaterialResolving();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean isLateMaterialResolving_void(long pNativeObject);
	public boolean isLateMaterialResolving()
	{
		boolean returnValue = isLateMaterialResolving_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean isLateMaterialResolving_void_NoVirtual(long pNativeObject);
	protected boolean isLateMaterialResolving_NoVirtual()
	{
		boolean returnValue = isLateMaterialResolving_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  long _getActiveCompositorChain_void_callback()
	{
		com.earthview.world.graphic.CompositorChain returnValue = _getActiveCompositorChain();
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long _getActiveCompositorChain_void(long pNativeObject);
	public com.earthview.world.graphic.CompositorChain _getActiveCompositorChain()
	{
		long returnValue = _getActiveCompositorChain_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.CompositorChain __returnValue = new com.earthview.world.graphic.CompositorChain(CreatedWhenConstruct.CWC_NotToCreate, "CCompositorChain");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.CompositorChain)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CCompositorChain");
		}
		return __returnValue;
	}
	native private long _getActiveCompositorChain_void_NoVirtual(long pNativeObject);
	protected com.earthview.world.graphic.CompositorChain _getActiveCompositorChain_NoVirtual()
	{
		long returnValue = _getActiveCompositorChain_void_NoVirtual(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.CompositorChain __returnValue = new com.earthview.world.graphic.CompositorChain(CreatedWhenConstruct.CWC_NotToCreate, "CCompositorChain");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.CompositorChain)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CCompositorChain");
		}
		return __returnValue;
	}

	protected  void addListener_CSceneManagerListener_callback(long ref_s)
	{
		com.earthview.world.graphic.SceneManager.SceneManagerListener ref_sParamValue = (ref_s == 0L ? null : new com.earthview.world.graphic.SceneManager.SceneManagerListener(CreatedWhenConstruct.CWC_NotToCreate));
		if(ref_sParamValue != null)
		{
		ref_sParamValue.setDelegate(true);
		ref_sParamValue.setInstancePointer(new InstancePointer(ref_s));
		IClassFactory ref_sParamValueClassFactory = GlobalClassFactoryMap.get(ref_sParamValue.getCppInstanceTypeName());
		if (ref_sParamValueClassFactory != null)
		{
			ref_sParamValue.setDelegate(true);
			ref_sParamValue = (com.earthview.world.graphic.SceneManager.SceneManagerListener)ref_sParamValueClassFactory.create();
			ref_sParamValue.setDelegate(true);
			ref_sParamValue.setInstancePointer(new InstancePointer(ref_s));
		}
		}
		addListener(ref_sParamValue);
	}

	native private void addListener_CSceneManagerListener(long pNativeObject, long ref_s);
	public void addListener(com.earthview.world.graphic.SceneManager.SceneManagerListener ref_s)
	{
		long ref_sParamValue = (ref_s == null ? 0L : ref_s.nativeObject.pointer);
		addListener_CSceneManagerListener(this.nativeObject.pointer, ref_sParamValue);
	}
	native private void addListener_CSceneManagerListener_NoVirtual(long pNativeObject, long ref_s);
	protected void addListener_NoVirtual(com.earthview.world.graphic.SceneManager.SceneManagerListener ref_s)
	{
		long ref_sParamValue = (ref_s == null ? 0L : ref_s.nativeObject.pointer);
		addListener_CSceneManagerListener_NoVirtual(this.nativeObject.pointer, ref_sParamValue);
	}

	protected  void removeListener_CSceneManagerListener_callback(long s)
	{
		com.earthview.world.graphic.SceneManager.SceneManagerListener sParamValue = (s == 0L ? null : new com.earthview.world.graphic.SceneManager.SceneManagerListener(CreatedWhenConstruct.CWC_NotToCreate));
		if(sParamValue != null)
		{
		sParamValue.setDelegate(true);
		sParamValue.setInstancePointer(new InstancePointer(s));
		IClassFactory sParamValueClassFactory = GlobalClassFactoryMap.get(sParamValue.getCppInstanceTypeName());
		if (sParamValueClassFactory != null)
		{
			sParamValue.setDelegate(true);
			sParamValue = (com.earthview.world.graphic.SceneManager.SceneManagerListener)sParamValueClassFactory.create();
			sParamValue.setDelegate(true);
			sParamValue.setInstancePointer(new InstancePointer(s));
		}
		}
		removeListener(sParamValue);
	}

	native private void removeListener_CSceneManagerListener(long pNativeObject, long s);
	public void removeListener(com.earthview.world.graphic.SceneManager.SceneManagerListener s)
	{
		long sParamValue = (s == null ? 0L : s.nativeObject.pointer);
		removeListener_CSceneManagerListener(this.nativeObject.pointer, sParamValue);
	}
	native private void removeListener_CSceneManagerListener_NoVirtual(long pNativeObject, long s);
	protected void removeListener_NoVirtual(com.earthview.world.graphic.SceneManager.SceneManagerListener s)
	{
		long sParamValue = (s == null ? 0L : s.nativeObject.pointer);
		removeListener_CSceneManagerListener_NoVirtual(this.nativeObject.pointer, sParamValue);
	}

	protected  boolean existListener_CSceneManagerListener_callback(long s)
	{
		com.earthview.world.graphic.SceneManager.SceneManagerListener sParamValue = (s == 0L ? null : new com.earthview.world.graphic.SceneManager.SceneManagerListener(CreatedWhenConstruct.CWC_NotToCreate));
		if(sParamValue != null)
		{
		sParamValue.setDelegate(true);
		sParamValue.setInstancePointer(new InstancePointer(s));
		IClassFactory sParamValueClassFactory = GlobalClassFactoryMap.get(sParamValue.getCppInstanceTypeName());
		if (sParamValueClassFactory != null)
		{
			sParamValue.setDelegate(true);
			sParamValue = (com.earthview.world.graphic.SceneManager.SceneManagerListener)sParamValueClassFactory.create();
			sParamValue.setDelegate(true);
			sParamValue.setInstancePointer(new InstancePointer(s));
		}
		}
		boolean returnValue = existListener(sParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean existListener_CSceneManagerListener(long pNativeObject, long s);
	public boolean existListener(com.earthview.world.graphic.SceneManager.SceneManagerListener s)
	{
		long sParamValue = (s == null ? 0L : s.nativeObject.pointer);
		boolean returnValue = existListener_CSceneManagerListener(this.nativeObject.pointer, sParamValue);
		return returnValue;
	}
	native private boolean existListener_CSceneManagerListener_NoVirtual(long pNativeObject, long s);
	protected boolean existListener_NoVirtual(com.earthview.world.graphic.SceneManager.SceneManagerListener s)
	{
		long sParamValue = (s == null ? 0L : s.nativeObject.pointer);
		boolean returnValue = existListener_CSceneManagerListener_NoVirtual(this.nativeObject.pointer, sParamValue);
		return returnValue;
	}

	protected  long createStaticGeometry_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.StaticGeometry returnValue = createStaticGeometry(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createStaticGeometry_EVString(long pNativeObject, String name);
	public com.earthview.world.graphic.StaticGeometry createStaticGeometry(String name)
	{
		String nameParamValue = name;
		long returnValue = createStaticGeometry_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.StaticGeometry __returnValue = new com.earthview.world.graphic.StaticGeometry(CreatedWhenConstruct.CWC_NotToCreate, "CStaticGeometry");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.StaticGeometry)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CStaticGeometry");
		}
		return __returnValue;
	}
	native private long createStaticGeometry_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.StaticGeometry createStaticGeometry_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = createStaticGeometry_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.StaticGeometry __returnValue = new com.earthview.world.graphic.StaticGeometry(CreatedWhenConstruct.CWC_NotToCreate, "CStaticGeometry");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.StaticGeometry)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CStaticGeometry");
		}
		return __returnValue;
	}

	protected  long getStaticGeometry_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.StaticGeometry returnValue = getStaticGeometry(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getStaticGeometry_EVString(long pNativeObject, String name);
	public com.earthview.world.graphic.StaticGeometry getStaticGeometry(String name)
	{
		String nameParamValue = name;
		long returnValue = getStaticGeometry_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.StaticGeometry __returnValue = new com.earthview.world.graphic.StaticGeometry(CreatedWhenConstruct.CWC_NotToCreate, "CStaticGeometry");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.StaticGeometry)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CStaticGeometry");
		}
		return __returnValue;
	}
	native private long getStaticGeometry_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.StaticGeometry getStaticGeometry_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = getStaticGeometry_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.StaticGeometry __returnValue = new com.earthview.world.graphic.StaticGeometry(CreatedWhenConstruct.CWC_NotToCreate, "CStaticGeometry");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.StaticGeometry)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CStaticGeometry");
		}
		return __returnValue;
	}

	protected  boolean hasStaticGeometry_EVString_callback(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasStaticGeometry(nameParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean hasStaticGeometry_EVString(long pNativeObject, String name);
	public boolean hasStaticGeometry(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasStaticGeometry_EVString(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}
	native private boolean hasStaticGeometry_EVString_NoVirtual(long pNativeObject, String name);
	protected boolean hasStaticGeometry_NoVirtual(String name)
	{
		String nameParamValue = name;
		boolean returnValue = hasStaticGeometry_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		return returnValue;
	}

	protected  void destroyStaticGeometry_CStaticGeometry_callback(long geom)
	{
		com.earthview.world.graphic.StaticGeometry geomParamValue = (geom == 0L ? null : new com.earthview.world.graphic.StaticGeometry(CreatedWhenConstruct.CWC_NotToCreate));
		if(geomParamValue != null)
		{
		geomParamValue.setDelegate(true);
		geomParamValue.setInstancePointer(new InstancePointer(geom));
		IClassFactory geomParamValueClassFactory = GlobalClassFactoryMap.get(geomParamValue.getCppInstanceTypeName());
		if (geomParamValueClassFactory != null)
		{
			geomParamValue.setDelegate(true);
			geomParamValue = (com.earthview.world.graphic.StaticGeometry)geomParamValueClassFactory.create();
			geomParamValue.setDelegate(true);
			geomParamValue.setInstancePointer(new InstancePointer(geom));
		}
		}
		destroyStaticGeometry(geomParamValue);
	}

	native private void destroyStaticGeometry_CStaticGeometry(long pNativeObject, long geom);
	public void destroyStaticGeometry(com.earthview.world.graphic.StaticGeometry geom)
	{
		long geomParamValue = (geom == null ? 0L : geom.nativeObject.pointer);
		destroyStaticGeometry_CStaticGeometry(this.nativeObject.pointer, geomParamValue);
	}
	native private void destroyStaticGeometry_CStaticGeometry_NoVirtual(long pNativeObject, long geom);
	protected void destroyStaticGeometry_NoVirtual(com.earthview.world.graphic.StaticGeometry geom)
	{
		long geomParamValue = (geom == null ? 0L : geom.nativeObject.pointer);
		destroyStaticGeometry_CStaticGeometry_NoVirtual(this.nativeObject.pointer, geomParamValue);
	}

	protected  void destroyStaticGeometry_EVString_callback(String name)
	{
		String nameParamValue = name;
		destroyStaticGeometry(nameParamValue);
	}

	native private void destroyStaticGeometry_EVString(long pNativeObject, String name);
	public void destroyStaticGeometry(String name)
	{
		String nameParamValue = name;
		destroyStaticGeometry_EVString(this.nativeObject.pointer, nameParamValue);
	}
	native private void destroyStaticGeometry_EVString_NoVirtual(long pNativeObject, String name);
	protected void destroyStaticGeometry_NoVirtual(String name)
	{
		String nameParamValue = name;
		destroyStaticGeometry_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
	}

	protected  void destroyAllStaticGeometry_void_callback()
	{
		destroyAllStaticGeometry();
	}

	native private void destroyAllStaticGeometry_void(long pNativeObject);
	public void destroyAllStaticGeometry()
	{
		destroyAllStaticGeometry_void(this.nativeObject.pointer);
	}
	native private void destroyAllStaticGeometry_void_NoVirtual(long pNativeObject);
	protected void destroyAllStaticGeometry_NoVirtual()
	{
		destroyAllStaticGeometry_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  long createInstancedGeometry_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.InstancedGeometry returnValue = createInstancedGeometry(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createInstancedGeometry_EVString(long pNativeObject, String name);
	public com.earthview.world.graphic.InstancedGeometry createInstancedGeometry(String name)
	{
		String nameParamValue = name;
		long returnValue = createInstancedGeometry_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.InstancedGeometry __returnValue = new com.earthview.world.graphic.InstancedGeometry(CreatedWhenConstruct.CWC_NotToCreate, "CInstancedGeometry");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.InstancedGeometry)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CInstancedGeometry");
		}
		return __returnValue;
	}
	native private long createInstancedGeometry_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.InstancedGeometry createInstancedGeometry_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = createInstancedGeometry_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.InstancedGeometry __returnValue = new com.earthview.world.graphic.InstancedGeometry(CreatedWhenConstruct.CWC_NotToCreate, "CInstancedGeometry");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.InstancedGeometry)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CInstancedGeometry");
		}
		return __returnValue;
	}

	protected  long getInstancedGeometry_EVString_callback(String name)
	{
		String nameParamValue = name;
		com.earthview.world.graphic.InstancedGeometry returnValue = getInstancedGeometry(nameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getInstancedGeometry_EVString(long pNativeObject, String name);
	public com.earthview.world.graphic.InstancedGeometry getInstancedGeometry(String name)
	{
		String nameParamValue = name;
		long returnValue = getInstancedGeometry_EVString(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.InstancedGeometry __returnValue = new com.earthview.world.graphic.InstancedGeometry(CreatedWhenConstruct.CWC_NotToCreate, "CInstancedGeometry");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.InstancedGeometry)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CInstancedGeometry");
		}
		return __returnValue;
	}
	native private long getInstancedGeometry_EVString_NoVirtual(long pNativeObject, String name);
	protected com.earthview.world.graphic.InstancedGeometry getInstancedGeometry_NoVirtual(String name)
	{
		String nameParamValue = name;
		long returnValue = getInstancedGeometry_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.InstancedGeometry __returnValue = new com.earthview.world.graphic.InstancedGeometry(CreatedWhenConstruct.CWC_NotToCreate, "CInstancedGeometry");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.InstancedGeometry)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CInstancedGeometry");
		}
		return __returnValue;
	}

	protected  void destroyInstancedGeometry_CInstancedGeometry_callback(long geom)
	{
		com.earthview.world.graphic.InstancedGeometry geomParamValue = (geom == 0L ? null : new com.earthview.world.graphic.InstancedGeometry(CreatedWhenConstruct.CWC_NotToCreate));
		if(geomParamValue != null)
		{
		geomParamValue.setDelegate(true);
		geomParamValue.setInstancePointer(new InstancePointer(geom));
		IClassFactory geomParamValueClassFactory = GlobalClassFactoryMap.get(geomParamValue.getCppInstanceTypeName());
		if (geomParamValueClassFactory != null)
		{
			geomParamValue.setDelegate(true);
			geomParamValue = (com.earthview.world.graphic.InstancedGeometry)geomParamValueClassFactory.create();
			geomParamValue.setDelegate(true);
			geomParamValue.setInstancePointer(new InstancePointer(geom));
		}
		}
		destroyInstancedGeometry(geomParamValue);
	}

	native private void destroyInstancedGeometry_CInstancedGeometry(long pNativeObject, long geom);
	public void destroyInstancedGeometry(com.earthview.world.graphic.InstancedGeometry geom)
	{
		long geomParamValue = (geom == null ? 0L : geom.nativeObject.pointer);
		destroyInstancedGeometry_CInstancedGeometry(this.nativeObject.pointer, geomParamValue);
	}
	native private void destroyInstancedGeometry_CInstancedGeometry_NoVirtual(long pNativeObject, long geom);
	protected void destroyInstancedGeometry_NoVirtual(com.earthview.world.graphic.InstancedGeometry geom)
	{
		long geomParamValue = (geom == null ? 0L : geom.nativeObject.pointer);
		destroyInstancedGeometry_CInstancedGeometry_NoVirtual(this.nativeObject.pointer, geomParamValue);
	}

	protected  void destroyInstancedGeometry_EVString_callback(String name)
	{
		String nameParamValue = name;
		destroyInstancedGeometry(nameParamValue);
	}

	native private void destroyInstancedGeometry_EVString(long pNativeObject, String name);
	public void destroyInstancedGeometry(String name)
	{
		String nameParamValue = name;
		destroyInstancedGeometry_EVString(this.nativeObject.pointer, nameParamValue);
	}
	native private void destroyInstancedGeometry_EVString_NoVirtual(long pNativeObject, String name);
	protected void destroyInstancedGeometry_NoVirtual(String name)
	{
		String nameParamValue = name;
		destroyInstancedGeometry_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
	}

	protected  void destroyAllInstancedGeometry_void_callback()
	{
		destroyAllInstancedGeometry();
	}

	native private void destroyAllInstancedGeometry_void(long pNativeObject);
	public void destroyAllInstancedGeometry()
	{
		destroyAllInstancedGeometry_void(this.nativeObject.pointer);
	}
	native private void destroyAllInstancedGeometry_void_NoVirtual(long pNativeObject);
	protected void destroyAllInstancedGeometry_NoVirtual()
	{
		destroyAllInstancedGeometry_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  long createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback(String customName, String meshName, String groupName, int technique, long numInstancesPerBatch, int flags, int subMeshIdx)
	{
		String customNameParamValue = customName;
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		com.earthview.world.graphic.InstanceManager.InstancingTechnique techniqueParamValue = com.earthview.world.graphic.InstanceManager.InstancingTechnique.toEnum(technique);
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		int flagsParamValue = flags;
		int subMeshIdxParamValue = subMeshIdx;
		com.earthview.world.graphic.InstanceManager returnValue = createInstanceManager(customNameParamValue, meshNameParamValue, groupNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue, flagsParamValue, subMeshIdxParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(long pNativeObject, String customName, String meshName, String groupName, int technique, long numInstancesPerBatch, int flags, int subMeshIdx);
	/**
	 * 创建Instance管理器每个submesh对应一个instance管理器
	 * @param  
	 */
	public com.earthview.world.graphic.InstanceManager createInstanceManager(String customName, String meshName, String groupName, com.earthview.world.graphic.InstanceManager.InstancingTechnique technique, long numInstancesPerBatch, int flags, int subMeshIdx)
	{
		String customNameParamValue = customName;
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		int techniqueParamValue = technique.getValue();
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		int flagsParamValue = flags;
		int subMeshIdxParamValue = subMeshIdx;
		long returnValue = createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(this.nativeObject.pointer, customNameParamValue, meshNameParamValue, groupNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue, flagsParamValue, subMeshIdxParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.InstanceManager __returnValue = new com.earthview.world.graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate, "CInstanceManager");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.InstanceManager)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CInstanceManager");
		}
		return __returnValue;
	}
	native private long createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_NoVirtual(long pNativeObject, String customName, String meshName, String groupName, int technique, long numInstancesPerBatch, int flags, int subMeshIdx);
	protected com.earthview.world.graphic.InstanceManager createInstanceManager_NoVirtual(String customName, String meshName, String groupName, com.earthview.world.graphic.InstanceManager.InstancingTechnique technique, long numInstancesPerBatch, int flags, int subMeshIdx)
	{
		String customNameParamValue = customName;
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		int techniqueParamValue = technique.getValue();
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		int flagsParamValue = flags;
		int subMeshIdxParamValue = subMeshIdx;
		long returnValue = createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_NoVirtual(this.nativeObject.pointer, customNameParamValue, meshNameParamValue, groupNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue, flagsParamValue, subMeshIdxParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.InstanceManager __returnValue = new com.earthview.world.graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate, "CInstanceManager");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.InstanceManager)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CInstanceManager");
		}
		return __returnValue;
	}

	protected  long createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback(String customName, String meshName, String groupName, int technique, long numInstancesPerBatch, int flags)
	{
		String customNameParamValue = customName;
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		com.earthview.world.graphic.InstanceManager.InstancingTechnique techniqueParamValue = com.earthview.world.graphic.InstanceManager.InstancingTechnique.toEnum(technique);
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		int flagsParamValue = flags;
		com.earthview.world.graphic.InstanceManager returnValue = createInstanceManager(customNameParamValue, meshNameParamValue, groupNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue, flagsParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(long pNativeObject, String customName, String meshName, String groupName, int technique, long numInstancesPerBatch, int flags);
	public com.earthview.world.graphic.InstanceManager createInstanceManager(String customName, String meshName, String groupName, com.earthview.world.graphic.InstanceManager.InstancingTechnique technique, long numInstancesPerBatch, int flags)
	{
		String customNameParamValue = customName;
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		int techniqueParamValue = technique.getValue();
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		int flagsParamValue = flags;
		long returnValue = createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(this.nativeObject.pointer, customNameParamValue, meshNameParamValue, groupNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue, flagsParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.InstanceManager __returnValue = new com.earthview.world.graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate, "CInstanceManager");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.InstanceManager)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CInstanceManager");
		}
		return __returnValue;
	}
	native private long createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_NoVirtual(long pNativeObject, String customName, String meshName, String groupName, int technique, long numInstancesPerBatch, int flags);
	protected com.earthview.world.graphic.InstanceManager createInstanceManager_NoVirtual(String customName, String meshName, String groupName, com.earthview.world.graphic.InstanceManager.InstancingTechnique technique, long numInstancesPerBatch, int flags)
	{
		String customNameParamValue = customName;
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		int techniqueParamValue = technique.getValue();
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		int flagsParamValue = flags;
		long returnValue = createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_NoVirtual(this.nativeObject.pointer, customNameParamValue, meshNameParamValue, groupNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue, flagsParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.InstanceManager __returnValue = new com.earthview.world.graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate, "CInstanceManager");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.InstanceManager)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CInstanceManager");
		}
		return __returnValue;
	}

	protected  long createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback(String customName, String meshName, String groupName, int technique, long numInstancesPerBatch)
	{
		String customNameParamValue = customName;
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		com.earthview.world.graphic.InstanceManager.InstancingTechnique techniqueParamValue = com.earthview.world.graphic.InstanceManager.InstancingTechnique.toEnum(technique);
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		com.earthview.world.graphic.InstanceManager returnValue = createInstanceManager(customNameParamValue, meshNameParamValue, groupNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t(long pNativeObject, String customName, String meshName, String groupName, int technique, long numInstancesPerBatch);
	public com.earthview.world.graphic.InstanceManager createInstanceManager(String customName, String meshName, String groupName, com.earthview.world.graphic.InstanceManager.InstancingTechnique technique, long numInstancesPerBatch)
	{
		String customNameParamValue = customName;
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		int techniqueParamValue = technique.getValue();
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		long returnValue = createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t(this.nativeObject.pointer, customNameParamValue, meshNameParamValue, groupNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.InstanceManager __returnValue = new com.earthview.world.graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate, "CInstanceManager");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.InstanceManager)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CInstanceManager");
		}
		return __returnValue;
	}
	native private long createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_NoVirtual(long pNativeObject, String customName, String meshName, String groupName, int technique, long numInstancesPerBatch);
	protected com.earthview.world.graphic.InstanceManager createInstanceManager_NoVirtual(String customName, String meshName, String groupName, com.earthview.world.graphic.InstanceManager.InstancingTechnique technique, long numInstancesPerBatch)
	{
		String customNameParamValue = customName;
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		int techniqueParamValue = technique.getValue();
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		long returnValue = createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_NoVirtual(this.nativeObject.pointer, customNameParamValue, meshNameParamValue, groupNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.InstanceManager __returnValue = new com.earthview.world.graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate, "CInstanceManager");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.InstanceManager)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CInstanceManager");
		}
		return __returnValue;
	}

	native private void addInstanceManager_CInstanceManager(long pNativeObject, long pInstMnger);
	public void addInstanceManager(com.earthview.world.graphic.InstanceManager pInstMnger)
	{
		long pInstMngerParamValue = (pInstMnger == null ? 0L : pInstMnger.nativeObject.pointer);
		addInstanceManager_CInstanceManager(this.nativeObject.pointer, pInstMngerParamValue);
	}
	protected  long getInstanceManager_EVString_callback(String managerName)
	{
		String managerNameParamValue = managerName;
		com.earthview.world.graphic.InstanceManager returnValue = getInstanceManager(managerNameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getInstanceManager_EVString(long pNativeObject, String managerName);
	/**
	 * 获得Instance管理器
	 * @param  
	 */
	public com.earthview.world.graphic.InstanceManager getInstanceManager(String managerName)
	{
		String managerNameParamValue = managerName;
		long returnValue = getInstanceManager_EVString(this.nativeObject.pointer, managerNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.InstanceManager __returnValue = new com.earthview.world.graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate, "CInstanceManager");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.InstanceManager)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CInstanceManager");
		}
		return __returnValue;
	}
	native private long getInstanceManager_EVString_NoVirtual(long pNativeObject, String managerName);
	protected com.earthview.world.graphic.InstanceManager getInstanceManager_NoVirtual(String managerName)
	{
		String managerNameParamValue = managerName;
		long returnValue = getInstanceManager_EVString_NoVirtual(this.nativeObject.pointer, managerNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.InstanceManager __returnValue = new com.earthview.world.graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate, "CInstanceManager");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.InstanceManager)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CInstanceManager");
		}
		return __returnValue;
	}

	protected  boolean hasInstanceManager_EVString_callback(String managerName)
	{
		String managerNameParamValue = managerName;
		boolean returnValue = hasInstanceManager(managerNameParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean hasInstanceManager_EVString(long pNativeObject, String managerName);
	/**
	 * 判断是否存在给定名称的Instance管理器
	 * @param  
	 */
	public boolean hasInstanceManager(String managerName)
	{
		String managerNameParamValue = managerName;
		boolean returnValue = hasInstanceManager_EVString(this.nativeObject.pointer, managerNameParamValue);
		return returnValue;
	}
	native private boolean hasInstanceManager_EVString_NoVirtual(long pNativeObject, String managerName);
	protected boolean hasInstanceManager_NoVirtual(String managerName)
	{
		String managerNameParamValue = managerName;
		boolean returnValue = hasInstanceManager_EVString_NoVirtual(this.nativeObject.pointer, managerNameParamValue);
		return returnValue;
	}

	protected  void destroyInstanceManager_EVString_callback(String name)
	{
		String nameParamValue = name;
		destroyInstanceManager(nameParamValue);
	}

	native private void destroyInstanceManager_EVString(long pNativeObject, String name);
	/**
	 * 销毁给定的Instance管理器
	 * @param  
	 */
	public void destroyInstanceManager(String name)
	{
		String nameParamValue = name;
		destroyInstanceManager_EVString(this.nativeObject.pointer, nameParamValue);
	}
	native private void destroyInstanceManager_EVString_NoVirtual(long pNativeObject, String name);
	protected void destroyInstanceManager_NoVirtual(String name)
	{
		String nameParamValue = name;
		destroyInstanceManager_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
	}

	protected  void destroyInstanceManager_CInstanceManager_callback(long instanceManager)
	{
		com.earthview.world.graphic.InstanceManager instanceManagerParamValue = (instanceManager == 0L ? null : new com.earthview.world.graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate));
		if(instanceManagerParamValue != null)
		{
		instanceManagerParamValue.setDelegate(true);
		instanceManagerParamValue.setInstancePointer(new InstancePointer(instanceManager));
		IClassFactory instanceManagerParamValueClassFactory = GlobalClassFactoryMap.get(instanceManagerParamValue.getCppInstanceTypeName());
		if (instanceManagerParamValueClassFactory != null)
		{
			instanceManagerParamValue.setDelegate(true);
			instanceManagerParamValue = (com.earthview.world.graphic.InstanceManager)instanceManagerParamValueClassFactory.create();
			instanceManagerParamValue.setDelegate(true);
			instanceManagerParamValue.setInstancePointer(new InstancePointer(instanceManager));
		}
		}
		destroyInstanceManager(instanceManagerParamValue);
	}

	native private void destroyInstanceManager_CInstanceManager(long pNativeObject, long instanceManager);
	public void destroyInstanceManager(com.earthview.world.graphic.InstanceManager instanceManager)
	{
		long instanceManagerParamValue = (instanceManager == null ? 0L : instanceManager.nativeObject.pointer);
		destroyInstanceManager_CInstanceManager(this.nativeObject.pointer, instanceManagerParamValue);
	}
	native private void destroyInstanceManager_CInstanceManager_NoVirtual(long pNativeObject, long instanceManager);
	protected void destroyInstanceManager_NoVirtual(com.earthview.world.graphic.InstanceManager instanceManager)
	{
		long instanceManagerParamValue = (instanceManager == null ? 0L : instanceManager.nativeObject.pointer);
		destroyInstanceManager_CInstanceManager_NoVirtual(this.nativeObject.pointer, instanceManagerParamValue);
	}

	protected  void destroyInstanceManagerWithThreadSafe_EVString_callback(String name)
	{
		String nameParamValue = name;
		destroyInstanceManagerWithThreadSafe(nameParamValue);
	}

	native private void destroyInstanceManagerWithThreadSafe_EVString(long pNativeObject, String name);
	public void destroyInstanceManagerWithThreadSafe(String name)
	{
		String nameParamValue = name;
		destroyInstanceManagerWithThreadSafe_EVString(this.nativeObject.pointer, nameParamValue);
	}
	native private void destroyInstanceManagerWithThreadSafe_EVString_NoVirtual(long pNativeObject, String name);
	protected void destroyInstanceManagerWithThreadSafe_NoVirtual(String name)
	{
		String nameParamValue = name;
		destroyInstanceManagerWithThreadSafe_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue);
	}

	protected  void destroyInstanceManagerWithThreadSafe_CInstanceManager_callback(long instanceManager)
	{
		com.earthview.world.graphic.InstanceManager instanceManagerParamValue = (instanceManager == 0L ? null : new com.earthview.world.graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate));
		if(instanceManagerParamValue != null)
		{
		instanceManagerParamValue.setDelegate(true);
		instanceManagerParamValue.setInstancePointer(new InstancePointer(instanceManager));
		IClassFactory instanceManagerParamValueClassFactory = GlobalClassFactoryMap.get(instanceManagerParamValue.getCppInstanceTypeName());
		if (instanceManagerParamValueClassFactory != null)
		{
			instanceManagerParamValue.setDelegate(true);
			instanceManagerParamValue = (com.earthview.world.graphic.InstanceManager)instanceManagerParamValueClassFactory.create();
			instanceManagerParamValue.setDelegate(true);
			instanceManagerParamValue.setInstancePointer(new InstancePointer(instanceManager));
		}
		}
		destroyInstanceManagerWithThreadSafe(instanceManagerParamValue);
	}

	native private void destroyInstanceManagerWithThreadSafe_CInstanceManager(long pNativeObject, long instanceManager);
	public void destroyInstanceManagerWithThreadSafe(com.earthview.world.graphic.InstanceManager instanceManager)
	{
		long instanceManagerParamValue = (instanceManager == null ? 0L : instanceManager.nativeObject.pointer);
		destroyInstanceManagerWithThreadSafe_CInstanceManager(this.nativeObject.pointer, instanceManagerParamValue);
	}
	native private void destroyInstanceManagerWithThreadSafe_CInstanceManager_NoVirtual(long pNativeObject, long instanceManager);
	protected void destroyInstanceManagerWithThreadSafe_NoVirtual(com.earthview.world.graphic.InstanceManager instanceManager)
	{
		long instanceManagerParamValue = (instanceManager == null ? 0L : instanceManager.nativeObject.pointer);
		destroyInstanceManagerWithThreadSafe_CInstanceManager_NoVirtual(this.nativeObject.pointer, instanceManagerParamValue);
	}

	protected  void destroyAllInstanceManagers_void_callback()
	{
		destroyAllInstanceManagers();
	}

	native private void destroyAllInstanceManagers_void(long pNativeObject);
	/**
	 * 销毁所有Instance管理器
	 * @param  
	 */
	public void destroyAllInstanceManagers()
	{
		destroyAllInstanceManagers_void(this.nativeObject.pointer);
	}
	native private void destroyAllInstanceManagers_void_NoVirtual(long pNativeObject);
	protected void destroyAllInstanceManagers_NoVirtual()
	{
		destroyAllInstanceManagers_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  long getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback(String meshName, String groupName, String materialName, int technique, long numInstancesPerBatch)
	{
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		String materialNameParamValue = materialName;
		com.earthview.world.graphic.InstanceManager.InstancingTechnique techniqueParamValue = com.earthview.world.graphic.InstanceManager.InstancingTechnique.toEnum(technique);
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		long returnValue = getNumInstancesPerBatch(meshNameParamValue, groupNameParamValue, materialNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue);
		long __returnValue = returnValue;
		return __returnValue;
	}

	native private long getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t(long pNativeObject, String meshName, String groupName, String materialName, int technique, long numInstancesPerBatch);
	/**
	 * 获得每个批次支持的最多instance数量
	 * @param  
	 */
	public long getNumInstancesPerBatch(String meshName, String groupName, String materialName, com.earthview.world.graphic.InstanceManager.InstancingTechnique technique, long numInstancesPerBatch)
	{
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		String materialNameParamValue = materialName;
		int techniqueParamValue = technique.getValue();
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		long returnValue = getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t(this.nativeObject.pointer, meshNameParamValue, groupNameParamValue, materialNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue);
		return returnValue;
	}
	native private long getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_NoVirtual(long pNativeObject, String meshName, String groupName, String materialName, int technique, long numInstancesPerBatch);
	protected long getNumInstancesPerBatch_NoVirtual(String meshName, String groupName, String materialName, com.earthview.world.graphic.InstanceManager.InstancingTechnique technique, long numInstancesPerBatch)
	{
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		String materialNameParamValue = materialName;
		int techniqueParamValue = technique.getValue();
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		long returnValue = getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_NoVirtual(this.nativeObject.pointer, meshNameParamValue, groupNameParamValue, materialNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue);
		return returnValue;
	}

	protected  long getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback(String meshName, String groupName, String materialName, int technique, long numInstancesPerBatch, int flags)
	{
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		String materialNameParamValue = materialName;
		com.earthview.world.graphic.InstanceManager.InstancingTechnique techniqueParamValue = com.earthview.world.graphic.InstanceManager.InstancingTechnique.toEnum(technique);
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		int flagsParamValue = flags;
		long returnValue = getNumInstancesPerBatch(meshNameParamValue, groupNameParamValue, materialNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue, flagsParamValue);
		long __returnValue = returnValue;
		return __returnValue;
	}

	native private long getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(long pNativeObject, String meshName, String groupName, String materialName, int technique, long numInstancesPerBatch, int flags);
	public long getNumInstancesPerBatch(String meshName, String groupName, String materialName, com.earthview.world.graphic.InstanceManager.InstancingTechnique technique, long numInstancesPerBatch, int flags)
	{
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		String materialNameParamValue = materialName;
		int techniqueParamValue = technique.getValue();
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		int flagsParamValue = flags;
		long returnValue = getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(this.nativeObject.pointer, meshNameParamValue, groupNameParamValue, materialNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue, flagsParamValue);
		return returnValue;
	}
	native private long getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_NoVirtual(long pNativeObject, String meshName, String groupName, String materialName, int technique, long numInstancesPerBatch, int flags);
	protected long getNumInstancesPerBatch_NoVirtual(String meshName, String groupName, String materialName, com.earthview.world.graphic.InstanceManager.InstancingTechnique technique, long numInstancesPerBatch, int flags)
	{
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		String materialNameParamValue = materialName;
		int techniqueParamValue = technique.getValue();
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		int flagsParamValue = flags;
		long returnValue = getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_NoVirtual(this.nativeObject.pointer, meshNameParamValue, groupNameParamValue, materialNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue, flagsParamValue);
		return returnValue;
	}

	protected  long getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback(String meshName, String groupName, String materialName, int technique, long numInstancesPerBatch, int flags, int subMeshIdx)
	{
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		String materialNameParamValue = materialName;
		com.earthview.world.graphic.InstanceManager.InstancingTechnique techniqueParamValue = com.earthview.world.graphic.InstanceManager.InstancingTechnique.toEnum(technique);
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		int flagsParamValue = flags;
		int subMeshIdxParamValue = subMeshIdx;
		long returnValue = getNumInstancesPerBatch(meshNameParamValue, groupNameParamValue, materialNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue, flagsParamValue, subMeshIdxParamValue);
		long __returnValue = returnValue;
		return __returnValue;
	}

	native private long getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(long pNativeObject, String meshName, String groupName, String materialName, int technique, long numInstancesPerBatch, int flags, int subMeshIdx);
	public long getNumInstancesPerBatch(String meshName, String groupName, String materialName, com.earthview.world.graphic.InstanceManager.InstancingTechnique technique, long numInstancesPerBatch, int flags, int subMeshIdx)
	{
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		String materialNameParamValue = materialName;
		int techniqueParamValue = technique.getValue();
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		int flagsParamValue = flags;
		int subMeshIdxParamValue = subMeshIdx;
		long returnValue = getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(this.nativeObject.pointer, meshNameParamValue, groupNameParamValue, materialNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue, flagsParamValue, subMeshIdxParamValue);
		return returnValue;
	}
	native private long getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_NoVirtual(long pNativeObject, String meshName, String groupName, String materialName, int technique, long numInstancesPerBatch, int flags, int subMeshIdx);
	protected long getNumInstancesPerBatch_NoVirtual(String meshName, String groupName, String materialName, com.earthview.world.graphic.InstanceManager.InstancingTechnique technique, long numInstancesPerBatch, int flags, int subMeshIdx)
	{
		String meshNameParamValue = meshName;
		String groupNameParamValue = groupName;
		String materialNameParamValue = materialName;
		int techniqueParamValue = technique.getValue();
		long numInstancesPerBatchParamValue = numInstancesPerBatch;
		int flagsParamValue = flags;
		int subMeshIdxParamValue = subMeshIdx;
		long returnValue = getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_NoVirtual(this.nativeObject.pointer, meshNameParamValue, groupNameParamValue, materialNameParamValue, techniqueParamValue, numInstancesPerBatchParamValue, flagsParamValue, subMeshIdxParamValue);
		return returnValue;
	}

	protected  long createInstancedEntity_EVString_EVString_callback(String materialName, String managerName)
	{
		String materialNameParamValue = materialName;
		String managerNameParamValue = managerName;
		com.earthview.world.graphic.InstancedEntity returnValue = createInstancedEntity(materialNameParamValue, managerNameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createInstancedEntity_EVString_EVString(long pNativeObject, String materialName, String managerName);
	/**
	 * 创建Instance实体每个实体对应一个SubMesh
	 * @param  
	 */
	public com.earthview.world.graphic.InstancedEntity createInstancedEntity(String materialName, String managerName)
	{
		String materialNameParamValue = materialName;
		String managerNameParamValue = managerName;
		long returnValue = createInstancedEntity_EVString_EVString(this.nativeObject.pointer, materialNameParamValue, managerNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.InstancedEntity __returnValue = new com.earthview.world.graphic.InstancedEntity(CreatedWhenConstruct.CWC_NotToCreate, "CInstancedEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.InstancedEntity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CInstancedEntity");
		}
		return __returnValue;
	}
	native private long createInstancedEntity_EVString_EVString_NoVirtual(long pNativeObject, String materialName, String managerName);
	protected com.earthview.world.graphic.InstancedEntity createInstancedEntity_NoVirtual(String materialName, String managerName)
	{
		String materialNameParamValue = materialName;
		String managerNameParamValue = managerName;
		long returnValue = createInstancedEntity_EVString_EVString_NoVirtual(this.nativeObject.pointer, materialNameParamValue, managerNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.InstancedEntity __returnValue = new com.earthview.world.graphic.InstancedEntity(CreatedWhenConstruct.CWC_NotToCreate, "CInstancedEntity");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.InstancedEntity)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CInstancedEntity");
		}
		return __returnValue;
	}

	protected  void destroyInstancedEntity_CInstancedEntity_callback(long instancedEntity)
	{
		com.earthview.world.graphic.InstancedEntity instancedEntityParamValue = (instancedEntity == 0L ? null : new com.earthview.world.graphic.InstancedEntity(CreatedWhenConstruct.CWC_NotToCreate));
		if(instancedEntityParamValue != null)
		{
		instancedEntityParamValue.setDelegate(true);
		instancedEntityParamValue.setInstancePointer(new InstancePointer(instancedEntity));
		IClassFactory instancedEntityParamValueClassFactory = GlobalClassFactoryMap.get(instancedEntityParamValue.getCppInstanceTypeName());
		if (instancedEntityParamValueClassFactory != null)
		{
			instancedEntityParamValue.setDelegate(true);
			instancedEntityParamValue = (com.earthview.world.graphic.InstancedEntity)instancedEntityParamValueClassFactory.create();
			instancedEntityParamValue.setDelegate(true);
			instancedEntityParamValue.setInstancePointer(new InstancePointer(instancedEntity));
		}
		}
		destroyInstancedEntity(instancedEntityParamValue);
	}

	native private void destroyInstancedEntity_CInstancedEntity(long pNativeObject, long instancedEntity);
	/**
	 * 销毁Instance实体				
	 * @param  
	 */
	public void destroyInstancedEntity(com.earthview.world.graphic.InstancedEntity instancedEntity)
	{
		long instancedEntityParamValue = (instancedEntity == null ? 0L : instancedEntity.nativeObject.pointer);
		destroyInstancedEntity_CInstancedEntity(this.nativeObject.pointer, instancedEntityParamValue);
	}
	native private void destroyInstancedEntity_CInstancedEntity_NoVirtual(long pNativeObject, long instancedEntity);
	protected void destroyInstancedEntity_NoVirtual(com.earthview.world.graphic.InstancedEntity instancedEntity)
	{
		long instancedEntityParamValue = (instancedEntity == null ? 0L : instancedEntity.nativeObject.pointer);
		destroyInstancedEntity_CInstancedEntity_NoVirtual(this.nativeObject.pointer, instancedEntityParamValue);
	}

	native private void _addDirtyInstanceManager_CInstanceManager(long pNativeObject, long ref_dirtyManager);
	/**
	 * 将instance管理器添加到需要更新包围盒的队列中		
	 * @param  
	 */
	public void _addDirtyInstanceManager(com.earthview.world.graphic.InstanceManager ref_dirtyManager)
	{
		long ref_dirtyManagerParamValue = (ref_dirtyManager == null ? 0L : ref_dirtyManager.nativeObject.pointer);
		_addDirtyInstanceManager_CInstanceManager(this.nativeObject.pointer, ref_dirtyManagerParamValue);
	}
	protected  long createMovableObject_EVString_EVString_CommonStringPairList_callback(String name, String typeName, long params)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		com.earthview.world.core.CommonStringPairList paramsParamValue = (params == 0L ? null : new com.earthview.world.core.CommonStringPairList(CreatedWhenConstruct.CWC_NotToCreate));
		if(paramsParamValue != null)
		{
		paramsParamValue.setDelegate(true);
		paramsParamValue.setInstancePointer(new InstancePointer(params));
		IClassFactory paramsParamValueClassFactory = GlobalClassFactoryMap.get(paramsParamValue.getCppInstanceTypeName());
		if (paramsParamValueClassFactory != null)
		{
			paramsParamValue.setDelegate(true);
			paramsParamValue = (com.earthview.world.core.CommonStringPairList)paramsParamValueClassFactory.create();
			paramsParamValue.setDelegate(true);
			paramsParamValue.setInstancePointer(new InstancePointer(params));
		}
		}
		com.earthview.world.graphic.MovableObject returnValue = createMovableObject(nameParamValue, typeNameParamValue, paramsParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createMovableObject_EVString_EVString_CommonStringPairList(long pNativeObject, String name, String typeName, long params);
	public com.earthview.world.graphic.MovableObject createMovableObject(String name, String typeName, com.earthview.world.core.CommonStringPairList params)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		long paramsParamValue = (params == null ? 0L : params.nativeObject.pointer);
		long returnValue = createMovableObject_EVString_EVString_CommonStringPairList(this.nativeObject.pointer, nameParamValue, typeNameParamValue, paramsParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.MovableObject __returnValue = new com.earthview.world.graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate, "CMovableObject");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.MovableObject)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CMovableObject");
		}
		return __returnValue;
	}
	native private long createMovableObject_EVString_EVString_CommonStringPairList_NoVirtual(long pNativeObject, String name, String typeName, long params);
	protected com.earthview.world.graphic.MovableObject createMovableObject_NoVirtual(String name, String typeName, com.earthview.world.core.CommonStringPairList params)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		long paramsParamValue = (params == null ? 0L : params.nativeObject.pointer);
		long returnValue = createMovableObject_EVString_EVString_CommonStringPairList_NoVirtual(this.nativeObject.pointer, nameParamValue, typeNameParamValue, paramsParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.MovableObject __returnValue = new com.earthview.world.graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate, "CMovableObject");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.MovableObject)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CMovableObject");
		}
		return __returnValue;
	}

	protected  long createMovableObject_EVString_EVString_callback(String name, String typeName)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		com.earthview.world.graphic.MovableObject returnValue = createMovableObject(nameParamValue, typeNameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createMovableObject_EVString_EVString(long pNativeObject, String name, String typeName);
	public com.earthview.world.graphic.MovableObject createMovableObject(String name, String typeName)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		long returnValue = createMovableObject_EVString_EVString(this.nativeObject.pointer, nameParamValue, typeNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.MovableObject __returnValue = new com.earthview.world.graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate, "CMovableObject");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.MovableObject)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CMovableObject");
		}
		return __returnValue;
	}
	native private long createMovableObject_EVString_EVString_NoVirtual(long pNativeObject, String name, String typeName);
	protected com.earthview.world.graphic.MovableObject createMovableObject_NoVirtual(String name, String typeName)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		long returnValue = createMovableObject_EVString_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue, typeNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.MovableObject __returnValue = new com.earthview.world.graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate, "CMovableObject");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.MovableObject)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CMovableObject");
		}
		return __returnValue;
	}

	protected  long createMovableObject_EVString_CommonStringPairList_callback(String typeName, long params)
	{
		String typeNameParamValue = typeName;
		com.earthview.world.core.CommonStringPairList paramsParamValue = (params == 0L ? null : new com.earthview.world.core.CommonStringPairList(CreatedWhenConstruct.CWC_NotToCreate));
		if(paramsParamValue != null)
		{
		paramsParamValue.setDelegate(true);
		paramsParamValue.setInstancePointer(new InstancePointer(params));
		IClassFactory paramsParamValueClassFactory = GlobalClassFactoryMap.get(paramsParamValue.getCppInstanceTypeName());
		if (paramsParamValueClassFactory != null)
		{
			paramsParamValue.setDelegate(true);
			paramsParamValue = (com.earthview.world.core.CommonStringPairList)paramsParamValueClassFactory.create();
			paramsParamValue.setDelegate(true);
			paramsParamValue.setInstancePointer(new InstancePointer(params));
		}
		}
		com.earthview.world.graphic.MovableObject returnValue = createMovableObject(typeNameParamValue, paramsParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createMovableObject_EVString_CommonStringPairList(long pNativeObject, String typeName, long params);
	public com.earthview.world.graphic.MovableObject createMovableObject(String typeName, com.earthview.world.core.CommonStringPairList params)
	{
		String typeNameParamValue = typeName;
		long paramsParamValue = (params == null ? 0L : params.nativeObject.pointer);
		long returnValue = createMovableObject_EVString_CommonStringPairList(this.nativeObject.pointer, typeNameParamValue, paramsParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.MovableObject __returnValue = new com.earthview.world.graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate, "CMovableObject");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.MovableObject)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CMovableObject");
		}
		return __returnValue;
	}
	native private long createMovableObject_EVString_CommonStringPairList_NoVirtual(long pNativeObject, String typeName, long params);
	protected com.earthview.world.graphic.MovableObject createMovableObject_NoVirtual(String typeName, com.earthview.world.core.CommonStringPairList params)
	{
		String typeNameParamValue = typeName;
		long paramsParamValue = (params == null ? 0L : params.nativeObject.pointer);
		long returnValue = createMovableObject_EVString_CommonStringPairList_NoVirtual(this.nativeObject.pointer, typeNameParamValue, paramsParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.MovableObject __returnValue = new com.earthview.world.graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate, "CMovableObject");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.MovableObject)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CMovableObject");
		}
		return __returnValue;
	}

	protected  long createMovableObject_EVString_callback(String typeName)
	{
		String typeNameParamValue = typeName;
		com.earthview.world.graphic.MovableObject returnValue = createMovableObject(typeNameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long createMovableObject_EVString(long pNativeObject, String typeName);
	public com.earthview.world.graphic.MovableObject createMovableObject(String typeName)
	{
		String typeNameParamValue = typeName;
		long returnValue = createMovableObject_EVString(this.nativeObject.pointer, typeNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.MovableObject __returnValue = new com.earthview.world.graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate, "CMovableObject");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.MovableObject)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CMovableObject");
		}
		return __returnValue;
	}
	native private long createMovableObject_EVString_NoVirtual(long pNativeObject, String typeName);
	protected com.earthview.world.graphic.MovableObject createMovableObject_NoVirtual(String typeName)
	{
		String typeNameParamValue = typeName;
		long returnValue = createMovableObject_EVString_NoVirtual(this.nativeObject.pointer, typeNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.MovableObject __returnValue = new com.earthview.world.graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate, "CMovableObject");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.MovableObject)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CMovableObject");
		}
		return __returnValue;
	}

	protected  void destroyMovableObject_EVString_EVString_callback(String name, String typeName)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		destroyMovableObject(nameParamValue, typeNameParamValue);
	}

	native private void destroyMovableObject_EVString_EVString(long pNativeObject, String name, String typeName);
	public void destroyMovableObject(String name, String typeName)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		destroyMovableObject_EVString_EVString(this.nativeObject.pointer, nameParamValue, typeNameParamValue);
	}
	native private void destroyMovableObject_EVString_EVString_NoVirtual(long pNativeObject, String name, String typeName);
	protected void destroyMovableObject_NoVirtual(String name, String typeName)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		destroyMovableObject_EVString_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue, typeNameParamValue);
	}

	protected  void destroyMovableObject_CMovableObject_callback(long m)
	{
		com.earthview.world.graphic.MovableObject mParamValue = (m == 0L ? null : new com.earthview.world.graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate));
		if(mParamValue != null)
		{
		mParamValue.setDelegate(true);
		mParamValue.setInstancePointer(new InstancePointer(m));
		IClassFactory mParamValueClassFactory = GlobalClassFactoryMap.get(mParamValue.getCppInstanceTypeName());
		if (mParamValueClassFactory != null)
		{
			mParamValue.setDelegate(true);
			mParamValue = (com.earthview.world.graphic.MovableObject)mParamValueClassFactory.create();
			mParamValue.setDelegate(true);
			mParamValue.setInstancePointer(new InstancePointer(m));
		}
		}
		destroyMovableObject(mParamValue);
	}

	native private void destroyMovableObject_CMovableObject(long pNativeObject, long m);
	public void destroyMovableObject(com.earthview.world.graphic.MovableObject m)
	{
		long mParamValue = (m == null ? 0L : m.nativeObject.pointer);
		destroyMovableObject_CMovableObject(this.nativeObject.pointer, mParamValue);
	}
	native private void destroyMovableObject_CMovableObject_NoVirtual(long pNativeObject, long m);
	protected void destroyMovableObject_NoVirtual(com.earthview.world.graphic.MovableObject m)
	{
		long mParamValue = (m == null ? 0L : m.nativeObject.pointer);
		destroyMovableObject_CMovableObject_NoVirtual(this.nativeObject.pointer, mParamValue);
	}

	protected  void destroyAllMovableObjectsByType_EVString_callback(String typeName)
	{
		String typeNameParamValue = typeName;
		destroyAllMovableObjectsByType(typeNameParamValue);
	}

	native private void destroyAllMovableObjectsByType_EVString(long pNativeObject, String typeName);
	public void destroyAllMovableObjectsByType(String typeName)
	{
		String typeNameParamValue = typeName;
		destroyAllMovableObjectsByType_EVString(this.nativeObject.pointer, typeNameParamValue);
	}
	native private void destroyAllMovableObjectsByType_EVString_NoVirtual(long pNativeObject, String typeName);
	protected void destroyAllMovableObjectsByType_NoVirtual(String typeName)
	{
		String typeNameParamValue = typeName;
		destroyAllMovableObjectsByType_EVString_NoVirtual(this.nativeObject.pointer, typeNameParamValue);
	}

	protected  void destroyAllMovableObjects_void_callback()
	{
		destroyAllMovableObjects();
	}

	native private void destroyAllMovableObjects_void(long pNativeObject);
	public void destroyAllMovableObjects()
	{
		destroyAllMovableObjects_void(this.nativeObject.pointer);
	}
	native private void destroyAllMovableObjects_void_NoVirtual(long pNativeObject);
	protected void destroyAllMovableObjects_NoVirtual()
	{
		destroyAllMovableObjects_void_NoVirtual(this.nativeObject.pointer);
	}

	protected  long getMovableObject_EVString_EVString_callback(String name, String typeName)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		com.earthview.world.graphic.MovableObject returnValue = getMovableObject(nameParamValue, typeNameParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getMovableObject_EVString_EVString(long pNativeObject, String name, String typeName);
	public com.earthview.world.graphic.MovableObject getMovableObject(String name, String typeName)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		long returnValue = getMovableObject_EVString_EVString(this.nativeObject.pointer, nameParamValue, typeNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.MovableObject __returnValue = new com.earthview.world.graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate, "CMovableObject");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.MovableObject)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CMovableObject");
		}
		return __returnValue;
	}
	native private long getMovableObject_EVString_EVString_NoVirtual(long pNativeObject, String name, String typeName);
	protected com.earthview.world.graphic.MovableObject getMovableObject_NoVirtual(String name, String typeName)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		long returnValue = getMovableObject_EVString_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue, typeNameParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.MovableObject __returnValue = new com.earthview.world.graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate, "CMovableObject");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.MovableObject)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CMovableObject");
		}
		return __returnValue;
	}

	protected  boolean hasMovableObject_EVString_EVString_callback(String name, String typeName)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		boolean returnValue = hasMovableObject(nameParamValue, typeNameParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean hasMovableObject_EVString_EVString(long pNativeObject, String name, String typeName);
	public boolean hasMovableObject(String name, String typeName)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		boolean returnValue = hasMovableObject_EVString_EVString(this.nativeObject.pointer, nameParamValue, typeNameParamValue);
		return returnValue;
	}
	native private boolean hasMovableObject_EVString_EVString_NoVirtual(long pNativeObject, String name, String typeName);
	protected boolean hasMovableObject_NoVirtual(String name, String typeName)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		boolean returnValue = hasMovableObject_EVString_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue, typeNameParamValue);
		return returnValue;
	}

	public static class MovableObjectIteratorPair extends com.earthview.world.core.BaseObject {
		
		static {
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::MovableObjectIteratorPair", new MovableObjectIteratorPairClassFactory());
		}

		public MovableObjectIteratorPair() {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			Create("MovableObjectIteratorPair", null);
		}

		native private String get_first_void(long pNativeObject);
		public String get_first()
		{
			String jniValue = get_first_void(this.nativeObject.pointer);
			
			return jniValue;
		}
		
		native private void set_first_EVString (long pNativeObject, String value);
		public void set_first(String first)
		{
			String firstParamValue = first;
			
			set_first_EVString(this.nativeObject.pointer, firstParamValue);
		}
		
		native private long get_second_void(long pNativeObject);
		public com.earthview.world.graphic.MovableObject get_second()
		{
			long jniValue = get_second_void(this.nativeObject.pointer);
			
			if(jniValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.MovableObject __returnValue = new com.earthview.world.graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate, "CMovableObject");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(jniValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.MovableObject)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CMovableObject");
			}
			return __returnValue;
		}
		
		native private void set_second_CMovableObject (long pNativeObject, long value);
		public void set_second(com.earthview.world.graphic.MovableObject second)
		{
			long secondParamValue = (second == null ? 0L : second.nativeObject.pointer);
			
			set_second_CMovableObject(this.nativeObject.pointer, secondParamValue);
		}
		
		public MovableObjectIteratorPair(CreatedWhenConstruct cwc) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
		}
		public MovableObjectIteratorPair(CreatedWhenConstruct cwc, String classNameStr) {
			super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
		}
		
		
		
		
		public static MovableObjectIteratorPair fromBaseObject(BaseObject baseObj)
		{
			if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
			{
				return null;
			}
			MovableObjectIteratorPair obj = null;
 			if(baseObj instanceof MovableObjectIteratorPair)
			{
				obj = (MovableObjectIteratorPair)baseObj;
			} else {
				obj = new MovableObjectIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
				obj.bindNativeObject(baseObj.nativeObject, "MovableObjectIteratorPair");
				obj.increaseCast();
			}

			return obj;
		}
	}
	public static class MovableObjectIteratorPairClassFactory implements IClassFactory {
		public BaseObject create()
		{
			MovableObjectIteratorPair emptyInstance = new MovableObjectIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
			return emptyInstance;
		}
	}
	
	public static class MovableObjectIterator extends com.earthview.world.core.BaseObject {
		
		static {
			GlobalClassFactoryMap.put("EarthView::World::Graphic::CSceneManager::MovableObjectIterator", new MovableObjectIteratorClassFactory());
		}

		public MovableObjectIterator(com.earthview.world.graphic.SceneManager.MovableObjectMap lst) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			NameValuePairList list = new NameValuePairList();
			BasePointer lstPtr = new BasePointer(lst);
			list.add("lst", lstPtr.get());
			Create("MovableObjectIterator", list);
		}

		public MovableObjectIterator(com.earthview.world.graphic.SceneManager.MovableObjectIterator other) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
			NameValuePairList list = new NameValuePairList();
			BasePointer otherPtr = new BasePointer(other);
			list.add("other", otherPtr.get());
			Create("MovableObjectIterator", list);
		}

		native private boolean hasMoreElements_void(long pNativeObject);
		public boolean hasMoreElements()
		{
			boolean returnValue = hasMoreElements_void(this.nativeObject.pointer);
			return returnValue;
		}
		native private void moveNext_void(long pNativeObject);
		public void moveNext()
		{
			moveNext_void(this.nativeObject.pointer);
		}
		native private int nextKey_void(long pNativeObject);
		public int nextKey()
		{
			int returnValue = nextKey_void(this.nativeObject.pointer);
			return returnValue;
		}
		native private long nextValue_void(long pNativeObject);
		public com.earthview.world.graphic.MovableObject nextValue()
		{
			long returnValue = nextValue_void(this.nativeObject.pointer);
			if(returnValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.MovableObject __returnValue = new com.earthview.world.graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate, "CMovableObject");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(returnValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.MovableObject)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CMovableObject");
			}
			return __returnValue;
		}
		native private long nextValuePtr_void(long pNativeObject);
		public NativeObjectPointer<com.earthview.world.graphic.MovableObject> nextValuePtr()
		{
			long returnValue = nextValuePtr_void(this.nativeObject.pointer);
			if(returnValue == 0L) {
				return null;
			}
			NativeObjectPointer<com.earthview.world.graphic.MovableObject> __returnValue = new NativeObjectPointer<com.earthview.world.graphic.MovableObject>(new InstancePointer(returnValue));
			return __returnValue;
		}
		native private long next_void(long pNativeObject);
		public com.earthview.world.graphic.MovableObject next()
		{
			long returnValue = next_void(this.nativeObject.pointer);
			if(returnValue == 0L) {
				return null;
			}
			com.earthview.world.graphic.MovableObject __returnValue = new com.earthview.world.graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate, "CMovableObject");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(returnValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.MovableObject)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "CMovableObject");
			}
			return __returnValue;
		}
		native private long getBegin_void(long pNativeObject);
		public com.earthview.world.graphic.SceneManager.MovableObjectIteratorPair getBegin()
		{
			long returnValue = getBegin_void(this.nativeObject.pointer);
			com.earthview.world.graphic.SceneManager.MovableObjectIteratorPair __returnValue = new com.earthview.world.graphic.SceneManager.MovableObjectIteratorPair(CreatedWhenConstruct.CWC_NotToCreate, "MovableObjectIteratorPair");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(returnValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.SceneManager.MovableObjectIteratorPair)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "MovableObjectIteratorPair");
			}
			return __returnValue;
		}
		native private long getEnd_void(long pNativeObject);
		public com.earthview.world.graphic.SceneManager.MovableObjectIteratorPair getEnd()
		{
			long returnValue = getEnd_void(this.nativeObject.pointer);
			com.earthview.world.graphic.SceneManager.MovableObjectIteratorPair __returnValue = new com.earthview.world.graphic.SceneManager.MovableObjectIteratorPair(CreatedWhenConstruct.CWC_NotToCreate, "MovableObjectIteratorPair");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(returnValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.SceneManager.MovableObjectIteratorPair)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "MovableObjectIteratorPair");
			}
			return __returnValue;
		}
		native private long getCurrent_void(long pNativeObject);
		public com.earthview.world.graphic.SceneManager.MovableObjectIteratorPair getCurrent()
		{
			long returnValue = getCurrent_void(this.nativeObject.pointer);
			com.earthview.world.graphic.SceneManager.MovableObjectIteratorPair __returnValue = new com.earthview.world.graphic.SceneManager.MovableObjectIteratorPair(CreatedWhenConstruct.CWC_NotToCreate, "MovableObjectIteratorPair");
			__returnValue.setDelegate(true);
			InstancePointer __instancePointer = new InstancePointer(returnValue);
			__returnValue.setInstancePointer(__instancePointer);
			IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
			if (__returnValueClassFactory != null)
			{
				__returnValue.setDelegate(true);
				__returnValue = (com.earthview.world.graphic.SceneManager.MovableObjectIteratorPair)__returnValueClassFactory.create();
				__returnValue.setDelegate(true);
				__returnValue.bindNativeObject(__instancePointer, "MovableObjectIteratorPair");
			}
			return __returnValue;
		}
		public MovableObjectIterator(CreatedWhenConstruct cwc) {
			super(CreatedWhenConstruct.CWC_NotToCreate);
		}
		public MovableObjectIterator(CreatedWhenConstruct cwc, String classNameStr) {
			super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
		}
		
		
		
		
		public static MovableObjectIterator fromBaseObject(BaseObject baseObj)
		{
			if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
			{
				return null;
			}
			MovableObjectIterator obj = null;
 			if(baseObj instanceof MovableObjectIterator)
			{
				obj = (MovableObjectIterator)baseObj;
			} else {
				obj = new MovableObjectIterator(CreatedWhenConstruct.CWC_NotToCreate);
				obj.bindNativeObject(baseObj.nativeObject, "MovableObjectIterator");
				obj.increaseCast();
			}

			return obj;
		}
	}
	public static class MovableObjectIteratorClassFactory implements IClassFactory {
		public BaseObject create()
		{
			MovableObjectIterator emptyInstance = new MovableObjectIterator(CreatedWhenConstruct.CWC_NotToCreate);
			return emptyInstance;
		}
	}
	
	protected  long getMovableObjectIterator_EVString_callback(String typeName)
	{
		String typeNameParamValue = typeName;
		com.earthview.world.graphic.SceneManager.MovableObjectIterator returnValue = getMovableObjectIterator(typeNameParamValue);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long getMovableObjectIterator_EVString(long pNativeObject, String typeName);
	public com.earthview.world.graphic.SceneManager.MovableObjectIterator getMovableObjectIterator(String typeName)
	{
		String typeNameParamValue = typeName;
		long returnValue = getMovableObjectIterator_EVString(this.nativeObject.pointer, typeNameParamValue);
		com.earthview.world.graphic.SceneManager.MovableObjectIterator __returnValue = new com.earthview.world.graphic.SceneManager.MovableObjectIterator(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "MovableObjectIterator");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneManager.MovableObjectIterator)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "MovableObjectIterator");
		}
		return __returnValue;
	}
	native private long getMovableObjectIterator_EVString_NoVirtual(long pNativeObject, String typeName);
	protected com.earthview.world.graphic.SceneManager.MovableObjectIterator getMovableObjectIterator_NoVirtual(String typeName)
	{
		String typeNameParamValue = typeName;
		long returnValue = getMovableObjectIterator_EVString_NoVirtual(this.nativeObject.pointer, typeNameParamValue);
		com.earthview.world.graphic.SceneManager.MovableObjectIterator __returnValue = new com.earthview.world.graphic.SceneManager.MovableObjectIterator(CreatedWhenConstruct.CWC_NotToCreate);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.bindNativeObject(__instancePointer, "MovableObjectIterator");
		__returnValue.createNativeObjectPointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneManager.MovableObjectIterator)__returnValueClassFactory.create();
			__returnValue.bindNativeObject(__instancePointer, "MovableObjectIterator");
		}
		return __returnValue;
	}

	protected  void injectMovableObject_CMovableObject_callback(long m)
	{
		com.earthview.world.graphic.MovableObject mParamValue = (m == 0L ? null : new com.earthview.world.graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate));
		if(mParamValue != null)
		{
		mParamValue.setDelegate(true);
		mParamValue.setInstancePointer(new InstancePointer(m));
		IClassFactory mParamValueClassFactory = GlobalClassFactoryMap.get(mParamValue.getCppInstanceTypeName());
		if (mParamValueClassFactory != null)
		{
			mParamValue.setDelegate(true);
			mParamValue = (com.earthview.world.graphic.MovableObject)mParamValueClassFactory.create();
			mParamValue.setDelegate(true);
			mParamValue.setInstancePointer(new InstancePointer(m));
		}
		}
		injectMovableObject(mParamValue);
	}

	native private void injectMovableObject_CMovableObject(long pNativeObject, long m);
	public void injectMovableObject(com.earthview.world.graphic.MovableObject m)
	{
		long mParamValue = (m == null ? 0L : m.nativeObject.pointer);
		injectMovableObject_CMovableObject(this.nativeObject.pointer, mParamValue);
	}
	native private void injectMovableObject_CMovableObject_NoVirtual(long pNativeObject, long m);
	protected void injectMovableObject_NoVirtual(com.earthview.world.graphic.MovableObject m)
	{
		long mParamValue = (m == null ? 0L : m.nativeObject.pointer);
		injectMovableObject_CMovableObject_NoVirtual(this.nativeObject.pointer, mParamValue);
	}

	protected  void extractMovableObject_EVString_EVString_callback(String name, String typeName)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		extractMovableObject(nameParamValue, typeNameParamValue);
	}

	native private void extractMovableObject_EVString_EVString(long pNativeObject, String name, String typeName);
	public void extractMovableObject(String name, String typeName)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		extractMovableObject_EVString_EVString(this.nativeObject.pointer, nameParamValue, typeNameParamValue);
	}
	native private void extractMovableObject_EVString_EVString_NoVirtual(long pNativeObject, String name, String typeName);
	protected void extractMovableObject_NoVirtual(String name, String typeName)
	{
		String nameParamValue = name;
		String typeNameParamValue = typeName;
		extractMovableObject_EVString_EVString_NoVirtual(this.nativeObject.pointer, nameParamValue, typeNameParamValue);
	}

	protected  void extractMovableObject_CMovableObject_callback(long m)
	{
		com.earthview.world.graphic.MovableObject mParamValue = (m == 0L ? null : new com.earthview.world.graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate));
		if(mParamValue != null)
		{
		mParamValue.setDelegate(true);
		mParamValue.setInstancePointer(new InstancePointer(m));
		IClassFactory mParamValueClassFactory = GlobalClassFactoryMap.get(mParamValue.getCppInstanceTypeName());
		if (mParamValueClassFactory != null)
		{
			mParamValue.setDelegate(true);
			mParamValue = (com.earthview.world.graphic.MovableObject)mParamValueClassFactory.create();
			mParamValue.setDelegate(true);
			mParamValue.setInstancePointer(new InstancePointer(m));
		}
		}
		extractMovableObject(mParamValue);
	}

	native private void extractMovableObject_CMovableObject(long pNativeObject, long m);
	public void extractMovableObject(com.earthview.world.graphic.MovableObject m)
	{
		long mParamValue = (m == null ? 0L : m.nativeObject.pointer);
		extractMovableObject_CMovableObject(this.nativeObject.pointer, mParamValue);
	}
	native private void extractMovableObject_CMovableObject_NoVirtual(long pNativeObject, long m);
	protected void extractMovableObject_NoVirtual(com.earthview.world.graphic.MovableObject m)
	{
		long mParamValue = (m == null ? 0L : m.nativeObject.pointer);
		extractMovableObject_CMovableObject_NoVirtual(this.nativeObject.pointer, mParamValue);
	}

	protected  void extractAllMovableObjectsByType_EVString_callback(String typeName)
	{
		String typeNameParamValue = typeName;
		extractAllMovableObjectsByType(typeNameParamValue);
	}

	native private void extractAllMovableObjectsByType_EVString(long pNativeObject, String typeName);
	public void extractAllMovableObjectsByType(String typeName)
	{
		String typeNameParamValue = typeName;
		extractAllMovableObjectsByType_EVString(this.nativeObject.pointer, typeNameParamValue);
	}
	native private void extractAllMovableObjectsByType_EVString_NoVirtual(long pNativeObject, String typeName);
	protected void extractAllMovableObjectsByType_NoVirtual(String typeName)
	{
		String typeNameParamValue = typeName;
		extractAllMovableObjectsByType_EVString_NoVirtual(this.nativeObject.pointer, typeNameParamValue);
	}

	protected  void setVisibilityMask_ev_uint32_callback(long vmask)
	{
		long vmaskParamValue = vmask;
		setVisibilityMask(vmaskParamValue);
	}

	native private void setVisibilityMask_ev_uint32(long pNativeObject, long vmask);
	public void setVisibilityMask(long vmask)
	{
		long vmaskParamValue = vmask;
		setVisibilityMask_ev_uint32(this.nativeObject.pointer, vmaskParamValue);
	}
	native private void setVisibilityMask_ev_uint32_NoVirtual(long pNativeObject, long vmask);
	protected void setVisibilityMask_NoVirtual(long vmask)
	{
		long vmaskParamValue = vmask;
		setVisibilityMask_ev_uint32_NoVirtual(this.nativeObject.pointer, vmaskParamValue);
	}

	protected  long getVisibilityMask_void_callback()
	{
		long returnValue = getVisibilityMask();
		long __returnValue = returnValue;
		return __returnValue;
	}

	native private long getVisibilityMask_void(long pNativeObject);
	public long getVisibilityMask()
	{
		long returnValue = getVisibilityMask_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private long getVisibilityMask_void_NoVirtual(long pNativeObject);
	protected long getVisibilityMask_NoVirtual()
	{
		long returnValue = getVisibilityMask_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	native private long _getCombinedVisibilityMask_void(long pNativeObject);
	public long _getCombinedVisibilityMask()
	{
		long returnValue = _getCombinedVisibilityMask_void(this.nativeObject.pointer);
		return returnValue;
	}
	protected  void setFindVisibleObjects_ev_bool_callback(boolean find)
	{
		boolean findParamValue = find;
		setFindVisibleObjects(findParamValue);
	}

	native private void setFindVisibleObjects_ev_bool(long pNativeObject, boolean find);
	public void setFindVisibleObjects(boolean find)
	{
		boolean findParamValue = find;
		setFindVisibleObjects_ev_bool(this.nativeObject.pointer, findParamValue);
	}
	native private void setFindVisibleObjects_ev_bool_NoVirtual(long pNativeObject, boolean find);
	protected void setFindVisibleObjects_NoVirtual(boolean find)
	{
		boolean findParamValue = find;
		setFindVisibleObjects_ev_bool_NoVirtual(this.nativeObject.pointer, findParamValue);
	}

	protected  boolean getFindVisibleObjects_void_callback()
	{
		boolean returnValue = getFindVisibleObjects();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getFindVisibleObjects_void(long pNativeObject);
	public boolean getFindVisibleObjects()
	{
		boolean returnValue = getFindVisibleObjects_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean getFindVisibleObjects_void_NoVirtual(long pNativeObject);
	protected boolean getFindVisibleObjects_NoVirtual()
	{
		boolean returnValue = getFindVisibleObjects_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void setNormaliseNormalsOnScale_ev_bool_callback(boolean n)
	{
		boolean nParamValue = n;
		setNormaliseNormalsOnScale(nParamValue);
	}

	native private void setNormaliseNormalsOnScale_ev_bool(long pNativeObject, boolean n);
	public void setNormaliseNormalsOnScale(boolean n)
	{
		boolean nParamValue = n;
		setNormaliseNormalsOnScale_ev_bool(this.nativeObject.pointer, nParamValue);
	}
	native private void setNormaliseNormalsOnScale_ev_bool_NoVirtual(long pNativeObject, boolean n);
	protected void setNormaliseNormalsOnScale_NoVirtual(boolean n)
	{
		boolean nParamValue = n;
		setNormaliseNormalsOnScale_ev_bool_NoVirtual(this.nativeObject.pointer, nParamValue);
	}

	protected  boolean getNormaliseNormalsOnScale_void_callback()
	{
		boolean returnValue = getNormaliseNormalsOnScale();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getNormaliseNormalsOnScale_void(long pNativeObject);
	public boolean getNormaliseNormalsOnScale()
	{
		boolean returnValue = getNormaliseNormalsOnScale_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean getNormaliseNormalsOnScale_void_NoVirtual(long pNativeObject);
	protected boolean getNormaliseNormalsOnScale_NoVirtual()
	{
		boolean returnValue = getNormaliseNormalsOnScale_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void setFlipCullingOnNegativeScale_ev_bool_callback(boolean n)
	{
		boolean nParamValue = n;
		setFlipCullingOnNegativeScale(nParamValue);
	}

	native private void setFlipCullingOnNegativeScale_ev_bool(long pNativeObject, boolean n);
	public void setFlipCullingOnNegativeScale(boolean n)
	{
		boolean nParamValue = n;
		setFlipCullingOnNegativeScale_ev_bool(this.nativeObject.pointer, nParamValue);
	}
	native private void setFlipCullingOnNegativeScale_ev_bool_NoVirtual(long pNativeObject, boolean n);
	protected void setFlipCullingOnNegativeScale_NoVirtual(boolean n)
	{
		boolean nParamValue = n;
		setFlipCullingOnNegativeScale_ev_bool_NoVirtual(this.nativeObject.pointer, nParamValue);
	}

	protected  boolean getFlipCullingOnNegativeScale_void_callback()
	{
		boolean returnValue = getFlipCullingOnNegativeScale();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getFlipCullingOnNegativeScale_void(long pNativeObject);
	public boolean getFlipCullingOnNegativeScale()
	{
		boolean returnValue = getFlipCullingOnNegativeScale_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean getFlipCullingOnNegativeScale_void_NoVirtual(long pNativeObject);
	protected boolean getFlipCullingOnNegativeScale_NoVirtual()
	{
		boolean returnValue = getFlipCullingOnNegativeScale_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void _injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_callback(long pass, long rend, boolean shadowDerivation, boolean doLightIteration, long manualLightList)
	{
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.Renderable rendParamValue = (rend == 0L ? null : new com.earthview.world.graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate));
		if(rendParamValue != null)
		{
		rendParamValue.setDelegate(true);
		rendParamValue.setInstancePointer(new InstancePointer(rend));
		IClassFactory rendParamValueClassFactory = GlobalClassFactoryMap.get(rendParamValue.getCppInstanceTypeName());
		if (rendParamValueClassFactory != null)
		{
			rendParamValue.setDelegate(true);
			rendParamValue = (com.earthview.world.graphic.Renderable)rendParamValueClassFactory.create();
			rendParamValue.setDelegate(true);
			rendParamValue.setInstancePointer(new InstancePointer(rend));
		}
		}
		boolean shadowDerivationParamValue = shadowDerivation;
		boolean doLightIterationParamValue = doLightIteration;
		com.earthview.world.graphic.LightList manualLightListParamValue = (manualLightList == 0L ? null : new com.earthview.world.graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate));
		if(manualLightListParamValue != null)
		{
		manualLightListParamValue.setDelegate(true);
		manualLightListParamValue.setInstancePointer(new InstancePointer(manualLightList));
		IClassFactory manualLightListParamValueClassFactory = GlobalClassFactoryMap.get(manualLightListParamValue.getCppInstanceTypeName());
		if (manualLightListParamValueClassFactory != null)
		{
			manualLightListParamValue.setDelegate(true);
			manualLightListParamValue = (com.earthview.world.graphic.LightList)manualLightListParamValueClassFactory.create();
			manualLightListParamValue.setDelegate(true);
			manualLightListParamValue.setInstancePointer(new InstancePointer(manualLightList));
		}
		}
		_injectRenderWithPass(passParamValue, rendParamValue, shadowDerivationParamValue, doLightIterationParamValue, manualLightListParamValue);
	}

	native private void _injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList(long pNativeObject, long pass, long rend, boolean shadowDerivation, boolean doLightIteration, long manualLightList);
	public void _injectRenderWithPass(com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Renderable rend, boolean shadowDerivation, boolean doLightIteration, com.earthview.world.graphic.LightList manualLightList)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		boolean shadowDerivationParamValue = shadowDerivation;
		boolean doLightIterationParamValue = doLightIteration;
		long manualLightListParamValue = (manualLightList == null ? 0L : manualLightList.nativeObject.pointer);
		_injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList(this.nativeObject.pointer, passParamValue, rendParamValue, shadowDerivationParamValue, doLightIterationParamValue, manualLightListParamValue);
	}
	native private void _injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_NoVirtual(long pNativeObject, long pass, long rend, boolean shadowDerivation, boolean doLightIteration, long manualLightList);
	protected void _injectRenderWithPass_NoVirtual(com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Renderable rend, boolean shadowDerivation, boolean doLightIteration, com.earthview.world.graphic.LightList manualLightList)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		boolean shadowDerivationParamValue = shadowDerivation;
		boolean doLightIterationParamValue = doLightIteration;
		long manualLightListParamValue = (manualLightList == null ? 0L : manualLightList.nativeObject.pointer);
		_injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_NoVirtual(this.nativeObject.pointer, passParamValue, rendParamValue, shadowDerivationParamValue, doLightIterationParamValue, manualLightListParamValue);
	}

	protected  void _injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_callback(long pass, long rend, boolean shadowDerivation, boolean doLightIteration)
	{
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.Renderable rendParamValue = (rend == 0L ? null : new com.earthview.world.graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate));
		if(rendParamValue != null)
		{
		rendParamValue.setDelegate(true);
		rendParamValue.setInstancePointer(new InstancePointer(rend));
		IClassFactory rendParamValueClassFactory = GlobalClassFactoryMap.get(rendParamValue.getCppInstanceTypeName());
		if (rendParamValueClassFactory != null)
		{
			rendParamValue.setDelegate(true);
			rendParamValue = (com.earthview.world.graphic.Renderable)rendParamValueClassFactory.create();
			rendParamValue.setDelegate(true);
			rendParamValue.setInstancePointer(new InstancePointer(rend));
		}
		}
		boolean shadowDerivationParamValue = shadowDerivation;
		boolean doLightIterationParamValue = doLightIteration;
		_injectRenderWithPass(passParamValue, rendParamValue, shadowDerivationParamValue, doLightIterationParamValue);
	}

	native private void _injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool(long pNativeObject, long pass, long rend, boolean shadowDerivation, boolean doLightIteration);
	///virtual void _injectRenderWithPass(EarthView::World::Graphic::CPass *pass, EarthView::World::Graphic::CRenderable *rend, ev_bool shadowDerivation = true,
	///	ev_bool doLightIteration = false, const EarthView::World::Graphic::LightList* manualLightList = 0);
	public void _injectRenderWithPass(com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Renderable rend, boolean shadowDerivation, boolean doLightIteration)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		boolean shadowDerivationParamValue = shadowDerivation;
		boolean doLightIterationParamValue = doLightIteration;
		_injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool(this.nativeObject.pointer, passParamValue, rendParamValue, shadowDerivationParamValue, doLightIterationParamValue);
	}
	native private void _injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_NoVirtual(long pNativeObject, long pass, long rend, boolean shadowDerivation, boolean doLightIteration);
	protected void _injectRenderWithPass_NoVirtual(com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Renderable rend, boolean shadowDerivation, boolean doLightIteration)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		boolean shadowDerivationParamValue = shadowDerivation;
		boolean doLightIterationParamValue = doLightIteration;
		_injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_NoVirtual(this.nativeObject.pointer, passParamValue, rendParamValue, shadowDerivationParamValue, doLightIterationParamValue);
	}

	protected  void _injectRenderWithPass_CPass_CRenderable_ev_bool_callback(long pass, long rend, boolean shadowDerivation)
	{
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.Renderable rendParamValue = (rend == 0L ? null : new com.earthview.world.graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate));
		if(rendParamValue != null)
		{
		rendParamValue.setDelegate(true);
		rendParamValue.setInstancePointer(new InstancePointer(rend));
		IClassFactory rendParamValueClassFactory = GlobalClassFactoryMap.get(rendParamValue.getCppInstanceTypeName());
		if (rendParamValueClassFactory != null)
		{
			rendParamValue.setDelegate(true);
			rendParamValue = (com.earthview.world.graphic.Renderable)rendParamValueClassFactory.create();
			rendParamValue.setDelegate(true);
			rendParamValue.setInstancePointer(new InstancePointer(rend));
		}
		}
		boolean shadowDerivationParamValue = shadowDerivation;
		_injectRenderWithPass(passParamValue, rendParamValue, shadowDerivationParamValue);
	}

	native private void _injectRenderWithPass_CPass_CRenderable_ev_bool(long pNativeObject, long pass, long rend, boolean shadowDerivation);
	public void _injectRenderWithPass(com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Renderable rend, boolean shadowDerivation)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		boolean shadowDerivationParamValue = shadowDerivation;
		_injectRenderWithPass_CPass_CRenderable_ev_bool(this.nativeObject.pointer, passParamValue, rendParamValue, shadowDerivationParamValue);
	}
	native private void _injectRenderWithPass_CPass_CRenderable_ev_bool_NoVirtual(long pNativeObject, long pass, long rend, boolean shadowDerivation);
	protected void _injectRenderWithPass_NoVirtual(com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Renderable rend, boolean shadowDerivation)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		boolean shadowDerivationParamValue = shadowDerivation;
		_injectRenderWithPass_CPass_CRenderable_ev_bool_NoVirtual(this.nativeObject.pointer, passParamValue, rendParamValue, shadowDerivationParamValue);
	}

	protected  void _injectRenderWithPass_CPass_CRenderable_callback(long pass, long rend)
	{
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.Renderable rendParamValue = (rend == 0L ? null : new com.earthview.world.graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate));
		if(rendParamValue != null)
		{
		rendParamValue.setDelegate(true);
		rendParamValue.setInstancePointer(new InstancePointer(rend));
		IClassFactory rendParamValueClassFactory = GlobalClassFactoryMap.get(rendParamValue.getCppInstanceTypeName());
		if (rendParamValueClassFactory != null)
		{
			rendParamValue.setDelegate(true);
			rendParamValue = (com.earthview.world.graphic.Renderable)rendParamValueClassFactory.create();
			rendParamValue.setDelegate(true);
			rendParamValue.setInstancePointer(new InstancePointer(rend));
		}
		}
		_injectRenderWithPass(passParamValue, rendParamValue);
	}

	native private void _injectRenderWithPass_CPass_CRenderable(long pNativeObject, long pass, long rend);
	public void _injectRenderWithPass(com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Renderable rend)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		_injectRenderWithPass_CPass_CRenderable(this.nativeObject.pointer, passParamValue, rendParamValue);
	}
	native private void _injectRenderWithPass_CPass_CRenderable_NoVirtual(long pNativeObject, long pass, long rend);
	protected void _injectRenderWithPass_NoVirtual(com.earthview.world.graphic.Pass pass, com.earthview.world.graphic.Renderable rend)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long rendParamValue = (rend == null ? 0L : rend.nativeObject.pointer);
		_injectRenderWithPass_CPass_CRenderable_NoVirtual(this.nativeObject.pointer, passParamValue, rendParamValue);
	}

	protected  void _suppressRenderStateChanges_ev_bool_callback(boolean suppress)
	{
		boolean suppressParamValue = suppress;
		_suppressRenderStateChanges(suppressParamValue);
	}

	native private void _suppressRenderStateChanges_ev_bool(long pNativeObject, boolean suppress);
	public void _suppressRenderStateChanges(boolean suppress)
	{
		boolean suppressParamValue = suppress;
		_suppressRenderStateChanges_ev_bool(this.nativeObject.pointer, suppressParamValue);
	}
	native private void _suppressRenderStateChanges_ev_bool_NoVirtual(long pNativeObject, boolean suppress);
	protected void _suppressRenderStateChanges_NoVirtual(boolean suppress)
	{
		boolean suppressParamValue = suppress;
		_suppressRenderStateChanges_ev_bool_NoVirtual(this.nativeObject.pointer, suppressParamValue);
	}

	protected  boolean _areRenderStateChangesSuppressed_void_callback()
	{
		boolean returnValue = _areRenderStateChangesSuppressed();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean _areRenderStateChangesSuppressed_void(long pNativeObject);
	public boolean _areRenderStateChangesSuppressed()
	{
		boolean returnValue = _areRenderStateChangesSuppressed_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean _areRenderStateChangesSuppressed_void_NoVirtual(long pNativeObject);
	protected boolean _areRenderStateChangesSuppressed_NoVirtual()
	{
		boolean returnValue = _areRenderStateChangesSuppressed_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  long _setPass_CPass_ev_bool_ev_bool_callback(long pass, boolean evenIfSuppressed, boolean shadowDerivation)
	{
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		boolean evenIfSuppressedParamValue = evenIfSuppressed;
		boolean shadowDerivationParamValue = shadowDerivation;
		com.earthview.world.graphic.Pass returnValue = _setPass(passParamValue, evenIfSuppressedParamValue, shadowDerivationParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long _setPass_CPass_ev_bool_ev_bool(long pNativeObject, long pass, boolean evenIfSuppressed, boolean shadowDerivation);
	public com.earthview.world.graphic.Pass _setPass(com.earthview.world.graphic.Pass pass, boolean evenIfSuppressed, boolean shadowDerivation)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		boolean evenIfSuppressedParamValue = evenIfSuppressed;
		boolean shadowDerivationParamValue = shadowDerivation;
		long returnValue = _setPass_CPass_ev_bool_ev_bool(this.nativeObject.pointer, passParamValue, evenIfSuppressedParamValue, shadowDerivationParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Pass __returnValue = new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate, "CPass");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Pass)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CPass");
		}
		return __returnValue;
	}
	native private long _setPass_CPass_ev_bool_ev_bool_NoVirtual(long pNativeObject, long pass, boolean evenIfSuppressed, boolean shadowDerivation);
	protected com.earthview.world.graphic.Pass _setPass_NoVirtual(com.earthview.world.graphic.Pass pass, boolean evenIfSuppressed, boolean shadowDerivation)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		boolean evenIfSuppressedParamValue = evenIfSuppressed;
		boolean shadowDerivationParamValue = shadowDerivation;
		long returnValue = _setPass_CPass_ev_bool_ev_bool_NoVirtual(this.nativeObject.pointer, passParamValue, evenIfSuppressedParamValue, shadowDerivationParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Pass __returnValue = new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate, "CPass");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Pass)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CPass");
		}
		return __returnValue;
	}

	protected  long _setPass_CPass_ev_bool_callback(long pass, boolean evenIfSuppressed)
	{
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		boolean evenIfSuppressedParamValue = evenIfSuppressed;
		com.earthview.world.graphic.Pass returnValue = _setPass(passParamValue, evenIfSuppressedParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long _setPass_CPass_ev_bool(long pNativeObject, long pass, boolean evenIfSuppressed);
	public com.earthview.world.graphic.Pass _setPass(com.earthview.world.graphic.Pass pass, boolean evenIfSuppressed)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		boolean evenIfSuppressedParamValue = evenIfSuppressed;
		long returnValue = _setPass_CPass_ev_bool(this.nativeObject.pointer, passParamValue, evenIfSuppressedParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Pass __returnValue = new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate, "CPass");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Pass)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CPass");
		}
		return __returnValue;
	}
	native private long _setPass_CPass_ev_bool_NoVirtual(long pNativeObject, long pass, boolean evenIfSuppressed);
	protected com.earthview.world.graphic.Pass _setPass_NoVirtual(com.earthview.world.graphic.Pass pass, boolean evenIfSuppressed)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		boolean evenIfSuppressedParamValue = evenIfSuppressed;
		long returnValue = _setPass_CPass_ev_bool_NoVirtual(this.nativeObject.pointer, passParamValue, evenIfSuppressedParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Pass __returnValue = new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate, "CPass");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Pass)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CPass");
		}
		return __returnValue;
	}

	protected  long _setPass_CPass_callback(long pass)
	{
		com.earthview.world.graphic.Pass passParamValue = (pass == 0L ? null : new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate));
		if(passParamValue != null)
		{
		passParamValue.setDelegate(true);
		passParamValue.setInstancePointer(new InstancePointer(pass));
		IClassFactory passParamValueClassFactory = GlobalClassFactoryMap.get(passParamValue.getCppInstanceTypeName());
		if (passParamValueClassFactory != null)
		{
			passParamValue.setDelegate(true);
			passParamValue = (com.earthview.world.graphic.Pass)passParamValueClassFactory.create();
			passParamValue.setDelegate(true);
			passParamValue.setInstancePointer(new InstancePointer(pass));
		}
		}
		com.earthview.world.graphic.Pass returnValue = _setPass(passParamValue);
		if(returnValue == null) {
			return 0L;
		}
		returnValue.setDelegate(true);
		long __returnValue = returnValue.nativeObject.pointer;
		return __returnValue;
	}

	native private long _setPass_CPass(long pNativeObject, long pass);
	public com.earthview.world.graphic.Pass _setPass(com.earthview.world.graphic.Pass pass)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long returnValue = _setPass_CPass(this.nativeObject.pointer, passParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Pass __returnValue = new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate, "CPass");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Pass)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CPass");
		}
		return __returnValue;
	}
	native private long _setPass_CPass_NoVirtual(long pNativeObject, long pass);
	protected com.earthview.world.graphic.Pass _setPass_NoVirtual(com.earthview.world.graphic.Pass pass)
	{
		long passParamValue = (pass == null ? 0L : pass.nativeObject.pointer);
		long returnValue = _setPass_CPass_NoVirtual(this.nativeObject.pointer, passParamValue);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Pass __returnValue = new com.earthview.world.graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate, "CPass");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Pass)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CPass");
		}
		return __returnValue;
	}

	protected  void _markGpuParamsDirty_ev_uint16_callback(int mask)
	{
		int maskParamValue = mask;
		_markGpuParamsDirty(maskParamValue);
	}

	native private void _markGpuParamsDirty_ev_uint16(long pNativeObject, int mask);
	public void _markGpuParamsDirty(int mask)
	{
		int maskParamValue = mask;
		_markGpuParamsDirty_ev_uint16(this.nativeObject.pointer, maskParamValue);
	}
	native private void _markGpuParamsDirty_ev_uint16_NoVirtual(long pNativeObject, int mask);
	protected void _markGpuParamsDirty_NoVirtual(int mask)
	{
		int maskParamValue = mask;
		_markGpuParamsDirty_ev_uint16_NoVirtual(this.nativeObject.pointer, maskParamValue);
	}

	protected  void _suppressShadows_ev_bool_callback(boolean suppress)
	{
		boolean suppressParamValue = suppress;
		_suppressShadows(suppressParamValue);
	}

	native private void _suppressShadows_ev_bool(long pNativeObject, boolean suppress);
	public void _suppressShadows(boolean suppress)
	{
		boolean suppressParamValue = suppress;
		_suppressShadows_ev_bool(this.nativeObject.pointer, suppressParamValue);
	}
	native private void _suppressShadows_ev_bool_NoVirtual(long pNativeObject, boolean suppress);
	protected void _suppressShadows_NoVirtual(boolean suppress)
	{
		boolean suppressParamValue = suppress;
		_suppressShadows_ev_bool_NoVirtual(this.nativeObject.pointer, suppressParamValue);
	}

	protected  boolean _areShadowsSuppressed_void_callback()
	{
		boolean returnValue = _areShadowsSuppressed();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean _areShadowsSuppressed_void(long pNativeObject);
	public boolean _areShadowsSuppressed()
	{
		boolean returnValue = _areShadowsSuppressed_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean _areShadowsSuppressed_void_NoVirtual(long pNativeObject);
	protected boolean _areShadowsSuppressed_NoVirtual()
	{
		boolean returnValue = _areShadowsSuppressed_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	protected  void _renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(long group, int om)
	{
		com.earthview.world.graphic.RenderQueueGroup groupParamValue = (group == 0L ? null : new com.earthview.world.graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate));
		if(groupParamValue != null)
		{
		groupParamValue.setDelegate(true);
		groupParamValue.setInstancePointer(new InstancePointer(group));
		IClassFactory groupParamValueClassFactory = GlobalClassFactoryMap.get(groupParamValue.getCppInstanceTypeName());
		if (groupParamValueClassFactory != null)
		{
			groupParamValue.setDelegate(true);
			groupParamValue = (com.earthview.world.graphic.RenderQueueGroup)groupParamValueClassFactory.create();
			groupParamValue.setDelegate(true);
			groupParamValue.setInstancePointer(new InstancePointer(group));
		}
		}
		com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode omParamValue = com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode.toEnum(om);
		_renderQueueGroupObjects(groupParamValue, omParamValue);
	}

	native private void _renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode(long pNativeObject, long group, int om);
	public void _renderQueueGroupObjects(com.earthview.world.graphic.RenderQueueGroup group, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om)
	{
		long groupParamValue = (group == null ? 0L : group.nativeObject.pointer);
		int omParamValue = om.getValue();
		_renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode(this.nativeObject.pointer, groupParamValue, omParamValue);
	}
	native private void _renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_NoVirtual(long pNativeObject, long group, int om);
	protected void _renderQueueGroupObjects_NoVirtual(com.earthview.world.graphic.RenderQueueGroup group, com.earthview.world.graphic.QueuedRenderableCollection.OrganisationMode om)
	{
		long groupParamValue = (group == null ? 0L : group.nativeObject.pointer);
		int omParamValue = om.getValue();
		_renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_NoVirtual(this.nativeObject.pointer, groupParamValue, omParamValue);
	}

	native private void setQueuedRenderableVisitor_CSceneMgrQueuedRenderableVisitor(long pNativeObject, long visitor);
	public void setQueuedRenderableVisitor(com.earthview.world.graphic.SceneManager.SceneMgrQueuedRenderableVisitor visitor)
	{
		long visitorParamValue = (visitor == null ? 0L : visitor.nativeObject.pointer);
		setQueuedRenderableVisitor_CSceneMgrQueuedRenderableVisitor(this.nativeObject.pointer, visitorParamValue);
	}
	native private long getQueuedRenderableVisitor_void(long pNativeObject);
	public com.earthview.world.graphic.SceneManager.SceneMgrQueuedRenderableVisitor getQueuedRenderableVisitor()
	{
		long returnValue = getQueuedRenderableVisitor_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.SceneManager.SceneMgrQueuedRenderableVisitor __returnValue = new com.earthview.world.graphic.SceneManager.SceneMgrQueuedRenderableVisitor(CreatedWhenConstruct.CWC_NotToCreate, "CSceneMgrQueuedRenderableVisitor");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.SceneManager.SceneMgrQueuedRenderableVisitor)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CSceneMgrQueuedRenderableVisitor");
		}
		return __returnValue;
	}
	native private long getDestinationRenderSystem_void(long pNativeObject);
	public com.earthview.world.graphic.RenderSystem getDestinationRenderSystem()
	{
		long returnValue = getDestinationRenderSystem_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.RenderSystem __returnValue = new com.earthview.world.graphic.RenderSystem(CreatedWhenConstruct.CWC_NotToCreate, "CRenderSystem");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.RenderSystem)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CRenderSystem");
		}
		return __returnValue;
	}
	native private long getCurrentViewport_void(long pNativeObject);
	public com.earthview.world.graphic.Viewport getCurrentViewport()
	{
		long returnValue = getCurrentViewport_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Viewport __returnValue = new com.earthview.world.graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate, "CViewport");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Viewport)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CViewport");
		}
		return __returnValue;
	}
	native private long getCameraInProgress_void(long pNativeObject);
	/**
	 * 返回当前渲染系统正在使用的相机
	 */
	public com.earthview.world.graphic.Camera getCameraInProgress()
	{
		long returnValue = getCameraInProgress_void(this.nativeObject.pointer);
		if(returnValue == 0L) {
			return null;
		}
		com.earthview.world.graphic.Camera __returnValue = new com.earthview.world.graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate, "CCamera");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.Camera)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "CCamera");
		}
		return __returnValue;
	}
	native private long getVisibleObjectsBoundsInfo_CCamera(long pNativeObject, long cam);
	public com.earthview.world.graphic.VisibleObjectsBoundsInfo getVisibleObjectsBoundsInfo(com.earthview.world.graphic.Camera cam)
	{
		long camParamValue = (cam == null ? 0L : cam.nativeObject.pointer);
		long returnValue = getVisibleObjectsBoundsInfo_CCamera(this.nativeObject.pointer, camParamValue);
		com.earthview.world.graphic.VisibleObjectsBoundsInfo __returnValue = new com.earthview.world.graphic.VisibleObjectsBoundsInfo(CreatedWhenConstruct.CWC_NotToCreate, "VisibleObjectsBoundsInfo");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.VisibleObjectsBoundsInfo)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "VisibleObjectsBoundsInfo");
		}
		return __returnValue;
	}
	native private long getShadowCasterBoundsInfo_CLight_ev_size_t(long pNativeObject, long light, long iteration);
	public com.earthview.world.graphic.VisibleObjectsBoundsInfo getShadowCasterBoundsInfo(com.earthview.world.graphic.Light light, long iteration)
	{
		long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
		long iterationParamValue = iteration;
		long returnValue = getShadowCasterBoundsInfo_CLight_ev_size_t(this.nativeObject.pointer, lightParamValue, iterationParamValue);
		com.earthview.world.graphic.VisibleObjectsBoundsInfo __returnValue = new com.earthview.world.graphic.VisibleObjectsBoundsInfo(CreatedWhenConstruct.CWC_NotToCreate, "VisibleObjectsBoundsInfo");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.VisibleObjectsBoundsInfo)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "VisibleObjectsBoundsInfo");
		}
		return __returnValue;
	}
	native private long getShadowCasterBoundsInfo_CLight(long pNativeObject, long light);
	public com.earthview.world.graphic.VisibleObjectsBoundsInfo getShadowCasterBoundsInfo(com.earthview.world.graphic.Light light)
	{
		long lightParamValue = (light == null ? 0L : light.nativeObject.pointer);
		long returnValue = getShadowCasterBoundsInfo_CLight(this.nativeObject.pointer, lightParamValue);
		com.earthview.world.graphic.VisibleObjectsBoundsInfo __returnValue = new com.earthview.world.graphic.VisibleObjectsBoundsInfo(CreatedWhenConstruct.CWC_NotToCreate, "VisibleObjectsBoundsInfo");
		__returnValue.setDelegate(true);
		InstancePointer __instancePointer = new InstancePointer(returnValue);
		__returnValue.setInstancePointer(__instancePointer);
		IClassFactory __returnValueClassFactory = GlobalClassFactoryMap.get(__returnValue.getCppInstanceTypeName());
		if (__returnValueClassFactory != null)
		{
			__returnValue.setDelegate(true);
			__returnValue = (com.earthview.world.graphic.VisibleObjectsBoundsInfo)__returnValueClassFactory.create();
			__returnValue.setDelegate(true);
			__returnValue.bindNativeObject(__instancePointer, "VisibleObjectsBoundsInfo");
		}
		return __returnValue;
	}
	protected  void setCameraRelativeRendering_ev_bool_callback(boolean rel)
	{
		boolean relParamValue = rel;
		setCameraRelativeRendering(relParamValue);
	}

	native private void setCameraRelativeRendering_ev_bool(long pNativeObject, boolean rel);
	public void setCameraRelativeRendering(boolean rel)
	{
		boolean relParamValue = rel;
		setCameraRelativeRendering_ev_bool(this.nativeObject.pointer, relParamValue);
	}
	native private void setCameraRelativeRendering_ev_bool_NoVirtual(long pNativeObject, boolean rel);
	protected void setCameraRelativeRendering_NoVirtual(boolean rel)
	{
		boolean relParamValue = rel;
		setCameraRelativeRendering_ev_bool_NoVirtual(this.nativeObject.pointer, relParamValue);
	}

	protected  boolean getCameraRelativeRendering_void_callback()
	{
		boolean returnValue = getCameraRelativeRendering();
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getCameraRelativeRendering_void(long pNativeObject);
	public boolean getCameraRelativeRendering()
	{
		boolean returnValue = getCameraRelativeRendering_void(this.nativeObject.pointer);
		return returnValue;
	}
	native private boolean getCameraRelativeRendering_void_NoVirtual(long pNativeObject);
	protected boolean getCameraRelativeRendering_NoVirtual()
	{
		boolean returnValue = getCameraRelativeRendering_void_NoVirtual(this.nativeObject.pointer);
		return returnValue;
	}

	native private void addLodListener_CLodListener(long pNativeObject, long ref_listener);
	public void addLodListener(com.earthview.world.graphic.LodListener ref_listener)
	{
		long ref_listenerParamValue = (ref_listener == null ? 0L : ref_listener.nativeObject.pointer);
		addLodListener_CLodListener(this.nativeObject.pointer, ref_listenerParamValue);
	}
	native private void removeLodListener_CLodListener(long pNativeObject, long listener);
	public void removeLodListener(com.earthview.world.graphic.LodListener listener)
	{
		long listenerParamValue = (listener == null ? 0L : listener.nativeObject.pointer);
		removeLodListener_CLodListener(this.nativeObject.pointer, listenerParamValue);
	}
	native private void _notifyMovableObjectLodChanged_MovableObjectLodChangedEvent(long pNativeObject, long evt);
	public void _notifyMovableObjectLodChanged(com.earthview.world.graphic.MovableObjectLodChangedEvent evt)
	{
		long evtParamValue = evt.nativeObject.pointer;
		_notifyMovableObjectLodChanged_MovableObjectLodChangedEvent(this.nativeObject.pointer, evtParamValue);
	}
	native private void _notifyEntityMeshLodChanged_EntityMeshLodChangedEvent(long pNativeObject, long evt);
	public void _notifyEntityMeshLodChanged(com.earthview.world.graphic.EntityMeshLodChangedEvent evt)
	{
		long evtParamValue = evt.nativeObject.pointer;
		_notifyEntityMeshLodChanged_EntityMeshLodChangedEvent(this.nativeObject.pointer, evtParamValue);
	}
	native private void _notifyEntityMaterialLodChanged_EntityMaterialLodChangedEvent(long pNativeObject, long evt);
	public void _notifyEntityMaterialLodChanged(com.earthview.world.graphic.EntityMaterialLodChangedEvent evt)
	{
		long evtParamValue = evt.nativeObject.pointer;
		_notifyEntityMaterialLodChanged_EntityMaterialLodChangedEvent(this.nativeObject.pointer, evtParamValue);
	}
	native private void _handleLodEvents_void(long pNativeObject);
	public void _handleLodEvents()
	{
		_handleLodEvents_void(this.nativeObject.pointer);
	}
	protected  double getHeightAt_Real_Real_ev_real32_callback(double latitude, double lontitude, float targetSamplesPerDegrees)
	{
		double latitudeParamValue = latitude;
		double lontitudeParamValue = lontitude;
		float targetSamplesPerDegreesParamValue = targetSamplesPerDegrees;
		double returnValue = getHeightAt(latitudeParamValue, lontitudeParamValue, targetSamplesPerDegreesParamValue);
		double __returnValue = returnValue;
		return __returnValue;
	}

	native private double getHeightAt_Real_Real_ev_real32(long pNativeObject, double latitude, double lontitude, float targetSamplesPerDegrees);
	public double getHeightAt(double latitude, double lontitude, float targetSamplesPerDegrees)
	{
		double latitudeParamValue = latitude;
		double lontitudeParamValue = lontitude;
		float targetSamplesPerDegreesParamValue = targetSamplesPerDegrees;
		double returnValue = getHeightAt_Real_Real_ev_real32(this.nativeObject.pointer, latitudeParamValue, lontitudeParamValue, targetSamplesPerDegreesParamValue);
		return returnValue;
	}
	native private double getHeightAt_Real_Real_ev_real32_NoVirtual(long pNativeObject, double latitude, double lontitude, float targetSamplesPerDegrees);
	protected double getHeightAt_NoVirtual(double latitude, double lontitude, float targetSamplesPerDegrees)
	{
		double latitudeParamValue = latitude;
		double lontitudeParamValue = lontitude;
		float targetSamplesPerDegreesParamValue = targetSamplesPerDegrees;
		double returnValue = getHeightAt_Real_Real_ev_real32_NoVirtual(this.nativeObject.pointer, latitudeParamValue, lontitudeParamValue, targetSamplesPerDegreesParamValue);
		return returnValue;
	}

	protected  double getBestHeightAt_Real_Real_callback(double latitude, double lontitude)
	{
		double latitudeParamValue = latitude;
		double lontitudeParamValue = lontitude;
		double returnValue = getBestHeightAt(latitudeParamValue, lontitudeParamValue);
		double __returnValue = returnValue;
		return __returnValue;
	}

	native private double getBestHeightAt_Real_Real(long pNativeObject, double latitude, double lontitude);
	public double getBestHeightAt(double latitude, double lontitude)
	{
		double latitudeParamValue = latitude;
		double lontitudeParamValue = lontitude;
		double returnValue = getBestHeightAt_Real_Real(this.nativeObject.pointer, latitudeParamValue, lontitudeParamValue);
		return returnValue;
	}
	native private double getBestHeightAt_Real_Real_NoVirtual(long pNativeObject, double latitude, double lontitude);
	protected double getBestHeightAt_NoVirtual(double latitude, double lontitude)
	{
		double latitudeParamValue = latitude;
		double lontitudeParamValue = lontitude;
		double returnValue = getBestHeightAt_Real_Real_NoVirtual(this.nativeObject.pointer, latitudeParamValue, lontitudeParamValue);
		return returnValue;
	}

	protected  double getHeightAtTile_Real_Real_callback(double latitude, double lontitude)
	{
		double latitudeParamValue = latitude;
		double lontitudeParamValue = lontitude;
		double returnValue = getHeightAtTile(latitudeParamValue, lontitudeParamValue);
		double __returnValue = returnValue;
		return __returnValue;
	}

	native private double getHeightAtTile_Real_Real(long pNativeObject, double latitude, double lontitude);
	public double getHeightAtTile(double latitude, double lontitude)
	{
		double latitudeParamValue = latitude;
		double lontitudeParamValue = lontitude;
		double returnValue = getHeightAtTile_Real_Real(this.nativeObject.pointer, latitudeParamValue, lontitudeParamValue);
		return returnValue;
	}
	native private double getHeightAtTile_Real_Real_NoVirtual(long pNativeObject, double latitude, double lontitude);
	protected double getHeightAtTile_NoVirtual(double latitude, double lontitude)
	{
		double latitudeParamValue = latitude;
		double lontitudeParamValue = lontitude;
		double returnValue = getHeightAtTile_Real_Real_NoVirtual(this.nativeObject.pointer, latitudeParamValue, lontitudeParamValue);
		return returnValue;
	}

	protected  boolean getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_callback(int level, long row, long col, long minX, long maxX, long minY, long maxY)
	{
		int levelParamValue = level;
		long rowParamValue = row;
		long colParamValue = col;
		DoublePointer minXParamValue = new DoublePointer(new InstancePointer(minX));
		DoublePointer maxXParamValue = new DoublePointer(new InstancePointer(maxX));
		DoublePointer minYParamValue = new DoublePointer(new InstancePointer(minY));
		DoublePointer maxYParamValue = new DoublePointer(new InstancePointer(maxY));
		boolean returnValue = getTileEnvelope(levelParamValue, rowParamValue, colParamValue, minXParamValue, maxXParamValue, minYParamValue, maxYParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real(long pNativeObject, int level, long row, long col, long minX, long maxX, long minY, long maxY);
	/// 获取瓦片经纬度包围盒
	/// </summary>
	/// <param name="level">级别</param>
	/// <param name="row">行号</param>
	/// <param name="col">列号</param>
	/// <param name="minX">最小经度</param>
	/// <param name="maxX">最大经度</param>
	/// <param name="minY">最小纬度</param>
	/// <param name="maxY">最大纬度</param>
	/// <returns>是否成功</returns>
	public boolean getTileEnvelope(int level, long row, long col, DoublePointer minX, DoublePointer maxX, DoublePointer minY, DoublePointer maxY)
	{
		int levelParamValue = level;
		long rowParamValue = row;
		long colParamValue = col;
		long minXParamValue = minX.nativeObject.pointer;
		long maxXParamValue = maxX.nativeObject.pointer;
		long minYParamValue = minY.nativeObject.pointer;
		long maxYParamValue = maxY.nativeObject.pointer;
		boolean returnValue = getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real(this.nativeObject.pointer, levelParamValue, rowParamValue, colParamValue, minXParamValue, maxXParamValue, minYParamValue, maxYParamValue);
		return returnValue;
	}
	native private boolean getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_NoVirtual(long pNativeObject, int level, long row, long col, long minX, long maxX, long minY, long maxY);
	protected boolean getTileEnvelope_NoVirtual(int level, long row, long col, DoublePointer minX, DoublePointer maxX, DoublePointer minY, DoublePointer maxY)
	{
		int levelParamValue = level;
		long rowParamValue = row;
		long colParamValue = col;
		long minXParamValue = minX.nativeObject.pointer;
		long maxXParamValue = maxX.nativeObject.pointer;
		long minYParamValue = minY.nativeObject.pointer;
		long maxYParamValue = maxY.nativeObject.pointer;
		boolean returnValue = getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_NoVirtual(this.nativeObject.pointer, levelParamValue, rowParamValue, colParamValue, minXParamValue, maxXParamValue, minYParamValue, maxYParamValue);
		return returnValue;
	}

	protected  boolean addTempLayer_ILayer_callback(long layer)
	{
		com.earthview.world.spatial.atlas.Ilayer layerParamValue = (layer == 0L ? null : new com.earthview.world.spatial.atlas.Ilayer(CreatedWhenConstruct.CWC_NotToCreate));
		if(layerParamValue != null)
		{
		layerParamValue.setDelegate(true);
		layerParamValue.setInstancePointer(new InstancePointer(layer));
		IClassFactory layerParamValueClassFactory = GlobalClassFactoryMap.get(layerParamValue.getCppInstanceTypeName());
		if (layerParamValueClassFactory != null)
		{
			layerParamValue.setDelegate(true);
			layerParamValue = (com.earthview.world.spatial.atlas.Ilayer)layerParamValueClassFactory.create();
			layerParamValue.setDelegate(true);
			layerParamValue.setInstancePointer(new InstancePointer(layer));
		}
		}
		boolean returnValue = addTempLayer(layerParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean addTempLayer_ILayer(long pNativeObject, long layer);
	/**
	 * 添加临时图层
	 * @param layer 图层
	 * @return 是否成功
	 */
	public boolean addTempLayer(com.earthview.world.spatial.atlas.Ilayer layer)
	{
		long layerParamValue = (layer == null ? 0L : layer.nativeObject.pointer);
		boolean returnValue = addTempLayer_ILayer(this.nativeObject.pointer, layerParamValue);
		return returnValue;
	}
	native private boolean addTempLayer_ILayer_NoVirtual(long pNativeObject, long layer);
	protected boolean addTempLayer_NoVirtual(com.earthview.world.spatial.atlas.Ilayer layer)
	{
		long layerParamValue = (layer == null ? 0L : layer.nativeObject.pointer);
		boolean returnValue = addTempLayer_ILayer_NoVirtual(this.nativeObject.pointer, layerParamValue);
		return returnValue;
	}

	protected  boolean removeTempLayer_ILayer_callback(long layer)
	{
		com.earthview.world.spatial.atlas.Ilayer layerParamValue = (layer == 0L ? null : new com.earthview.world.spatial.atlas.Ilayer(CreatedWhenConstruct.CWC_NotToCreate));
		if(layerParamValue != null)
		{
		layerParamValue.setDelegate(true);
		layerParamValue.setInstancePointer(new InstancePointer(layer));
		IClassFactory layerParamValueClassFactory = GlobalClassFactoryMap.get(layerParamValue.getCppInstanceTypeName());
		if (layerParamValueClassFactory != null)
		{
			layerParamValue.setDelegate(true);
			layerParamValue = (com.earthview.world.spatial.atlas.Ilayer)layerParamValueClassFactory.create();
			layerParamValue.setDelegate(true);
			layerParamValue.setInstancePointer(new InstancePointer(layer));
		}
		}
		boolean returnValue = removeTempLayer(layerParamValue);
		boolean __returnValue = returnValue;
		return __returnValue;
	}

	native private boolean removeTempLayer_ILayer(long pNativeObject, long layer);
	/**
	 * 删除临时图层
	 * @param layer 图层
	 * @return 是否成功
	 */
	public boolean removeTempLayer(com.earthview.world.spatial.atlas.Ilayer layer)
	{
		long layerParamValue = (layer == null ? 0L : layer.nativeObject.pointer);
		boolean returnValue = removeTempLayer_ILayer(this.nativeObject.pointer, layerParamValue);
		return returnValue;
	}
	native private boolean removeTempLayer_ILayer_NoVirtual(long pNativeObject, long layer);
	protected boolean removeTempLayer_NoVirtual(com.earthview.world.spatial.atlas.Ilayer layer)
	{
		long layerParamValue = (layer == null ? 0L : layer.nativeObject.pointer);
		boolean returnValue = removeTempLayer_ILayer_NoVirtual(this.nativeObject.pointer, layerParamValue);
		return returnValue;
	}

	protected  void updateQuadImage_bool_bool_bool_callback(boolean updateImageGroup, boolean updateFeatureGroup, boolean updateKmlGroup)
	{
		boolean updateImageGroupParamValue = updateImageGroup;
		boolean updateFeatureGroupParamValue = updateFeatureGroup;
		boolean updateKmlGroupParamValue = updateKmlGroup;
		updateQuadImage(updateImageGroupParamValue, updateFeatureGroupParamValue, updateKmlGroupParamValue);
	}

	native private void updateQuadImage_bool_bool_bool(long pNativeObject, boolean updateImageGroup, boolean updateFeatureGroup, boolean updateKmlGroup);
	/**
	 * 刷新瓦片纹理
	 * @param updateImageGroup 是否更新影像层
	 * @param updateFeatureGroup 是否更新特征层
	 * @param updateKmlGroup 是否更新kml层
	 */
	public void updateQuadImage(boolean updateImageGroup, boolean updateFeatureGroup, boolean updateKmlGroup)
	{
		boolean updateImageGroupParamValue = updateImageGroup;
		boolean updateFeatureGroupParamValue = updateFeatureGroup;
		boolean updateKmlGroupParamValue = updateKmlGroup;
		updateQuadImage_bool_bool_bool(this.nativeObject.pointer, updateImageGroupParamValue, updateFeatureGroupParamValue, updateKmlGroupParamValue);
	}
	native private void updateQuadImage_bool_bool_bool_NoVirtual(long pNativeObject, boolean updateImageGroup, boolean updateFeatureGroup, boolean updateKmlGroup);
	protected void updateQuadImage_NoVirtual(boolean updateImageGroup, boolean updateFeatureGroup, boolean updateKmlGroup)
	{
		boolean updateImageGroupParamValue = updateImageGroup;
		boolean updateFeatureGroupParamValue = updateFeatureGroup;
		boolean updateKmlGroupParamValue = updateKmlGroup;
		updateQuadImage_bool_bool_bool_NoVirtual(this.nativeObject.pointer, updateImageGroupParamValue, updateFeatureGroupParamValue, updateKmlGroupParamValue);
	}

	protected  void updateQuadImage_bool_bool_bool_Real_Real_Real_Real_callback(boolean updateImageGroup, boolean updateFeatureGroup, boolean updateKmlGroup, double minX, double maxX, double minY, double maxY)
	{
		boolean updateImageGroupParamValue = updateImageGroup;
		boolean updateFeatureGroupParamValue = updateFeatureGroup;
		boolean updateKmlGroupParamValue = updateKmlGroup;
		double minXParamValue = minX;
		double maxXParamValue = maxX;
		double minYParamValue = minY;
		double maxYParamValue = maxY;
		updateQuadImage(updateImageGroupParamValue, updateFeatureGroupParamValue, updateKmlGroupParamValue, minXParamValue, maxXParamValue, minYParamValue, maxYParamValue);
	}

	native private void updateQuadImage_bool_bool_bool_Real_Real_Real_Real(long pNativeObject, boolean updateImageGroup, boolean updateFeatureGroup, boolean updateKmlGroup, double minX, double maxX, double minY, double maxY);
	/// <summary>
	/// 刷新瓦片纹理<只刷新指定范围内的瓦片>
	/// </summary>
	/// <param name="updateImageGroup">是否更新影像层</param>  
	/// <param name="updateFeatureGroup">是否更新特征层</param> 
	/// <param name="updateKmlGroup">是否更新kml层</param> 
	/// <param name="minX">最小经度</param>
	/// <param name="maxX">最大经度</param>
	/// <param name="minY">最小纬度</param>
	/// <param name="maxY">最大纬度</param>
	/// <returns></returns>
	public void updateQuadImage(boolean updateImageGroup, boolean updateFeatureGroup, boolean updateKmlGroup, double minX, double maxX, double minY, double maxY)
	{
		boolean updateImageGroupParamValue = updateImageGroup;
		boolean updateFeatureGroupParamValue = updateFeatureGroup;
		boolean updateKmlGroupParamValue = updateKmlGroup;
		double minXParamValue = minX;
		double maxXParamValue = maxX;
		double minYParamValue = minY;
		double maxYParamValue = maxY;
		updateQuadImage_bool_bool_bool_Real_Real_Real_Real(this.nativeObject.pointer, updateImageGroupParamValue, updateFeatureGroupParamValue, updateKmlGroupParamValue, minXParamValue, maxXParamValue, minYParamValue, maxYParamValue);
	}
	native private void updateQuadImage_bool_bool_bool_Real_Real_Real_Real_NoVirtual(long pNativeObject, boolean updateImageGroup, boolean updateFeatureGroup, boolean updateKmlGroup, double minX, double maxX, double minY, double maxY);
	protected void updateQuadImage_NoVirtual(boolean updateImageGroup, boolean updateFeatureGroup, boolean updateKmlGroup, double minX, double maxX, double minY, double maxY)
	{
		boolean updateImageGroupParamValue = updateImageGroup;
		boolean updateFeatureGroupParamValue = updateFeatureGroup;
		boolean updateKmlGroupParamValue = updateKmlGroup;
		double minXParamValue = minX;
		double maxXParamValue = maxX;
		double minYParamValue = minY;
		double maxYParamValue = maxY;
		updateQuadImage_bool_bool_bool_Real_Real_Real_Real_NoVirtual(this.nativeObject.pointer, updateImageGroupParamValue, updateFeatureGroupParamValue, updateKmlGroupParamValue, minXParamValue, maxXParamValue, minYParamValue, maxYParamValue);
	}

	protected  void updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_callback(boolean bUpdateVectorTexture, boolean bUpdateKmlTexture, boolean bUpdateTemporaryTexture, boolean bUpdateTerrain)
	{
		boolean bUpdateVectorTextureParamValue = bUpdateVectorTexture;
		boolean bUpdateKmlTextureParamValue = bUpdateKmlTexture;
		boolean bUpdateTemporaryTextureParamValue = bUpdateTemporaryTexture;
		boolean bUpdateTerrainParamValue = bUpdateTerrain;
		updateOBQ(bUpdateVectorTextureParamValue, bUpdateKmlTextureParamValue, bUpdateTemporaryTextureParamValue, bUpdateTerrainParamValue);
	}

	native private void updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool(long pNativeObject, boolean bUpdateVectorTexture, boolean bUpdateKmlTexture, boolean bUpdateTemporaryTexture, boolean bUpdateTerrain);
	/**
	 * 刷新摄影测量纹理
	 */
	public void updateOBQ(boolean bUpdateVectorTexture, boolean bUpdateKmlTexture, boolean bUpdateTemporaryTexture, boolean bUpdateTerrain)
	{
		boolean bUpdateVectorTextureParamValue = bUpdateVectorTexture;
		boolean bUpdateKmlTextureParamValue = bUpdateKmlTexture;
		boolean bUpdateTemporaryTextureParamValue = bUpdateTemporaryTexture;
		boolean bUpdateTerrainParamValue = bUpdateTerrain;
		updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool(this.nativeObject.pointer, bUpdateVectorTextureParamValue, bUpdateKmlTextureParamValue, bUpdateTemporaryTextureParamValue, bUpdateTerrainParamValue);
	}
	native private void updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_NoVirtual(long pNativeObject, boolean bUpdateVectorTexture, boolean bUpdateKmlTexture, boolean bUpdateTemporaryTexture, boolean bUpdateTerrain);
	protected void updateOBQ_NoVirtual(boolean bUpdateVectorTexture, boolean bUpdateKmlTexture, boolean bUpdateTemporaryTexture, boolean bUpdateTerrain)
	{
		boolean bUpdateVectorTextureParamValue = bUpdateVectorTexture;
		boolean bUpdateKmlTextureParamValue = bUpdateKmlTexture;
		boolean bUpdateTemporaryTextureParamValue = bUpdateTemporaryTexture;
		boolean bUpdateTerrainParamValue = bUpdateTerrain;
		updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_NoVirtual(this.nativeObject.pointer, bUpdateVectorTextureParamValue, bUpdateKmlTextureParamValue, bUpdateTemporaryTextureParamValue, bUpdateTerrainParamValue);
	}

	protected  void setCollisionDetectionEnable_ev_bool_callback(boolean enable)
	{
		boolean enableParamValue = enable;
		setCollisionDetectionEnable(enableParamValue);
	}

	native private void setCollisionDetectionEnable_ev_bool(long pNativeObject, boolean enable);
	/**
	 * 允许碰撞
	 * @param enable 
	 */
	public void setCollisionDetectionEnable(boolean enable)
	{
		boolean enableParamValue = enable;
		setCollisionDetectionEnable_ev_bool(this.nativeObject.pointer, enableParamValue);
	}
	native private void setCollisionDetectionEnable_ev_bool_NoVirtual(long pNativeObject, boolean enable);
	protected void setCollisionDetectionEnable_NoVirtual(boolean enable)
	{
		boolean enableParamValue = enable;
		setCollisionDetectionEnable_ev_bool_NoVirtual(this.nativeObject.pointer, enableParamValue);
	}

	native private boolean getCollisionDetectionEnable_void(long pNativeObject);
	/**
	 * 是否碰撞
	 * @param enable 
	 */
	public boolean getCollisionDetectionEnable()
	{
		boolean returnValue = getCollisionDetectionEnable_void(this.nativeObject.pointer);
		return returnValue;
	}
	public SceneManager(CreatedWhenConstruct cwc) {
		super(CreatedWhenConstruct.CWC_NotToCreate);
	}
	public SceneManager(CreatedWhenConstruct cwc, String classNameStr) {
		super(CreatedWhenConstruct.CWC_NotToCreate, classNameStr);
	}
	
	
	native protected void register_createSceneNodeImpl_void(long pNativeObject, String method);
	native protected void register_createSceneNodeImpl_EVString(long pNativeObject, String method);
	native protected void register_initRenderQueue_void(long pNativeObject, String method);
	native protected void register_deriveShadowCasterPass_CPass(long pNativeObject, String method);
	native protected void register_deriveShadowReceiverPass_CPass(long pNativeObject, String method);
	native protected void register_validatePassForRendering_CPass(long pNativeObject, String method);
	native protected void register_validateRenderableForRendering_CPass_CRenderable(long pNativeObject, String method);
	native protected void register_createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString(long pNativeObject, String method);
	native protected void register_createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(long pNativeObject, String method);
	native protected void register_useRenderableViewProjMode_CRenderable_ev_bool(long pNativeObject, String method);
	native protected void register_resetViewProjMode_ev_bool(long pNativeObject, String method);
	native protected void register_firePreRenderQueues_void(long pNativeObject, String method);
	native protected void register_firePostRenderQueues_void(long pNativeObject, String method);
	native protected void register_fireRenderQueueStarted_ev_uint8_EVString(long pNativeObject, String method);
	native protected void register_fireRenderQueueEnded_ev_uint8_EVString(long pNativeObject, String method);
	native protected void register_fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(long pNativeObject, String method);
	native protected void register_fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(long pNativeObject, String method);
	native protected void register_fireShadowTexturesUpdated_ev_size_t(long pNativeObject, String method);
	native protected void register_fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t(long pNativeObject, String method);
	native protected void register_fireShadowTexturesPreReceiver_CLight_CFrustum(long pNativeObject, String method);
	native protected void register_firePreUpdateSceneGraph_CCamera(long pNativeObject, String method);
	native protected void register_firePostUpdateSceneGraph_CCamera(long pNativeObject, String method);
	native protected void register_firePreFindVisibleObjects_CViewport(long pNativeObject, String method);
	native protected void register_firePostFindVisibleObjects_CViewport(long pNativeObject, String method);
	native protected void register_fireSceneManagerDestroyed_void(long pNativeObject, String method);
	native protected void register_setViewport_CViewport(long pNativeObject, String method);
	native protected void register_renderVisibleObjectsDefaultSequence_void(long pNativeObject, String method);
	native protected void register_renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence(long pNativeObject, String method);
	native protected void register_prepareRenderQueue_void(long pNativeObject, String method);
	native protected void register_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList(long pNativeObject, String method);
	native protected void register_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool(long pNativeObject, String method);
	native protected void register_createAutoParamDataSource_void(long pNativeObject, String method);
	native protected void register_findLightsAffectingFrustum_CCamera(long pNativeObject, String method);
	native protected void register_initShadowVolumeMaterials_void(long pNativeObject, String method);
	native protected void register_ensureShadowTexturesCreated_void(long pNativeObject, String method);
	native protected void register_destroyShadowTextures_void(long pNativeObject, String method);
	native protected void register_prepareShadowTextures_CCamera_CViewport_LightList(long pNativeObject, String method);
	native protected void register_prepareShadowTextures_CCamera_CViewport(long pNativeObject, String method);
	native protected void register_setImageDefaultMaterial_CMaterialPtr(long pNativeObject, String method);
	native protected void register_setImageUseDefaultMaterial_ev_bool(long pNativeObject, String method);
	native protected void register_getSunPosition_void(long pNativeObject, String method);
	native protected void register_setAtmosphereVisible_ev_bool(long pNativeObject, String method);
	native protected void register_storeAtmosphereVisibleState_void(long pNativeObject, String method);
	native protected void register_restoreAtmosphereVisibleState_void(long pNativeObject, String method);
	native protected void register_setSunVisible_ev_bool(long pNativeObject, String method);
	native protected void register__pauseRendering_void(long pNativeObject, String method);
	native protected void register__resumeRendering_RenderContext(long pNativeObject, String method);
	native protected void register_renderShadowVolumesToStencil_CLight_CCamera_ev_bool(long pNativeObject, String method);
	native protected void register_setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool(long pNativeObject, String method);
	native protected void register_findShadowCastersForLight_CLight_CCamera(long pNativeObject, String method);
	native protected void register_renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode(long pNativeObject, String method);
	native protected void register_renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode(long pNativeObject, String method);
	native protected void register_renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode(long pNativeObject, String method);
	native protected void register_renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode(long pNativeObject, String method);
	native protected void register_renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode(long pNativeObject, String method);
	native protected void register_renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode(long pNativeObject, String method);
	native protected void register_renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode(long pNativeObject, String method);
	native protected void register_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(long pNativeObject, String method);
	native protected void register_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(long pNativeObject, String method);
	native protected void register_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(long pNativeObject, String method);
	native protected void register_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(long pNativeObject, String method);
	native protected void register_updateRenderQueueSplitOptions_void(long pNativeObject, String method);
	native protected void register_updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool(long pNativeObject, String method);
	native protected void register_buildAndSetScissor_LightList_CCamera(long pNativeObject, String method);
	native protected void register_buildScissor_CLight_CCamera_RealRect(long pNativeObject, String method);
	native protected void register_resetScissor_void(long pNativeObject, String method);
	native protected void register_buildAndSetLightClip_LightList(long pNativeObject, String method);
	native protected void register_buildLightClip_CLight_PlaneList(long pNativeObject, String method);
	native protected void register_resetLightClip_void(long pNativeObject, String method);
	native protected void register_checkCachedLightClippingInfo_void(long pNativeObject, String method);
	native protected void register_useLights_LightList_ev_uint16(long pNativeObject, String method);
	native protected void register_setViewMatrix_CMatrix4(long pNativeObject, String method);
	native protected void register_useLightsGpuProgram_CPass_LightList(long pNativeObject, String method);
	native protected void register_bindGpuProgram_CGpuProgram(long pNativeObject, String method);
	native protected void register_updateGpuProgramParameters_CPass(long pNativeObject, String method);
	native protected void register_getTypeName_void(long pNativeObject, String method);
	native protected void register_createCamera_EVString(long pNativeObject, String method);
	native protected void register_getCamera_EVString(long pNativeObject, String method);
	native protected void register_hasCamera_EVString(long pNativeObject, String method);
	native protected void register_destroyCamera_CCamera(long pNativeObject, String method);
	native protected void register_destroyCamera_EVString(long pNativeObject, String method);
	native protected void register_destroyAllCameras_void(long pNativeObject, String method);
	native protected void register_createLight_EVString(long pNativeObject, String method);
	native protected void register_createLight_void(long pNativeObject, String method);
	native protected void register_getLightCount_void(long pNativeObject, String method);
	native protected void register_getLight_ev_uint16(long pNativeObject, String method);
	native protected void register_getLight_EVString(long pNativeObject, String method);
	native protected void register_hasLight_EVString(long pNativeObject, String method);
	native protected void register_getLightClippingPlanes_CLight(long pNativeObject, String method);
	native protected void register_getLightScissorRect_CLight_CCamera(long pNativeObject, String method);
	native protected void register_destroyLight_EVString(long pNativeObject, String method);
	native protected void register_destroyLight_CLight(long pNativeObject, String method);
	native protected void register_destroyAllLights_void(long pNativeObject, String method);
	native protected void register_getSoftShadowTexName_void(long pNativeObject, String method);
	native protected void register_getShadowTexCam_void(long pNativeObject, String method);
	native protected void register_getSoftShadowProjMatrix_ev_uint16(long pNativeObject, String method);
	native protected void register_getCascadeEyeSpaceDepthArray_void(long pNativeObject, String method);
	native protected void register_getSoftShadowNearClip_ev_uint8(long pNativeObject, String method);
	native protected void register_getSoftShadowFarClip_ev_uint8(long pNativeObject, String method);
	native protected void register_getIsUseSoftShadowFitToCascadesMode_void(long pNativeObject, String method);
	native protected void register_setIsUseSoftShadowFitToCascadesMode_bool(long pNativeObject, String method);
	native protected void register_getCurrentClipIndex_void(long pNativeObject, String method);
	native protected void register_getIsUseSoftShadowTechnique_void(long pNativeObject, String method);
	native protected void register_setIsUseSoftShadowTechnique_bool(long pNativeObject, String method);
	native protected void register_getCascadePartitionsPercent_void(long pNativeObject, String method);
	native protected void register_setCascadePartitionsPercent_float(long pNativeObject, String method);
	native protected void register_getCascadePartitionsDistance_ev_uint8(long pNativeObject, String method);
	native protected void register_setCascadePartitionsDistance_ev_uint8_ev_uint8(long pNativeObject, String method);
	native protected void register_getSoftShadowOffsetFormat_void(long pNativeObject, String method);
	native protected void register_checkShadowCasterInFrustum_CCamera(long pNativeObject, String method);
	native protected void register_hasShadowCasterInFrustum_void(long pNativeObject, String method);
	native protected void register_getSoftShadowLightBleedPower_void(long pNativeObject, String method);
	native protected void register_setSoftShadowLightBleedPower_Real(long pNativeObject, String method);
	native protected void register_getSoftShadowDepthOffset_void(long pNativeObject, String method);
	native protected void register_setSoftShadowDepthOffset_Real(long pNativeObject, String method);
	native protected void register_getSoftShadowNormalFactor_void(long pNativeObject, String method);
	native protected void register_setSoftShadowNormalFactor_float(long pNativeObject, String method);
	native protected void register__notifyLightsDirty_void(long pNativeObject, String method);
	native protected void register__getLightsAffectingFrustum_void(long pNativeObject, String method);
	native protected void register__populateLightList_CVector3_Real_LightList_ev_uint32(long pNativeObject, String method);
	native protected void register__populateLightList_CVector3_Real_LightList(long pNativeObject, String method);
	native protected void register_showImage_ev_bool(long pNativeObject, String method);
	native protected void register_getImageVisible_void(long pNativeObject, String method);
	native protected void register_showOcean_ev_bool(long pNativeObject, String method);
	native protected void register_getOceanVisible_void(long pNativeObject, String method);
	native protected void register__populateLightList_CSceneNode_Real_LightList_ev_uint32(long pNativeObject, String method);
	native protected void register__populateLightList_CSceneNode_Real_LightList(long pNativeObject, String method);
	native protected void register_createSceneNode_void(long pNativeObject, String method);
	native protected void register_createSceneNode_EVString(long pNativeObject, String method);
	native protected void register_destroySceneNode_EVString(long pNativeObject, String method);
	native protected void register_destroySceneNode_CSceneNode(long pNativeObject, String method);
	native protected void register_getRootSceneNode_void(long pNativeObject, String method);
	native protected void register_getSceneNode_EVString(long pNativeObject, String method);
	native protected void register_hasSceneNode_EVString(long pNativeObject, String method);
	native protected void register_createEntity_EVString_EVString_IntVector_EVString(long pNativeObject, String method);
	native protected void register_createEntity_EVString_EVString_EVString(long pNativeObject, String method);
	native protected void register_createEntity_EVString_EVString_IntVector(long pNativeObject, String method);
	native protected void register_createEntity_EVString_EVString(long pNativeObject, String method);
	native protected void register_createEntity_EVString_CMeshPtr_IntVector(long pNativeObject, String method);
	native protected void register_createEntity_EVString_CMeshPtr(long pNativeObject, String method);
	native protected void register_createEntity_CMeshPtr_IntVector(long pNativeObject, String method);
	native protected void register_createEntity_CMeshPtr(long pNativeObject, String method);
	native protected void register_createEntity_EVString_IntVector(long pNativeObject, String method);
	native protected void register_createEntity_EVString(long pNativeObject, String method);
	native protected void register_createEntity_EVString_PrefabType(long pNativeObject, String method);
	native protected void register_createEntity_PrefabType(long pNativeObject, String method);
	native protected void register_getEntity_EVString(long pNativeObject, String method);
	native protected void register_hasEntity_EVString(long pNativeObject, String method);
	native protected void register_destroyEntity_CEntity(long pNativeObject, String method);
	native protected void register_destroyEntity_EVString(long pNativeObject, String method);
	native protected void register_destroyAllEntities_void(long pNativeObject, String method);
	native protected void register_createManualObject_EVString(long pNativeObject, String method);
	native protected void register_createManualObject_void(long pNativeObject, String method);
	native protected void register_getManualObject_EVString(long pNativeObject, String method);
	native protected void register_hasManualObject_EVString(long pNativeObject, String method);
	native protected void register_destroyManualObject_CManualObject(long pNativeObject, String method);
	native protected void register_destroyManualObject_EVString(long pNativeObject, String method);
	native protected void register_destroyAllManualObjects_void(long pNativeObject, String method);
	native protected void register_usingWebMercator_void(long pNativeObject, String method);
	native protected void register_createBillboardChain_EVString(long pNativeObject, String method);
	native protected void register_createBillboardChain_void(long pNativeObject, String method);
	native protected void register_getBillboardChain_EVString(long pNativeObject, String method);
	native protected void register_hasBillboardChain_EVString(long pNativeObject, String method);
	native protected void register_destroyBillboardChain_CBillboardChain(long pNativeObject, String method);
	native protected void register_destroyBillboardChain_EVString(long pNativeObject, String method);
	native protected void register_destroyAllBillboardChains_void(long pNativeObject, String method);
	native protected void register_createRibbonTrail_EVString(long pNativeObject, String method);
	native protected void register_createRibbonTrail_void(long pNativeObject, String method);
	native protected void register_getRibbonTrail_EVString(long pNativeObject, String method);
	native protected void register_hasRibbonTrail_EVString(long pNativeObject, String method);
	native protected void register_destroyRibbonTrail_CRibbonTrail(long pNativeObject, String method);
	native protected void register_destroyRibbonTrail_EVString(long pNativeObject, String method);
	native protected void register_destroyAllRibbonTrails_void(long pNativeObject, String method);
	native protected void register_createParticleSystem_EVString_EVString(long pNativeObject, String method);
	native protected void register_createParticleSystem_EVString_ev_size_t_EVString(long pNativeObject, String method);
	native protected void register_createParticleSystem_EVString_ev_size_t(long pNativeObject, String method);
	native protected void register_createParticleSystem_EVString(long pNativeObject, String method);
	native protected void register_createParticleSystem_ev_size_t_EVString(long pNativeObject, String method);
	native protected void register_createParticleSystem_ev_size_t(long pNativeObject, String method);
	native protected void register_createParticleSystem_void(long pNativeObject, String method);
	native protected void register_getParticleSystem_EVString(long pNativeObject, String method);
	native protected void register_hasParticleSystem_EVString(long pNativeObject, String method);
	native protected void register_destroyParticleSystem_CParticleSystem(long pNativeObject, String method);
	native protected void register_destroyParticleSystem_EVString(long pNativeObject, String method);
	native protected void register_destroyAllParticleSystems_void(long pNativeObject, String method);
	native protected void register_clearScene_void(long pNativeObject, String method);
	native protected void register_prepareWorldGeometry_EVString(long pNativeObject, String method);
	native protected void register_prepareWorldGeometry_DataStreamPtr_EVString(long pNativeObject, String method);
	native protected void register_prepareWorldGeometry_DataStreamPtr(long pNativeObject, String method);
	native protected void register_setWorldGeometry_EVString(long pNativeObject, String method);
	native protected void register_setWorldGeometry_DataStreamPtr_EVString(long pNativeObject, String method);
	native protected void register_setWorldGeometry_DataStreamPtr(long pNativeObject, String method);
	native protected void register_estimateWorldGeometry_EVString(long pNativeObject, String method);
	native protected void register_estimateWorldGeometry_DataStreamPtr_EVString(long pNativeObject, String method);
	native protected void register_estimateWorldGeometry_DataStreamPtr(long pNativeObject, String method);
	native protected void register_getSuggestedViewpoint_ev_bool(long pNativeObject, String method);
	native protected void register_getSuggestedViewpoint_void(long pNativeObject, String method);
	native protected void register_setOption_EVString_void(long pNativeObject, String method);
	native protected void register_getOption_EVString_void(long pNativeObject, String method);
	native protected void register_hasOption_EVString(long pNativeObject, String method);
	native protected void register_getOptionValues_EVString_StringVector(long pNativeObject, String method);
	native protected void register_getOptionKeys_StringVector(long pNativeObject, String method);
	native protected void register__updateSceneGraph_CCamera(long pNativeObject, String method);
	native protected void register__findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool(long pNativeObject, String method);
	native protected void register__applySceneAnimations_void(long pNativeObject, String method);
	native protected void register__renderVisibleObjects_void(long pNativeObject, String method);
	native protected void register__renderScene_CCamera_CViewport_ev_bool(long pNativeObject, String method);
	native protected void register__queueSkiesForRendering_CCamera(long pNativeObject, String method);
	native protected void register__setDestinationRenderSystem_CRenderSystem(long pNativeObject, String method);
	native protected void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString(long pNativeObject, String method);
	native protected void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32(long pNativeObject, String method);
	native protected void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32(long pNativeObject, String method);
	native protected void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real(long pNativeObject, String method);
	native protected void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool(long pNativeObject, String method);
	native protected void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real(long pNativeObject, String method);
	native protected void register_setSkyPlane_ev_bool_CPlane_EVString_Real(long pNativeObject, String method);
	native protected void register_setSkyPlane_ev_bool_CPlane_EVString(long pNativeObject, String method);
	native protected void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString(long pNativeObject, String method);
	native protected void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32(long pNativeObject, String method);
	native protected void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32(long pNativeObject, String method);
	native protected void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real(long pNativeObject, String method);
	native protected void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8(long pNativeObject, String method);
	native protected void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real(long pNativeObject, String method);
	native protected void register__setSkyPlane_ev_bool_CPlane_EVString_Real(long pNativeObject, String method);
	native protected void register__setSkyPlane_ev_bool_CPlane_EVString(long pNativeObject, String method);
	native protected void register_setSkyPlaneEnabled_ev_bool(long pNativeObject, String method);
	native protected void register_isSkyPlaneEnabled_void(long pNativeObject, String method);
	native protected void register_getSkyPlaneNode_void(long pNativeObject, String method);
	native protected void register_getSkyPlaneGenParameters_void(long pNativeObject, String method);
	native protected void register_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString(long pNativeObject, String method);
	native protected void register_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion(long pNativeObject, String method);
	native protected void register_setSkyBox_ev_bool_EVString_Real_ev_bool(long pNativeObject, String method);
	native protected void register_setSkyBox_ev_bool_EVString_Real(long pNativeObject, String method);
	native protected void register_setSkyBox_ev_bool_EVString(long pNativeObject, String method);
	native protected void register__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString(long pNativeObject, String method);
	native protected void register__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion(long pNativeObject, String method);
	native protected void register__setSkyBox_ev_bool_EVString_Real_ev_uint8(long pNativeObject, String method);
	native protected void register__setSkyBox_ev_bool_EVString_Real(long pNativeObject, String method);
	native protected void register__setSkyBox_ev_bool_EVString(long pNativeObject, String method);
	native protected void register_setSkyBoxEnabled_ev_bool(long pNativeObject, String method);
	native protected void register_isSkyBoxEnabled_void(long pNativeObject, String method);
	native protected void register_getSkyBoxNode_void(long pNativeObject, String method);
	native protected void register_getSkyBoxGenParameters_void(long pNativeObject, String method);
	native protected void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(long pNativeObject, String method);
	native protected void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32(long pNativeObject, String method);
	native protected void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32(long pNativeObject, String method);
	native protected void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32(long pNativeObject, String method);
	native protected void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion(long pNativeObject, String method);
	native protected void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool(long pNativeObject, String method);
	native protected void register_setSkyDome_ev_bool_EVString_Real_Real_Real(long pNativeObject, String method);
	native protected void register_setSkyDome_ev_bool_EVString_Real_Real(long pNativeObject, String method);
	native protected void register_setSkyDome_ev_bool_EVString_Real(long pNativeObject, String method);
	native protected void register_setSkyDome_ev_bool_EVString(long pNativeObject, String method);
	native protected void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(long pNativeObject, String method);
	native protected void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32(long pNativeObject, String method);
	native protected void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32(long pNativeObject, String method);
	native protected void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32(long pNativeObject, String method);
	native protected void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion(long pNativeObject, String method);
	native protected void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8(long pNativeObject, String method);
	native protected void register__setSkyDome_ev_bool_EVString_Real_Real_Real(long pNativeObject, String method);
	native protected void register__setSkyDome_ev_bool_EVString_Real_Real(long pNativeObject, String method);
	native protected void register__setSkyDome_ev_bool_EVString_Real(long pNativeObject, String method);
	native protected void register__setSkyDome_ev_bool_EVString(long pNativeObject, String method);
	native protected void register_setSkyDomeEnabled_ev_bool(long pNativeObject, String method);
	native protected void register_isSkyDomeEnabled_void(long pNativeObject, String method);
	native protected void register_getSkyDomeNode_void(long pNativeObject, String method);
	native protected void register_getSkyDomeGenParameters_void(long pNativeObject, String method);
	native protected void register_getFogMode_void(long pNativeObject, String method);
	native protected void register_getFogColour_void(long pNativeObject, String method);
	native protected void register_getFogStart_void(long pNativeObject, String method);
	native protected void register_getFogEnd_void(long pNativeObject, String method);
	native protected void register_getFogDensity_void(long pNativeObject, String method);
	native protected void register_createBillboardSet_EVString_ev_uint32(long pNativeObject, String method);
	native protected void register_createBillboardSet_EVString(long pNativeObject, String method);
	native protected void register_createBillboardSet_ev_uint32(long pNativeObject, String method);
	native protected void register_createBillboardSet_void(long pNativeObject, String method);
	native protected void register_getBillboardSet_EVString(long pNativeObject, String method);
	native protected void register_hasBillboardSet_EVString(long pNativeObject, String method);
	native protected void register_destroyBillboardSet_CBillboardSet(long pNativeObject, String method);
	native protected void register_destroyBillboardSet_EVString(long pNativeObject, String method);
	native protected void register_destroyAllBillboardSets_void(long pNativeObject, String method);
	native protected void register_setDisplaySceneNodes_ev_bool(long pNativeObject, String method);
	native protected void register_getDisplaySceneNodes_void(long pNativeObject, String method);
	native protected void register_createAnimation_EVString_Real(long pNativeObject, String method);
	native protected void register_getAnimation_EVString(long pNativeObject, String method);
	native protected void register_hasAnimation_EVString(long pNativeObject, String method);
	native protected void register_destroyAnimation_EVString(long pNativeObject, String method);
	native protected void register_destroyAllAnimations_void(long pNativeObject, String method);
	native protected void register_createAnimationState_EVString(long pNativeObject, String method);
	native protected void register_getAnimationState_EVString(long pNativeObject, String method);
	native protected void register_hasAnimationState_EVString(long pNativeObject, String method);
	native protected void register_destroyAnimationState_EVString(long pNativeObject, String method);
	native protected void register_destroyAllAnimationStates_void(long pNativeObject, String method);
	native protected void register_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool(long pNativeObject, String method);
	native protected void register_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4(long pNativeObject, String method);
	native protected void register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList(long pNativeObject, String method);
	native protected void register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool(long pNativeObject, String method);
	native protected void register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool(long pNativeObject, String method);
	native protected void register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool(long pNativeObject, String method);
	native protected void register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4(long pNativeObject, String method);
	native protected void register_getRenderQueue_void(long pNativeObject, String method);
	native protected void register_addRenderQueueListener_CRenderQueueListener(long pNativeObject, String method);
	native protected void register_removeRenderQueueListener_CRenderQueueListener(long pNativeObject, String method);
	native protected void register_addRenderObjectListener_CRenderObjectListener(long pNativeObject, String method);
	native protected void register_removeRenderObjectListener_CRenderObjectListener(long pNativeObject, String method);
	native protected void register_addSpecialCaseRenderQueue_ev_uint8(long pNativeObject, String method);
	native protected void register_removeSpecialCaseRenderQueue_ev_uint8(long pNativeObject, String method);
	native protected void register_clearSpecialCaseRenderQueues_void(long pNativeObject, String method);
	native protected void register_setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode(long pNativeObject, String method);
	native protected void register_getSpecialCaseRenderQueueMode_void(long pNativeObject, String method);
	native protected void register_isRenderQueueToBeProcessed_ev_uint8(long pNativeObject, String method);
	native protected void register_setWorldGeometryRenderQueue_ev_uint8(long pNativeObject, String method);
	native protected void register_getWorldGeometryRenderQueue_void(long pNativeObject, String method);
	native protected void register_showBoundingBoxes_ev_bool(long pNativeObject, String method);
	native protected void register_getShowBoundingBoxes_void(long pNativeObject, String method);
	native protected void register__notifyAutotrackingSceneNode_CSceneNode_ev_bool(long pNativeObject, String method);
	native protected void register_createAABBQuery_CAxisAlignedBox_ev_uint32(long pNativeObject, String method);
	native protected void register_createAABBQuery_CAxisAlignedBox(long pNativeObject, String method);
	native protected void register_createSphereQuery_CSphere_ev_uint32(long pNativeObject, String method);
	native protected void register_createSphereQuery_CSphere(long pNativeObject, String method);
	native protected void register_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32(long pNativeObject, String method);
	native protected void register_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList(long pNativeObject, String method);
	native protected void register_createRayQuery_CRay_ev_uint32(long pNativeObject, String method);
	native protected void register_createRayQuery_CRay(long pNativeObject, String method);
	native protected void register_createIntersectionQuery_ev_uint32(long pNativeObject, String method);
	native protected void register_createIntersectionQuery_void(long pNativeObject, String method);
	native protected void register_destroyQuery_CSceneQuery(long pNativeObject, String method);
	native protected void register_setShadowTechnique_ShadowTechnique(long pNativeObject, String method);
	native protected void register_getShadowTechnique_void(long pNativeObject, String method);
	native protected void register_setShowDebugShadows_ev_bool(long pNativeObject, String method);
	native protected void register_getShowDebugShadows_void(long pNativeObject, String method);
	native protected void register_setShadowColour_CColourValue(long pNativeObject, String method);
	native protected void register_getShadowColour_void(long pNativeObject, String method);
	native protected void register_setShadowDirectionalLightExtrusionDistance_Real(long pNativeObject, String method);
	native protected void register_getShadowDirectionalLightExtrusionDistance_void(long pNativeObject, String method);
	native protected void register_setShadowColorRRatio_Real(long pNativeObject, String method);
	native protected void register_setShadowColorGRatio_Real(long pNativeObject, String method);
	native protected void register_setShadowColorBRatio_Real(long pNativeObject, String method);
	native protected void register_getShadowColorRRatio_void(long pNativeObject, String method);
	native protected void register_getShadowColorGRatio_void(long pNativeObject, String method);
	native protected void register_getShadowColorBRatio_void(long pNativeObject, String method);
	native protected void register_setShadowFarDistance_Real(long pNativeObject, String method);
	native protected void register_getShadowFarDistance_void(long pNativeObject, String method);
	native protected void register_getShadowFarDistanceSquared_void(long pNativeObject, String method);
	native protected void register_setShadowIndexBufferSize_ev_size_t(long pNativeObject, String method);
	native protected void register_getShadowIndexBufferSize_void(long pNativeObject, String method);
	native protected void register_setShadowTextureSize_ev_uint16(long pNativeObject, String method);
	native protected void register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat(long pNativeObject, String method);
	native protected void register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16(long pNativeObject, String method);
	native protected void register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(long pNativeObject, String method);
	native protected void register_setShadowTextureConfig_ev_size_t_ShadowTextureConfig(long pNativeObject, String method);
	native protected void register_setShadowTexturePixelFormat_PixelFormat(long pNativeObject, String method);
	native protected void register_setShadowTextureFSAA_ev_uint16(long pNativeObject, String method);
	native protected void register_setShadowTextureCount_ev_size_t(long pNativeObject, String method);
	native protected void register_setShadowTextureSettings_ev_uint16_ev_uint16(long pNativeObject, String method);
	native protected void register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat(long pNativeObject, String method);
	native protected void register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16(long pNativeObject, String method);
	native protected void register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(long pNativeObject, String method);
	native protected void register_getShadowTexture_ev_size_t(long pNativeObject, String method);
	native protected void register_setShadowDirLightTextureOffset_Real(long pNativeObject, String method);
	native protected void register_getShadowDirLightTextureOffset_void(long pNativeObject, String method);
	native protected void register_setShadowTextureFadeStart_Real(long pNativeObject, String method);
	native protected void register_setShadowTextureFadeEnd_Real(long pNativeObject, String method);
	native protected void register_setShadowTextureSelfShadow_ev_bool(long pNativeObject, String method);
	native protected void register_getShadowTextureSelfShadow_void(long pNativeObject, String method);
	native protected void register_setShadowTextureCasterMaterial_EVString(long pNativeObject, String method);
	native protected void register_setShadowTextureReceiverMaterial_EVString(long pNativeObject, String method);
	native protected void register_setShadowCasterRenderBackFaces_ev_bool(long pNativeObject, String method);
	native protected void register_getShadowCasterRenderBackFaces_void(long pNativeObject, String method);
	native protected void register_setShadowCameraSetup_ShadowCameraSetupPtr(long pNativeObject, String method);
	native protected void register_getShadowCameraSetup_void(long pNativeObject, String method);
	native protected void register_setShadowUseInfiniteFarPlane_ev_bool(long pNativeObject, String method);
	native protected void register_isShadowTechniqueStencilBased_void(long pNativeObject, String method);
	native protected void register_isShadowTechniqueTextureBased_void(long pNativeObject, String method);
	native protected void register_isShadowTechniqueModulative_void(long pNativeObject, String method);
	native protected void register_isShadowTechniqueAdditive_void(long pNativeObject, String method);
	native protected void register_isShadowTechniqueIntegrated_void(long pNativeObject, String method);
	native protected void register_isShadowTechniqueInUse_void(long pNativeObject, String method);
	native protected void register_setShadowUseLightClipPlanes_ev_bool(long pNativeObject, String method);
	native protected void register_getShadowUseLightClipPlanes_void(long pNativeObject, String method);
	native protected void register__setActiveCompositorChain_CCompositorChain(long pNativeObject, String method);
	native protected void register_setLateMaterialResolving_ev_bool(long pNativeObject, String method);
	native protected void register_isLateMaterialResolving_void(long pNativeObject, String method);
	native protected void register__getActiveCompositorChain_void(long pNativeObject, String method);
	native protected void register_addListener_CSceneManagerListener(long pNativeObject, String method);
	native protected void register_removeListener_CSceneManagerListener(long pNativeObject, String method);
	native protected void register_existListener_CSceneManagerListener(long pNativeObject, String method);
	native protected void register_createStaticGeometry_EVString(long pNativeObject, String method);
	native protected void register_getStaticGeometry_EVString(long pNativeObject, String method);
	native protected void register_hasStaticGeometry_EVString(long pNativeObject, String method);
	native protected void register_destroyStaticGeometry_CStaticGeometry(long pNativeObject, String method);
	native protected void register_destroyStaticGeometry_EVString(long pNativeObject, String method);
	native protected void register_destroyAllStaticGeometry_void(long pNativeObject, String method);
	native protected void register_createInstancedGeometry_EVString(long pNativeObject, String method);
	native protected void register_getInstancedGeometry_EVString(long pNativeObject, String method);
	native protected void register_destroyInstancedGeometry_CInstancedGeometry(long pNativeObject, String method);
	native protected void register_destroyInstancedGeometry_EVString(long pNativeObject, String method);
	native protected void register_destroyAllInstancedGeometry_void(long pNativeObject, String method);
	native protected void register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(long pNativeObject, String method);
	native protected void register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(long pNativeObject, String method);
	native protected void register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t(long pNativeObject, String method);
	native protected void register_getInstanceManager_EVString(long pNativeObject, String method);
	native protected void register_hasInstanceManager_EVString(long pNativeObject, String method);
	native protected void register_destroyInstanceManager_EVString(long pNativeObject, String method);
	native protected void register_destroyInstanceManager_CInstanceManager(long pNativeObject, String method);
	native protected void register_destroyInstanceManagerWithThreadSafe_EVString(long pNativeObject, String method);
	native protected void register_destroyInstanceManagerWithThreadSafe_CInstanceManager(long pNativeObject, String method);
	native protected void register_destroyAllInstanceManagers_void(long pNativeObject, String method);
	native protected void register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t(long pNativeObject, String method);
	native protected void register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(long pNativeObject, String method);
	native protected void register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(long pNativeObject, String method);
	native protected void register_createInstancedEntity_EVString_EVString(long pNativeObject, String method);
	native protected void register_destroyInstancedEntity_CInstancedEntity(long pNativeObject, String method);
	native protected void register_createMovableObject_EVString_EVString_CommonStringPairList(long pNativeObject, String method);
	native protected void register_createMovableObject_EVString_EVString(long pNativeObject, String method);
	native protected void register_createMovableObject_EVString_CommonStringPairList(long pNativeObject, String method);
	native protected void register_createMovableObject_EVString(long pNativeObject, String method);
	native protected void register_destroyMovableObject_EVString_EVString(long pNativeObject, String method);
	native protected void register_destroyMovableObject_CMovableObject(long pNativeObject, String method);
	native protected void register_destroyAllMovableObjectsByType_EVString(long pNativeObject, String method);
	native protected void register_destroyAllMovableObjects_void(long pNativeObject, String method);
	native protected void register_getMovableObject_EVString_EVString(long pNativeObject, String method);
	native protected void register_hasMovableObject_EVString_EVString(long pNativeObject, String method);
	native protected void register_getMovableObjectIterator_EVString(long pNativeObject, String method);
	native protected void register_injectMovableObject_CMovableObject(long pNativeObject, String method);
	native protected void register_extractMovableObject_EVString_EVString(long pNativeObject, String method);
	native protected void register_extractMovableObject_CMovableObject(long pNativeObject, String method);
	native protected void register_extractAllMovableObjectsByType_EVString(long pNativeObject, String method);
	native protected void register_setVisibilityMask_ev_uint32(long pNativeObject, String method);
	native protected void register_getVisibilityMask_void(long pNativeObject, String method);
	native protected void register_setFindVisibleObjects_ev_bool(long pNativeObject, String method);
	native protected void register_getFindVisibleObjects_void(long pNativeObject, String method);
	native protected void register_setNormaliseNormalsOnScale_ev_bool(long pNativeObject, String method);
	native protected void register_getNormaliseNormalsOnScale_void(long pNativeObject, String method);
	native protected void register_setFlipCullingOnNegativeScale_ev_bool(long pNativeObject, String method);
	native protected void register_getFlipCullingOnNegativeScale_void(long pNativeObject, String method);
	native protected void register__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList(long pNativeObject, String method);
	native protected void register__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool(long pNativeObject, String method);
	native protected void register__injectRenderWithPass_CPass_CRenderable_ev_bool(long pNativeObject, String method);
	native protected void register__injectRenderWithPass_CPass_CRenderable(long pNativeObject, String method);
	native protected void register__suppressRenderStateChanges_ev_bool(long pNativeObject, String method);
	native protected void register__areRenderStateChangesSuppressed_void(long pNativeObject, String method);
	native protected void register__setPass_CPass_ev_bool_ev_bool(long pNativeObject, String method);
	native protected void register__setPass_CPass_ev_bool(long pNativeObject, String method);
	native protected void register__setPass_CPass(long pNativeObject, String method);
	native protected void register__markGpuParamsDirty_ev_uint16(long pNativeObject, String method);
	native protected void register__suppressShadows_ev_bool(long pNativeObject, String method);
	native protected void register__areShadowsSuppressed_void(long pNativeObject, String method);
	native protected void register__renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode(long pNativeObject, String method);
	native protected void register_setCameraRelativeRendering_ev_bool(long pNativeObject, String method);
	native protected void register_getCameraRelativeRendering_void(long pNativeObject, String method);
	native protected void register_getHeightAt_Real_Real_ev_real32(long pNativeObject, String method);
	native protected void register_getBestHeightAt_Real_Real(long pNativeObject, String method);
	native protected void register_getHeightAtTile_Real_Real(long pNativeObject, String method);
	native protected void register_getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real(long pNativeObject, String method);
	native protected void register_addTempLayer_ILayer(long pNativeObject, String method);
	native protected void register_removeTempLayer_ILayer(long pNativeObject, String method);
	native protected void register_updateQuadImage_bool_bool_bool(long pNativeObject, String method);
	native protected void register_updateQuadImage_bool_bool_bool_Real_Real_Real_Real(long pNativeObject, String method);
	native protected void register_updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool(long pNativeObject, String method);
	native protected void register_setCollisionDetectionEnable_ev_bool(long pNativeObject, String method);
	
	public void registerCallback(){
		if (!this.nativeObject.equals(InstancePointer.ZERO)){
			this.register_createSceneNodeImpl_void(this.nativeObject.pointer, "createSceneNodeImpl_void_callback");
			this.register_createSceneNodeImpl_EVString(this.nativeObject.pointer, "createSceneNodeImpl_EVString_callback");
			this.register_initRenderQueue_void(this.nativeObject.pointer, "initRenderQueue_void_callback");
			this.register_deriveShadowCasterPass_CPass(this.nativeObject.pointer, "deriveShadowCasterPass_CPass_callback");
			this.register_deriveShadowReceiverPass_CPass(this.nativeObject.pointer, "deriveShadowReceiverPass_CPass_callback");
			this.register_validatePassForRendering_CPass(this.nativeObject.pointer, "validatePassForRendering_CPass_callback");
			this.register_validateRenderableForRendering_CPass_CRenderable(this.nativeObject.pointer, "validateRenderableForRendering_CPass_CRenderable_callback");
			this.register_createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString(this.nativeObject.pointer, "createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_callback");
			this.register_createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(this.nativeObject.pointer, "createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback");
			this.register_useRenderableViewProjMode_CRenderable_ev_bool(this.nativeObject.pointer, "useRenderableViewProjMode_CRenderable_ev_bool_callback");
			this.register_resetViewProjMode_ev_bool(this.nativeObject.pointer, "resetViewProjMode_ev_bool_callback");
			this.register_firePreRenderQueues_void(this.nativeObject.pointer, "firePreRenderQueues_void_callback");
			this.register_firePostRenderQueues_void(this.nativeObject.pointer, "firePostRenderQueues_void_callback");
			this.register_fireRenderQueueStarted_ev_uint8_EVString(this.nativeObject.pointer, "fireRenderQueueStarted_ev_uint8_EVString_callback");
			this.register_fireRenderQueueEnded_ev_uint8_EVString(this.nativeObject.pointer, "fireRenderQueueEnded_ev_uint8_EVString_callback");
			this.register_fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(this.nativeObject.pointer, "fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback");
			this.register_fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(this.nativeObject.pointer, "fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback");
			this.register_fireShadowTexturesUpdated_ev_size_t(this.nativeObject.pointer, "fireShadowTexturesUpdated_ev_size_t_callback");
			this.register_fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t(this.nativeObject.pointer, "fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_callback");
			this.register_fireShadowTexturesPreReceiver_CLight_CFrustum(this.nativeObject.pointer, "fireShadowTexturesPreReceiver_CLight_CFrustum_callback");
			this.register_firePreUpdateSceneGraph_CCamera(this.nativeObject.pointer, "firePreUpdateSceneGraph_CCamera_callback");
			this.register_firePostUpdateSceneGraph_CCamera(this.nativeObject.pointer, "firePostUpdateSceneGraph_CCamera_callback");
			this.register_firePreFindVisibleObjects_CViewport(this.nativeObject.pointer, "firePreFindVisibleObjects_CViewport_callback");
			this.register_firePostFindVisibleObjects_CViewport(this.nativeObject.pointer, "firePostFindVisibleObjects_CViewport_callback");
			this.register_fireSceneManagerDestroyed_void(this.nativeObject.pointer, "fireSceneManagerDestroyed_void_callback");
			this.register_setViewport_CViewport(this.nativeObject.pointer, "setViewport_CViewport_callback");
			this.register_renderVisibleObjectsDefaultSequence_void(this.nativeObject.pointer, "renderVisibleObjectsDefaultSequence_void_callback");
			this.register_renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence(this.nativeObject.pointer, "renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_callback");
			this.register_prepareRenderQueue_void(this.nativeObject.pointer, "prepareRenderQueue_void_callback");
			this.register_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList(this.nativeObject.pointer, "renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_callback");
			this.register_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool(this.nativeObject.pointer, "renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_callback");
			this.register_createAutoParamDataSource_void(this.nativeObject.pointer, "createAutoParamDataSource_void_callback");
			this.register_findLightsAffectingFrustum_CCamera(this.nativeObject.pointer, "findLightsAffectingFrustum_CCamera_callback");
			this.register_initShadowVolumeMaterials_void(this.nativeObject.pointer, "initShadowVolumeMaterials_void_callback");
			this.register_ensureShadowTexturesCreated_void(this.nativeObject.pointer, "ensureShadowTexturesCreated_void_callback");
			this.register_destroyShadowTextures_void(this.nativeObject.pointer, "destroyShadowTextures_void_callback");
			this.register_prepareShadowTextures_CCamera_CViewport_LightList(this.nativeObject.pointer, "prepareShadowTextures_CCamera_CViewport_LightList_callback");
			this.register_prepareShadowTextures_CCamera_CViewport(this.nativeObject.pointer, "prepareShadowTextures_CCamera_CViewport_callback");
			this.register_setImageDefaultMaterial_CMaterialPtr(this.nativeObject.pointer, "setImageDefaultMaterial_CMaterialPtr_callback");
			this.register_setImageUseDefaultMaterial_ev_bool(this.nativeObject.pointer, "setImageUseDefaultMaterial_ev_bool_callback");
			this.register_getSunPosition_void(this.nativeObject.pointer, "getSunPosition_void_callback");
			this.register_setAtmosphereVisible_ev_bool(this.nativeObject.pointer, "setAtmosphereVisible_ev_bool_callback");
			this.register_storeAtmosphereVisibleState_void(this.nativeObject.pointer, "storeAtmosphereVisibleState_void_callback");
			this.register_restoreAtmosphereVisibleState_void(this.nativeObject.pointer, "restoreAtmosphereVisibleState_void_callback");
			this.register_setSunVisible_ev_bool(this.nativeObject.pointer, "setSunVisible_ev_bool_callback");
			this.register__pauseRendering_void(this.nativeObject.pointer, "_pauseRendering_void_callback");
			this.register__resumeRendering_RenderContext(this.nativeObject.pointer, "_resumeRendering_RenderContext_callback");
			this.register_renderShadowVolumesToStencil_CLight_CCamera_ev_bool(this.nativeObject.pointer, "renderShadowVolumesToStencil_CLight_CCamera_ev_bool_callback");
			this.register_setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool(this.nativeObject.pointer, "setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_callback");
			this.register_findShadowCastersForLight_CLight_CCamera(this.nativeObject.pointer, "findShadowCastersForLight_CLight_CCamera_callback");
			this.register_renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode(this.nativeObject.pointer, "renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
			this.register_renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode(this.nativeObject.pointer, "renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
			this.register_renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode(this.nativeObject.pointer, "renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
			this.register_renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode(this.nativeObject.pointer, "renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
			this.register_renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode(this.nativeObject.pointer, "renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
			this.register_renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode(this.nativeObject.pointer, "renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
			this.register_renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode(this.nativeObject.pointer, "renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
			this.register_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(this.nativeObject.pointer, "renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback");
			this.register_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(this.nativeObject.pointer, "renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback");
			this.register_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(this.nativeObject.pointer, "renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback");
			this.register_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(this.nativeObject.pointer, "renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback");
			this.register_updateRenderQueueSplitOptions_void(this.nativeObject.pointer, "updateRenderQueueSplitOptions_void_callback");
			this.register_updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool(this.nativeObject.pointer, "updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_callback");
			this.register_buildAndSetScissor_LightList_CCamera(this.nativeObject.pointer, "buildAndSetScissor_LightList_CCamera_callback");
			this.register_buildScissor_CLight_CCamera_RealRect(this.nativeObject.pointer, "buildScissor_CLight_CCamera_RealRect_callback");
			this.register_resetScissor_void(this.nativeObject.pointer, "resetScissor_void_callback");
			this.register_buildAndSetLightClip_LightList(this.nativeObject.pointer, "buildAndSetLightClip_LightList_callback");
			this.register_buildLightClip_CLight_PlaneList(this.nativeObject.pointer, "buildLightClip_CLight_PlaneList_callback");
			this.register_resetLightClip_void(this.nativeObject.pointer, "resetLightClip_void_callback");
			this.register_checkCachedLightClippingInfo_void(this.nativeObject.pointer, "checkCachedLightClippingInfo_void_callback");
			this.register_useLights_LightList_ev_uint16(this.nativeObject.pointer, "useLights_LightList_ev_uint16_callback");
			this.register_setViewMatrix_CMatrix4(this.nativeObject.pointer, "setViewMatrix_CMatrix4_callback");
			this.register_useLightsGpuProgram_CPass_LightList(this.nativeObject.pointer, "useLightsGpuProgram_CPass_LightList_callback");
			this.register_bindGpuProgram_CGpuProgram(this.nativeObject.pointer, "bindGpuProgram_CGpuProgram_callback");
			this.register_updateGpuProgramParameters_CPass(this.nativeObject.pointer, "updateGpuProgramParameters_CPass_callback");
			this.register_getTypeName_void(this.nativeObject.pointer, "getTypeName_void_callback");
			this.register_createCamera_EVString(this.nativeObject.pointer, "createCamera_EVString_callback");
			this.register_getCamera_EVString(this.nativeObject.pointer, "getCamera_EVString_callback");
			this.register_hasCamera_EVString(this.nativeObject.pointer, "hasCamera_EVString_callback");
			this.register_destroyCamera_CCamera(this.nativeObject.pointer, "destroyCamera_CCamera_callback");
			this.register_destroyCamera_EVString(this.nativeObject.pointer, "destroyCamera_EVString_callback");
			this.register_destroyAllCameras_void(this.nativeObject.pointer, "destroyAllCameras_void_callback");
			this.register_createLight_EVString(this.nativeObject.pointer, "createLight_EVString_callback");
			this.register_createLight_void(this.nativeObject.pointer, "createLight_void_callback");
			this.register_getLightCount_void(this.nativeObject.pointer, "getLightCount_void_callback");
			this.register_getLight_ev_uint16(this.nativeObject.pointer, "getLight_ev_uint16_callback");
			this.register_getLight_EVString(this.nativeObject.pointer, "getLight_EVString_callback");
			this.register_hasLight_EVString(this.nativeObject.pointer, "hasLight_EVString_callback");
			this.register_getLightClippingPlanes_CLight(this.nativeObject.pointer, "getLightClippingPlanes_CLight_callback");
			this.register_getLightScissorRect_CLight_CCamera(this.nativeObject.pointer, "getLightScissorRect_CLight_CCamera_callback");
			this.register_destroyLight_EVString(this.nativeObject.pointer, "destroyLight_EVString_callback");
			this.register_destroyLight_CLight(this.nativeObject.pointer, "destroyLight_CLight_callback");
			this.register_destroyAllLights_void(this.nativeObject.pointer, "destroyAllLights_void_callback");
			this.register_getSoftShadowTexName_void(this.nativeObject.pointer, "getSoftShadowTexName_void_callback");
			this.register_getShadowTexCam_void(this.nativeObject.pointer, "getShadowTexCam_void_callback");
			this.register_getSoftShadowProjMatrix_ev_uint16(this.nativeObject.pointer, "getSoftShadowProjMatrix_ev_uint16_callback");
			this.register_getCascadeEyeSpaceDepthArray_void(this.nativeObject.pointer, "getCascadeEyeSpaceDepthArray_void_callback");
			this.register_getSoftShadowNearClip_ev_uint8(this.nativeObject.pointer, "getSoftShadowNearClip_ev_uint8_callback");
			this.register_getSoftShadowFarClip_ev_uint8(this.nativeObject.pointer, "getSoftShadowFarClip_ev_uint8_callback");
			this.register_getIsUseSoftShadowFitToCascadesMode_void(this.nativeObject.pointer, "getIsUseSoftShadowFitToCascadesMode_void_callback");
			this.register_setIsUseSoftShadowFitToCascadesMode_bool(this.nativeObject.pointer, "setIsUseSoftShadowFitToCascadesMode_bool_callback");
			this.register_getCurrentClipIndex_void(this.nativeObject.pointer, "getCurrentClipIndex_void_callback");
			this.register_getIsUseSoftShadowTechnique_void(this.nativeObject.pointer, "getIsUseSoftShadowTechnique_void_callback");
			this.register_setIsUseSoftShadowTechnique_bool(this.nativeObject.pointer, "setIsUseSoftShadowTechnique_bool_callback");
			this.register_getCascadePartitionsPercent_void(this.nativeObject.pointer, "getCascadePartitionsPercent_void_callback");
			this.register_setCascadePartitionsPercent_float(this.nativeObject.pointer, "setCascadePartitionsPercent_float_callback");
			this.register_getCascadePartitionsDistance_ev_uint8(this.nativeObject.pointer, "getCascadePartitionsDistance_ev_uint8_callback");
			this.register_setCascadePartitionsDistance_ev_uint8_ev_uint8(this.nativeObject.pointer, "setCascadePartitionsDistance_ev_uint8_ev_uint8_callback");
			this.register_getSoftShadowOffsetFormat_void(this.nativeObject.pointer, "getSoftShadowOffsetFormat_void_callback");
			this.register_checkShadowCasterInFrustum_CCamera(this.nativeObject.pointer, "checkShadowCasterInFrustum_CCamera_callback");
			this.register_hasShadowCasterInFrustum_void(this.nativeObject.pointer, "hasShadowCasterInFrustum_void_callback");
			this.register_getSoftShadowLightBleedPower_void(this.nativeObject.pointer, "getSoftShadowLightBleedPower_void_callback");
			this.register_setSoftShadowLightBleedPower_Real(this.nativeObject.pointer, "setSoftShadowLightBleedPower_Real_callback");
			this.register_getSoftShadowDepthOffset_void(this.nativeObject.pointer, "getSoftShadowDepthOffset_void_callback");
			this.register_setSoftShadowDepthOffset_Real(this.nativeObject.pointer, "setSoftShadowDepthOffset_Real_callback");
			this.register_getSoftShadowNormalFactor_void(this.nativeObject.pointer, "getSoftShadowNormalFactor_void_callback");
			this.register_setSoftShadowNormalFactor_float(this.nativeObject.pointer, "setSoftShadowNormalFactor_float_callback");
			this.register__notifyLightsDirty_void(this.nativeObject.pointer, "_notifyLightsDirty_void_callback");
			this.register__getLightsAffectingFrustum_void(this.nativeObject.pointer, "_getLightsAffectingFrustum_void_callback");
			this.register__populateLightList_CVector3_Real_LightList_ev_uint32(this.nativeObject.pointer, "_populateLightList_CVector3_Real_LightList_ev_uint32_callback");
			this.register__populateLightList_CVector3_Real_LightList(this.nativeObject.pointer, "_populateLightList_CVector3_Real_LightList_callback");
			this.register_showImage_ev_bool(this.nativeObject.pointer, "showImage_ev_bool_callback");
			this.register_getImageVisible_void(this.nativeObject.pointer, "getImageVisible_void_callback");
			this.register_showOcean_ev_bool(this.nativeObject.pointer, "showOcean_ev_bool_callback");
			this.register_getOceanVisible_void(this.nativeObject.pointer, "getOceanVisible_void_callback");
			this.register__populateLightList_CSceneNode_Real_LightList_ev_uint32(this.nativeObject.pointer, "_populateLightList_CSceneNode_Real_LightList_ev_uint32_callback");
			this.register__populateLightList_CSceneNode_Real_LightList(this.nativeObject.pointer, "_populateLightList_CSceneNode_Real_LightList_callback");
			this.register_createSceneNode_void(this.nativeObject.pointer, "createSceneNode_void_callback");
			this.register_createSceneNode_EVString(this.nativeObject.pointer, "createSceneNode_EVString_callback");
			this.register_destroySceneNode_EVString(this.nativeObject.pointer, "destroySceneNode_EVString_callback");
			this.register_destroySceneNode_CSceneNode(this.nativeObject.pointer, "destroySceneNode_CSceneNode_callback");
			this.register_getRootSceneNode_void(this.nativeObject.pointer, "getRootSceneNode_void_callback");
			this.register_getSceneNode_EVString(this.nativeObject.pointer, "getSceneNode_EVString_callback");
			this.register_hasSceneNode_EVString(this.nativeObject.pointer, "hasSceneNode_EVString_callback");
			this.register_createEntity_EVString_EVString_IntVector_EVString(this.nativeObject.pointer, "createEntity_EVString_EVString_IntVector_EVString_callback");
			this.register_createEntity_EVString_EVString_EVString(this.nativeObject.pointer, "createEntity_EVString_EVString_EVString_callback");
			this.register_createEntity_EVString_EVString_IntVector(this.nativeObject.pointer, "createEntity_EVString_EVString_IntVector_callback");
			this.register_createEntity_EVString_EVString(this.nativeObject.pointer, "createEntity_EVString_EVString_callback");
			this.register_createEntity_EVString_CMeshPtr_IntVector(this.nativeObject.pointer, "createEntity_EVString_CMeshPtr_IntVector_callback");
			this.register_createEntity_EVString_CMeshPtr(this.nativeObject.pointer, "createEntity_EVString_CMeshPtr_callback");
			this.register_createEntity_CMeshPtr_IntVector(this.nativeObject.pointer, "createEntity_CMeshPtr_IntVector_callback");
			this.register_createEntity_CMeshPtr(this.nativeObject.pointer, "createEntity_CMeshPtr_callback");
			this.register_createEntity_EVString_IntVector(this.nativeObject.pointer, "createEntity_EVString_IntVector_callback");
			this.register_createEntity_EVString(this.nativeObject.pointer, "createEntity_EVString_callback");
			this.register_createEntity_EVString_PrefabType(this.nativeObject.pointer, "createEntity_EVString_PrefabType_callback");
			this.register_createEntity_PrefabType(this.nativeObject.pointer, "createEntity_PrefabType_callback");
			this.register_getEntity_EVString(this.nativeObject.pointer, "getEntity_EVString_callback");
			this.register_hasEntity_EVString(this.nativeObject.pointer, "hasEntity_EVString_callback");
			this.register_destroyEntity_CEntity(this.nativeObject.pointer, "destroyEntity_CEntity_callback");
			this.register_destroyEntity_EVString(this.nativeObject.pointer, "destroyEntity_EVString_callback");
			this.register_destroyAllEntities_void(this.nativeObject.pointer, "destroyAllEntities_void_callback");
			this.register_createManualObject_EVString(this.nativeObject.pointer, "createManualObject_EVString_callback");
			this.register_createManualObject_void(this.nativeObject.pointer, "createManualObject_void_callback");
			this.register_getManualObject_EVString(this.nativeObject.pointer, "getManualObject_EVString_callback");
			this.register_hasManualObject_EVString(this.nativeObject.pointer, "hasManualObject_EVString_callback");
			this.register_destroyManualObject_CManualObject(this.nativeObject.pointer, "destroyManualObject_CManualObject_callback");
			this.register_destroyManualObject_EVString(this.nativeObject.pointer, "destroyManualObject_EVString_callback");
			this.register_destroyAllManualObjects_void(this.nativeObject.pointer, "destroyAllManualObjects_void_callback");
			this.register_usingWebMercator_void(this.nativeObject.pointer, "usingWebMercator_void_callback");
			this.register_createBillboardChain_EVString(this.nativeObject.pointer, "createBillboardChain_EVString_callback");
			this.register_createBillboardChain_void(this.nativeObject.pointer, "createBillboardChain_void_callback");
			this.register_getBillboardChain_EVString(this.nativeObject.pointer, "getBillboardChain_EVString_callback");
			this.register_hasBillboardChain_EVString(this.nativeObject.pointer, "hasBillboardChain_EVString_callback");
			this.register_destroyBillboardChain_CBillboardChain(this.nativeObject.pointer, "destroyBillboardChain_CBillboardChain_callback");
			this.register_destroyBillboardChain_EVString(this.nativeObject.pointer, "destroyBillboardChain_EVString_callback");
			this.register_destroyAllBillboardChains_void(this.nativeObject.pointer, "destroyAllBillboardChains_void_callback");
			this.register_createRibbonTrail_EVString(this.nativeObject.pointer, "createRibbonTrail_EVString_callback");
			this.register_createRibbonTrail_void(this.nativeObject.pointer, "createRibbonTrail_void_callback");
			this.register_getRibbonTrail_EVString(this.nativeObject.pointer, "getRibbonTrail_EVString_callback");
			this.register_hasRibbonTrail_EVString(this.nativeObject.pointer, "hasRibbonTrail_EVString_callback");
			this.register_destroyRibbonTrail_CRibbonTrail(this.nativeObject.pointer, "destroyRibbonTrail_CRibbonTrail_callback");
			this.register_destroyRibbonTrail_EVString(this.nativeObject.pointer, "destroyRibbonTrail_EVString_callback");
			this.register_destroyAllRibbonTrails_void(this.nativeObject.pointer, "destroyAllRibbonTrails_void_callback");
			this.register_createParticleSystem_EVString_EVString(this.nativeObject.pointer, "createParticleSystem_EVString_EVString_callback");
			this.register_createParticleSystem_EVString_ev_size_t_EVString(this.nativeObject.pointer, "createParticleSystem_EVString_ev_size_t_EVString_callback");
			this.register_createParticleSystem_EVString_ev_size_t(this.nativeObject.pointer, "createParticleSystem_EVString_ev_size_t_callback");
			this.register_createParticleSystem_EVString(this.nativeObject.pointer, "createParticleSystem_EVString_callback");
			this.register_createParticleSystem_ev_size_t_EVString(this.nativeObject.pointer, "createParticleSystem_ev_size_t_EVString_callback");
			this.register_createParticleSystem_ev_size_t(this.nativeObject.pointer, "createParticleSystem_ev_size_t_callback");
			this.register_createParticleSystem_void(this.nativeObject.pointer, "createParticleSystem_void_callback");
			this.register_getParticleSystem_EVString(this.nativeObject.pointer, "getParticleSystem_EVString_callback");
			this.register_hasParticleSystem_EVString(this.nativeObject.pointer, "hasParticleSystem_EVString_callback");
			this.register_destroyParticleSystem_CParticleSystem(this.nativeObject.pointer, "destroyParticleSystem_CParticleSystem_callback");
			this.register_destroyParticleSystem_EVString(this.nativeObject.pointer, "destroyParticleSystem_EVString_callback");
			this.register_destroyAllParticleSystems_void(this.nativeObject.pointer, "destroyAllParticleSystems_void_callback");
			this.register_clearScene_void(this.nativeObject.pointer, "clearScene_void_callback");
			this.register_prepareWorldGeometry_EVString(this.nativeObject.pointer, "prepareWorldGeometry_EVString_callback");
			this.register_prepareWorldGeometry_DataStreamPtr_EVString(this.nativeObject.pointer, "prepareWorldGeometry_DataStreamPtr_EVString_callback");
			this.register_prepareWorldGeometry_DataStreamPtr(this.nativeObject.pointer, "prepareWorldGeometry_DataStreamPtr_callback");
			this.register_setWorldGeometry_EVString(this.nativeObject.pointer, "setWorldGeometry_EVString_callback");
			this.register_setWorldGeometry_DataStreamPtr_EVString(this.nativeObject.pointer, "setWorldGeometry_DataStreamPtr_EVString_callback");
			this.register_setWorldGeometry_DataStreamPtr(this.nativeObject.pointer, "setWorldGeometry_DataStreamPtr_callback");
			this.register_estimateWorldGeometry_EVString(this.nativeObject.pointer, "estimateWorldGeometry_EVString_callback");
			this.register_estimateWorldGeometry_DataStreamPtr_EVString(this.nativeObject.pointer, "estimateWorldGeometry_DataStreamPtr_EVString_callback");
			this.register_estimateWorldGeometry_DataStreamPtr(this.nativeObject.pointer, "estimateWorldGeometry_DataStreamPtr_callback");
			this.register_getSuggestedViewpoint_ev_bool(this.nativeObject.pointer, "getSuggestedViewpoint_ev_bool_callback");
			this.register_getSuggestedViewpoint_void(this.nativeObject.pointer, "getSuggestedViewpoint_void_callback");
			this.register_setOption_EVString_void(this.nativeObject.pointer, "setOption_EVString_void_callback");
			this.register_getOption_EVString_void(this.nativeObject.pointer, "getOption_EVString_void_callback");
			this.register_hasOption_EVString(this.nativeObject.pointer, "hasOption_EVString_callback");
			this.register_getOptionValues_EVString_StringVector(this.nativeObject.pointer, "getOptionValues_EVString_StringVector_callback");
			this.register_getOptionKeys_StringVector(this.nativeObject.pointer, "getOptionKeys_StringVector_callback");
			this.register__updateSceneGraph_CCamera(this.nativeObject.pointer, "_updateSceneGraph_CCamera_callback");
			this.register__findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool(this.nativeObject.pointer, "_findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_callback");
			this.register__applySceneAnimations_void(this.nativeObject.pointer, "_applySceneAnimations_void_callback");
			this.register__renderVisibleObjects_void(this.nativeObject.pointer, "_renderVisibleObjects_void_callback");
			this.register__renderScene_CCamera_CViewport_ev_bool(this.nativeObject.pointer, "_renderScene_CCamera_CViewport_ev_bool_callback");
			this.register__queueSkiesForRendering_CCamera(this.nativeObject.pointer, "_queueSkiesForRendering_CCamera_callback");
			this.register__setDestinationRenderSystem_CRenderSystem(this.nativeObject.pointer, "_setDestinationRenderSystem_CRenderSystem_callback");
			this.register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString(this.nativeObject.pointer, "setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_callback");
			this.register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32(this.nativeObject.pointer, "setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_callback");
			this.register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32(this.nativeObject.pointer, "setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_callback");
			this.register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real(this.nativeObject.pointer, "setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_callback");
			this.register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool(this.nativeObject.pointer, "setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_callback");
			this.register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real(this.nativeObject.pointer, "setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback");
			this.register_setSkyPlane_ev_bool_CPlane_EVString_Real(this.nativeObject.pointer, "setSkyPlane_ev_bool_CPlane_EVString_Real_callback");
			this.register_setSkyPlane_ev_bool_CPlane_EVString(this.nativeObject.pointer, "setSkyPlane_ev_bool_CPlane_EVString_callback");
			this.register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString(this.nativeObject.pointer, "_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_callback");
			this.register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32(this.nativeObject.pointer, "_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_callback");
			this.register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32(this.nativeObject.pointer, "_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_callback");
			this.register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real(this.nativeObject.pointer, "_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_callback");
			this.register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8(this.nativeObject.pointer, "_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_callback");
			this.register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real(this.nativeObject.pointer, "_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback");
			this.register__setSkyPlane_ev_bool_CPlane_EVString_Real(this.nativeObject.pointer, "_setSkyPlane_ev_bool_CPlane_EVString_Real_callback");
			this.register__setSkyPlane_ev_bool_CPlane_EVString(this.nativeObject.pointer, "_setSkyPlane_ev_bool_CPlane_EVString_callback");
			this.register_setSkyPlaneEnabled_ev_bool(this.nativeObject.pointer, "setSkyPlaneEnabled_ev_bool_callback");
			this.register_isSkyPlaneEnabled_void(this.nativeObject.pointer, "isSkyPlaneEnabled_void_callback");
			this.register_getSkyPlaneNode_void(this.nativeObject.pointer, "getSkyPlaneNode_void_callback");
			this.register_getSkyPlaneGenParameters_void(this.nativeObject.pointer, "getSkyPlaneGenParameters_void_callback");
			this.register_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString(this.nativeObject.pointer, "setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_callback");
			this.register_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion(this.nativeObject.pointer, "setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_callback");
			this.register_setSkyBox_ev_bool_EVString_Real_ev_bool(this.nativeObject.pointer, "setSkyBox_ev_bool_EVString_Real_ev_bool_callback");
			this.register_setSkyBox_ev_bool_EVString_Real(this.nativeObject.pointer, "setSkyBox_ev_bool_EVString_Real_callback");
			this.register_setSkyBox_ev_bool_EVString(this.nativeObject.pointer, "setSkyBox_ev_bool_EVString_callback");
			this.register__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString(this.nativeObject.pointer, "_setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_callback");
			this.register__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion(this.nativeObject.pointer, "_setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_callback");
			this.register__setSkyBox_ev_bool_EVString_Real_ev_uint8(this.nativeObject.pointer, "_setSkyBox_ev_bool_EVString_Real_ev_uint8_callback");
			this.register__setSkyBox_ev_bool_EVString_Real(this.nativeObject.pointer, "_setSkyBox_ev_bool_EVString_Real_callback");
			this.register__setSkyBox_ev_bool_EVString(this.nativeObject.pointer, "_setSkyBox_ev_bool_EVString_callback");
			this.register_setSkyBoxEnabled_ev_bool(this.nativeObject.pointer, "setSkyBoxEnabled_ev_bool_callback");
			this.register_isSkyBoxEnabled_void(this.nativeObject.pointer, "isSkyBoxEnabled_void_callback");
			this.register_getSkyBoxNode_void(this.nativeObject.pointer, "getSkyBoxNode_void_callback");
			this.register_getSkyBoxGenParameters_void(this.nativeObject.pointer, "getSkyBoxGenParameters_void_callback");
			this.register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(this.nativeObject.pointer, "setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback");
			this.register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32(this.nativeObject.pointer, "setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_callback");
			this.register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32(this.nativeObject.pointer, "setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_callback");
			this.register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32(this.nativeObject.pointer, "setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_callback");
			this.register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion(this.nativeObject.pointer, "setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_callback");
			this.register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool(this.nativeObject.pointer, "setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_callback");
			this.register_setSkyDome_ev_bool_EVString_Real_Real_Real(this.nativeObject.pointer, "setSkyDome_ev_bool_EVString_Real_Real_Real_callback");
			this.register_setSkyDome_ev_bool_EVString_Real_Real(this.nativeObject.pointer, "setSkyDome_ev_bool_EVString_Real_Real_callback");
			this.register_setSkyDome_ev_bool_EVString_Real(this.nativeObject.pointer, "setSkyDome_ev_bool_EVString_Real_callback");
			this.register_setSkyDome_ev_bool_EVString(this.nativeObject.pointer, "setSkyDome_ev_bool_EVString_callback");
			this.register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(this.nativeObject.pointer, "_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback");
			this.register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32(this.nativeObject.pointer, "_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_callback");
			this.register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32(this.nativeObject.pointer, "_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_callback");
			this.register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32(this.nativeObject.pointer, "_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_callback");
			this.register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion(this.nativeObject.pointer, "_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_callback");
			this.register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8(this.nativeObject.pointer, "_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_callback");
			this.register__setSkyDome_ev_bool_EVString_Real_Real_Real(this.nativeObject.pointer, "_setSkyDome_ev_bool_EVString_Real_Real_Real_callback");
			this.register__setSkyDome_ev_bool_EVString_Real_Real(this.nativeObject.pointer, "_setSkyDome_ev_bool_EVString_Real_Real_callback");
			this.register__setSkyDome_ev_bool_EVString_Real(this.nativeObject.pointer, "_setSkyDome_ev_bool_EVString_Real_callback");
			this.register__setSkyDome_ev_bool_EVString(this.nativeObject.pointer, "_setSkyDome_ev_bool_EVString_callback");
			this.register_setSkyDomeEnabled_ev_bool(this.nativeObject.pointer, "setSkyDomeEnabled_ev_bool_callback");
			this.register_isSkyDomeEnabled_void(this.nativeObject.pointer, "isSkyDomeEnabled_void_callback");
			this.register_getSkyDomeNode_void(this.nativeObject.pointer, "getSkyDomeNode_void_callback");
			this.register_getSkyDomeGenParameters_void(this.nativeObject.pointer, "getSkyDomeGenParameters_void_callback");
			this.register_getFogMode_void(this.nativeObject.pointer, "getFogMode_void_callback");
			this.register_getFogColour_void(this.nativeObject.pointer, "getFogColour_void_callback");
			this.register_getFogStart_void(this.nativeObject.pointer, "getFogStart_void_callback");
			this.register_getFogEnd_void(this.nativeObject.pointer, "getFogEnd_void_callback");
			this.register_getFogDensity_void(this.nativeObject.pointer, "getFogDensity_void_callback");
			this.register_createBillboardSet_EVString_ev_uint32(this.nativeObject.pointer, "createBillboardSet_EVString_ev_uint32_callback");
			this.register_createBillboardSet_EVString(this.nativeObject.pointer, "createBillboardSet_EVString_callback");
			this.register_createBillboardSet_ev_uint32(this.nativeObject.pointer, "createBillboardSet_ev_uint32_callback");
			this.register_createBillboardSet_void(this.nativeObject.pointer, "createBillboardSet_void_callback");
			this.register_getBillboardSet_EVString(this.nativeObject.pointer, "getBillboardSet_EVString_callback");
			this.register_hasBillboardSet_EVString(this.nativeObject.pointer, "hasBillboardSet_EVString_callback");
			this.register_destroyBillboardSet_CBillboardSet(this.nativeObject.pointer, "destroyBillboardSet_CBillboardSet_callback");
			this.register_destroyBillboardSet_EVString(this.nativeObject.pointer, "destroyBillboardSet_EVString_callback");
			this.register_destroyAllBillboardSets_void(this.nativeObject.pointer, "destroyAllBillboardSets_void_callback");
			this.register_setDisplaySceneNodes_ev_bool(this.nativeObject.pointer, "setDisplaySceneNodes_ev_bool_callback");
			this.register_getDisplaySceneNodes_void(this.nativeObject.pointer, "getDisplaySceneNodes_void_callback");
			this.register_createAnimation_EVString_Real(this.nativeObject.pointer, "createAnimation_EVString_Real_callback");
			this.register_getAnimation_EVString(this.nativeObject.pointer, "getAnimation_EVString_callback");
			this.register_hasAnimation_EVString(this.nativeObject.pointer, "hasAnimation_EVString_callback");
			this.register_destroyAnimation_EVString(this.nativeObject.pointer, "destroyAnimation_EVString_callback");
			this.register_destroyAllAnimations_void(this.nativeObject.pointer, "destroyAllAnimations_void_callback");
			this.register_createAnimationState_EVString(this.nativeObject.pointer, "createAnimationState_EVString_callback");
			this.register_getAnimationState_EVString(this.nativeObject.pointer, "getAnimationState_EVString_callback");
			this.register_hasAnimationState_EVString(this.nativeObject.pointer, "hasAnimationState_EVString_callback");
			this.register_destroyAnimationState_EVString(this.nativeObject.pointer, "destroyAnimationState_EVString_callback");
			this.register_destroyAllAnimationStates_void(this.nativeObject.pointer, "destroyAllAnimationStates_void_callback");
			this.register_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool(this.nativeObject.pointer, "manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_callback");
			this.register_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4(this.nativeObject.pointer, "manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_callback");
			this.register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList(this.nativeObject.pointer, "manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_callback");
			this.register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool(this.nativeObject.pointer, "manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_callback");
			this.register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool(this.nativeObject.pointer, "manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_callback");
			this.register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool(this.nativeObject.pointer, "manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_callback");
			this.register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4(this.nativeObject.pointer, "manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_callback");
			this.register_getRenderQueue_void(this.nativeObject.pointer, "getRenderQueue_void_callback");
			this.register_addRenderQueueListener_CRenderQueueListener(this.nativeObject.pointer, "addRenderQueueListener_CRenderQueueListener_callback");
			this.register_removeRenderQueueListener_CRenderQueueListener(this.nativeObject.pointer, "removeRenderQueueListener_CRenderQueueListener_callback");
			this.register_addRenderObjectListener_CRenderObjectListener(this.nativeObject.pointer, "addRenderObjectListener_CRenderObjectListener_callback");
			this.register_removeRenderObjectListener_CRenderObjectListener(this.nativeObject.pointer, "removeRenderObjectListener_CRenderObjectListener_callback");
			this.register_addSpecialCaseRenderQueue_ev_uint8(this.nativeObject.pointer, "addSpecialCaseRenderQueue_ev_uint8_callback");
			this.register_removeSpecialCaseRenderQueue_ev_uint8(this.nativeObject.pointer, "removeSpecialCaseRenderQueue_ev_uint8_callback");
			this.register_clearSpecialCaseRenderQueues_void(this.nativeObject.pointer, "clearSpecialCaseRenderQueues_void_callback");
			this.register_setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode(this.nativeObject.pointer, "setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_callback");
			this.register_getSpecialCaseRenderQueueMode_void(this.nativeObject.pointer, "getSpecialCaseRenderQueueMode_void_callback");
			this.register_isRenderQueueToBeProcessed_ev_uint8(this.nativeObject.pointer, "isRenderQueueToBeProcessed_ev_uint8_callback");
			this.register_setWorldGeometryRenderQueue_ev_uint8(this.nativeObject.pointer, "setWorldGeometryRenderQueue_ev_uint8_callback");
			this.register_getWorldGeometryRenderQueue_void(this.nativeObject.pointer, "getWorldGeometryRenderQueue_void_callback");
			this.register_showBoundingBoxes_ev_bool(this.nativeObject.pointer, "showBoundingBoxes_ev_bool_callback");
			this.register_getShowBoundingBoxes_void(this.nativeObject.pointer, "getShowBoundingBoxes_void_callback");
			this.register__notifyAutotrackingSceneNode_CSceneNode_ev_bool(this.nativeObject.pointer, "_notifyAutotrackingSceneNode_CSceneNode_ev_bool_callback");
			this.register_createAABBQuery_CAxisAlignedBox_ev_uint32(this.nativeObject.pointer, "createAABBQuery_CAxisAlignedBox_ev_uint32_callback");
			this.register_createAABBQuery_CAxisAlignedBox(this.nativeObject.pointer, "createAABBQuery_CAxisAlignedBox_callback");
			this.register_createSphereQuery_CSphere_ev_uint32(this.nativeObject.pointer, "createSphereQuery_CSphere_ev_uint32_callback");
			this.register_createSphereQuery_CSphere(this.nativeObject.pointer, "createSphereQuery_CSphere_callback");
			this.register_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32(this.nativeObject.pointer, "createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_callback");
			this.register_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList(this.nativeObject.pointer, "createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_callback");
			this.register_createRayQuery_CRay_ev_uint32(this.nativeObject.pointer, "createRayQuery_CRay_ev_uint32_callback");
			this.register_createRayQuery_CRay(this.nativeObject.pointer, "createRayQuery_CRay_callback");
			this.register_createIntersectionQuery_ev_uint32(this.nativeObject.pointer, "createIntersectionQuery_ev_uint32_callback");
			this.register_createIntersectionQuery_void(this.nativeObject.pointer, "createIntersectionQuery_void_callback");
			this.register_destroyQuery_CSceneQuery(this.nativeObject.pointer, "destroyQuery_CSceneQuery_callback");
			this.register_setShadowTechnique_ShadowTechnique(this.nativeObject.pointer, "setShadowTechnique_ShadowTechnique_callback");
			this.register_getShadowTechnique_void(this.nativeObject.pointer, "getShadowTechnique_void_callback");
			this.register_setShowDebugShadows_ev_bool(this.nativeObject.pointer, "setShowDebugShadows_ev_bool_callback");
			this.register_getShowDebugShadows_void(this.nativeObject.pointer, "getShowDebugShadows_void_callback");
			this.register_setShadowColour_CColourValue(this.nativeObject.pointer, "setShadowColour_CColourValue_callback");
			this.register_getShadowColour_void(this.nativeObject.pointer, "getShadowColour_void_callback");
			this.register_setShadowDirectionalLightExtrusionDistance_Real(this.nativeObject.pointer, "setShadowDirectionalLightExtrusionDistance_Real_callback");
			this.register_getShadowDirectionalLightExtrusionDistance_void(this.nativeObject.pointer, "getShadowDirectionalLightExtrusionDistance_void_callback");
			this.register_setShadowColorRRatio_Real(this.nativeObject.pointer, "setShadowColorRRatio_Real_callback");
			this.register_setShadowColorGRatio_Real(this.nativeObject.pointer, "setShadowColorGRatio_Real_callback");
			this.register_setShadowColorBRatio_Real(this.nativeObject.pointer, "setShadowColorBRatio_Real_callback");
			this.register_getShadowColorRRatio_void(this.nativeObject.pointer, "getShadowColorRRatio_void_callback");
			this.register_getShadowColorGRatio_void(this.nativeObject.pointer, "getShadowColorGRatio_void_callback");
			this.register_getShadowColorBRatio_void(this.nativeObject.pointer, "getShadowColorBRatio_void_callback");
			this.register_setShadowFarDistance_Real(this.nativeObject.pointer, "setShadowFarDistance_Real_callback");
			this.register_getShadowFarDistance_void(this.nativeObject.pointer, "getShadowFarDistance_void_callback");
			this.register_getShadowFarDistanceSquared_void(this.nativeObject.pointer, "getShadowFarDistanceSquared_void_callback");
			this.register_setShadowIndexBufferSize_ev_size_t(this.nativeObject.pointer, "setShadowIndexBufferSize_ev_size_t_callback");
			this.register_getShadowIndexBufferSize_void(this.nativeObject.pointer, "getShadowIndexBufferSize_void_callback");
			this.register_setShadowTextureSize_ev_uint16(this.nativeObject.pointer, "setShadowTextureSize_ev_uint16_callback");
			this.register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat(this.nativeObject.pointer, "setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_callback");
			this.register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16(this.nativeObject.pointer, "setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback");
			this.register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(this.nativeObject.pointer, "setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback");
			this.register_setShadowTextureConfig_ev_size_t_ShadowTextureConfig(this.nativeObject.pointer, "setShadowTextureConfig_ev_size_t_ShadowTextureConfig_callback");
			this.register_setShadowTexturePixelFormat_PixelFormat(this.nativeObject.pointer, "setShadowTexturePixelFormat_PixelFormat_callback");
			this.register_setShadowTextureFSAA_ev_uint16(this.nativeObject.pointer, "setShadowTextureFSAA_ev_uint16_callback");
			this.register_setShadowTextureCount_ev_size_t(this.nativeObject.pointer, "setShadowTextureCount_ev_size_t_callback");
			this.register_setShadowTextureSettings_ev_uint16_ev_uint16(this.nativeObject.pointer, "setShadowTextureSettings_ev_uint16_ev_uint16_callback");
			this.register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat(this.nativeObject.pointer, "setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_callback");
			this.register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16(this.nativeObject.pointer, "setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback");
			this.register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(this.nativeObject.pointer, "setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback");
			this.register_getShadowTexture_ev_size_t(this.nativeObject.pointer, "getShadowTexture_ev_size_t_callback");
			this.register_setShadowDirLightTextureOffset_Real(this.nativeObject.pointer, "setShadowDirLightTextureOffset_Real_callback");
			this.register_getShadowDirLightTextureOffset_void(this.nativeObject.pointer, "getShadowDirLightTextureOffset_void_callback");
			this.register_setShadowTextureFadeStart_Real(this.nativeObject.pointer, "setShadowTextureFadeStart_Real_callback");
			this.register_setShadowTextureFadeEnd_Real(this.nativeObject.pointer, "setShadowTextureFadeEnd_Real_callback");
			this.register_setShadowTextureSelfShadow_ev_bool(this.nativeObject.pointer, "setShadowTextureSelfShadow_ev_bool_callback");
			this.register_getShadowTextureSelfShadow_void(this.nativeObject.pointer, "getShadowTextureSelfShadow_void_callback");
			this.register_setShadowTextureCasterMaterial_EVString(this.nativeObject.pointer, "setShadowTextureCasterMaterial_EVString_callback");
			this.register_setShadowTextureReceiverMaterial_EVString(this.nativeObject.pointer, "setShadowTextureReceiverMaterial_EVString_callback");
			this.register_setShadowCasterRenderBackFaces_ev_bool(this.nativeObject.pointer, "setShadowCasterRenderBackFaces_ev_bool_callback");
			this.register_getShadowCasterRenderBackFaces_void(this.nativeObject.pointer, "getShadowCasterRenderBackFaces_void_callback");
			this.register_setShadowCameraSetup_ShadowCameraSetupPtr(this.nativeObject.pointer, "setShadowCameraSetup_ShadowCameraSetupPtr_callback");
			this.register_getShadowCameraSetup_void(this.nativeObject.pointer, "getShadowCameraSetup_void_callback");
			this.register_setShadowUseInfiniteFarPlane_ev_bool(this.nativeObject.pointer, "setShadowUseInfiniteFarPlane_ev_bool_callback");
			this.register_isShadowTechniqueStencilBased_void(this.nativeObject.pointer, "isShadowTechniqueStencilBased_void_callback");
			this.register_isShadowTechniqueTextureBased_void(this.nativeObject.pointer, "isShadowTechniqueTextureBased_void_callback");
			this.register_isShadowTechniqueModulative_void(this.nativeObject.pointer, "isShadowTechniqueModulative_void_callback");
			this.register_isShadowTechniqueAdditive_void(this.nativeObject.pointer, "isShadowTechniqueAdditive_void_callback");
			this.register_isShadowTechniqueIntegrated_void(this.nativeObject.pointer, "isShadowTechniqueIntegrated_void_callback");
			this.register_isShadowTechniqueInUse_void(this.nativeObject.pointer, "isShadowTechniqueInUse_void_callback");
			this.register_setShadowUseLightClipPlanes_ev_bool(this.nativeObject.pointer, "setShadowUseLightClipPlanes_ev_bool_callback");
			this.register_getShadowUseLightClipPlanes_void(this.nativeObject.pointer, "getShadowUseLightClipPlanes_void_callback");
			this.register__setActiveCompositorChain_CCompositorChain(this.nativeObject.pointer, "_setActiveCompositorChain_CCompositorChain_callback");
			this.register_setLateMaterialResolving_ev_bool(this.nativeObject.pointer, "setLateMaterialResolving_ev_bool_callback");
			this.register_isLateMaterialResolving_void(this.nativeObject.pointer, "isLateMaterialResolving_void_callback");
			this.register__getActiveCompositorChain_void(this.nativeObject.pointer, "_getActiveCompositorChain_void_callback");
			this.register_addListener_CSceneManagerListener(this.nativeObject.pointer, "addListener_CSceneManagerListener_callback");
			this.register_removeListener_CSceneManagerListener(this.nativeObject.pointer, "removeListener_CSceneManagerListener_callback");
			this.register_existListener_CSceneManagerListener(this.nativeObject.pointer, "existListener_CSceneManagerListener_callback");
			this.register_createStaticGeometry_EVString(this.nativeObject.pointer, "createStaticGeometry_EVString_callback");
			this.register_getStaticGeometry_EVString(this.nativeObject.pointer, "getStaticGeometry_EVString_callback");
			this.register_hasStaticGeometry_EVString(this.nativeObject.pointer, "hasStaticGeometry_EVString_callback");
			this.register_destroyStaticGeometry_CStaticGeometry(this.nativeObject.pointer, "destroyStaticGeometry_CStaticGeometry_callback");
			this.register_destroyStaticGeometry_EVString(this.nativeObject.pointer, "destroyStaticGeometry_EVString_callback");
			this.register_destroyAllStaticGeometry_void(this.nativeObject.pointer, "destroyAllStaticGeometry_void_callback");
			this.register_createInstancedGeometry_EVString(this.nativeObject.pointer, "createInstancedGeometry_EVString_callback");
			this.register_getInstancedGeometry_EVString(this.nativeObject.pointer, "getInstancedGeometry_EVString_callback");
			this.register_destroyInstancedGeometry_CInstancedGeometry(this.nativeObject.pointer, "destroyInstancedGeometry_CInstancedGeometry_callback");
			this.register_destroyInstancedGeometry_EVString(this.nativeObject.pointer, "destroyInstancedGeometry_EVString_callback");
			this.register_destroyAllInstancedGeometry_void(this.nativeObject.pointer, "destroyAllInstancedGeometry_void_callback");
			this.register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(this.nativeObject.pointer, "createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback");
			this.register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(this.nativeObject.pointer, "createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback");
			this.register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t(this.nativeObject.pointer, "createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback");
			this.register_getInstanceManager_EVString(this.nativeObject.pointer, "getInstanceManager_EVString_callback");
			this.register_hasInstanceManager_EVString(this.nativeObject.pointer, "hasInstanceManager_EVString_callback");
			this.register_destroyInstanceManager_EVString(this.nativeObject.pointer, "destroyInstanceManager_EVString_callback");
			this.register_destroyInstanceManager_CInstanceManager(this.nativeObject.pointer, "destroyInstanceManager_CInstanceManager_callback");
			this.register_destroyInstanceManagerWithThreadSafe_EVString(this.nativeObject.pointer, "destroyInstanceManagerWithThreadSafe_EVString_callback");
			this.register_destroyInstanceManagerWithThreadSafe_CInstanceManager(this.nativeObject.pointer, "destroyInstanceManagerWithThreadSafe_CInstanceManager_callback");
			this.register_destroyAllInstanceManagers_void(this.nativeObject.pointer, "destroyAllInstanceManagers_void_callback");
			this.register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t(this.nativeObject.pointer, "getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback");
			this.register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(this.nativeObject.pointer, "getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback");
			this.register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(this.nativeObject.pointer, "getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback");
			this.register_createInstancedEntity_EVString_EVString(this.nativeObject.pointer, "createInstancedEntity_EVString_EVString_callback");
			this.register_destroyInstancedEntity_CInstancedEntity(this.nativeObject.pointer, "destroyInstancedEntity_CInstancedEntity_callback");
			this.register_createMovableObject_EVString_EVString_CommonStringPairList(this.nativeObject.pointer, "createMovableObject_EVString_EVString_CommonStringPairList_callback");
			this.register_createMovableObject_EVString_EVString(this.nativeObject.pointer, "createMovableObject_EVString_EVString_callback");
			this.register_createMovableObject_EVString_CommonStringPairList(this.nativeObject.pointer, "createMovableObject_EVString_CommonStringPairList_callback");
			this.register_createMovableObject_EVString(this.nativeObject.pointer, "createMovableObject_EVString_callback");
			this.register_destroyMovableObject_EVString_EVString(this.nativeObject.pointer, "destroyMovableObject_EVString_EVString_callback");
			this.register_destroyMovableObject_CMovableObject(this.nativeObject.pointer, "destroyMovableObject_CMovableObject_callback");
			this.register_destroyAllMovableObjectsByType_EVString(this.nativeObject.pointer, "destroyAllMovableObjectsByType_EVString_callback");
			this.register_destroyAllMovableObjects_void(this.nativeObject.pointer, "destroyAllMovableObjects_void_callback");
			this.register_getMovableObject_EVString_EVString(this.nativeObject.pointer, "getMovableObject_EVString_EVString_callback");
			this.register_hasMovableObject_EVString_EVString(this.nativeObject.pointer, "hasMovableObject_EVString_EVString_callback");
			this.register_getMovableObjectIterator_EVString(this.nativeObject.pointer, "getMovableObjectIterator_EVString_callback");
			this.register_injectMovableObject_CMovableObject(this.nativeObject.pointer, "injectMovableObject_CMovableObject_callback");
			this.register_extractMovableObject_EVString_EVString(this.nativeObject.pointer, "extractMovableObject_EVString_EVString_callback");
			this.register_extractMovableObject_CMovableObject(this.nativeObject.pointer, "extractMovableObject_CMovableObject_callback");
			this.register_extractAllMovableObjectsByType_EVString(this.nativeObject.pointer, "extractAllMovableObjectsByType_EVString_callback");
			this.register_setVisibilityMask_ev_uint32(this.nativeObject.pointer, "setVisibilityMask_ev_uint32_callback");
			this.register_getVisibilityMask_void(this.nativeObject.pointer, "getVisibilityMask_void_callback");
			this.register_setFindVisibleObjects_ev_bool(this.nativeObject.pointer, "setFindVisibleObjects_ev_bool_callback");
			this.register_getFindVisibleObjects_void(this.nativeObject.pointer, "getFindVisibleObjects_void_callback");
			this.register_setNormaliseNormalsOnScale_ev_bool(this.nativeObject.pointer, "setNormaliseNormalsOnScale_ev_bool_callback");
			this.register_getNormaliseNormalsOnScale_void(this.nativeObject.pointer, "getNormaliseNormalsOnScale_void_callback");
			this.register_setFlipCullingOnNegativeScale_ev_bool(this.nativeObject.pointer, "setFlipCullingOnNegativeScale_ev_bool_callback");
			this.register_getFlipCullingOnNegativeScale_void(this.nativeObject.pointer, "getFlipCullingOnNegativeScale_void_callback");
			this.register__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList(this.nativeObject.pointer, "_injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_callback");
			this.register__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool(this.nativeObject.pointer, "_injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_callback");
			this.register__injectRenderWithPass_CPass_CRenderable_ev_bool(this.nativeObject.pointer, "_injectRenderWithPass_CPass_CRenderable_ev_bool_callback");
			this.register__injectRenderWithPass_CPass_CRenderable(this.nativeObject.pointer, "_injectRenderWithPass_CPass_CRenderable_callback");
			this.register__suppressRenderStateChanges_ev_bool(this.nativeObject.pointer, "_suppressRenderStateChanges_ev_bool_callback");
			this.register__areRenderStateChangesSuppressed_void(this.nativeObject.pointer, "_areRenderStateChangesSuppressed_void_callback");
			this.register__setPass_CPass_ev_bool_ev_bool(this.nativeObject.pointer, "_setPass_CPass_ev_bool_ev_bool_callback");
			this.register__setPass_CPass_ev_bool(this.nativeObject.pointer, "_setPass_CPass_ev_bool_callback");
			this.register__setPass_CPass(this.nativeObject.pointer, "_setPass_CPass_callback");
			this.register__markGpuParamsDirty_ev_uint16(this.nativeObject.pointer, "_markGpuParamsDirty_ev_uint16_callback");
			this.register__suppressShadows_ev_bool(this.nativeObject.pointer, "_suppressShadows_ev_bool_callback");
			this.register__areShadowsSuppressed_void(this.nativeObject.pointer, "_areShadowsSuppressed_void_callback");
			this.register__renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode(this.nativeObject.pointer, "_renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
			this.register_setCameraRelativeRendering_ev_bool(this.nativeObject.pointer, "setCameraRelativeRendering_ev_bool_callback");
			this.register_getCameraRelativeRendering_void(this.nativeObject.pointer, "getCameraRelativeRendering_void_callback");
			this.register_getHeightAt_Real_Real_ev_real32(this.nativeObject.pointer, "getHeightAt_Real_Real_ev_real32_callback");
			this.register_getBestHeightAt_Real_Real(this.nativeObject.pointer, "getBestHeightAt_Real_Real_callback");
			this.register_getHeightAtTile_Real_Real(this.nativeObject.pointer, "getHeightAtTile_Real_Real_callback");
			this.register_getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real(this.nativeObject.pointer, "getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_callback");
			this.register_addTempLayer_ILayer(this.nativeObject.pointer, "addTempLayer_ILayer_callback");
			this.register_removeTempLayer_ILayer(this.nativeObject.pointer, "removeTempLayer_ILayer_callback");
			this.register_updateQuadImage_bool_bool_bool(this.nativeObject.pointer, "updateQuadImage_bool_bool_bool_callback");
			this.register_updateQuadImage_bool_bool_bool_Real_Real_Real_Real(this.nativeObject.pointer, "updateQuadImage_bool_bool_bool_Real_Real_Real_Real_callback");
			this.register_updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool(this.nativeObject.pointer, "updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_callback");
			this.register_setCollisionDetectionEnable_ev_bool(this.nativeObject.pointer, "setCollisionDetectionEnable_ev_bool_callback");
		}
	}
	
	public static SceneManager fromBaseObject(BaseObject baseObj)
	{
		if (baseObj == null || InstancePointer.ZERO.equals(baseObj.nativeObject))
		{
			return null;
		}
		SceneManager obj = null;
 		if(baseObj instanceof SceneManager)
		{
			obj = (SceneManager)baseObj;
		} else {
			obj = new SceneManager(CreatedWhenConstruct.CWC_NotToCreate);
			obj.bindNativeObject(baseObj.nativeObject, "CSceneManager");
			obj.increaseCast();
		}

		return obj;
	}
}
