/* This file is produced by the JNI AutoWrapper Utility 
 Copyright (c) 2012 by EarthView Image Inc */
#include "stableheaders.h"
#include "graphic/scenemanager.h"
#include <jni.h>
#include "core_java/global_reference.h"
#include "core_java/jni_load.h"
#include <typeinfo>
namespace EarthView
{
	namespace World
	{
		namespace Spatial
		{
			namespace Math
			{
			}
		}
	}
}
namespace EarthView
{
	namespace World
	{
		namespace Graphic
		{
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_ViewPoint_get_1position_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::ViewPoint *pObjectX = (EarthView::World::Graphic::ViewPoint*)pObjXXXX;
				jlong __values1_j = (jlong) &(pObjectX->position);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_ViewPoint_set_1position_1CVector3(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::ViewPoint *pObjectX = (EarthView::World::Graphic::ViewPoint*)pObjXXXX;
				pObjectX->position = *(EarthView::World::Spatial::Math::CVector3*) __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_ViewPoint_get_1orientation_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::ViewPoint *pObjectX = (EarthView::World::Graphic::ViewPoint*)pObjXXXX;
				jlong __values1_j = (jlong) &(pObjectX->orientation);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_ViewPoint_set_1orientation_1CQuaternion(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::ViewPoint *pObjectX = (EarthView::World::Graphic::ViewPoint*)pObjXXXX;
				pObjectX->orientation = *(EarthView::World::Spatial::Math::CQuaternion*) __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_VisibleObjectsBoundsInfo_get_1aabb_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *pObjectX = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*)pObjXXXX;
				jlong __values1_j = (jlong) &(pObjectX->aabb);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_VisibleObjectsBoundsInfo_set_1aabb_1CAxisAlignedBox(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *pObjectX = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*)pObjXXXX;
				pObjectX->aabb = *(EarthView::World::Spatial::Math::CAxisAlignedBox*) __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_VisibleObjectsBoundsInfo_get_1receiverAabb_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *pObjectX = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*)pObjXXXX;
				jlong __values1_j = (jlong) &(pObjectX->receiverAabb);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_VisibleObjectsBoundsInfo_set_1receiverAabb_1CAxisAlignedBox(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *pObjectX = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*)pObjXXXX;
				pObjectX->receiverAabb = *(EarthView::World::Spatial::Math::CAxisAlignedBox*) __values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_VisibleObjectsBoundsInfo_get_1minDistance_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *pObjectX = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*)pObjXXXX;
				jdouble __values1_j = (jdouble)(pObjectX->minDistance);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_VisibleObjectsBoundsInfo_set_1minDistance_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jdouble __values1_j)
			{
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *pObjectX = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*)pObjXXXX;
				pObjectX->minDistance = (Real)__values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_VisibleObjectsBoundsInfo_get_1maxDistance_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *pObjectX = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*)pObjXXXX;
				jdouble __values1_j = (jdouble)(pObjectX->maxDistance);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_VisibleObjectsBoundsInfo_set_1maxDistance_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jdouble __values1_j)
			{
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *pObjectX = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*)pObjXXXX;
				pObjectX->maxDistance = (Real)__values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_VisibleObjectsBoundsInfo_get_1minDistanceInFrustum_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *pObjectX = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*)pObjXXXX;
				jdouble __values1_j = (jdouble)(pObjectX->minDistanceInFrustum);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_VisibleObjectsBoundsInfo_set_1minDistanceInFrustum_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jdouble __values1_j)
			{
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *pObjectX = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*)pObjXXXX;
				pObjectX->minDistanceInFrustum = (Real)__values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_VisibleObjectsBoundsInfo_get_1maxDistanceInFrustum_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *pObjectX = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*)pObjXXXX;
				jdouble __values1_j = (jdouble)(pObjectX->maxDistanceInFrustum);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_VisibleObjectsBoundsInfo_set_1maxDistanceInFrustum_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jdouble __values1_j)
			{
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *pObjectX = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*)pObjXXXX;
				pObjectX->maxDistanceInFrustum = (Real)__values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_VisibleObjectsBoundsInfo_reset_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *pObjectX = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*) pObjXXXX;
				pObjectX->reset();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_VisibleObjectsBoundsInfo_merge_1CAxisAlignedBox_1CSphere_1CCamera_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong boxBounds_j, jlong sphereBounds_j, jlong cam_j, jboolean receiver_j)
			{
				const EarthView::World::Spatial::Math::CAxisAlignedBox &boxBounds = *(EarthView::World::Spatial::Math::CAxisAlignedBox*) boxBounds_j;
				const EarthView::World::Spatial::Math::CSphere &sphereBounds = *(EarthView::World::Spatial::Math::CSphere*) sphereBounds_j;
				const EarthView::World::Graphic::CCamera *cam = (const EarthView::World::Graphic::CCamera*) cam_j;
				ev_bool receiver = (ev_bool) receiver_j;
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *pObjectX = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*) pObjXXXX;
				pObjectX->merge(boxBounds, sphereBounds, cam, receiver);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_VisibleObjectsBoundsInfo_merge_1CAxisAlignedBox_1CSphere_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong boxBounds_j, jlong sphereBounds_j, jlong cam_j)
			{
				const EarthView::World::Spatial::Math::CAxisAlignedBox &boxBounds = *(EarthView::World::Spatial::Math::CAxisAlignedBox*) boxBounds_j;
				const EarthView::World::Spatial::Math::CSphere &sphereBounds = *(EarthView::World::Spatial::Math::CSphere*) sphereBounds_j;
				const EarthView::World::Graphic::CCamera *cam = (const EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *pObjectX = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*) pObjXXXX;
				pObjectX->merge(boxBounds, sphereBounds, cam);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_VisibleObjectsBoundsInfo_mergeNonRenderedButInFrustum_1CAxisAlignedBox_1CSphere_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong boxBounds_j, jlong sphereBounds_j, jlong cam_j)
			{
				const EarthView::World::Spatial::Math::CAxisAlignedBox &boxBounds = *(EarthView::World::Spatial::Math::CAxisAlignedBox*) boxBounds_j;
				const EarthView::World::Spatial::Math::CSphere &sphereBounds = *(EarthView::World::Spatial::Math::CSphere*) sphereBounds_j;
				const EarthView::World::Graphic::CCamera *cam = (const EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *pObjectX = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*) pObjXXXX;
				pObjectX->mergeNonRenderedButInFrustum(boxBounds, sphereBounds, cam);
			}
			class JCSceneManagerProxy : public EarthView::World::Graphic::CSceneManager
			{
			 private:
				EarthView::World::Core::ev_string m_createSceneNodeImpl_void_callback;
				EarthView::World::Core::ev_string m_createSceneNodeImpl_EVString_callback;
				EarthView::World::Core::ev_string m_initRenderQueue_void_callback;
				EarthView::World::Core::ev_string m_deriveShadowCasterPass_CPass_callback;
				EarthView::World::Core::ev_string m_deriveShadowReceiverPass_CPass_callback;
				EarthView::World::Core::ev_string m_validatePassForRendering_CPass_callback;
				EarthView::World::Core::ev_string m_validateRenderableForRendering_CPass_CRenderable_callback;
				EarthView::World::Core::ev_string m_createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_callback;
				EarthView::World::Core::ev_string m_createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback;
				EarthView::World::Core::ev_string m_useRenderableViewProjMode_CRenderable_ev_bool_callback;
				EarthView::World::Core::ev_string m_resetViewProjMode_ev_bool_callback;
				EarthView::World::Core::ev_string m_firePreRenderQueues_void_callback;
				EarthView::World::Core::ev_string m_firePostRenderQueues_void_callback;
				EarthView::World::Core::ev_string m_fireRenderQueueStarted_ev_uint8_EVString_callback;
				EarthView::World::Core::ev_string m_fireRenderQueueEnded_ev_uint8_EVString_callback;
				EarthView::World::Core::ev_string m_fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback;
				EarthView::World::Core::ev_string m_fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback;
				EarthView::World::Core::ev_string m_fireShadowTexturesUpdated_ev_size_t_callback;
				EarthView::World::Core::ev_string m_fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_callback;
				EarthView::World::Core::ev_string m_fireShadowTexturesPreReceiver_CLight_CFrustum_callback;
				EarthView::World::Core::ev_string m_firePreUpdateSceneGraph_CCamera_callback;
				EarthView::World::Core::ev_string m_firePostUpdateSceneGraph_CCamera_callback;
				EarthView::World::Core::ev_string m_firePreFindVisibleObjects_CViewport_callback;
				EarthView::World::Core::ev_string m_firePostFindVisibleObjects_CViewport_callback;
				EarthView::World::Core::ev_string m_fireSceneManagerDestroyed_void_callback;
				EarthView::World::Core::ev_string m_setViewport_CViewport_callback;
				EarthView::World::Core::ev_string m_renderVisibleObjectsDefaultSequence_void_callback;
				EarthView::World::Core::ev_string m_renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_callback;
				EarthView::World::Core::ev_string m_prepareRenderQueue_void_callback;
				EarthView::World::Core::ev_string m_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_callback;
				EarthView::World::Core::ev_string m_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m_createAutoParamDataSource_void_callback;
				EarthView::World::Core::ev_string m_findLightsAffectingFrustum_CCamera_callback;
				EarthView::World::Core::ev_string m_initShadowVolumeMaterials_void_callback;
				EarthView::World::Core::ev_string m_ensureShadowTexturesCreated_void_callback;
				EarthView::World::Core::ev_string m_destroyShadowTextures_void_callback;
				EarthView::World::Core::ev_string m_prepareShadowTextures_CCamera_CViewport_LightList_callback;
				EarthView::World::Core::ev_string m_prepareShadowTextures_CCamera_CViewport_callback;
				EarthView::World::Core::ev_string m_setImageDefaultMaterial_CMaterialPtr_callback;
				EarthView::World::Core::ev_string m_setImageUseDefaultMaterial_ev_bool_callback;
				EarthView::World::Core::ev_string m_getSunPosition_void_callback;
				EarthView::World::Core::ev_string m_setAtmosphereVisible_ev_bool_callback;
				EarthView::World::Core::ev_string m_storeAtmosphereVisibleState_void_callback;
				EarthView::World::Core::ev_string m_restoreAtmosphereVisibleState_void_callback;
				EarthView::World::Core::ev_string m_setSunVisible_ev_bool_callback;
				EarthView::World::Core::ev_string m__pauseRendering_void_callback;
				EarthView::World::Core::ev_string m__resumeRendering_RenderContext_callback;
				EarthView::World::Core::ev_string m_renderShadowVolumesToStencil_CLight_CCamera_ev_bool_callback;
				EarthView::World::Core::ev_string m_setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m_findShadowCastersForLight_CLight_CCamera_callback;
				EarthView::World::Core::ev_string m_renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback;
				EarthView::World::Core::ev_string m_renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback;
				EarthView::World::Core::ev_string m_renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback;
				EarthView::World::Core::ev_string m_renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback;
				EarthView::World::Core::ev_string m_renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback;
				EarthView::World::Core::ev_string m_renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback;
				EarthView::World::Core::ev_string m_renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback;
				EarthView::World::Core::ev_string m_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback;
				EarthView::World::Core::ev_string m_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback;
				EarthView::World::Core::ev_string m_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m_updateRenderQueueSplitOptions_void_callback;
				EarthView::World::Core::ev_string m_updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m_buildAndSetScissor_LightList_CCamera_callback;
				EarthView::World::Core::ev_string m_buildScissor_CLight_CCamera_RealRect_callback;
				EarthView::World::Core::ev_string m_resetScissor_void_callback;
				EarthView::World::Core::ev_string m_buildAndSetLightClip_LightList_callback;
				EarthView::World::Core::ev_string m_buildLightClip_CLight_PlaneList_callback;
				EarthView::World::Core::ev_string m_resetLightClip_void_callback;
				EarthView::World::Core::ev_string m_checkCachedLightClippingInfo_void_callback;
				EarthView::World::Core::ev_string m_useLights_LightList_ev_uint16_callback;
				EarthView::World::Core::ev_string m_setViewMatrix_CMatrix4_callback;
				EarthView::World::Core::ev_string m_useLightsGpuProgram_CPass_LightList_callback;
				EarthView::World::Core::ev_string m_bindGpuProgram_CGpuProgram_callback;
				EarthView::World::Core::ev_string m_updateGpuProgramParameters_CPass_callback;
				EarthView::World::Core::ev_string m_getTypeName_void_callback;
				EarthView::World::Core::ev_string m_createCamera_EVString_callback;
				EarthView::World::Core::ev_string m_getCamera_EVString_callback;
				EarthView::World::Core::ev_string m_hasCamera_EVString_callback;
				EarthView::World::Core::ev_string m_destroyCamera_CCamera_callback;
				EarthView::World::Core::ev_string m_destroyCamera_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllCameras_void_callback;
				EarthView::World::Core::ev_string m_createLight_EVString_callback;
				EarthView::World::Core::ev_string m_createLight_void_callback;
				EarthView::World::Core::ev_string m_getLightCount_void_callback;
				EarthView::World::Core::ev_string m_getLight_ev_uint16_callback;
				EarthView::World::Core::ev_string m_getLight_EVString_callback;
				EarthView::World::Core::ev_string m_hasLight_EVString_callback;
				EarthView::World::Core::ev_string m_getLightClippingPlanes_CLight_callback;
				EarthView::World::Core::ev_string m_getLightScissorRect_CLight_CCamera_callback;
				EarthView::World::Core::ev_string m_destroyLight_EVString_callback;
				EarthView::World::Core::ev_string m_destroyLight_CLight_callback;
				EarthView::World::Core::ev_string m_destroyAllLights_void_callback;
				EarthView::World::Core::ev_string m_getSoftShadowTexName_void_callback;
				EarthView::World::Core::ev_string m_getShadowTexCam_void_callback;
				EarthView::World::Core::ev_string m_getSoftShadowProjMatrix_ev_uint16_callback;
				EarthView::World::Core::ev_string m_getCascadeEyeSpaceDepthArray_void_callback;
				EarthView::World::Core::ev_string m_getSoftShadowNearClip_ev_uint8_callback;
				EarthView::World::Core::ev_string m_getSoftShadowFarClip_ev_uint8_callback;
				EarthView::World::Core::ev_string m_getIsUseSoftShadowFitToCascadesMode_void_callback;
				EarthView::World::Core::ev_string m_setIsUseSoftShadowFitToCascadesMode_bool_callback;
				EarthView::World::Core::ev_string m_getCurrentClipIndex_void_callback;
				EarthView::World::Core::ev_string m_getIsUseSoftShadowTechnique_void_callback;
				EarthView::World::Core::ev_string m_setIsUseSoftShadowTechnique_bool_callback;
				EarthView::World::Core::ev_string m_getCascadePartitionsPercent_void_callback;
				EarthView::World::Core::ev_string m_setCascadePartitionsPercent_float_callback;
				EarthView::World::Core::ev_string m_getCascadePartitionsDistance_ev_uint8_callback;
				EarthView::World::Core::ev_string m_setCascadePartitionsDistance_ev_uint8_ev_uint8_callback;
				EarthView::World::Core::ev_string m_getSoftShadowOffsetFormat_void_callback;
				EarthView::World::Core::ev_string m_checkShadowCasterInFrustum_CCamera_callback;
				EarthView::World::Core::ev_string m_hasShadowCasterInFrustum_void_callback;
				EarthView::World::Core::ev_string m_getSoftShadowLightBleedPower_void_callback;
				EarthView::World::Core::ev_string m_setSoftShadowLightBleedPower_Real_callback;
				EarthView::World::Core::ev_string m_getSoftShadowDepthOffset_void_callback;
				EarthView::World::Core::ev_string m_setSoftShadowDepthOffset_Real_callback;
				EarthView::World::Core::ev_string m_getSoftShadowNormalFactor_void_callback;
				EarthView::World::Core::ev_string m_setSoftShadowNormalFactor_float_callback;
				EarthView::World::Core::ev_string m__notifyLightsDirty_void_callback;
				EarthView::World::Core::ev_string m__getLightsAffectingFrustum_void_callback;
				EarthView::World::Core::ev_string m__populateLightList_CVector3_Real_LightList_ev_uint32_callback;
				EarthView::World::Core::ev_string m__populateLightList_CVector3_Real_LightList_callback;
				EarthView::World::Core::ev_string m_showImage_ev_bool_callback;
				EarthView::World::Core::ev_string m_getImageVisible_void_callback;
				EarthView::World::Core::ev_string m_showOcean_ev_bool_callback;
				EarthView::World::Core::ev_string m_getOceanVisible_void_callback;
				EarthView::World::Core::ev_string m__populateLightList_CSceneNode_Real_LightList_ev_uint32_callback;
				EarthView::World::Core::ev_string m__populateLightList_CSceneNode_Real_LightList_callback;
				EarthView::World::Core::ev_string m_createSceneNode_void_callback;
				EarthView::World::Core::ev_string m_createSceneNode_EVString_callback;
				EarthView::World::Core::ev_string m_destroySceneNode_EVString_callback;
				EarthView::World::Core::ev_string m_destroySceneNode_CSceneNode_callback;
				EarthView::World::Core::ev_string m_getRootSceneNode_void_callback;
				EarthView::World::Core::ev_string m_getSceneNode_EVString_callback;
				EarthView::World::Core::ev_string m_hasSceneNode_EVString_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_EVString_IntVector_EVString_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_EVString_IntVector_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_CMeshPtr_IntVector_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_CMeshPtr_callback;
				EarthView::World::Core::ev_string m_createEntity_CMeshPtr_IntVector_callback;
				EarthView::World::Core::ev_string m_createEntity_CMeshPtr_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_IntVector_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_callback;
				EarthView::World::Core::ev_string m_createEntity_EVString_PrefabType_callback;
				EarthView::World::Core::ev_string m_createEntity_PrefabType_callback;
				EarthView::World::Core::ev_string m_getEntity_EVString_callback;
				EarthView::World::Core::ev_string m_hasEntity_EVString_callback;
				EarthView::World::Core::ev_string m_destroyEntity_CEntity_callback;
				EarthView::World::Core::ev_string m_destroyEntity_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllEntities_void_callback;
				EarthView::World::Core::ev_string m_createManualObject_EVString_callback;
				EarthView::World::Core::ev_string m_createManualObject_void_callback;
				EarthView::World::Core::ev_string m_getManualObject_EVString_callback;
				EarthView::World::Core::ev_string m_hasManualObject_EVString_callback;
				EarthView::World::Core::ev_string m_destroyManualObject_CManualObject_callback;
				EarthView::World::Core::ev_string m_destroyManualObject_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllManualObjects_void_callback;
				EarthView::World::Core::ev_string m_usingWebMercator_void_callback;
				EarthView::World::Core::ev_string m_createBillboardChain_EVString_callback;
				EarthView::World::Core::ev_string m_createBillboardChain_void_callback;
				EarthView::World::Core::ev_string m_getBillboardChain_EVString_callback;
				EarthView::World::Core::ev_string m_hasBillboardChain_EVString_callback;
				EarthView::World::Core::ev_string m_destroyBillboardChain_CBillboardChain_callback;
				EarthView::World::Core::ev_string m_destroyBillboardChain_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllBillboardChains_void_callback;
				EarthView::World::Core::ev_string m_createRibbonTrail_EVString_callback;
				EarthView::World::Core::ev_string m_createRibbonTrail_void_callback;
				EarthView::World::Core::ev_string m_getRibbonTrail_EVString_callback;
				EarthView::World::Core::ev_string m_hasRibbonTrail_EVString_callback;
				EarthView::World::Core::ev_string m_destroyRibbonTrail_CRibbonTrail_callback;
				EarthView::World::Core::ev_string m_destroyRibbonTrail_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllRibbonTrails_void_callback;
				EarthView::World::Core::ev_string m_createParticleSystem_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_createParticleSystem_EVString_ev_size_t_EVString_callback;
				EarthView::World::Core::ev_string m_createParticleSystem_EVString_ev_size_t_callback;
				EarthView::World::Core::ev_string m_createParticleSystem_EVString_callback;
				EarthView::World::Core::ev_string m_createParticleSystem_ev_size_t_EVString_callback;
				EarthView::World::Core::ev_string m_createParticleSystem_ev_size_t_callback;
				EarthView::World::Core::ev_string m_createParticleSystem_void_callback;
				EarthView::World::Core::ev_string m_getParticleSystem_EVString_callback;
				EarthView::World::Core::ev_string m_hasParticleSystem_EVString_callback;
				EarthView::World::Core::ev_string m_destroyParticleSystem_CParticleSystem_callback;
				EarthView::World::Core::ev_string m_destroyParticleSystem_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllParticleSystems_void_callback;
				EarthView::World::Core::ev_string m_clearScene_void_callback;
				EarthView::World::Core::ev_string m_prepareWorldGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_prepareWorldGeometry_DataStreamPtr_EVString_callback;
				EarthView::World::Core::ev_string m_prepareWorldGeometry_DataStreamPtr_callback;
				EarthView::World::Core::ev_string m_setWorldGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_setWorldGeometry_DataStreamPtr_EVString_callback;
				EarthView::World::Core::ev_string m_setWorldGeometry_DataStreamPtr_callback;
				EarthView::World::Core::ev_string m_estimateWorldGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_estimateWorldGeometry_DataStreamPtr_EVString_callback;
				EarthView::World::Core::ev_string m_estimateWorldGeometry_DataStreamPtr_callback;
				EarthView::World::Core::ev_string m_getSuggestedViewpoint_ev_bool_callback;
				EarthView::World::Core::ev_string m_getSuggestedViewpoint_void_callback;
				EarthView::World::Core::ev_string m_setOption_EVString_void_callback;
				EarthView::World::Core::ev_string m_getOption_EVString_void_callback;
				EarthView::World::Core::ev_string m_hasOption_EVString_callback;
				EarthView::World::Core::ev_string m_getOptionValues_EVString_StringVector_callback;
				EarthView::World::Core::ev_string m_getOptionKeys_StringVector_callback;
				EarthView::World::Core::ev_string m__updateSceneGraph_CCamera_callback;
				EarthView::World::Core::ev_string m__findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_callback;
				EarthView::World::Core::ev_string m__applySceneAnimations_void_callback;
				EarthView::World::Core::ev_string m__renderVisibleObjects_void_callback;
				EarthView::World::Core::ev_string m__renderScene_CCamera_CViewport_ev_bool_callback;
				EarthView::World::Core::ev_string m__queueSkiesForRendering_CCamera_callback;
				EarthView::World::Core::ev_string m__setDestinationRenderSystem_CRenderSystem_callback;
				EarthView::World::Core::ev_string m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_callback;
				EarthView::World::Core::ev_string m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_callback;
				EarthView::World::Core::ev_string m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_callback;
				EarthView::World::Core::ev_string m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_callback;
				EarthView::World::Core::ev_string m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_callback;
				EarthView::World::Core::ev_string m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback;
				EarthView::World::Core::ev_string m_setSkyPlane_ev_bool_CPlane_EVString_Real_callback;
				EarthView::World::Core::ev_string m_setSkyPlane_ev_bool_CPlane_EVString_callback;
				EarthView::World::Core::ev_string m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_callback;
				EarthView::World::Core::ev_string m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_callback;
				EarthView::World::Core::ev_string m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_callback;
				EarthView::World::Core::ev_string m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_callback;
				EarthView::World::Core::ev_string m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_callback;
				EarthView::World::Core::ev_string m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback;
				EarthView::World::Core::ev_string m__setSkyPlane_ev_bool_CPlane_EVString_Real_callback;
				EarthView::World::Core::ev_string m__setSkyPlane_ev_bool_CPlane_EVString_callback;
				EarthView::World::Core::ev_string m_setSkyPlaneEnabled_ev_bool_callback;
				EarthView::World::Core::ev_string m_isSkyPlaneEnabled_void_callback;
				EarthView::World::Core::ev_string m_getSkyPlaneNode_void_callback;
				EarthView::World::Core::ev_string m_getSkyPlaneGenParameters_void_callback;
				EarthView::World::Core::ev_string m_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_callback;
				EarthView::World::Core::ev_string m_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_callback;
				EarthView::World::Core::ev_string m_setSkyBox_ev_bool_EVString_Real_ev_bool_callback;
				EarthView::World::Core::ev_string m_setSkyBox_ev_bool_EVString_Real_callback;
				EarthView::World::Core::ev_string m_setSkyBox_ev_bool_EVString_callback;
				EarthView::World::Core::ev_string m__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_callback;
				EarthView::World::Core::ev_string m__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_callback;
				EarthView::World::Core::ev_string m__setSkyBox_ev_bool_EVString_Real_ev_uint8_callback;
				EarthView::World::Core::ev_string m__setSkyBox_ev_bool_EVString_Real_callback;
				EarthView::World::Core::ev_string m__setSkyBox_ev_bool_EVString_callback;
				EarthView::World::Core::ev_string m_setSkyBoxEnabled_ev_bool_callback;
				EarthView::World::Core::ev_string m_isSkyBoxEnabled_void_callback;
				EarthView::World::Core::ev_string m_getSkyBoxNode_void_callback;
				EarthView::World::Core::ev_string m_getSkyBoxGenParameters_void_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_Real_Real_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_Real_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_Real_callback;
				EarthView::World::Core::ev_string m_setSkyDome_ev_bool_EVString_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_Real_Real_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_Real_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_Real_callback;
				EarthView::World::Core::ev_string m__setSkyDome_ev_bool_EVString_callback;
				EarthView::World::Core::ev_string m_setSkyDomeEnabled_ev_bool_callback;
				EarthView::World::Core::ev_string m_isSkyDomeEnabled_void_callback;
				EarthView::World::Core::ev_string m_getSkyDomeNode_void_callback;
				EarthView::World::Core::ev_string m_getSkyDomeGenParameters_void_callback;
				EarthView::World::Core::ev_string m_getFogMode_void_callback;
				EarthView::World::Core::ev_string m_getFogColour_void_callback;
				EarthView::World::Core::ev_string m_getFogStart_void_callback;
				EarthView::World::Core::ev_string m_getFogEnd_void_callback;
				EarthView::World::Core::ev_string m_getFogDensity_void_callback;
				EarthView::World::Core::ev_string m_createBillboardSet_EVString_ev_uint32_callback;
				EarthView::World::Core::ev_string m_createBillboardSet_EVString_callback;
				EarthView::World::Core::ev_string m_createBillboardSet_ev_uint32_callback;
				EarthView::World::Core::ev_string m_createBillboardSet_void_callback;
				EarthView::World::Core::ev_string m_getBillboardSet_EVString_callback;
				EarthView::World::Core::ev_string m_hasBillboardSet_EVString_callback;
				EarthView::World::Core::ev_string m_destroyBillboardSet_CBillboardSet_callback;
				EarthView::World::Core::ev_string m_destroyBillboardSet_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllBillboardSets_void_callback;
				EarthView::World::Core::ev_string m_setDisplaySceneNodes_ev_bool_callback;
				EarthView::World::Core::ev_string m_getDisplaySceneNodes_void_callback;
				EarthView::World::Core::ev_string m_createAnimation_EVString_Real_callback;
				EarthView::World::Core::ev_string m_getAnimation_EVString_callback;
				EarthView::World::Core::ev_string m_hasAnimation_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAnimation_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllAnimations_void_callback;
				EarthView::World::Core::ev_string m_createAnimationState_EVString_callback;
				EarthView::World::Core::ev_string m_getAnimationState_EVString_callback;
				EarthView::World::Core::ev_string m_hasAnimationState_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAnimationState_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllAnimationStates_void_callback;
				EarthView::World::Core::ev_string m_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_callback;
				EarthView::World::Core::ev_string m_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_callback;
				EarthView::World::Core::ev_string m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_callback;
				EarthView::World::Core::ev_string m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_callback;
				EarthView::World::Core::ev_string m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_callback;
				EarthView::World::Core::ev_string m_getRenderQueue_void_callback;
				EarthView::World::Core::ev_string m_addRenderQueueListener_CRenderQueueListener_callback;
				EarthView::World::Core::ev_string m_removeRenderQueueListener_CRenderQueueListener_callback;
				EarthView::World::Core::ev_string m_addRenderObjectListener_CRenderObjectListener_callback;
				EarthView::World::Core::ev_string m_removeRenderObjectListener_CRenderObjectListener_callback;
				EarthView::World::Core::ev_string m_addSpecialCaseRenderQueue_ev_uint8_callback;
				EarthView::World::Core::ev_string m_removeSpecialCaseRenderQueue_ev_uint8_callback;
				EarthView::World::Core::ev_string m_clearSpecialCaseRenderQueues_void_callback;
				EarthView::World::Core::ev_string m_setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_callback;
				EarthView::World::Core::ev_string m_getSpecialCaseRenderQueueMode_void_callback;
				EarthView::World::Core::ev_string m_isRenderQueueToBeProcessed_ev_uint8_callback;
				EarthView::World::Core::ev_string m_setWorldGeometryRenderQueue_ev_uint8_callback;
				EarthView::World::Core::ev_string m_getWorldGeometryRenderQueue_void_callback;
				EarthView::World::Core::ev_string m_showBoundingBoxes_ev_bool_callback;
				EarthView::World::Core::ev_string m_getShowBoundingBoxes_void_callback;
				EarthView::World::Core::ev_string m__notifyAutotrackingSceneNode_CSceneNode_ev_bool_callback;
				EarthView::World::Core::ev_string m_createAABBQuery_CAxisAlignedBox_ev_uint32_callback;
				EarthView::World::Core::ev_string m_createAABBQuery_CAxisAlignedBox_callback;
				EarthView::World::Core::ev_string m_createSphereQuery_CSphere_ev_uint32_callback;
				EarthView::World::Core::ev_string m_createSphereQuery_CSphere_callback;
				EarthView::World::Core::ev_string m_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_callback;
				EarthView::World::Core::ev_string m_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_callback;
				EarthView::World::Core::ev_string m_createRayQuery_CRay_ev_uint32_callback;
				EarthView::World::Core::ev_string m_createRayQuery_CRay_callback;
				EarthView::World::Core::ev_string m_createIntersectionQuery_ev_uint32_callback;
				EarthView::World::Core::ev_string m_createIntersectionQuery_void_callback;
				EarthView::World::Core::ev_string m_destroyQuery_CSceneQuery_callback;
				EarthView::World::Core::ev_string m_setShadowTechnique_ShadowTechnique_callback;
				EarthView::World::Core::ev_string m_getShadowTechnique_void_callback;
				EarthView::World::Core::ev_string m_setShowDebugShadows_ev_bool_callback;
				EarthView::World::Core::ev_string m_getShowDebugShadows_void_callback;
				EarthView::World::Core::ev_string m_setShadowColour_CColourValue_callback;
				EarthView::World::Core::ev_string m_getShadowColour_void_callback;
				EarthView::World::Core::ev_string m_setShadowDirectionalLightExtrusionDistance_Real_callback;
				EarthView::World::Core::ev_string m_getShadowDirectionalLightExtrusionDistance_void_callback;
				EarthView::World::Core::ev_string m_setShadowColorRRatio_Real_callback;
				EarthView::World::Core::ev_string m_setShadowColorGRatio_Real_callback;
				EarthView::World::Core::ev_string m_setShadowColorBRatio_Real_callback;
				EarthView::World::Core::ev_string m_getShadowColorRRatio_void_callback;
				EarthView::World::Core::ev_string m_getShadowColorGRatio_void_callback;
				EarthView::World::Core::ev_string m_getShadowColorBRatio_void_callback;
				EarthView::World::Core::ev_string m_setShadowFarDistance_Real_callback;
				EarthView::World::Core::ev_string m_getShadowFarDistance_void_callback;
				EarthView::World::Core::ev_string m_getShadowFarDistanceSquared_void_callback;
				EarthView::World::Core::ev_string m_setShadowIndexBufferSize_ev_size_t_callback;
				EarthView::World::Core::ev_string m_getShadowIndexBufferSize_void_callback;
				EarthView::World::Core::ev_string m_setShadowTextureSize_ev_uint16_callback;
				EarthView::World::Core::ev_string m_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_callback;
				EarthView::World::Core::ev_string m_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback;
				EarthView::World::Core::ev_string m_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback;
				EarthView::World::Core::ev_string m_setShadowTextureConfig_ev_size_t_ShadowTextureConfig_callback;
				EarthView::World::Core::ev_string m_setShadowTexturePixelFormat_PixelFormat_callback;
				EarthView::World::Core::ev_string m_setShadowTextureFSAA_ev_uint16_callback;
				EarthView::World::Core::ev_string m_setShadowTextureCount_ev_size_t_callback;
				EarthView::World::Core::ev_string m_setShadowTextureSettings_ev_uint16_ev_uint16_callback;
				EarthView::World::Core::ev_string m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_callback;
				EarthView::World::Core::ev_string m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback;
				EarthView::World::Core::ev_string m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback;
				EarthView::World::Core::ev_string m_getShadowTexture_ev_size_t_callback;
				EarthView::World::Core::ev_string m_setShadowDirLightTextureOffset_Real_callback;
				EarthView::World::Core::ev_string m_getShadowDirLightTextureOffset_void_callback;
				EarthView::World::Core::ev_string m_setShadowTextureFadeStart_Real_callback;
				EarthView::World::Core::ev_string m_setShadowTextureFadeEnd_Real_callback;
				EarthView::World::Core::ev_string m_setShadowTextureSelfShadow_ev_bool_callback;
				EarthView::World::Core::ev_string m_getShadowTextureSelfShadow_void_callback;
				EarthView::World::Core::ev_string m_setShadowTextureCasterMaterial_EVString_callback;
				EarthView::World::Core::ev_string m_setShadowTextureReceiverMaterial_EVString_callback;
				EarthView::World::Core::ev_string m_setShadowCasterRenderBackFaces_ev_bool_callback;
				EarthView::World::Core::ev_string m_getShadowCasterRenderBackFaces_void_callback;
				EarthView::World::Core::ev_string m_setShadowCameraSetup_ShadowCameraSetupPtr_callback;
				EarthView::World::Core::ev_string m_getShadowCameraSetup_void_callback;
				EarthView::World::Core::ev_string m_setShadowUseInfiniteFarPlane_ev_bool_callback;
				EarthView::World::Core::ev_string m_isShadowTechniqueStencilBased_void_callback;
				EarthView::World::Core::ev_string m_isShadowTechniqueTextureBased_void_callback;
				EarthView::World::Core::ev_string m_isShadowTechniqueModulative_void_callback;
				EarthView::World::Core::ev_string m_isShadowTechniqueAdditive_void_callback;
				EarthView::World::Core::ev_string m_isShadowTechniqueIntegrated_void_callback;
				EarthView::World::Core::ev_string m_isShadowTechniqueInUse_void_callback;
				EarthView::World::Core::ev_string m_setShadowUseLightClipPlanes_ev_bool_callback;
				EarthView::World::Core::ev_string m_getShadowUseLightClipPlanes_void_callback;
				EarthView::World::Core::ev_string m__setActiveCompositorChain_CCompositorChain_callback;
				EarthView::World::Core::ev_string m_setLateMaterialResolving_ev_bool_callback;
				EarthView::World::Core::ev_string m_isLateMaterialResolving_void_callback;
				EarthView::World::Core::ev_string m__getActiveCompositorChain_void_callback;
				EarthView::World::Core::ev_string m_addListener_CSceneManagerListener_callback;
				EarthView::World::Core::ev_string m_removeListener_CSceneManagerListener_callback;
				EarthView::World::Core::ev_string m_existListener_CSceneManagerListener_callback;
				EarthView::World::Core::ev_string m_createStaticGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_getStaticGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_hasStaticGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_destroyStaticGeometry_CStaticGeometry_callback;
				EarthView::World::Core::ev_string m_destroyStaticGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllStaticGeometry_void_callback;
				EarthView::World::Core::ev_string m_createInstancedGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_getInstancedGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_destroyInstancedGeometry_CInstancedGeometry_callback;
				EarthView::World::Core::ev_string m_destroyInstancedGeometry_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllInstancedGeometry_void_callback;
				EarthView::World::Core::ev_string m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback;
				EarthView::World::Core::ev_string m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback;
				EarthView::World::Core::ev_string m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback;
				EarthView::World::Core::ev_string m_getInstanceManager_EVString_callback;
				EarthView::World::Core::ev_string m_hasInstanceManager_EVString_callback;
				EarthView::World::Core::ev_string m_destroyInstanceManager_EVString_callback;
				EarthView::World::Core::ev_string m_destroyInstanceManager_CInstanceManager_callback;
				EarthView::World::Core::ev_string m_destroyInstanceManagerWithThreadSafe_EVString_callback;
				EarthView::World::Core::ev_string m_destroyInstanceManagerWithThreadSafe_CInstanceManager_callback;
				EarthView::World::Core::ev_string m_destroyAllInstanceManagers_void_callback;
				EarthView::World::Core::ev_string m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback;
				EarthView::World::Core::ev_string m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback;
				EarthView::World::Core::ev_string m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback;
				EarthView::World::Core::ev_string m_createInstancedEntity_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_destroyInstancedEntity_CInstancedEntity_callback;
				EarthView::World::Core::ev_string m_createMovableObject_EVString_EVString_CommonStringPairList_callback;
				EarthView::World::Core::ev_string m_createMovableObject_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_createMovableObject_EVString_CommonStringPairList_callback;
				EarthView::World::Core::ev_string m_createMovableObject_EVString_callback;
				EarthView::World::Core::ev_string m_destroyMovableObject_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_destroyMovableObject_CMovableObject_callback;
				EarthView::World::Core::ev_string m_destroyAllMovableObjectsByType_EVString_callback;
				EarthView::World::Core::ev_string m_destroyAllMovableObjects_void_callback;
				EarthView::World::Core::ev_string m_getMovableObject_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_hasMovableObject_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_getMovableObjectIterator_EVString_callback;
				EarthView::World::Core::ev_string m_injectMovableObject_CMovableObject_callback;
				EarthView::World::Core::ev_string m_extractMovableObject_EVString_EVString_callback;
				EarthView::World::Core::ev_string m_extractMovableObject_CMovableObject_callback;
				EarthView::World::Core::ev_string m_extractAllMovableObjectsByType_EVString_callback;
				EarthView::World::Core::ev_string m_setVisibilityMask_ev_uint32_callback;
				EarthView::World::Core::ev_string m_getVisibilityMask_void_callback;
				EarthView::World::Core::ev_string m_setFindVisibleObjects_ev_bool_callback;
				EarthView::World::Core::ev_string m_getFindVisibleObjects_void_callback;
				EarthView::World::Core::ev_string m_setNormaliseNormalsOnScale_ev_bool_callback;
				EarthView::World::Core::ev_string m_getNormaliseNormalsOnScale_void_callback;
				EarthView::World::Core::ev_string m_setFlipCullingOnNegativeScale_ev_bool_callback;
				EarthView::World::Core::ev_string m_getFlipCullingOnNegativeScale_void_callback;
				EarthView::World::Core::ev_string m__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_callback;
				EarthView::World::Core::ev_string m__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m__injectRenderWithPass_CPass_CRenderable_ev_bool_callback;
				EarthView::World::Core::ev_string m__injectRenderWithPass_CPass_CRenderable_callback;
				EarthView::World::Core::ev_string m__suppressRenderStateChanges_ev_bool_callback;
				EarthView::World::Core::ev_string m__areRenderStateChangesSuppressed_void_callback;
				EarthView::World::Core::ev_string m__setPass_CPass_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m__setPass_CPass_ev_bool_callback;
				EarthView::World::Core::ev_string m__setPass_CPass_callback;
				EarthView::World::Core::ev_string m__markGpuParamsDirty_ev_uint16_callback;
				EarthView::World::Core::ev_string m__suppressShadows_ev_bool_callback;
				EarthView::World::Core::ev_string m__areShadowsSuppressed_void_callback;
				EarthView::World::Core::ev_string m__renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback;
				EarthView::World::Core::ev_string m_setCameraRelativeRendering_ev_bool_callback;
				EarthView::World::Core::ev_string m_getCameraRelativeRendering_void_callback;
				EarthView::World::Core::ev_string m_getHeightAt_Real_Real_ev_real32_callback;
				EarthView::World::Core::ev_string m_getBestHeightAt_Real_Real_callback;
				EarthView::World::Core::ev_string m_getHeightAtTile_Real_Real_callback;
				EarthView::World::Core::ev_string m_getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_callback;
				EarthView::World::Core::ev_string m_addTempLayer_ILayer_callback;
				EarthView::World::Core::ev_string m_removeTempLayer_ILayer_callback;
				EarthView::World::Core::ev_string m_updateQuadImage_bool_bool_bool_callback;
				EarthView::World::Core::ev_string m_updateQuadImage_bool_bool_bool_Real_Real_Real_Real_callback;
				EarthView::World::Core::ev_string m_updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_callback;
				EarthView::World::Core::ev_string m_setCollisionDetectionEnable_ev_bool_callback;
			public:
				JCSceneManagerProxy(EarthView::World::Core::CNameValuePairList *pList) : CSceneManager(pList)
				{
				}
				ev_void unRegisterJavaReference()
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
					if(__gr != NULL)
					{
						delete __gr;
						this->registerJavaReference(NULL);
					}
				}
			public:
				void register_createSceneNodeImpl_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createSceneNodeImpl_void_callback = __method;
				}
				void register_createSceneNodeImpl_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createSceneNodeImpl_EVString_callback = __method;
				}
				void register_initRenderQueue_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_initRenderQueue_void_callback = __method;
				}
				void register_deriveShadowCasterPass_CPass_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_deriveShadowCasterPass_CPass_callback = __method;
				}
				void register_deriveShadowReceiverPass_CPass_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_deriveShadowReceiverPass_CPass_callback = __method;
				}
				void register_validatePassForRendering_CPass_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_validatePassForRendering_CPass_callback = __method;
				}
				void register_validateRenderableForRendering_CPass_CRenderable_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_validateRenderableForRendering_CPass_CRenderable_callback = __method;
				}
				void register_createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_callback = __method;
				}
				void register_createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback = __method;
				}
				void register_useRenderableViewProjMode_CRenderable_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_useRenderableViewProjMode_CRenderable_ev_bool_callback = __method;
				}
				void register_resetViewProjMode_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_resetViewProjMode_ev_bool_callback = __method;
				}
				void register_firePreRenderQueues_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_firePreRenderQueues_void_callback = __method;
				}
				void register_firePostRenderQueues_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_firePostRenderQueues_void_callback = __method;
				}
				void register_fireRenderQueueStarted_ev_uint8_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_fireRenderQueueStarted_ev_uint8_EVString_callback = __method;
				}
				void register_fireRenderQueueEnded_ev_uint8_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_fireRenderQueueEnded_ev_uint8_EVString_callback = __method;
				}
				void register_fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback = __method;
				}
				void register_fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback = __method;
				}
				void register_fireShadowTexturesUpdated_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_fireShadowTexturesUpdated_ev_size_t_callback = __method;
				}
				void register_fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_callback = __method;
				}
				void register_fireShadowTexturesPreReceiver_CLight_CFrustum_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_fireShadowTexturesPreReceiver_CLight_CFrustum_callback = __method;
				}
				void register_firePreUpdateSceneGraph_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_firePreUpdateSceneGraph_CCamera_callback = __method;
				}
				void register_firePostUpdateSceneGraph_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_firePostUpdateSceneGraph_CCamera_callback = __method;
				}
				void register_firePreFindVisibleObjects_CViewport_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_firePreFindVisibleObjects_CViewport_callback = __method;
				}
				void register_firePostFindVisibleObjects_CViewport_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_firePostFindVisibleObjects_CViewport_callback = __method;
				}
				void register_fireSceneManagerDestroyed_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_fireSceneManagerDestroyed_void_callback = __method;
				}
				void register_setViewport_CViewport_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setViewport_CViewport_callback = __method;
				}
				void register_renderVisibleObjectsDefaultSequence_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderVisibleObjectsDefaultSequence_void_callback = __method;
				}
				void register_renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_callback = __method;
				}
				void register_prepareRenderQueue_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_prepareRenderQueue_void_callback = __method;
				}
				void register_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_callback = __method;
				}
				void register_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_callback = __method;
				}
				void register_createAutoParamDataSource_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createAutoParamDataSource_void_callback = __method;
				}
				void register_findLightsAffectingFrustum_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_findLightsAffectingFrustum_CCamera_callback = __method;
				}
				void register_initShadowVolumeMaterials_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_initShadowVolumeMaterials_void_callback = __method;
				}
				void register_ensureShadowTexturesCreated_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_ensureShadowTexturesCreated_void_callback = __method;
				}
				void register_destroyShadowTextures_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyShadowTextures_void_callback = __method;
				}
				void register_prepareShadowTextures_CCamera_CViewport_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_prepareShadowTextures_CCamera_CViewport_LightList_callback = __method;
				}
				void register_prepareShadowTextures_CCamera_CViewport_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_prepareShadowTextures_CCamera_CViewport_callback = __method;
				}
				void register_setImageDefaultMaterial_CMaterialPtr_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setImageDefaultMaterial_CMaterialPtr_callback = __method;
				}
				void register_setImageUseDefaultMaterial_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setImageUseDefaultMaterial_ev_bool_callback = __method;
				}
				void register_getSunPosition_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSunPosition_void_callback = __method;
				}
				void register_setAtmosphereVisible_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setAtmosphereVisible_ev_bool_callback = __method;
				}
				void register_storeAtmosphereVisibleState_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_storeAtmosphereVisibleState_void_callback = __method;
				}
				void register_restoreAtmosphereVisibleState_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_restoreAtmosphereVisibleState_void_callback = __method;
				}
				void register_setSunVisible_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSunVisible_ev_bool_callback = __method;
				}
				void register__pauseRendering_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__pauseRendering_void_callback = __method;
				}
				void register__resumeRendering_RenderContext_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__resumeRendering_RenderContext_callback = __method;
				}
				void register_renderShadowVolumesToStencil_CLight_CCamera_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderShadowVolumesToStencil_CLight_CCamera_ev_bool_callback = __method;
				}
				void register_setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_callback = __method;
				}
				void register_findShadowCastersForLight_CLight_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_findShadowCastersForLight_CLight_CCamera_callback = __method;
				}
				void register_renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback = __method;
				}
				void register_renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback = __method;
				}
				void register_renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback = __method;
				}
				void register_renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback = __method;
				}
				void register_renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback = __method;
				}
				void register_renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback = __method;
				}
				void register_renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback = __method;
				}
				void register_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback = __method;
				}
				void register_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback = __method;
				}
				void register_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback = __method;
				}
				void register_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback = __method;
				}
				void register_updateRenderQueueSplitOptions_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_updateRenderQueueSplitOptions_void_callback = __method;
				}
				void register_updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_callback = __method;
				}
				void register_buildAndSetScissor_LightList_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_buildAndSetScissor_LightList_CCamera_callback = __method;
				}
				void register_buildScissor_CLight_CCamera_RealRect_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_buildScissor_CLight_CCamera_RealRect_callback = __method;
				}
				void register_resetScissor_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_resetScissor_void_callback = __method;
				}
				void register_buildAndSetLightClip_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_buildAndSetLightClip_LightList_callback = __method;
				}
				void register_buildLightClip_CLight_PlaneList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_buildLightClip_CLight_PlaneList_callback = __method;
				}
				void register_resetLightClip_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_resetLightClip_void_callback = __method;
				}
				void register_checkCachedLightClippingInfo_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_checkCachedLightClippingInfo_void_callback = __method;
				}
				void register_useLights_LightList_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_useLights_LightList_ev_uint16_callback = __method;
				}
				void register_setViewMatrix_CMatrix4_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setViewMatrix_CMatrix4_callback = __method;
				}
				void register_useLightsGpuProgram_CPass_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_useLightsGpuProgram_CPass_LightList_callback = __method;
				}
				void register_bindGpuProgram_CGpuProgram_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_bindGpuProgram_CGpuProgram_callback = __method;
				}
				void register_updateGpuProgramParameters_CPass_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_updateGpuProgramParameters_CPass_callback = __method;
				}
				void register_getTypeName_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getTypeName_void_callback = __method;
				}
				void register_createCamera_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createCamera_EVString_callback = __method;
				}
				void register_getCamera_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getCamera_EVString_callback = __method;
				}
				void register_hasCamera_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasCamera_EVString_callback = __method;
				}
				void register_destroyCamera_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyCamera_CCamera_callback = __method;
				}
				void register_destroyCamera_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyCamera_EVString_callback = __method;
				}
				void register_destroyAllCameras_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllCameras_void_callback = __method;
				}
				void register_createLight_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createLight_EVString_callback = __method;
				}
				void register_createLight_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createLight_void_callback = __method;
				}
				void register_getLightCount_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getLightCount_void_callback = __method;
				}
				void register_getLight_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getLight_ev_uint16_callback = __method;
				}
				void register_getLight_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getLight_EVString_callback = __method;
				}
				void register_hasLight_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasLight_EVString_callback = __method;
				}
				void register_getLightClippingPlanes_CLight_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getLightClippingPlanes_CLight_callback = __method;
				}
				void register_getLightScissorRect_CLight_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getLightScissorRect_CLight_CCamera_callback = __method;
				}
				void register_destroyLight_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyLight_EVString_callback = __method;
				}
				void register_destroyLight_CLight_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyLight_CLight_callback = __method;
				}
				void register_destroyAllLights_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllLights_void_callback = __method;
				}
				void register_getSoftShadowTexName_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSoftShadowTexName_void_callback = __method;
				}
				void register_getShadowTexCam_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowTexCam_void_callback = __method;
				}
				void register_getSoftShadowProjMatrix_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSoftShadowProjMatrix_ev_uint16_callback = __method;
				}
				void register_getCascadeEyeSpaceDepthArray_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getCascadeEyeSpaceDepthArray_void_callback = __method;
				}
				void register_getSoftShadowNearClip_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSoftShadowNearClip_ev_uint8_callback = __method;
				}
				void register_getSoftShadowFarClip_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSoftShadowFarClip_ev_uint8_callback = __method;
				}
				void register_getIsUseSoftShadowFitToCascadesMode_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getIsUseSoftShadowFitToCascadesMode_void_callback = __method;
				}
				void register_setIsUseSoftShadowFitToCascadesMode_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setIsUseSoftShadowFitToCascadesMode_bool_callback = __method;
				}
				void register_getCurrentClipIndex_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getCurrentClipIndex_void_callback = __method;
				}
				void register_getIsUseSoftShadowTechnique_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getIsUseSoftShadowTechnique_void_callback = __method;
				}
				void register_setIsUseSoftShadowTechnique_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setIsUseSoftShadowTechnique_bool_callback = __method;
				}
				void register_getCascadePartitionsPercent_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getCascadePartitionsPercent_void_callback = __method;
				}
				void register_setCascadePartitionsPercent_float_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setCascadePartitionsPercent_float_callback = __method;
				}
				void register_getCascadePartitionsDistance_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getCascadePartitionsDistance_ev_uint8_callback = __method;
				}
				void register_setCascadePartitionsDistance_ev_uint8_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setCascadePartitionsDistance_ev_uint8_ev_uint8_callback = __method;
				}
				void register_getSoftShadowOffsetFormat_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSoftShadowOffsetFormat_void_callback = __method;
				}
				void register_checkShadowCasterInFrustum_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_checkShadowCasterInFrustum_CCamera_callback = __method;
				}
				void register_hasShadowCasterInFrustum_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasShadowCasterInFrustum_void_callback = __method;
				}
				void register_getSoftShadowLightBleedPower_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSoftShadowLightBleedPower_void_callback = __method;
				}
				void register_setSoftShadowLightBleedPower_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSoftShadowLightBleedPower_Real_callback = __method;
				}
				void register_getSoftShadowDepthOffset_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSoftShadowDepthOffset_void_callback = __method;
				}
				void register_setSoftShadowDepthOffset_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSoftShadowDepthOffset_Real_callback = __method;
				}
				void register_getSoftShadowNormalFactor_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSoftShadowNormalFactor_void_callback = __method;
				}
				void register_setSoftShadowNormalFactor_float_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSoftShadowNormalFactor_float_callback = __method;
				}
				void register__notifyLightsDirty_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__notifyLightsDirty_void_callback = __method;
				}
				void register__getLightsAffectingFrustum_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__getLightsAffectingFrustum_void_callback = __method;
				}
				void register__populateLightList_CVector3_Real_LightList_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__populateLightList_CVector3_Real_LightList_ev_uint32_callback = __method;
				}
				void register__populateLightList_CVector3_Real_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__populateLightList_CVector3_Real_LightList_callback = __method;
				}
				void register_showImage_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_showImage_ev_bool_callback = __method;
				}
				void register_getImageVisible_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getImageVisible_void_callback = __method;
				}
				void register_showOcean_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_showOcean_ev_bool_callback = __method;
				}
				void register_getOceanVisible_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getOceanVisible_void_callback = __method;
				}
				void register__populateLightList_CSceneNode_Real_LightList_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__populateLightList_CSceneNode_Real_LightList_ev_uint32_callback = __method;
				}
				void register__populateLightList_CSceneNode_Real_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__populateLightList_CSceneNode_Real_LightList_callback = __method;
				}
				void register_createSceneNode_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createSceneNode_void_callback = __method;
				}
				void register_createSceneNode_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createSceneNode_EVString_callback = __method;
				}
				void register_destroySceneNode_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroySceneNode_EVString_callback = __method;
				}
				void register_destroySceneNode_CSceneNode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroySceneNode_CSceneNode_callback = __method;
				}
				void register_getRootSceneNode_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getRootSceneNode_void_callback = __method;
				}
				void register_getSceneNode_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSceneNode_EVString_callback = __method;
				}
				void register_hasSceneNode_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasSceneNode_EVString_callback = __method;
				}
				void register_createEntity_EVString_EVString_IntVector_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_EVString_IntVector_EVString_callback = __method;
				}
				void register_createEntity_EVString_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_EVString_EVString_callback = __method;
				}
				void register_createEntity_EVString_EVString_IntVector_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_EVString_IntVector_callback = __method;
				}
				void register_createEntity_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_EVString_callback = __method;
				}
				void register_createEntity_EVString_CMeshPtr_IntVector_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_CMeshPtr_IntVector_callback = __method;
				}
				void register_createEntity_EVString_CMeshPtr_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_CMeshPtr_callback = __method;
				}
				void register_createEntity_CMeshPtr_IntVector_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_CMeshPtr_IntVector_callback = __method;
				}
				void register_createEntity_CMeshPtr_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_CMeshPtr_callback = __method;
				}
				void register_createEntity_EVString_IntVector_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_IntVector_callback = __method;
				}
				void register_createEntity_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_callback = __method;
				}
				void register_createEntity_EVString_PrefabType_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_EVString_PrefabType_callback = __method;
				}
				void register_createEntity_PrefabType_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createEntity_PrefabType_callback = __method;
				}
				void register_getEntity_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getEntity_EVString_callback = __method;
				}
				void register_hasEntity_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasEntity_EVString_callback = __method;
				}
				void register_destroyEntity_CEntity_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyEntity_CEntity_callback = __method;
				}
				void register_destroyEntity_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyEntity_EVString_callback = __method;
				}
				void register_destroyAllEntities_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllEntities_void_callback = __method;
				}
				void register_createManualObject_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createManualObject_EVString_callback = __method;
				}
				void register_createManualObject_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createManualObject_void_callback = __method;
				}
				void register_getManualObject_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getManualObject_EVString_callback = __method;
				}
				void register_hasManualObject_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasManualObject_EVString_callback = __method;
				}
				void register_destroyManualObject_CManualObject_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyManualObject_CManualObject_callback = __method;
				}
				void register_destroyManualObject_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyManualObject_EVString_callback = __method;
				}
				void register_destroyAllManualObjects_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllManualObjects_void_callback = __method;
				}
				void register_usingWebMercator_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_usingWebMercator_void_callback = __method;
				}
				void register_createBillboardChain_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createBillboardChain_EVString_callback = __method;
				}
				void register_createBillboardChain_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createBillboardChain_void_callback = __method;
				}
				void register_getBillboardChain_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getBillboardChain_EVString_callback = __method;
				}
				void register_hasBillboardChain_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasBillboardChain_EVString_callback = __method;
				}
				void register_destroyBillboardChain_CBillboardChain_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyBillboardChain_CBillboardChain_callback = __method;
				}
				void register_destroyBillboardChain_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyBillboardChain_EVString_callback = __method;
				}
				void register_destroyAllBillboardChains_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllBillboardChains_void_callback = __method;
				}
				void register_createRibbonTrail_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createRibbonTrail_EVString_callback = __method;
				}
				void register_createRibbonTrail_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createRibbonTrail_void_callback = __method;
				}
				void register_getRibbonTrail_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getRibbonTrail_EVString_callback = __method;
				}
				void register_hasRibbonTrail_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasRibbonTrail_EVString_callback = __method;
				}
				void register_destroyRibbonTrail_CRibbonTrail_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyRibbonTrail_CRibbonTrail_callback = __method;
				}
				void register_destroyRibbonTrail_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyRibbonTrail_EVString_callback = __method;
				}
				void register_destroyAllRibbonTrails_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllRibbonTrails_void_callback = __method;
				}
				void register_createParticleSystem_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createParticleSystem_EVString_EVString_callback = __method;
				}
				void register_createParticleSystem_EVString_ev_size_t_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createParticleSystem_EVString_ev_size_t_EVString_callback = __method;
				}
				void register_createParticleSystem_EVString_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createParticleSystem_EVString_ev_size_t_callback = __method;
				}
				void register_createParticleSystem_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createParticleSystem_EVString_callback = __method;
				}
				void register_createParticleSystem_ev_size_t_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createParticleSystem_ev_size_t_EVString_callback = __method;
				}
				void register_createParticleSystem_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createParticleSystem_ev_size_t_callback = __method;
				}
				void register_createParticleSystem_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createParticleSystem_void_callback = __method;
				}
				void register_getParticleSystem_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getParticleSystem_EVString_callback = __method;
				}
				void register_hasParticleSystem_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasParticleSystem_EVString_callback = __method;
				}
				void register_destroyParticleSystem_CParticleSystem_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyParticleSystem_CParticleSystem_callback = __method;
				}
				void register_destroyParticleSystem_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyParticleSystem_EVString_callback = __method;
				}
				void register_destroyAllParticleSystems_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllParticleSystems_void_callback = __method;
				}
				void register_clearScene_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_clearScene_void_callback = __method;
				}
				void register_prepareWorldGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_prepareWorldGeometry_EVString_callback = __method;
				}
				void register_prepareWorldGeometry_DataStreamPtr_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_prepareWorldGeometry_DataStreamPtr_EVString_callback = __method;
				}
				void register_prepareWorldGeometry_DataStreamPtr_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_prepareWorldGeometry_DataStreamPtr_callback = __method;
				}
				void register_setWorldGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setWorldGeometry_EVString_callback = __method;
				}
				void register_setWorldGeometry_DataStreamPtr_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setWorldGeometry_DataStreamPtr_EVString_callback = __method;
				}
				void register_setWorldGeometry_DataStreamPtr_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setWorldGeometry_DataStreamPtr_callback = __method;
				}
				void register_estimateWorldGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_estimateWorldGeometry_EVString_callback = __method;
				}
				void register_estimateWorldGeometry_DataStreamPtr_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_estimateWorldGeometry_DataStreamPtr_EVString_callback = __method;
				}
				void register_estimateWorldGeometry_DataStreamPtr_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_estimateWorldGeometry_DataStreamPtr_callback = __method;
				}
				void register_getSuggestedViewpoint_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSuggestedViewpoint_ev_bool_callback = __method;
				}
				void register_getSuggestedViewpoint_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSuggestedViewpoint_void_callback = __method;
				}
				void register_setOption_EVString_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setOption_EVString_void_callback = __method;
				}
				void register_getOption_EVString_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getOption_EVString_void_callback = __method;
				}
				void register_hasOption_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasOption_EVString_callback = __method;
				}
				void register_getOptionValues_EVString_StringVector_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getOptionValues_EVString_StringVector_callback = __method;
				}
				void register_getOptionKeys_StringVector_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getOptionKeys_StringVector_callback = __method;
				}
				void register__updateSceneGraph_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__updateSceneGraph_CCamera_callback = __method;
				}
				void register__findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_callback = __method;
				}
				void register__applySceneAnimations_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__applySceneAnimations_void_callback = __method;
				}
				void register__renderVisibleObjects_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__renderVisibleObjects_void_callback = __method;
				}
				void register__renderScene_CCamera_CViewport_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__renderScene_CCamera_CViewport_ev_bool_callback = __method;
				}
				void register__queueSkiesForRendering_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__queueSkiesForRendering_CCamera_callback = __method;
				}
				void register__setDestinationRenderSystem_CRenderSystem_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setDestinationRenderSystem_CRenderSystem_callback = __method;
				}
				void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_callback = __method;
				}
				void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_callback = __method;
				}
				void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_callback = __method;
				}
				void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_callback = __method;
				}
				void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_callback = __method;
				}
				void register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback = __method;
				}
				void register_setSkyPlane_ev_bool_CPlane_EVString_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_callback = __method;
				}
				void register_setSkyPlane_ev_bool_CPlane_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlane_ev_bool_CPlane_EVString_callback = __method;
				}
				void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_callback = __method;
				}
				void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_callback = __method;
				}
				void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_callback = __method;
				}
				void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_callback = __method;
				}
				void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_callback = __method;
				}
				void register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback = __method;
				}
				void register__setSkyPlane_ev_bool_CPlane_EVString_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_callback = __method;
				}
				void register__setSkyPlane_ev_bool_CPlane_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyPlane_ev_bool_CPlane_EVString_callback = __method;
				}
				void register_setSkyPlaneEnabled_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyPlaneEnabled_ev_bool_callback = __method;
				}
				void register_isSkyPlaneEnabled_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isSkyPlaneEnabled_void_callback = __method;
				}
				void register_getSkyPlaneNode_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSkyPlaneNode_void_callback = __method;
				}
				void register_getSkyPlaneGenParameters_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSkyPlaneGenParameters_void_callback = __method;
				}
				void register_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_callback = __method;
				}
				void register_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_callback = __method;
				}
				void register_setSkyBox_ev_bool_EVString_Real_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyBox_ev_bool_EVString_Real_ev_bool_callback = __method;
				}
				void register_setSkyBox_ev_bool_EVString_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyBox_ev_bool_EVString_Real_callback = __method;
				}
				void register_setSkyBox_ev_bool_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyBox_ev_bool_EVString_callback = __method;
				}
				void register__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_callback = __method;
				}
				void register__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_callback = __method;
				}
				void register__setSkyBox_ev_bool_EVString_Real_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyBox_ev_bool_EVString_Real_ev_uint8_callback = __method;
				}
				void register__setSkyBox_ev_bool_EVString_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyBox_ev_bool_EVString_Real_callback = __method;
				}
				void register__setSkyBox_ev_bool_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyBox_ev_bool_EVString_callback = __method;
				}
				void register_setSkyBoxEnabled_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyBoxEnabled_ev_bool_callback = __method;
				}
				void register_isSkyBoxEnabled_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isSkyBoxEnabled_void_callback = __method;
				}
				void register_getSkyBoxNode_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSkyBoxNode_void_callback = __method;
				}
				void register_getSkyBoxGenParameters_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSkyBoxGenParameters_void_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_Real_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_Real_callback = __method;
				}
				void register_setSkyDome_ev_bool_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDome_ev_bool_EVString_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_Real_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_Real_callback = __method;
				}
				void register__setSkyDome_ev_bool_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setSkyDome_ev_bool_EVString_callback = __method;
				}
				void register_setSkyDomeEnabled_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSkyDomeEnabled_ev_bool_callback = __method;
				}
				void register_isSkyDomeEnabled_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isSkyDomeEnabled_void_callback = __method;
				}
				void register_getSkyDomeNode_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSkyDomeNode_void_callback = __method;
				}
				void register_getSkyDomeGenParameters_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSkyDomeGenParameters_void_callback = __method;
				}
				void register_getFogMode_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getFogMode_void_callback = __method;
				}
				void register_getFogColour_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getFogColour_void_callback = __method;
				}
				void register_getFogStart_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getFogStart_void_callback = __method;
				}
				void register_getFogEnd_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getFogEnd_void_callback = __method;
				}
				void register_getFogDensity_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getFogDensity_void_callback = __method;
				}
				void register_createBillboardSet_EVString_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createBillboardSet_EVString_ev_uint32_callback = __method;
				}
				void register_createBillboardSet_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createBillboardSet_EVString_callback = __method;
				}
				void register_createBillboardSet_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createBillboardSet_ev_uint32_callback = __method;
				}
				void register_createBillboardSet_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createBillboardSet_void_callback = __method;
				}
				void register_getBillboardSet_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getBillboardSet_EVString_callback = __method;
				}
				void register_hasBillboardSet_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasBillboardSet_EVString_callback = __method;
				}
				void register_destroyBillboardSet_CBillboardSet_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyBillboardSet_CBillboardSet_callback = __method;
				}
				void register_destroyBillboardSet_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyBillboardSet_EVString_callback = __method;
				}
				void register_destroyAllBillboardSets_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllBillboardSets_void_callback = __method;
				}
				void register_setDisplaySceneNodes_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setDisplaySceneNodes_ev_bool_callback = __method;
				}
				void register_getDisplaySceneNodes_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getDisplaySceneNodes_void_callback = __method;
				}
				void register_createAnimation_EVString_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createAnimation_EVString_Real_callback = __method;
				}
				void register_getAnimation_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getAnimation_EVString_callback = __method;
				}
				void register_hasAnimation_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasAnimation_EVString_callback = __method;
				}
				void register_destroyAnimation_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAnimation_EVString_callback = __method;
				}
				void register_destroyAllAnimations_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllAnimations_void_callback = __method;
				}
				void register_createAnimationState_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createAnimationState_EVString_callback = __method;
				}
				void register_getAnimationState_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getAnimationState_EVString_callback = __method;
				}
				void register_hasAnimationState_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasAnimationState_EVString_callback = __method;
				}
				void register_destroyAnimationState_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAnimationState_EVString_callback = __method;
				}
				void register_destroyAllAnimationStates_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllAnimationStates_void_callback = __method;
				}
				void register_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_callback = __method;
				}
				void register_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_callback = __method;
				}
				void register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_callback = __method;
				}
				void register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_callback = __method;
				}
				void register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_callback = __method;
				}
				void register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_callback = __method;
				}
				void register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_callback = __method;
				}
				void register_getRenderQueue_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getRenderQueue_void_callback = __method;
				}
				void register_addRenderQueueListener_CRenderQueueListener_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_addRenderQueueListener_CRenderQueueListener_callback = __method;
				}
				void register_removeRenderQueueListener_CRenderQueueListener_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_removeRenderQueueListener_CRenderQueueListener_callback = __method;
				}
				void register_addRenderObjectListener_CRenderObjectListener_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_addRenderObjectListener_CRenderObjectListener_callback = __method;
				}
				void register_removeRenderObjectListener_CRenderObjectListener_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_removeRenderObjectListener_CRenderObjectListener_callback = __method;
				}
				void register_addSpecialCaseRenderQueue_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_addSpecialCaseRenderQueue_ev_uint8_callback = __method;
				}
				void register_removeSpecialCaseRenderQueue_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_removeSpecialCaseRenderQueue_ev_uint8_callback = __method;
				}
				void register_clearSpecialCaseRenderQueues_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_clearSpecialCaseRenderQueues_void_callback = __method;
				}
				void register_setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_callback = __method;
				}
				void register_getSpecialCaseRenderQueueMode_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getSpecialCaseRenderQueueMode_void_callback = __method;
				}
				void register_isRenderQueueToBeProcessed_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isRenderQueueToBeProcessed_ev_uint8_callback = __method;
				}
				void register_setWorldGeometryRenderQueue_ev_uint8_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setWorldGeometryRenderQueue_ev_uint8_callback = __method;
				}
				void register_getWorldGeometryRenderQueue_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getWorldGeometryRenderQueue_void_callback = __method;
				}
				void register_showBoundingBoxes_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_showBoundingBoxes_ev_bool_callback = __method;
				}
				void register_getShowBoundingBoxes_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShowBoundingBoxes_void_callback = __method;
				}
				void register__notifyAutotrackingSceneNode_CSceneNode_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__notifyAutotrackingSceneNode_CSceneNode_ev_bool_callback = __method;
				}
				void register_createAABBQuery_CAxisAlignedBox_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createAABBQuery_CAxisAlignedBox_ev_uint32_callback = __method;
				}
				void register_createAABBQuery_CAxisAlignedBox_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createAABBQuery_CAxisAlignedBox_callback = __method;
				}
				void register_createSphereQuery_CSphere_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createSphereQuery_CSphere_ev_uint32_callback = __method;
				}
				void register_createSphereQuery_CSphere_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createSphereQuery_CSphere_callback = __method;
				}
				void register_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_callback = __method;
				}
				void register_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_callback = __method;
				}
				void register_createRayQuery_CRay_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createRayQuery_CRay_ev_uint32_callback = __method;
				}
				void register_createRayQuery_CRay_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createRayQuery_CRay_callback = __method;
				}
				void register_createIntersectionQuery_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createIntersectionQuery_ev_uint32_callback = __method;
				}
				void register_createIntersectionQuery_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createIntersectionQuery_void_callback = __method;
				}
				void register_destroyQuery_CSceneQuery_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyQuery_CSceneQuery_callback = __method;
				}
				void register_setShadowTechnique_ShadowTechnique_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTechnique_ShadowTechnique_callback = __method;
				}
				void register_getShadowTechnique_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowTechnique_void_callback = __method;
				}
				void register_setShowDebugShadows_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShowDebugShadows_ev_bool_callback = __method;
				}
				void register_getShowDebugShadows_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShowDebugShadows_void_callback = __method;
				}
				void register_setShadowColour_CColourValue_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowColour_CColourValue_callback = __method;
				}
				void register_getShadowColour_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowColour_void_callback = __method;
				}
				void register_setShadowDirectionalLightExtrusionDistance_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowDirectionalLightExtrusionDistance_Real_callback = __method;
				}
				void register_getShadowDirectionalLightExtrusionDistance_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowDirectionalLightExtrusionDistance_void_callback = __method;
				}
				void register_setShadowColorRRatio_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowColorRRatio_Real_callback = __method;
				}
				void register_setShadowColorGRatio_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowColorGRatio_Real_callback = __method;
				}
				void register_setShadowColorBRatio_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowColorBRatio_Real_callback = __method;
				}
				void register_getShadowColorRRatio_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowColorRRatio_void_callback = __method;
				}
				void register_getShadowColorGRatio_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowColorGRatio_void_callback = __method;
				}
				void register_getShadowColorBRatio_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowColorBRatio_void_callback = __method;
				}
				void register_setShadowFarDistance_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowFarDistance_Real_callback = __method;
				}
				void register_getShadowFarDistance_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowFarDistance_void_callback = __method;
				}
				void register_getShadowFarDistanceSquared_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowFarDistanceSquared_void_callback = __method;
				}
				void register_setShadowIndexBufferSize_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowIndexBufferSize_ev_size_t_callback = __method;
				}
				void register_getShadowIndexBufferSize_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowIndexBufferSize_void_callback = __method;
				}
				void register_setShadowTextureSize_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureSize_ev_uint16_callback = __method;
				}
				void register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_callback = __method;
				}
				void register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback = __method;
				}
				void register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback = __method;
				}
				void register_setShadowTextureConfig_ev_size_t_ShadowTextureConfig_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureConfig_ev_size_t_ShadowTextureConfig_callback = __method;
				}
				void register_setShadowTexturePixelFormat_PixelFormat_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTexturePixelFormat_PixelFormat_callback = __method;
				}
				void register_setShadowTextureFSAA_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureFSAA_ev_uint16_callback = __method;
				}
				void register_setShadowTextureCount_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureCount_ev_size_t_callback = __method;
				}
				void register_setShadowTextureSettings_ev_uint16_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureSettings_ev_uint16_ev_uint16_callback = __method;
				}
				void register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_callback = __method;
				}
				void register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback = __method;
				}
				void register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback = __method;
				}
				void register_getShadowTexture_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowTexture_ev_size_t_callback = __method;
				}
				void register_setShadowDirLightTextureOffset_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowDirLightTextureOffset_Real_callback = __method;
				}
				void register_getShadowDirLightTextureOffset_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowDirLightTextureOffset_void_callback = __method;
				}
				void register_setShadowTextureFadeStart_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureFadeStart_Real_callback = __method;
				}
				void register_setShadowTextureFadeEnd_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureFadeEnd_Real_callback = __method;
				}
				void register_setShadowTextureSelfShadow_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureSelfShadow_ev_bool_callback = __method;
				}
				void register_getShadowTextureSelfShadow_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowTextureSelfShadow_void_callback = __method;
				}
				void register_setShadowTextureCasterMaterial_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureCasterMaterial_EVString_callback = __method;
				}
				void register_setShadowTextureReceiverMaterial_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowTextureReceiverMaterial_EVString_callback = __method;
				}
				void register_setShadowCasterRenderBackFaces_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowCasterRenderBackFaces_ev_bool_callback = __method;
				}
				void register_getShadowCasterRenderBackFaces_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowCasterRenderBackFaces_void_callback = __method;
				}
				void register_setShadowCameraSetup_ShadowCameraSetupPtr_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowCameraSetup_ShadowCameraSetupPtr_callback = __method;
				}
				void register_getShadowCameraSetup_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowCameraSetup_void_callback = __method;
				}
				void register_setShadowUseInfiniteFarPlane_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowUseInfiniteFarPlane_ev_bool_callback = __method;
				}
				void register_isShadowTechniqueStencilBased_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isShadowTechniqueStencilBased_void_callback = __method;
				}
				void register_isShadowTechniqueTextureBased_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isShadowTechniqueTextureBased_void_callback = __method;
				}
				void register_isShadowTechniqueModulative_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isShadowTechniqueModulative_void_callback = __method;
				}
				void register_isShadowTechniqueAdditive_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isShadowTechniqueAdditive_void_callback = __method;
				}
				void register_isShadowTechniqueIntegrated_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isShadowTechniqueIntegrated_void_callback = __method;
				}
				void register_isShadowTechniqueInUse_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isShadowTechniqueInUse_void_callback = __method;
				}
				void register_setShadowUseLightClipPlanes_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setShadowUseLightClipPlanes_ev_bool_callback = __method;
				}
				void register_getShadowUseLightClipPlanes_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getShadowUseLightClipPlanes_void_callback = __method;
				}
				void register__setActiveCompositorChain_CCompositorChain_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setActiveCompositorChain_CCompositorChain_callback = __method;
				}
				void register_setLateMaterialResolving_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setLateMaterialResolving_ev_bool_callback = __method;
				}
				void register_isLateMaterialResolving_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_isLateMaterialResolving_void_callback = __method;
				}
				void register__getActiveCompositorChain_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__getActiveCompositorChain_void_callback = __method;
				}
				void register_addListener_CSceneManagerListener_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_addListener_CSceneManagerListener_callback = __method;
				}
				void register_removeListener_CSceneManagerListener_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_removeListener_CSceneManagerListener_callback = __method;
				}
				void register_existListener_CSceneManagerListener_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_existListener_CSceneManagerListener_callback = __method;
				}
				void register_createStaticGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createStaticGeometry_EVString_callback = __method;
				}
				void register_getStaticGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getStaticGeometry_EVString_callback = __method;
				}
				void register_hasStaticGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasStaticGeometry_EVString_callback = __method;
				}
				void register_destroyStaticGeometry_CStaticGeometry_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyStaticGeometry_CStaticGeometry_callback = __method;
				}
				void register_destroyStaticGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyStaticGeometry_EVString_callback = __method;
				}
				void register_destroyAllStaticGeometry_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllStaticGeometry_void_callback = __method;
				}
				void register_createInstancedGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createInstancedGeometry_EVString_callback = __method;
				}
				void register_getInstancedGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getInstancedGeometry_EVString_callback = __method;
				}
				void register_destroyInstancedGeometry_CInstancedGeometry_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyInstancedGeometry_CInstancedGeometry_callback = __method;
				}
				void register_destroyInstancedGeometry_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyInstancedGeometry_EVString_callback = __method;
				}
				void register_destroyAllInstancedGeometry_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllInstancedGeometry_void_callback = __method;
				}
				void register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback = __method;
				}
				void register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback = __method;
				}
				void register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback = __method;
				}
				void register_getInstanceManager_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getInstanceManager_EVString_callback = __method;
				}
				void register_hasInstanceManager_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasInstanceManager_EVString_callback = __method;
				}
				void register_destroyInstanceManager_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyInstanceManager_EVString_callback = __method;
				}
				void register_destroyInstanceManager_CInstanceManager_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyInstanceManager_CInstanceManager_callback = __method;
				}
				void register_destroyInstanceManagerWithThreadSafe_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyInstanceManagerWithThreadSafe_EVString_callback = __method;
				}
				void register_destroyInstanceManagerWithThreadSafe_CInstanceManager_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyInstanceManagerWithThreadSafe_CInstanceManager_callback = __method;
				}
				void register_destroyAllInstanceManagers_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllInstanceManagers_void_callback = __method;
				}
				void register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback = __method;
				}
				void register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback = __method;
				}
				void register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback = __method;
				}
				void register_createInstancedEntity_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createInstancedEntity_EVString_EVString_callback = __method;
				}
				void register_destroyInstancedEntity_CInstancedEntity_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyInstancedEntity_CInstancedEntity_callback = __method;
				}
				void register_createMovableObject_EVString_EVString_CommonStringPairList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createMovableObject_EVString_EVString_CommonStringPairList_callback = __method;
				}
				void register_createMovableObject_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createMovableObject_EVString_EVString_callback = __method;
				}
				void register_createMovableObject_EVString_CommonStringPairList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createMovableObject_EVString_CommonStringPairList_callback = __method;
				}
				void register_createMovableObject_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createMovableObject_EVString_callback = __method;
				}
				void register_destroyMovableObject_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyMovableObject_EVString_EVString_callback = __method;
				}
				void register_destroyMovableObject_CMovableObject_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyMovableObject_CMovableObject_callback = __method;
				}
				void register_destroyAllMovableObjectsByType_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllMovableObjectsByType_EVString_callback = __method;
				}
				void register_destroyAllMovableObjects_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyAllMovableObjects_void_callback = __method;
				}
				void register_getMovableObject_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getMovableObject_EVString_EVString_callback = __method;
				}
				void register_hasMovableObject_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_hasMovableObject_EVString_EVString_callback = __method;
				}
				void register_getMovableObjectIterator_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getMovableObjectIterator_EVString_callback = __method;
				}
				void register_injectMovableObject_CMovableObject_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_injectMovableObject_CMovableObject_callback = __method;
				}
				void register_extractMovableObject_EVString_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_extractMovableObject_EVString_EVString_callback = __method;
				}
				void register_extractMovableObject_CMovableObject_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_extractMovableObject_CMovableObject_callback = __method;
				}
				void register_extractAllMovableObjectsByType_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_extractAllMovableObjectsByType_EVString_callback = __method;
				}
				void register_setVisibilityMask_ev_uint32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setVisibilityMask_ev_uint32_callback = __method;
				}
				void register_getVisibilityMask_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getVisibilityMask_void_callback = __method;
				}
				void register_setFindVisibleObjects_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setFindVisibleObjects_ev_bool_callback = __method;
				}
				void register_getFindVisibleObjects_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getFindVisibleObjects_void_callback = __method;
				}
				void register_setNormaliseNormalsOnScale_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setNormaliseNormalsOnScale_ev_bool_callback = __method;
				}
				void register_getNormaliseNormalsOnScale_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getNormaliseNormalsOnScale_void_callback = __method;
				}
				void register_setFlipCullingOnNegativeScale_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setFlipCullingOnNegativeScale_ev_bool_callback = __method;
				}
				void register_getFlipCullingOnNegativeScale_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getFlipCullingOnNegativeScale_void_callback = __method;
				}
				void register__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_callback = __method;
				}
				void register__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_callback = __method;
				}
				void register__injectRenderWithPass_CPass_CRenderable_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__injectRenderWithPass_CPass_CRenderable_ev_bool_callback = __method;
				}
				void register__injectRenderWithPass_CPass_CRenderable_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__injectRenderWithPass_CPass_CRenderable_callback = __method;
				}
				void register__suppressRenderStateChanges_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__suppressRenderStateChanges_ev_bool_callback = __method;
				}
				void register__areRenderStateChangesSuppressed_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__areRenderStateChangesSuppressed_void_callback = __method;
				}
				void register__setPass_CPass_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setPass_CPass_ev_bool_ev_bool_callback = __method;
				}
				void register__setPass_CPass_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setPass_CPass_ev_bool_callback = __method;
				}
				void register__setPass_CPass_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__setPass_CPass_callback = __method;
				}
				void register__markGpuParamsDirty_ev_uint16_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__markGpuParamsDirty_ev_uint16_callback = __method;
				}
				void register__suppressShadows_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__suppressShadows_ev_bool_callback = __method;
				}
				void register__areShadowsSuppressed_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__areShadowsSuppressed_void_callback = __method;
				}
				void register__renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(EarthView::World::Core::ev_string __method)
				{
					this->m__renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback = __method;
				}
				void register_setCameraRelativeRendering_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setCameraRelativeRendering_ev_bool_callback = __method;
				}
				void register_getCameraRelativeRendering_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getCameraRelativeRendering_void_callback = __method;
				}
				void register_getHeightAt_Real_Real_ev_real32_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getHeightAt_Real_Real_ev_real32_callback = __method;
				}
				void register_getBestHeightAt_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getBestHeightAt_Real_Real_callback = __method;
				}
				void register_getHeightAtTile_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getHeightAtTile_Real_Real_callback = __method;
				}
				void register_getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_callback = __method;
				}
				void register_addTempLayer_ILayer_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_addTempLayer_ILayer_callback = __method;
				}
				void register_removeTempLayer_ILayer_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_removeTempLayer_ILayer_callback = __method;
				}
				void register_updateQuadImage_bool_bool_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_updateQuadImage_bool_bool_bool_callback = __method;
				}
				void register_updateQuadImage_bool_bool_bool_Real_Real_Real_Real_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_updateQuadImage_bool_bool_bool_Real_Real_Real_Real_callback = __method;
				}
				void register_updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_callback = __method;
				}
				void register_setCollisionDetectionEnable_ev_bool_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_setCollisionDetectionEnable_ev_bool_callback = __method;
				}
				virtual EarthView::World::Graphic::CSceneNode* createSceneNodeImpl()
				{
					if (this->_gRef != NULL && this->m_createSceneNodeImpl_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createSceneNodeImpl_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						if(__values1 != NULL) {
							((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(false);
						}
						return __values1;
					}
					else
					{
						return this->CSceneManager::createSceneNodeImpl();
					}
				}
				virtual EarthView::World::Graphic::CSceneNode* createSceneNodeImpl(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createSceneNodeImpl_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createSceneNodeImpl_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						if(__values1 != NULL) {
							((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(false);
						}
						return __values1;
					}
					else
					{
						return this->CSceneManager::createSceneNodeImpl(name);
					}
				}
				virtual void initRenderQueue()
				{
					if (this->_gRef != NULL && this->m_initRenderQueue_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("initRenderQueue_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::initRenderQueue();
					}
				}
				virtual const EarthView::World::Graphic::CPass* deriveShadowCasterPass(const EarthView::World::Graphic::CPass* pass)
				{
					if (this->_gRef != NULL && this->m_deriveShadowCasterPass_CPass_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jmethodID __method = __gr->getMethod("deriveShadowCasterPass_CPass_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , pass_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CPass *__values1 = (const EarthView::World::Graphic::CPass*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::deriveShadowCasterPass(pass);
					}
				}
				virtual const EarthView::World::Graphic::CPass* deriveShadowReceiverPass(const EarthView::World::Graphic::CPass* pass)
				{
					if (this->_gRef != NULL && this->m_deriveShadowReceiverPass_CPass_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jmethodID __method = __gr->getMethod("deriveShadowReceiverPass_CPass_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , pass_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CPass *__values1 = (const EarthView::World::Graphic::CPass*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::deriveShadowReceiverPass(pass);
					}
				}
				virtual ev_bool validatePassForRendering(const EarthView::World::Graphic::CPass* pass)
				{
					if (this->_gRef != NULL && this->m_validatePassForRendering_CPass_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jmethodID __method = __gr->getMethod("validatePassForRendering_CPass_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , pass_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::validatePassForRendering(pass);
					}
				}
				virtual ev_bool validateRenderableForRendering(const EarthView::World::Graphic::CPass* pass, const EarthView::World::Graphic::CRenderable* rend)
				{
					if (this->_gRef != NULL && this->m_validateRenderableForRendering_CPass_CRenderable_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jlong rend_j = (jlong) rend;
						jmethodID __method = __gr->getMethod("validateRenderableForRendering_CPass_CRenderable_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , pass_j, rend_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::validateRenderableForRendering(pass, rend);
					}
				}
				virtual EarthView::World::Graphic::CMeshPtr createSkyboxPlane(EarthView::World::Graphic::CSceneManager::BoxPlane bp, Real distance, const EarthView::World::Spatial::Math::CQuaternion& orientation, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m_createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint bp_j = (jint) bp;
						jdouble distance_j = (jdouble) distance;
						jlong orientation_j = (jlong) &orientation;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , bp_j, distance_j, orientation_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CMeshPtr __values1 = *(EarthView::World::Graphic::CMeshPtr*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createSkyboxPlane(bp, distance, orientation, groupName);
					}
				}
				virtual EarthView::World::Graphic::CMeshPtr createSkydomePlane(EarthView::World::Graphic::CSceneManager::BoxPlane bp, Real curvature, Real tiling, Real distance, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments, ev_int32 ysegments, ev_int32 ySegmentsToKeep, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m_createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint bp_j = (jint) bp;
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jint ySegmentsToKeep_j = (jint) ySegmentsToKeep;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , bp_j, curvature_j, tiling_j, distance_j, orientation_j, xsegments_j, ysegments_j, ySegmentsToKeep_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CMeshPtr __values1 = *(EarthView::World::Graphic::CMeshPtr*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createSkydomePlane(bp, curvature, tiling, distance, orientation, xsegments, ysegments, ySegmentsToKeep, groupName);
					}
				}
				virtual void useRenderableViewProjMode(const EarthView::World::Graphic::CRenderable* pRend, ev_bool fixedFunction)
				{
					if (this->_gRef != NULL && this->m_useRenderableViewProjMode_CRenderable_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pRend_j = (jlong) pRend;
						jboolean fixedFunction_j = (jboolean) fixedFunction;
						jmethodID __method = __gr->getMethod("useRenderableViewProjMode_CRenderable_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , pRend_j, fixedFunction_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::useRenderableViewProjMode(pRend, fixedFunction);
					}
				}
				virtual void resetViewProjMode(ev_bool fixedFunction)
				{
					if (this->_gRef != NULL && this->m_resetViewProjMode_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean fixedFunction_j = (jboolean) fixedFunction;
						jmethodID __method = __gr->getMethod("resetViewProjMode_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , fixedFunction_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::resetViewProjMode(fixedFunction);
					}
				}
				virtual void firePreRenderQueues()
				{
					if (this->_gRef != NULL && this->m_firePreRenderQueues_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("firePreRenderQueues_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::firePreRenderQueues();
					}
				}
				virtual void firePostRenderQueues()
				{
					if (this->_gRef != NULL && this->m_firePostRenderQueues_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("firePostRenderQueues_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::firePostRenderQueues();
					}
				}
				virtual ev_bool fireRenderQueueStarted(ev_uint8 id, const EVString& invocation)
				{
					if (this->_gRef != NULL && this->m_fireRenderQueueStarted_ev_uint8_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort id_j = (jshort) id;
						EarthView::World::Core::ev_wstring invocation_wch = invocation;
						jstring invocation_j = __env->NewString((const jchar*)invocation_wch.getString(), invocation_wch.size());
						jmethodID __method = __gr->getMethod("fireRenderQueueStarted_ev_uint8_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , id_j, invocation_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::fireRenderQueueStarted(id, invocation);
					}
				}
				virtual ev_bool fireRenderQueueEnded(ev_uint8 id, const EVString& invocation)
				{
					if (this->_gRef != NULL && this->m_fireRenderQueueEnded_ev_uint8_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort id_j = (jshort) id;
						EarthView::World::Core::ev_wstring invocation_wch = invocation;
						jstring invocation_j = __env->NewString((const jchar*)invocation_wch.getString(), invocation_wch.size());
						jmethodID __method = __gr->getMethod("fireRenderQueueEnded_ev_uint8_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , id_j, invocation_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::fireRenderQueueEnded(id, invocation);
					}
				}
				virtual void fireRenderSingleObjectStarted(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, const EarthView::World::Graphic::CAutoParamDataSource* source, const EarthView::World::Graphic::LightList* pLightList, ev_bool suppressRenderStateChanges)
				{
					if (this->_gRef != NULL && this->m_fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong source_j = (jlong) source;
						jlong pLightList_j = (jlong) pLightList;
						jboolean suppressRenderStateChanges_j = (jboolean) suppressRenderStateChanges;
						jmethodID __method = __gr->getMethod("fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, source_j, pLightList_j, suppressRenderStateChanges_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::fireRenderSingleObjectStarted(rend, pass, source, pLightList, suppressRenderStateChanges);
					}
				}
				virtual void fireRenderSingleObjectEnd(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, const EarthView::World::Graphic::CAutoParamDataSource* source, const EarthView::World::Graphic::LightList* pLightList, ev_bool suppressRenderStateChanges)
				{
					if (this->_gRef != NULL && this->m_fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong source_j = (jlong) source;
						jlong pLightList_j = (jlong) pLightList;
						jboolean suppressRenderStateChanges_j = (jboolean) suppressRenderStateChanges;
						jmethodID __method = __gr->getMethod("fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, source_j, pLightList_j, suppressRenderStateChanges_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::fireRenderSingleObjectEnd(rend, pass, source, pLightList, suppressRenderStateChanges);
					}
				}
				virtual void fireShadowTexturesUpdated(ev_size_t numberOfShadowTextures)
				{
					if (this->_gRef != NULL && this->m_fireShadowTexturesUpdated_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong numberOfShadowTextures_j = (jlong) numberOfShadowTextures;
						jmethodID __method = __gr->getMethod("fireShadowTexturesUpdated_ev_size_t_callback");
						__env->CallVoidMethod(__obj, __method , numberOfShadowTextures_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::fireShadowTexturesUpdated(numberOfShadowTextures);
					}
				}
				virtual void fireShadowTexturesPreCaster(EarthView::World::Graphic::CLight* light, EarthView::World::Graphic::CCamera* camera, ev_size_t iteration)
				{
					if (this->_gRef != NULL && this->m_fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong light_j = (jlong) light;
						jlong camera_j = (jlong) camera;
						jlong iteration_j = (jlong) iteration;
						jmethodID __method = __gr->getMethod("fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_callback");
						__env->CallVoidMethod(__obj, __method , light_j, camera_j, iteration_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::fireShadowTexturesPreCaster(light, camera, iteration);
					}
				}
				virtual void fireShadowTexturesPreReceiver(EarthView::World::Graphic::CLight* light, EarthView::World::Graphic::CFrustum* f)
				{
					if (this->_gRef != NULL && this->m_fireShadowTexturesPreReceiver_CLight_CFrustum_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong light_j = (jlong) light;
						jlong f_j = (jlong) f;
						jmethodID __method = __gr->getMethod("fireShadowTexturesPreReceiver_CLight_CFrustum_callback");
						__env->CallVoidMethod(__obj, __method , light_j, f_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::fireShadowTexturesPreReceiver(light, f);
					}
				}
				virtual void firePreUpdateSceneGraph(EarthView::World::Graphic::CCamera* camera)
				{
					if (this->_gRef != NULL && this->m_firePreUpdateSceneGraph_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong camera_j = (jlong) camera;
						jmethodID __method = __gr->getMethod("firePreUpdateSceneGraph_CCamera_callback");
						__env->CallVoidMethod(__obj, __method , camera_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::firePreUpdateSceneGraph(camera);
					}
				}
				virtual void firePostUpdateSceneGraph(EarthView::World::Graphic::CCamera* camera)
				{
					if (this->_gRef != NULL && this->m_firePostUpdateSceneGraph_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong camera_j = (jlong) camera;
						jmethodID __method = __gr->getMethod("firePostUpdateSceneGraph_CCamera_callback");
						__env->CallVoidMethod(__obj, __method , camera_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::firePostUpdateSceneGraph(camera);
					}
				}
				virtual void firePreFindVisibleObjects(EarthView::World::Graphic::CViewport* v)
				{
					if (this->_gRef != NULL && this->m_firePreFindVisibleObjects_CViewport_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong v_j = (jlong) v;
						jmethodID __method = __gr->getMethod("firePreFindVisibleObjects_CViewport_callback");
						__env->CallVoidMethod(__obj, __method , v_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::firePreFindVisibleObjects(v);
					}
				}
				virtual void firePostFindVisibleObjects(EarthView::World::Graphic::CViewport* v)
				{
					if (this->_gRef != NULL && this->m_firePostFindVisibleObjects_CViewport_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong v_j = (jlong) v;
						jmethodID __method = __gr->getMethod("firePostFindVisibleObjects_CViewport_callback");
						__env->CallVoidMethod(__obj, __method , v_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::firePostFindVisibleObjects(v);
					}
				}
				virtual void fireSceneManagerDestroyed()
				{
					if (this->_gRef != NULL && this->m_fireSceneManagerDestroyed_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("fireSceneManagerDestroyed_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::fireSceneManagerDestroyed();
					}
				}
				virtual void setViewport(EarthView::World::Graphic::CViewport* vp)
				{
					if (this->_gRef != NULL && this->m_setViewport_CViewport_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong vp_j = (jlong) vp;
						jmethodID __method = __gr->getMethod("setViewport_CViewport_callback");
						__env->CallVoidMethod(__obj, __method , vp_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setViewport(vp);
					}
				}
				virtual void renderVisibleObjectsDefaultSequence()
				{
					if (this->_gRef != NULL && this->m_renderVisibleObjectsDefaultSequence_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("renderVisibleObjectsDefaultSequence_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::renderVisibleObjectsDefaultSequence();
					}
				}
				virtual void renderVisibleObjectsCustomSequence(EarthView::World::Graphic::CRenderQueueInvocationSequence* s)
				{
					if (this->_gRef != NULL && this->m_renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong s_j = (jlong) s;
						jmethodID __method = __gr->getMethod("renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_callback");
						__env->CallVoidMethod(__obj, __method , s_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::renderVisibleObjectsCustomSequence(s);
					}
				}
				virtual void prepareRenderQueue()
				{
					if (this->_gRef != NULL && this->m_prepareRenderQueue_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("prepareRenderQueue_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::prepareRenderQueue();
					}
				}
				virtual void renderSingleObject(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, ev_bool lightScissoringClipping, ev_bool doLightIteration, const EarthView::World::Graphic::LightList* manualLightList)
				{
					if (this->_gRef != NULL && this->m_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jlong manualLightList_j = (jlong) manualLightList;
						jmethodID __method = __gr->getMethod("renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, lightScissoringClipping_j, doLightIteration_j, manualLightList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::renderSingleObject(rend, pass, lightScissoringClipping, doLightIteration, manualLightList);
					}
				}
				virtual void renderSingleObject(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, ev_bool lightScissoringClipping, ev_bool doLightIteration)
				{
					if (this->_gRef != NULL && this->m_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jmethodID __method = __gr->getMethod("renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, lightScissoringClipping_j, doLightIteration_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::renderSingleObject(rend, pass, lightScissoringClipping, doLightIteration);
					}
				}
				virtual EarthView::World::Graphic::CAutoParamDataSource* createAutoParamDataSource() const
				{
					if (this->_gRef != NULL && this->m_createAutoParamDataSource_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createAutoParamDataSource_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CAutoParamDataSource *__values1 = (EarthView::World::Graphic::CAutoParamDataSource*) __values1_j;
						if(__values1 != NULL) {
							((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(false);
						}
						return __values1;
					}
					else
					{
						return this->CSceneManager::createAutoParamDataSource();
					}
				}
				virtual void findLightsAffectingFrustum(const EarthView::World::Graphic::CCamera* camera)
				{
					if (this->_gRef != NULL && this->m_findLightsAffectingFrustum_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong camera_j = (jlong) camera;
						jmethodID __method = __gr->getMethod("findLightsAffectingFrustum_CCamera_callback");
						__env->CallVoidMethod(__obj, __method , camera_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::findLightsAffectingFrustum(camera);
					}
				}
				virtual void initShadowVolumeMaterials()
				{
					if (this->_gRef != NULL && this->m_initShadowVolumeMaterials_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("initShadowVolumeMaterials_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::initShadowVolumeMaterials();
					}
				}
				virtual void ensureShadowTexturesCreated()
				{
					if (this->_gRef != NULL && this->m_ensureShadowTexturesCreated_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("ensureShadowTexturesCreated_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::ensureShadowTexturesCreated();
					}
				}
				virtual void destroyShadowTextures()
				{
					if (this->_gRef != NULL && this->m_destroyShadowTextures_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyShadowTextures_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyShadowTextures();
					}
				}
				virtual void prepareShadowTextures(EarthView::World::Graphic::CCamera* cam, EarthView::World::Graphic::CViewport* vp, const EarthView::World::Graphic::LightList* lightList)
				{
					if (this->_gRef != NULL && this->m_prepareShadowTextures_CCamera_CViewport_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong cam_j = (jlong) cam;
						jlong vp_j = (jlong) vp;
						jlong lightList_j = (jlong) lightList;
						jmethodID __method = __gr->getMethod("prepareShadowTextures_CCamera_CViewport_LightList_callback");
						__env->CallVoidMethod(__obj, __method , cam_j, vp_j, lightList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::prepareShadowTextures(cam, vp, lightList);
					}
				}
				virtual void prepareShadowTextures(EarthView::World::Graphic::CCamera* cam, EarthView::World::Graphic::CViewport* vp)
				{
					if (this->_gRef != NULL && this->m_prepareShadowTextures_CCamera_CViewport_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong cam_j = (jlong) cam;
						jlong vp_j = (jlong) vp;
						jmethodID __method = __gr->getMethod("prepareShadowTextures_CCamera_CViewport_callback");
						__env->CallVoidMethod(__obj, __method , cam_j, vp_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::prepareShadowTextures(cam, vp);
					}
				}
				virtual void setImageDefaultMaterial(const EarthView::World::Graphic::CMaterialPtr& matPtr)
				{
					if (this->_gRef != NULL && this->m_setImageDefaultMaterial_CMaterialPtr_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong matPtr_j = (jlong) &matPtr;
						jmethodID __method = __gr->getMethod("setImageDefaultMaterial_CMaterialPtr_callback");
						__env->CallVoidMethod(__obj, __method , matPtr_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setImageDefaultMaterial(matPtr);
					}
				}
				virtual void setImageUseDefaultMaterial(const ev_bool& useDefaultMat)
				{
					if (this->_gRef != NULL && this->m_setImageUseDefaultMaterial_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean useDefaultMat_j = (jboolean) useDefaultMat;
						jmethodID __method = __gr->getMethod("setImageUseDefaultMaterial_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , useDefaultMat_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setImageUseDefaultMaterial(useDefaultMat);
					}
				}
				virtual EarthView::World::Spatial::Math::CVector3 getSunPosition()
				{
					if (this->_gRef != NULL && this->m_getSunPosition_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSunPosition_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Spatial::Math::CVector3 __values1 = *(EarthView::World::Spatial::Math::CVector3*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSunPosition();
					}
				}
				virtual void setAtmosphereVisible(const ev_bool& visible)
				{
					if (this->_gRef != NULL && this->m_setAtmosphereVisible_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean visible_j = (jboolean) visible;
						jmethodID __method = __gr->getMethod("setAtmosphereVisible_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , visible_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setAtmosphereVisible(visible);
					}
				}
				virtual void storeAtmosphereVisibleState()
				{
					if (this->_gRef != NULL && this->m_storeAtmosphereVisibleState_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("storeAtmosphereVisibleState_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::storeAtmosphereVisibleState();
					}
				}
				virtual void restoreAtmosphereVisibleState()
				{
					if (this->_gRef != NULL && this->m_restoreAtmosphereVisibleState_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("restoreAtmosphereVisibleState_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::restoreAtmosphereVisibleState();
					}
				}
				virtual void setSunVisible(ev_bool flag)
				{
					if (this->_gRef != NULL && this->m_setSunVisible_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean flag_j = (jboolean) flag;
						jmethodID __method = __gr->getMethod("setSunVisible_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , flag_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSunVisible(flag);
					}
				}
				virtual EarthView::World::Graphic::CSceneManager::RenderContext* _pauseRendering()
				{
					if (this->_gRef != NULL && this->m__pauseRendering_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("_pauseRendering_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneManager::RenderContext *__values1 = (EarthView::World::Graphic::CSceneManager::RenderContext*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::_pauseRendering();
					}
				}
				virtual void _resumeRendering(EarthView::World::Graphic::CSceneManager::RenderContext* context)
				{
					if (this->_gRef != NULL && this->m__resumeRendering_RenderContext_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong context_j = (jlong) context;
						jmethodID __method = __gr->getMethod("_resumeRendering_RenderContext_callback");
						__env->CallVoidMethod(__obj, __method , context_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_resumeRendering(context);
					}
				}
				virtual void renderShadowVolumesToStencil(const EarthView::World::Graphic::CLight* light, const EarthView::World::Graphic::CCamera* cam, ev_bool calcScissor)
				{
					if (this->_gRef != NULL && this->m_renderShadowVolumesToStencil_CLight_CCamera_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong light_j = (jlong) light;
						jlong cam_j = (jlong) cam;
						jboolean calcScissor_j = (jboolean) calcScissor;
						jmethodID __method = __gr->getMethod("renderShadowVolumesToStencil_CLight_CCamera_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , light_j, cam_j, calcScissor_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::renderShadowVolumesToStencil(light, cam, calcScissor);
					}
				}
				virtual void setShadowVolumeStencilState(ev_bool secondpass, ev_bool zfail, ev_bool twosided)
				{
					if (this->_gRef != NULL && this->m_setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean secondpass_j = (jboolean) secondpass;
						jboolean zfail_j = (jboolean) zfail;
						jboolean twosided_j = (jboolean) twosided;
						jmethodID __method = __gr->getMethod("setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , secondpass_j, zfail_j, twosided_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowVolumeStencilState(secondpass, zfail, twosided);
					}
				}
				virtual const EarthView::World::Graphic::CSceneManager::ShadowCasterList& findShadowCastersForLight(const EarthView::World::Graphic::CLight* light, const EarthView::World::Graphic::CCamera* camera)
				{
					if (this->_gRef != NULL && this->m_findShadowCastersForLight_CLight_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong light_j = (jlong) light;
						jlong camera_j = (jlong) camera;
						jmethodID __method = __gr->getMethod("findShadowCastersForLight_CLight_CCamera_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , light_j, camera_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CSceneManager::ShadowCasterList &__values1 = *(const EarthView::World::Graphic::CSceneManager::ShadowCasterList*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::findShadowCastersForLight(light, camera);
					}
				}
				virtual void renderBasicQueueGroupObjects(EarthView::World::Graphic::CRenderQueueGroup* pGroup, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om)
				{
					if (this->_gRef != NULL && this->m_renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pGroup_j = (jlong) pGroup;
						jint om_j = (jint) om;
						jmethodID __method = __gr->getMethod("renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
						__env->CallVoidMethod(__obj, __method , pGroup_j, om_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::renderBasicQueueGroupObjects(pGroup, om);
					}
				}
				virtual void renderAdditiveStencilShadowedQueueGroupObjects(EarthView::World::Graphic::CRenderQueueGroup* group, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om)
				{
					if (this->_gRef != NULL && this->m_renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong group_j = (jlong) group;
						jint om_j = (jint) om;
						jmethodID __method = __gr->getMethod("renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
						__env->CallVoidMethod(__obj, __method , group_j, om_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::renderAdditiveStencilShadowedQueueGroupObjects(group, om);
					}
				}
				virtual void renderModulativeStencilShadowedQueueGroupObjects(EarthView::World::Graphic::CRenderQueueGroup* group, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om)
				{
					if (this->_gRef != NULL && this->m_renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong group_j = (jlong) group;
						jint om_j = (jint) om;
						jmethodID __method = __gr->getMethod("renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
						__env->CallVoidMethod(__obj, __method , group_j, om_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::renderModulativeStencilShadowedQueueGroupObjects(group, om);
					}
				}
				virtual void renderTextureShadowCasterQueueGroupObjects(EarthView::World::Graphic::CRenderQueueGroup* group, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om)
				{
					if (this->_gRef != NULL && this->m_renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong group_j = (jlong) group;
						jint om_j = (jint) om;
						jmethodID __method = __gr->getMethod("renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
						__env->CallVoidMethod(__obj, __method , group_j, om_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::renderTextureShadowCasterQueueGroupObjects(group, om);
					}
				}
				virtual void renderTextureShadowReceiverQueueGroupObjects(EarthView::World::Graphic::CRenderQueueGroup* group, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om)
				{
					if (this->_gRef != NULL && this->m_renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong group_j = (jlong) group;
						jint om_j = (jint) om;
						jmethodID __method = __gr->getMethod("renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
						__env->CallVoidMethod(__obj, __method , group_j, om_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::renderTextureShadowReceiverQueueGroupObjects(group, om);
					}
				}
				virtual void renderModulativeTextureShadowedQueueGroupObjects(EarthView::World::Graphic::CRenderQueueGroup* group, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om)
				{
					if (this->_gRef != NULL && this->m_renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong group_j = (jlong) group;
						jint om_j = (jint) om;
						jmethodID __method = __gr->getMethod("renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
						__env->CallVoidMethod(__obj, __method , group_j, om_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::renderModulativeTextureShadowedQueueGroupObjects(group, om);
					}
				}
				virtual void renderAdditiveTextureShadowedQueueGroupObjects(EarthView::World::Graphic::CRenderQueueGroup* group, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om)
				{
					if (this->_gRef != NULL && this->m_renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong group_j = (jlong) group;
						jint om_j = (jint) om;
						jmethodID __method = __gr->getMethod("renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
						__env->CallVoidMethod(__obj, __method , group_j, om_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::renderAdditiveTextureShadowedQueueGroupObjects(group, om);
					}
				}
				virtual void renderObjects(const EarthView::World::Graphic::CQueuedRenderableCollection& objs, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om, ev_bool lightScissoringClipping, ev_bool doLightIteration, const EarthView::World::Graphic::LightList* manualLightList)
				{
					if (this->_gRef != NULL && this->m_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong objs_j = (jlong) &objs;
						jint om_j = (jint) om;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jlong manualLightList_j = (jlong) manualLightList;
						jmethodID __method = __gr->getMethod("renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback");
						__env->CallVoidMethod(__obj, __method , objs_j, om_j, lightScissoringClipping_j, doLightIteration_j, manualLightList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::renderObjects(objs, om, lightScissoringClipping, doLightIteration, manualLightList);
					}
				}
				virtual void renderObjects(const EarthView::World::Graphic::CQueuedRenderableCollection& objs, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om, ev_bool lightScissoringClipping, ev_bool doLightIteration)
				{
					if (this->_gRef != NULL && this->m_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong objs_j = (jlong) &objs;
						jint om_j = (jint) om;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jmethodID __method = __gr->getMethod("renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , objs_j, om_j, lightScissoringClipping_j, doLightIteration_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::renderObjects(objs, om, lightScissoringClipping, doLightIteration);
					}
				}
				virtual void renderTransparentShadowCasterObjects(const EarthView::World::Graphic::CQueuedRenderableCollection& objs, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om, ev_bool lightScissoringClipping, ev_bool doLightIteration, const EarthView::World::Graphic::LightList* manualLightList)
				{
					if (this->_gRef != NULL && this->m_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong objs_j = (jlong) &objs;
						jint om_j = (jint) om;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jlong manualLightList_j = (jlong) manualLightList;
						jmethodID __method = __gr->getMethod("renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback");
						__env->CallVoidMethod(__obj, __method , objs_j, om_j, lightScissoringClipping_j, doLightIteration_j, manualLightList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::renderTransparentShadowCasterObjects(objs, om, lightScissoringClipping, doLightIteration, manualLightList);
					}
				}
				virtual void renderTransparentShadowCasterObjects(const EarthView::World::Graphic::CQueuedRenderableCollection& objs, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om, ev_bool lightScissoringClipping, ev_bool doLightIteration)
				{
					if (this->_gRef != NULL && this->m_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong objs_j = (jlong) &objs;
						jint om_j = (jint) om;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jmethodID __method = __gr->getMethod("renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , objs_j, om_j, lightScissoringClipping_j, doLightIteration_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::renderTransparentShadowCasterObjects(objs, om, lightScissoringClipping, doLightIteration);
					}
				}
				virtual void updateRenderQueueSplitOptions()
				{
					if (this->_gRef != NULL && this->m_updateRenderQueueSplitOptions_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("updateRenderQueueSplitOptions_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::updateRenderQueueSplitOptions();
					}
				}
				virtual void updateRenderQueueGroupSplitOptions(EarthView::World::Graphic::CRenderQueueGroup* group, ev_bool suppressShadows, ev_bool suppressRenderState)
				{
					if (this->_gRef != NULL && this->m_updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong group_j = (jlong) group;
						jboolean suppressShadows_j = (jboolean) suppressShadows;
						jboolean suppressRenderState_j = (jboolean) suppressRenderState;
						jmethodID __method = __gr->getMethod("updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , group_j, suppressShadows_j, suppressRenderState_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::updateRenderQueueGroupSplitOptions(group, suppressShadows, suppressRenderState);
					}
				}
				virtual EarthView::World::Graphic::ClipResult buildAndSetScissor(const EarthView::World::Graphic::LightList& ll, const EarthView::World::Graphic::CCamera* cam)
				{
					if (this->_gRef != NULL && this->m_buildAndSetScissor_LightList_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ll_j = (jlong) &ll;
						jlong cam_j = (jlong) cam;
						jmethodID __method = __gr->getMethod("buildAndSetScissor_LightList_CCamera_callback");
						jint __values1_j = (jint)__env->CallIntMethod(__obj, __method , ll_j, cam_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::ClipResult __values1 = (EarthView::World::Graphic::ClipResult) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::buildAndSetScissor(ll, cam);
					}
				}
				virtual void buildScissor(const EarthView::World::Graphic::CLight* l, const EarthView::World::Graphic::CCamera* cam, EarthView::World::Graphic::RealRect& rect)
				{
					if (this->_gRef != NULL && this->m_buildScissor_CLight_CCamera_RealRect_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong l_j = (jlong) l;
						jlong cam_j = (jlong) cam;
						jlong rect_j = (jlong) &rect;
						jmethodID __method = __gr->getMethod("buildScissor_CLight_CCamera_RealRect_callback");
						__env->CallVoidMethod(__obj, __method , l_j, cam_j, rect_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::buildScissor(l, cam, rect);
					}
				}
				virtual void resetScissor()
				{
					if (this->_gRef != NULL && this->m_resetScissor_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("resetScissor_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::resetScissor();
					}
				}
				virtual EarthView::World::Graphic::ClipResult buildAndSetLightClip(const EarthView::World::Graphic::LightList& ll)
				{
					if (this->_gRef != NULL && this->m_buildAndSetLightClip_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ll_j = (jlong) &ll;
						jmethodID __method = __gr->getMethod("buildAndSetLightClip_LightList_callback");
						jint __values1_j = (jint)__env->CallIntMethod(__obj, __method , ll_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::ClipResult __values1 = (EarthView::World::Graphic::ClipResult) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::buildAndSetLightClip(ll);
					}
				}
				virtual void buildLightClip(const EarthView::World::Graphic::CLight* l, EarthView::World::Spatial::Math::PlaneList& planes)
				{
					if (this->_gRef != NULL && this->m_buildLightClip_CLight_PlaneList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong l_j = (jlong) l;
						jlong planes_j = (jlong) &planes;
						jmethodID __method = __gr->getMethod("buildLightClip_CLight_PlaneList_callback");
						__env->CallVoidMethod(__obj, __method , l_j, planes_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::buildLightClip(l, planes);
					}
				}
				virtual void resetLightClip()
				{
					if (this->_gRef != NULL && this->m_resetLightClip_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("resetLightClip_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::resetLightClip();
					}
				}
				virtual void checkCachedLightClippingInfo()
				{
					if (this->_gRef != NULL && this->m_checkCachedLightClippingInfo_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("checkCachedLightClippingInfo_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::checkCachedLightClippingInfo();
					}
				}
				virtual void useLights(const EarthView::World::Graphic::LightList& lights, ev_uint16 limit)
				{
					if (this->_gRef != NULL && this->m_useLights_LightList_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong lights_j = (jlong) &lights;
						jint limit_j = (jint) limit;
						jmethodID __method = __gr->getMethod("useLights_LightList_ev_uint16_callback");
						__env->CallVoidMethod(__obj, __method , lights_j, limit_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::useLights(lights, limit);
					}
				}
				virtual void setViewMatrix(const EarthView::World::Spatial::Math::CMatrix4& m)
				{
					if (this->_gRef != NULL && this->m_setViewMatrix_CMatrix4_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong m_j = (jlong) &m;
						jmethodID __method = __gr->getMethod("setViewMatrix_CMatrix4_callback");
						__env->CallVoidMethod(__obj, __method , m_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setViewMatrix(m);
					}
				}
				virtual void useLightsGpuProgram(const EarthView::World::Graphic::CPass* pass, const EarthView::World::Graphic::LightList* lights)
				{
					if (this->_gRef != NULL && this->m_useLightsGpuProgram_CPass_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jlong lights_j = (jlong) lights;
						jmethodID __method = __gr->getMethod("useLightsGpuProgram_CPass_LightList_callback");
						__env->CallVoidMethod(__obj, __method , pass_j, lights_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::useLightsGpuProgram(pass, lights);
					}
				}
				virtual void bindGpuProgram(EarthView::World::Graphic::CGpuProgram* prog)
				{
					if (this->_gRef != NULL && this->m_bindGpuProgram_CGpuProgram_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong prog_j = (jlong) prog;
						jmethodID __method = __gr->getMethod("bindGpuProgram_CGpuProgram_callback");
						__env->CallVoidMethod(__obj, __method , prog_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::bindGpuProgram(prog);
					}
				}
				virtual void updateGpuProgramParameters(const EarthView::World::Graphic::CPass* p)
				{
					if (this->_gRef != NULL && this->m_updateGpuProgramParameters_CPass_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong p_j = (jlong) p;
						jmethodID __method = __gr->getMethod("updateGpuProgramParameters_CPass_callback");
						__env->CallVoidMethod(__obj, __method , p_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::updateGpuProgramParameters(p);
					}
				}
				virtual EVString getTypeName() const
				{
					if (this->_gRef != NULL && this->m_getTypeName_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getTypeName_void_callback");
						jstring __values1_j = (jstring)__env->CallObjectMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						const char* values_ch = __env->GetStringUTFChars(__values1_j,JNI_FALSE);
						EVString __values1 = values_ch;
						__env->ReleaseStringUTFChars(__values1_j,values_ch);
						#else
						const ev_wchar* values_ch = (const ev_wchar*)__env->GetStringChars(__values1_j,JNI_FALSE);
						EVString __values1 = values_ch;
						__env->ReleaseStringChars(__values1_j,(const jchar *)values_ch);
						#endif
						return __values1;
					}
					else
					{
						return this->CSceneManager::getTypeName();
					}
				}
				virtual EarthView::World::Graphic::CCamera* createCamera(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createCamera_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createCamera_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CCamera *__values1 = (EarthView::World::Graphic::CCamera*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createCamera(name);
					}
				}
				virtual EarthView::World::Graphic::CCamera* getCamera(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getCamera_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getCamera_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CCamera *__values1 = (EarthView::World::Graphic::CCamera*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getCamera(name);
					}
				}
				virtual ev_bool hasCamera(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasCamera_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasCamera_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::hasCamera(name);
					}
				}
				virtual void destroyCamera(EarthView::World::Graphic::CCamera* cam)
				{
					if (this->_gRef != NULL && this->m_destroyCamera_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong cam_j = (jlong) cam;
						jmethodID __method = __gr->getMethod("destroyCamera_CCamera_callback");
						__env->CallVoidMethod(__obj, __method , cam_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyCamera(cam);
					}
				}
				virtual void destroyCamera(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyCamera_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyCamera_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyCamera(name);
					}
				}
				virtual void destroyAllCameras()
				{
					if (this->_gRef != NULL && this->m_destroyAllCameras_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllCameras_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyAllCameras();
					}
				}
				virtual EarthView::World::Graphic::CLight* createLight(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createLight_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createLight_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CLight *__values1 = (EarthView::World::Graphic::CLight*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createLight(name);
					}
				}
				virtual EarthView::World::Graphic::CLight* createLight()
				{
					if (this->_gRef != NULL && this->m_createLight_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createLight_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CLight *__values1 = (EarthView::World::Graphic::CLight*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createLight();
					}
				}
				virtual ev_uint16 getLightCount() const
				{
					if (this->_gRef != NULL && this->m_getLightCount_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getLightCount_void_callback");
						jint __values1_j = (jint)__env->CallIntMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_uint16 __values1 = (ev_uint16) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getLightCount();
					}
				}
				virtual EarthView::World::Graphic::CLight* getLight(ev_uint16 index) const
				{
					if (this->_gRef != NULL && this->m_getLight_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint index_j = (jint) index;
						jmethodID __method = __gr->getMethod("getLight_ev_uint16_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , index_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CLight *__values1 = (EarthView::World::Graphic::CLight*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getLight(index);
					}
				}
				virtual EarthView::World::Graphic::CLight* getLight(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getLight_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getLight_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CLight *__values1 = (EarthView::World::Graphic::CLight*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getLight(name);
					}
				}
				virtual ev_bool hasLight(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasLight_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasLight_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::hasLight(name);
					}
				}
				virtual const EarthView::World::Spatial::Math::PlaneList& getLightClippingPlanes(EarthView::World::Graphic::CLight* l)
				{
					if (this->_gRef != NULL && this->m_getLightClippingPlanes_CLight_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong l_j = (jlong) l;
						jmethodID __method = __gr->getMethod("getLightClippingPlanes_CLight_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , l_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Spatial::Math::PlaneList &__values1 = *(const EarthView::World::Spatial::Math::PlaneList*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getLightClippingPlanes(l);
					}
				}
				virtual const EarthView::World::Graphic::RealRect& getLightScissorRect(EarthView::World::Graphic::CLight* l, const EarthView::World::Graphic::CCamera* cam)
				{
					if (this->_gRef != NULL && this->m_getLightScissorRect_CLight_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong l_j = (jlong) l;
						jlong cam_j = (jlong) cam;
						jmethodID __method = __gr->getMethod("getLightScissorRect_CLight_CCamera_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , l_j, cam_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::RealRect &__values1 = *(const EarthView::World::Graphic::RealRect*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getLightScissorRect(l, cam);
					}
				}
				virtual void destroyLight(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyLight_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyLight_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyLight(name);
					}
				}
				virtual void destroyLight(EarthView::World::Graphic::CLight* light)
				{
					if (this->_gRef != NULL && this->m_destroyLight_CLight_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong light_j = (jlong) light;
						jmethodID __method = __gr->getMethod("destroyLight_CLight_callback");
						__env->CallVoidMethod(__obj, __method , light_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyLight(light);
					}
				}
				virtual void destroyAllLights()
				{
					if (this->_gRef != NULL && this->m_destroyAllLights_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllLights_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyAllLights();
					}
				}
				virtual EVString getSoftShadowTexName() const
				{
					if (this->_gRef != NULL && this->m_getSoftShadowTexName_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSoftShadowTexName_void_callback");
						jstring __values1_j = (jstring)__env->CallObjectMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						const char* values_ch = __env->GetStringUTFChars(__values1_j,JNI_FALSE);
						EVString __values1 = values_ch;
						__env->ReleaseStringUTFChars(__values1_j,values_ch);
						#else
						const ev_wchar* values_ch = (const ev_wchar*)__env->GetStringChars(__values1_j,JNI_FALSE);
						EVString __values1 = values_ch;
						__env->ReleaseStringChars(__values1_j,(const jchar *)values_ch);
						#endif
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSoftShadowTexName();
					}
				}
				virtual EarthView::World::Graphic::CCamera* getShadowTexCam() const
				{
					if (this->_gRef != NULL && this->m_getShadowTexCam_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowTexCam_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CCamera *__values1 = (EarthView::World::Graphic::CCamera*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShadowTexCam();
					}
				}
				virtual EarthView::World::Spatial::Math::CMatrix4 getSoftShadowProjMatrix(ev_uint16 index) const
				{
					if (this->_gRef != NULL && this->m_getSoftShadowProjMatrix_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint index_j = (jint) index;
						jmethodID __method = __gr->getMethod("getSoftShadowProjMatrix_ev_uint16_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , index_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Spatial::Math::CMatrix4 __values1 = *(EarthView::World::Spatial::Math::CMatrix4*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSoftShadowProjMatrix(index);
					}
				}
				virtual EarthView::World::Spatial::Math::CVector4 getCascadeEyeSpaceDepthArray() const
				{
					if (this->_gRef != NULL && this->m_getCascadeEyeSpaceDepthArray_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getCascadeEyeSpaceDepthArray_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Spatial::Math::CVector4 __values1 = *(EarthView::World::Spatial::Math::CVector4*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getCascadeEyeSpaceDepthArray();
					}
				}
				virtual float getSoftShadowNearClip(ev_uint8 index) const
				{
					if (this->_gRef != NULL && this->m_getSoftShadowNearClip_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort index_j = (jshort) index;
						jmethodID __method = __gr->getMethod("getSoftShadowNearClip_ev_uint8_callback");
						jfloat __values1_j = (jfloat)__env->CallFloatMethod(__obj, __method , index_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						float __values1 = (float) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSoftShadowNearClip(index);
					}
				}
				virtual float getSoftShadowFarClip(ev_uint8 index) const
				{
					if (this->_gRef != NULL && this->m_getSoftShadowFarClip_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort index_j = (jshort) index;
						jmethodID __method = __gr->getMethod("getSoftShadowFarClip_ev_uint8_callback");
						jfloat __values1_j = (jfloat)__env->CallFloatMethod(__obj, __method , index_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						float __values1 = (float) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSoftShadowFarClip(index);
					}
				}
				virtual bool getIsUseSoftShadowFitToCascadesMode() const
				{
					if (this->_gRef != NULL && this->m_getIsUseSoftShadowFitToCascadesMode_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getIsUseSoftShadowFitToCascadesMode_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						bool __values1 = (bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getIsUseSoftShadowFitToCascadesMode();
					}
				}
				virtual void setIsUseSoftShadowFitToCascadesMode(bool flag)
				{
					if (this->_gRef != NULL && this->m_setIsUseSoftShadowFitToCascadesMode_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean flag_j = (jboolean) flag;
						jmethodID __method = __gr->getMethod("setIsUseSoftShadowFitToCascadesMode_bool_callback");
						__env->CallVoidMethod(__obj, __method , flag_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setIsUseSoftShadowFitToCascadesMode(flag);
					}
				}
				virtual ev_uint8 getCurrentClipIndex() const
				{
					if (this->_gRef != NULL && this->m_getCurrentClipIndex_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getCurrentClipIndex_void_callback");
						jshort __values1_j = (jshort)__env->CallShortMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_uint8 __values1 = (ev_uint8) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getCurrentClipIndex();
					}
				}
				virtual bool getIsUseSoftShadowTechnique() const
				{
					if (this->_gRef != NULL && this->m_getIsUseSoftShadowTechnique_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getIsUseSoftShadowTechnique_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						bool __values1 = (bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getIsUseSoftShadowTechnique();
					}
				}
				virtual void setIsUseSoftShadowTechnique(bool flag)
				{
					if (this->_gRef != NULL && this->m_setIsUseSoftShadowTechnique_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean flag_j = (jboolean) flag;
						jmethodID __method = __gr->getMethod("setIsUseSoftShadowTechnique_bool_callback");
						__env->CallVoidMethod(__obj, __method , flag_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setIsUseSoftShadowTechnique(flag);
					}
				}
				virtual float getCascadePartitionsPercent() const
				{
					if (this->_gRef != NULL && this->m_getCascadePartitionsPercent_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getCascadePartitionsPercent_void_callback");
						jfloat __values1_j = (jfloat)__env->CallFloatMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						float __values1 = (float) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getCascadePartitionsPercent();
					}
				}
				virtual void setCascadePartitionsPercent(float percent)
				{
					if (this->_gRef != NULL && this->m_setCascadePartitionsPercent_float_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jfloat percent_j = (jfloat) percent;
						jmethodID __method = __gr->getMethod("setCascadePartitionsPercent_float_callback");
						__env->CallVoidMethod(__obj, __method , percent_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setCascadePartitionsPercent(percent);
					}
				}
				virtual int getCascadePartitionsDistance(ev_uint8 index) const
				{
					if (this->_gRef != NULL && this->m_getCascadePartitionsDistance_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort index_j = (jshort) index;
						jmethodID __method = __gr->getMethod("getCascadePartitionsDistance_ev_uint8_callback");
						jint __values1_j = (jint)__env->CallIntMethod(__obj, __method , index_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						int __values1 = (int) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getCascadePartitionsDistance(index);
					}
				}
				virtual void setCascadePartitionsDistance(ev_uint8 index, ev_uint8 distance)
				{
					if (this->_gRef != NULL && this->m_setCascadePartitionsDistance_ev_uint8_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort index_j = (jshort) index;
						jshort distance_j = (jshort) distance;
						jmethodID __method = __gr->getMethod("setCascadePartitionsDistance_ev_uint8_ev_uint8_callback");
						__env->CallVoidMethod(__obj, __method , index_j, distance_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setCascadePartitionsDistance(index, distance);
					}
				}
				virtual EarthView::World::Graphic::PixelFormat getSoftShadowOffsetFormat() const
				{
					if (this->_gRef != NULL && this->m_getSoftShadowOffsetFormat_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSoftShadowOffsetFormat_void_callback");
						jint __values1_j = (jint)__env->CallIntMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::PixelFormat __values1 = (EarthView::World::Graphic::PixelFormat) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSoftShadowOffsetFormat();
					}
				}
				virtual void checkShadowCasterInFrustum(EarthView::World::Graphic::CCamera* camera)
				{
					if (this->_gRef != NULL && this->m_checkShadowCasterInFrustum_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong camera_j = (jlong) camera;
						jmethodID __method = __gr->getMethod("checkShadowCasterInFrustum_CCamera_callback");
						__env->CallVoidMethod(__obj, __method , camera_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::checkShadowCasterInFrustum(camera);
					}
				}
				virtual bool hasShadowCasterInFrustum() const
				{
					if (this->_gRef != NULL && this->m_hasShadowCasterInFrustum_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("hasShadowCasterInFrustum_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						bool __values1 = (bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::hasShadowCasterInFrustum();
					}
				}
				virtual Real getSoftShadowLightBleedPower() const
				{
					if (this->_gRef != NULL && this->m_getSoftShadowLightBleedPower_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSoftShadowLightBleedPower_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSoftShadowLightBleedPower();
					}
				}
				virtual void setSoftShadowLightBleedPower(Real power)
				{
					if (this->_gRef != NULL && this->m_setSoftShadowLightBleedPower_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble power_j = (jdouble) power;
						jmethodID __method = __gr->getMethod("setSoftShadowLightBleedPower_Real_callback");
						__env->CallVoidMethod(__obj, __method , power_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSoftShadowLightBleedPower(power);
					}
				}
				virtual Real getSoftShadowDepthOffset() const
				{
					if (this->_gRef != NULL && this->m_getSoftShadowDepthOffset_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSoftShadowDepthOffset_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSoftShadowDepthOffset();
					}
				}
				virtual void setSoftShadowDepthOffset(Real offset)
				{
					if (this->_gRef != NULL && this->m_setSoftShadowDepthOffset_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble offset_j = (jdouble) offset;
						jmethodID __method = __gr->getMethod("setSoftShadowDepthOffset_Real_callback");
						__env->CallVoidMethod(__obj, __method , offset_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSoftShadowDepthOffset(offset);
					}
				}
				virtual float getSoftShadowNormalFactor() const
				{
					if (this->_gRef != NULL && this->m_getSoftShadowNormalFactor_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSoftShadowNormalFactor_void_callback");
						jfloat __values1_j = (jfloat)__env->CallFloatMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						float __values1 = (float) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSoftShadowNormalFactor();
					}
				}
				virtual void setSoftShadowNormalFactor(float factor)
				{
					if (this->_gRef != NULL && this->m_setSoftShadowNormalFactor_float_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jfloat factor_j = (jfloat) factor;
						jmethodID __method = __gr->getMethod("setSoftShadowNormalFactor_float_callback");
						__env->CallVoidMethod(__obj, __method , factor_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSoftShadowNormalFactor(factor);
					}
				}
				virtual void _notifyLightsDirty()
				{
					if (this->_gRef != NULL && this->m__notifyLightsDirty_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("_notifyLightsDirty_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_notifyLightsDirty();
					}
				}
				virtual const EarthView::World::Graphic::LightList& _getLightsAffectingFrustum() const
				{
					if (this->_gRef != NULL && this->m__getLightsAffectingFrustum_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("_getLightsAffectingFrustum_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::LightList &__values1 = *(const EarthView::World::Graphic::LightList*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::_getLightsAffectingFrustum();
					}
				}
				virtual void _populateLightList(const EarthView::World::Spatial::Math::CVector3& position, Real radius, EarthView::World::Graphic::LightList& destList, ev_uint32 lightMask)
				{
					if (this->_gRef != NULL && this->m__populateLightList_CVector3_Real_LightList_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong position_j = (jlong) &position;
						jdouble radius_j = (jdouble) radius;
						jlong destList_j = (jlong) &destList;
						jlong lightMask_j = (jlong) lightMask;
						jmethodID __method = __gr->getMethod("_populateLightList_CVector3_Real_LightList_ev_uint32_callback");
						__env->CallVoidMethod(__obj, __method , position_j, radius_j, destList_j, lightMask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_populateLightList(position, radius, destList, lightMask);
					}
				}
				virtual void _populateLightList(const EarthView::World::Spatial::Math::CVector3& position, Real radius, EarthView::World::Graphic::LightList& destList)
				{
					if (this->_gRef != NULL && this->m__populateLightList_CVector3_Real_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong position_j = (jlong) &position;
						jdouble radius_j = (jdouble) radius;
						jlong destList_j = (jlong) &destList;
						jmethodID __method = __gr->getMethod("_populateLightList_CVector3_Real_LightList_callback");
						__env->CallVoidMethod(__obj, __method , position_j, radius_j, destList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_populateLightList(position, radius, destList);
					}
				}
				virtual void showImage(ev_bool visible)
				{
					if (this->_gRef != NULL && this->m_showImage_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean visible_j = (jboolean) visible;
						jmethodID __method = __gr->getMethod("showImage_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , visible_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::showImage(visible);
					}
				}
				virtual ev_bool getImageVisible() const
				{
					if (this->_gRef != NULL && this->m_getImageVisible_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getImageVisible_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getImageVisible();
					}
				}
				virtual void showOcean(ev_bool visible)
				{
					if (this->_gRef != NULL && this->m_showOcean_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean visible_j = (jboolean) visible;
						jmethodID __method = __gr->getMethod("showOcean_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , visible_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::showOcean(visible);
					}
				}
				virtual ev_bool getOceanVisible() const
				{
					if (this->_gRef != NULL && this->m_getOceanVisible_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getOceanVisible_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getOceanVisible();
					}
				}
				virtual void _populateLightList(const EarthView::World::Graphic::CSceneNode* sn, Real radius, EarthView::World::Graphic::LightList& destList, ev_uint32 lightMask)
				{
					if (this->_gRef != NULL && this->m__populateLightList_CSceneNode_Real_LightList_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong sn_j = (jlong) sn;
						jdouble radius_j = (jdouble) radius;
						jlong destList_j = (jlong) &destList;
						jlong lightMask_j = (jlong) lightMask;
						jmethodID __method = __gr->getMethod("_populateLightList_CSceneNode_Real_LightList_ev_uint32_callback");
						__env->CallVoidMethod(__obj, __method , sn_j, radius_j, destList_j, lightMask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_populateLightList(sn, radius, destList, lightMask);
					}
				}
				virtual void _populateLightList(const EarthView::World::Graphic::CSceneNode* sn, Real radius, EarthView::World::Graphic::LightList& destList)
				{
					if (this->_gRef != NULL && this->m__populateLightList_CSceneNode_Real_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong sn_j = (jlong) sn;
						jdouble radius_j = (jdouble) radius;
						jlong destList_j = (jlong) &destList;
						jmethodID __method = __gr->getMethod("_populateLightList_CSceneNode_Real_LightList_callback");
						__env->CallVoidMethod(__obj, __method , sn_j, radius_j, destList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_populateLightList(sn, radius, destList);
					}
				}
				virtual EarthView::World::Graphic::CSceneNode* createSceneNode()
				{
					if (this->_gRef != NULL && this->m_createSceneNode_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createSceneNode_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createSceneNode();
					}
				}
				virtual EarthView::World::Graphic::CSceneNode* createSceneNode(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createSceneNode_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createSceneNode_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createSceneNode(name);
					}
				}
				virtual void destroySceneNode(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroySceneNode_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroySceneNode_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroySceneNode(name);
					}
				}
				virtual void destroySceneNode(EarthView::World::Graphic::CSceneNode* sn)
				{
					if (this->_gRef != NULL && this->m_destroySceneNode_CSceneNode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong sn_j = (jlong) sn;
						jmethodID __method = __gr->getMethod("destroySceneNode_CSceneNode_callback");
						__env->CallVoidMethod(__obj, __method , sn_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroySceneNode(sn);
					}
				}
				virtual EarthView::World::Graphic::CSceneNode* getRootSceneNode()
				{
					if (this->_gRef != NULL && this->m_getRootSceneNode_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getRootSceneNode_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getRootSceneNode();
					}
				}
				virtual EarthView::World::Graphic::CSceneNode* getSceneNode(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getSceneNode_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getSceneNode_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSceneNode(name);
					}
				}
				virtual ev_bool hasSceneNode(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasSceneNode_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasSceneNode_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::hasSceneNode(name);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& entityName, const EVString& meshName, const EarthView::World::Core::IntVector& subentityIndics, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_EVString_IntVector_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring entityName_wch = entityName;
						jstring entityName_j = __env->NewString((const jchar*)entityName_wch.getString(), entityName_wch.size());
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						jlong subentityIndics_j = (jlong) &subentityIndics;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("createEntity_EVString_EVString_IntVector_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , entityName_j, meshName_j, subentityIndics_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createEntity(entityName, meshName, subentityIndics, groupName);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& entityName, const EVString& meshName, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring entityName_wch = entityName;
						jstring entityName_j = __env->NewString((const jchar*)entityName_wch.getString(), entityName_wch.size());
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("createEntity_EVString_EVString_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , entityName_j, meshName_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createEntity(entityName, meshName, groupName);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& entityName, const EVString& meshName, const EarthView::World::Core::IntVector& subentityIndics)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_EVString_IntVector_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring entityName_wch = entityName;
						jstring entityName_j = __env->NewString((const jchar*)entityName_wch.getString(), entityName_wch.size());
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						jlong subentityIndics_j = (jlong) &subentityIndics;
						jmethodID __method = __gr->getMethod("createEntity_EVString_EVString_IntVector_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , entityName_j, meshName_j, subentityIndics_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createEntity(entityName, meshName, subentityIndics);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& entityName, const EVString& meshName)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring entityName_wch = entityName;
						jstring entityName_j = __env->NewString((const jchar*)entityName_wch.getString(), entityName_wch.size());
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						jmethodID __method = __gr->getMethod("createEntity_EVString_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , entityName_j, meshName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createEntity(entityName, meshName);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& entityName, const EarthView::World::Graphic::CMeshPtr& pMesh, const EarthView::World::Core::IntVector& subentityIndics)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_CMeshPtr_IntVector_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring entityName_wch = entityName;
						jstring entityName_j = __env->NewString((const jchar*)entityName_wch.getString(), entityName_wch.size());
						jlong pMesh_j = (jlong) &pMesh;
						jlong subentityIndics_j = (jlong) &subentityIndics;
						jmethodID __method = __gr->getMethod("createEntity_EVString_CMeshPtr_IntVector_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , entityName_j, pMesh_j, subentityIndics_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createEntity(entityName, pMesh, subentityIndics);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& entityName, const EarthView::World::Graphic::CMeshPtr& pMesh)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_CMeshPtr_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring entityName_wch = entityName;
						jstring entityName_j = __env->NewString((const jchar*)entityName_wch.getString(), entityName_wch.size());
						jlong pMesh_j = (jlong) &pMesh;
						jmethodID __method = __gr->getMethod("createEntity_EVString_CMeshPtr_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , entityName_j, pMesh_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createEntity(entityName, pMesh);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EarthView::World::Graphic::CMeshPtr& pMesh, const EarthView::World::Core::IntVector& subentityIndics)
				{
					if (this->_gRef != NULL && this->m_createEntity_CMeshPtr_IntVector_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pMesh_j = (jlong) &pMesh;
						jlong subentityIndics_j = (jlong) &subentityIndics;
						jmethodID __method = __gr->getMethod("createEntity_CMeshPtr_IntVector_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , pMesh_j, subentityIndics_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createEntity(pMesh, subentityIndics);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EarthView::World::Graphic::CMeshPtr& pMesh)
				{
					if (this->_gRef != NULL && this->m_createEntity_CMeshPtr_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pMesh_j = (jlong) &pMesh;
						jmethodID __method = __gr->getMethod("createEntity_CMeshPtr_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , pMesh_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createEntity(pMesh);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& meshName, const EarthView::World::Core::IntVector& subentityIndics)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_IntVector_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						jlong subentityIndics_j = (jlong) &subentityIndics;
						jmethodID __method = __gr->getMethod("createEntity_EVString_IntVector_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , meshName_j, subentityIndics_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createEntity(meshName, subentityIndics);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& meshName)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						jmethodID __method = __gr->getMethod("createEntity_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , meshName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createEntity(meshName);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(const EVString& entityName, EarthView::World::Graphic::CSceneManager::PrefabType ptype)
				{
					if (this->_gRef != NULL && this->m_createEntity_EVString_PrefabType_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring entityName_wch = entityName;
						jstring entityName_j = __env->NewString((const jchar*)entityName_wch.getString(), entityName_wch.size());
						jint ptype_j = (jint) ptype;
						jmethodID __method = __gr->getMethod("createEntity_EVString_PrefabType_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , entityName_j, ptype_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createEntity(entityName, ptype);
					}
				}
				virtual EarthView::World::Graphic::CEntity* createEntity(EarthView::World::Graphic::CSceneManager::PrefabType ptype)
				{
					if (this->_gRef != NULL && this->m_createEntity_PrefabType_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint ptype_j = (jint) ptype;
						jmethodID __method = __gr->getMethod("createEntity_PrefabType_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , ptype_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createEntity(ptype);
					}
				}
				virtual EarthView::World::Graphic::CEntity* getEntity(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getEntity_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getEntity_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CEntity *__values1 = (EarthView::World::Graphic::CEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getEntity(name);
					}
				}
				virtual ev_bool hasEntity(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasEntity_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasEntity_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::hasEntity(name);
					}
				}
				virtual void destroyEntity(EarthView::World::Graphic::CEntity* ent)
				{
					if (this->_gRef != NULL && this->m_destroyEntity_CEntity_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ent_j = (jlong) ent;
						jmethodID __method = __gr->getMethod("destroyEntity_CEntity_callback");
						__env->CallVoidMethod(__obj, __method , ent_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyEntity(ent);
					}
				}
				virtual void destroyEntity(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyEntity_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyEntity_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyEntity(name);
					}
				}
				virtual void destroyAllEntities()
				{
					if (this->_gRef != NULL && this->m_destroyAllEntities_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllEntities_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyAllEntities();
					}
				}
				virtual EarthView::World::Graphic::CManualObject* createManualObject(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createManualObject_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createManualObject_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CManualObject *__values1 = (EarthView::World::Graphic::CManualObject*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createManualObject(name);
					}
				}
				virtual EarthView::World::Graphic::CManualObject* createManualObject()
				{
					if (this->_gRef != NULL && this->m_createManualObject_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createManualObject_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CManualObject *__values1 = (EarthView::World::Graphic::CManualObject*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createManualObject();
					}
				}
				virtual EarthView::World::Graphic::CManualObject* getManualObject(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getManualObject_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getManualObject_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CManualObject *__values1 = (EarthView::World::Graphic::CManualObject*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getManualObject(name);
					}
				}
				virtual ev_bool hasManualObject(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasManualObject_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasManualObject_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::hasManualObject(name);
					}
				}
				virtual void destroyManualObject(EarthView::World::Graphic::CManualObject* obj)
				{
					if (this->_gRef != NULL && this->m_destroyManualObject_CManualObject_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong obj_j = (jlong) obj;
						jmethodID __method = __gr->getMethod("destroyManualObject_CManualObject_callback");
						__env->CallVoidMethod(__obj, __method , obj_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyManualObject(obj);
					}
				}
				virtual void destroyManualObject(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyManualObject_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyManualObject_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyManualObject(name);
					}
				}
				virtual void destroyAllManualObjects()
				{
					if (this->_gRef != NULL && this->m_destroyAllManualObjects_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllManualObjects_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyAllManualObjects();
					}
				}
				virtual ev_bool usingWebMercator() const
				{
					if (this->_gRef != NULL && this->m_usingWebMercator_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("usingWebMercator_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::usingWebMercator();
					}
				}
				virtual EarthView::World::Graphic::CBillboardChain* createBillboardChain(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createBillboardChain_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createBillboardChain_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CBillboardChain *__values1 = (EarthView::World::Graphic::CBillboardChain*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createBillboardChain(name);
					}
				}
				virtual EarthView::World::Graphic::CBillboardChain* createBillboardChain()
				{
					if (this->_gRef != NULL && this->m_createBillboardChain_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createBillboardChain_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CBillboardChain *__values1 = (EarthView::World::Graphic::CBillboardChain*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createBillboardChain();
					}
				}
				virtual EarthView::World::Graphic::CBillboardChain* getBillboardChain(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getBillboardChain_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getBillboardChain_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CBillboardChain *__values1 = (EarthView::World::Graphic::CBillboardChain*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getBillboardChain(name);
					}
				}
				virtual ev_bool hasBillboardChain(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasBillboardChain_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasBillboardChain_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::hasBillboardChain(name);
					}
				}
				virtual void destroyBillboardChain(EarthView::World::Graphic::CBillboardChain* obj)
				{
					if (this->_gRef != NULL && this->m_destroyBillboardChain_CBillboardChain_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong obj_j = (jlong) obj;
						jmethodID __method = __gr->getMethod("destroyBillboardChain_CBillboardChain_callback");
						__env->CallVoidMethod(__obj, __method , obj_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyBillboardChain(obj);
					}
				}
				virtual void destroyBillboardChain(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyBillboardChain_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyBillboardChain_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyBillboardChain(name);
					}
				}
				virtual void destroyAllBillboardChains()
				{
					if (this->_gRef != NULL && this->m_destroyAllBillboardChains_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllBillboardChains_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyAllBillboardChains();
					}
				}
				virtual EarthView::World::Graphic::CRibbonTrail* createRibbonTrail(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createRibbonTrail_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createRibbonTrail_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CRibbonTrail *__values1 = (EarthView::World::Graphic::CRibbonTrail*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createRibbonTrail(name);
					}
				}
				virtual EarthView::World::Graphic::CRibbonTrail* createRibbonTrail()
				{
					if (this->_gRef != NULL && this->m_createRibbonTrail_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createRibbonTrail_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CRibbonTrail *__values1 = (EarthView::World::Graphic::CRibbonTrail*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createRibbonTrail();
					}
				}
				virtual EarthView::World::Graphic::CRibbonTrail* getRibbonTrail(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getRibbonTrail_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getRibbonTrail_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CRibbonTrail *__values1 = (EarthView::World::Graphic::CRibbonTrail*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getRibbonTrail(name);
					}
				}
				virtual ev_bool hasRibbonTrail(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasRibbonTrail_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasRibbonTrail_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::hasRibbonTrail(name);
					}
				}
				virtual void destroyRibbonTrail(EarthView::World::Graphic::CRibbonTrail* obj)
				{
					if (this->_gRef != NULL && this->m_destroyRibbonTrail_CRibbonTrail_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong obj_j = (jlong) obj;
						jmethodID __method = __gr->getMethod("destroyRibbonTrail_CRibbonTrail_callback");
						__env->CallVoidMethod(__obj, __method , obj_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyRibbonTrail(obj);
					}
				}
				virtual void destroyRibbonTrail(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyRibbonTrail_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyRibbonTrail_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyRibbonTrail(name);
					}
				}
				virtual void destroyAllRibbonTrails()
				{
					if (this->_gRef != NULL && this->m_destroyAllRibbonTrails_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllRibbonTrails_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyAllRibbonTrails();
					}
				}
				virtual EarthView::World::Graphic::CParticleSystem* createParticleSystem(const EVString& name, const EVString& templateName)
				{
					if (this->_gRef != NULL && this->m_createParticleSystem_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						EarthView::World::Core::ev_wstring templateName_wch = templateName;
						jstring templateName_j = __env->NewString((const jchar*)templateName_wch.getString(), templateName_wch.size());
						jmethodID __method = __gr->getMethod("createParticleSystem_EVString_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j, templateName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CParticleSystem *__values1 = (EarthView::World::Graphic::CParticleSystem*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createParticleSystem(name, templateName);
					}
				}
				virtual EarthView::World::Graphic::CParticleSystem* createParticleSystem(const EVString& name, ev_size_t quota, const EVString& resourceGroup)
				{
					if (this->_gRef != NULL && this->m_createParticleSystem_EVString_ev_size_t_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jlong quota_j = (jlong) quota;
						EarthView::World::Core::ev_wstring resourceGroup_wch = resourceGroup;
						jstring resourceGroup_j = __env->NewString((const jchar*)resourceGroup_wch.getString(), resourceGroup_wch.size());
						jmethodID __method = __gr->getMethod("createParticleSystem_EVString_ev_size_t_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j, quota_j, resourceGroup_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CParticleSystem *__values1 = (EarthView::World::Graphic::CParticleSystem*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createParticleSystem(name, quota, resourceGroup);
					}
				}
				virtual EarthView::World::Graphic::CParticleSystem* createParticleSystem(const EVString& name, ev_size_t quota)
				{
					if (this->_gRef != NULL && this->m_createParticleSystem_EVString_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jlong quota_j = (jlong) quota;
						jmethodID __method = __gr->getMethod("createParticleSystem_EVString_ev_size_t_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j, quota_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CParticleSystem *__values1 = (EarthView::World::Graphic::CParticleSystem*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createParticleSystem(name, quota);
					}
				}
				virtual EarthView::World::Graphic::CParticleSystem* createParticleSystem(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createParticleSystem_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createParticleSystem_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CParticleSystem *__values1 = (EarthView::World::Graphic::CParticleSystem*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createParticleSystem(name);
					}
				}
				virtual EarthView::World::Graphic::CParticleSystem* createParticleSystem(ev_size_t quota, const EVString& resourceGroup)
				{
					if (this->_gRef != NULL && this->m_createParticleSystem_ev_size_t_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong quota_j = (jlong) quota;
						EarthView::World::Core::ev_wstring resourceGroup_wch = resourceGroup;
						jstring resourceGroup_j = __env->NewString((const jchar*)resourceGroup_wch.getString(), resourceGroup_wch.size());
						jmethodID __method = __gr->getMethod("createParticleSystem_ev_size_t_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , quota_j, resourceGroup_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CParticleSystem *__values1 = (EarthView::World::Graphic::CParticleSystem*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createParticleSystem(quota, resourceGroup);
					}
				}
				virtual EarthView::World::Graphic::CParticleSystem* createParticleSystem(ev_size_t quota)
				{
					if (this->_gRef != NULL && this->m_createParticleSystem_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong quota_j = (jlong) quota;
						jmethodID __method = __gr->getMethod("createParticleSystem_ev_size_t_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , quota_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CParticleSystem *__values1 = (EarthView::World::Graphic::CParticleSystem*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createParticleSystem(quota);
					}
				}
				virtual EarthView::World::Graphic::CParticleSystem* createParticleSystem()
				{
					if (this->_gRef != NULL && this->m_createParticleSystem_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createParticleSystem_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CParticleSystem *__values1 = (EarthView::World::Graphic::CParticleSystem*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createParticleSystem();
					}
				}
				virtual EarthView::World::Graphic::CParticleSystem* getParticleSystem(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getParticleSystem_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getParticleSystem_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CParticleSystem *__values1 = (EarthView::World::Graphic::CParticleSystem*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getParticleSystem(name);
					}
				}
				virtual ev_bool hasParticleSystem(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasParticleSystem_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasParticleSystem_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::hasParticleSystem(name);
					}
				}
				virtual void destroyParticleSystem(EarthView::World::Graphic::CParticleSystem* obj)
				{
					if (this->_gRef != NULL && this->m_destroyParticleSystem_CParticleSystem_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong obj_j = (jlong) obj;
						jmethodID __method = __gr->getMethod("destroyParticleSystem_CParticleSystem_callback");
						__env->CallVoidMethod(__obj, __method , obj_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyParticleSystem(obj);
					}
				}
				virtual void destroyParticleSystem(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyParticleSystem_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyParticleSystem_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyParticleSystem(name);
					}
				}
				virtual void destroyAllParticleSystems()
				{
					if (this->_gRef != NULL && this->m_destroyAllParticleSystems_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllParticleSystems_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyAllParticleSystems();
					}
				}
				virtual void clearScene()
				{
					if (this->_gRef != NULL && this->m_clearScene_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("clearScene_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::clearScene();
					}
				}
				virtual void prepareWorldGeometry(const EVString& filename)
				{
					if (this->_gRef != NULL && this->m_prepareWorldGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring filename_wch = filename;
						jstring filename_j = __env->NewString((const jchar*)filename_wch.getString(), filename_wch.size());
						jmethodID __method = __gr->getMethod("prepareWorldGeometry_EVString_callback");
						__env->CallVoidMethod(__obj, __method , filename_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::prepareWorldGeometry(filename);
					}
				}
				virtual void prepareWorldGeometry(EarthView::World::Core::DataStreamPtr& stream, const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_prepareWorldGeometry_DataStreamPtr_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong stream_j = (jlong) &stream;
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("prepareWorldGeometry_DataStreamPtr_EVString_callback");
						__env->CallVoidMethod(__obj, __method , stream_j, typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::prepareWorldGeometry(stream, typeName);
					}
				}
				virtual void prepareWorldGeometry(EarthView::World::Core::DataStreamPtr& stream)
				{
					if (this->_gRef != NULL && this->m_prepareWorldGeometry_DataStreamPtr_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong stream_j = (jlong) &stream;
						jmethodID __method = __gr->getMethod("prepareWorldGeometry_DataStreamPtr_callback");
						__env->CallVoidMethod(__obj, __method , stream_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::prepareWorldGeometry(stream);
					}
				}
				virtual void setWorldGeometry(const EVString& filename)
				{
					if (this->_gRef != NULL && this->m_setWorldGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring filename_wch = filename;
						jstring filename_j = __env->NewString((const jchar*)filename_wch.getString(), filename_wch.size());
						jmethodID __method = __gr->getMethod("setWorldGeometry_EVString_callback");
						__env->CallVoidMethod(__obj, __method , filename_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setWorldGeometry(filename);
					}
				}
				virtual void setWorldGeometry(EarthView::World::Core::DataStreamPtr& stream, const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_setWorldGeometry_DataStreamPtr_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong stream_j = (jlong) &stream;
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("setWorldGeometry_DataStreamPtr_EVString_callback");
						__env->CallVoidMethod(__obj, __method , stream_j, typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setWorldGeometry(stream, typeName);
					}
				}
				virtual void setWorldGeometry(EarthView::World::Core::DataStreamPtr& stream)
				{
					if (this->_gRef != NULL && this->m_setWorldGeometry_DataStreamPtr_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong stream_j = (jlong) &stream;
						jmethodID __method = __gr->getMethod("setWorldGeometry_DataStreamPtr_callback");
						__env->CallVoidMethod(__obj, __method , stream_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setWorldGeometry(stream);
					}
				}
				virtual ev_size_t estimateWorldGeometry(const EVString& filename)
				{
					if (this->_gRef != NULL && this->m_estimateWorldGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring filename_wch = filename;
						jstring filename_j = __env->NewString((const jchar*)filename_wch.getString(), filename_wch.size());
						jmethodID __method = __gr->getMethod("estimateWorldGeometry_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , filename_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_size_t __values1 = (ev_size_t) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::estimateWorldGeometry(filename);
					}
				}
				virtual ev_size_t estimateWorldGeometry(EarthView::World::Core::DataStreamPtr& stream, const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_estimateWorldGeometry_DataStreamPtr_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong stream_j = (jlong) &stream;
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("estimateWorldGeometry_DataStreamPtr_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , stream_j, typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_size_t __values1 = (ev_size_t) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::estimateWorldGeometry(stream, typeName);
					}
				}
				virtual ev_size_t estimateWorldGeometry(EarthView::World::Core::DataStreamPtr& stream)
				{
					if (this->_gRef != NULL && this->m_estimateWorldGeometry_DataStreamPtr_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong stream_j = (jlong) &stream;
						jmethodID __method = __gr->getMethod("estimateWorldGeometry_DataStreamPtr_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , stream_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_size_t __values1 = (ev_size_t) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::estimateWorldGeometry(stream);
					}
				}
				virtual EarthView::World::Graphic::ViewPoint getSuggestedViewpoint(ev_bool random)
				{
					if (this->_gRef != NULL && this->m_getSuggestedViewpoint_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean random_j = (jboolean) random;
						jmethodID __method = __gr->getMethod("getSuggestedViewpoint_ev_bool_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , random_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::ViewPoint __values1 = *(EarthView::World::Graphic::ViewPoint*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSuggestedViewpoint(random);
					}
				}
				virtual EarthView::World::Graphic::ViewPoint getSuggestedViewpoint()
				{
					if (this->_gRef != NULL && this->m_getSuggestedViewpoint_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSuggestedViewpoint_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::ViewPoint __values1 = *(EarthView::World::Graphic::ViewPoint*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSuggestedViewpoint();
					}
				}
				virtual ev_bool setOption(const EVString& strKey, const void* pValue)
				{
					if (this->_gRef != NULL && this->m_setOption_EVString_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring strKey_wch = strKey;
						jstring strKey_j = __env->NewString((const jchar*)strKey_wch.getString(), strKey_wch.size());
						jlong pValue_j = (jlong) pValue;
						jmethodID __method = __gr->getMethod("setOption_EVString_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , strKey_j, pValue_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::setOption(strKey, pValue);
					}
				}
				virtual ev_bool getOption(const EVString& strKey, void* pDestValue)
				{
					if (this->_gRef != NULL && this->m_getOption_EVString_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring strKey_wch = strKey;
						jstring strKey_j = __env->NewString((const jchar*)strKey_wch.getString(), strKey_wch.size());
						jlong pDestValue_j = (jlong) pDestValue;
						jmethodID __method = __gr->getMethod("getOption_EVString_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , strKey_j, pDestValue_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getOption(strKey, pDestValue);
					}
				}
				virtual ev_bool hasOption(const EVString& strKey) const
				{
					if (this->_gRef != NULL && this->m_hasOption_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring strKey_wch = strKey;
						jstring strKey_j = __env->NewString((const jchar*)strKey_wch.getString(), strKey_wch.size());
						jmethodID __method = __gr->getMethod("hasOption_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , strKey_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::hasOption(strKey);
					}
				}
				virtual ev_bool getOptionValues(const EVString& strKey, EarthView::World::Core::StringVector& refValueList)
				{
					if (this->_gRef != NULL && this->m_getOptionValues_EVString_StringVector_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring strKey_wch = strKey;
						jstring strKey_j = __env->NewString((const jchar*)strKey_wch.getString(), strKey_wch.size());
						jlong refValueList_j = (jlong) &refValueList;
						jmethodID __method = __gr->getMethod("getOptionValues_EVString_StringVector_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , strKey_j, refValueList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getOptionValues(strKey, refValueList);
					}
				}
				virtual ev_bool getOptionKeys(EarthView::World::Core::StringVector& refKeys)
				{
					if (this->_gRef != NULL && this->m_getOptionKeys_StringVector_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong refKeys_j = (jlong) &refKeys;
						jmethodID __method = __gr->getMethod("getOptionKeys_StringVector_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , refKeys_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getOptionKeys(refKeys);
					}
				}
				virtual void _updateSceneGraph(EarthView::World::Graphic::CCamera* cam)
				{
					if (this->_gRef != NULL && this->m__updateSceneGraph_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong cam_j = (jlong) cam;
						jmethodID __method = __gr->getMethod("_updateSceneGraph_CCamera_callback");
						__env->CallVoidMethod(__obj, __method , cam_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_updateSceneGraph(cam);
					}
				}
				virtual void _findVisibleObjects(EarthView::World::Graphic::CCamera* cam, EarthView::World::Graphic::VisibleObjectsBoundsInfo* visibleBounds, ev_bool onlyShadowCasters)
				{
					if (this->_gRef != NULL && this->m__findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong cam_j = (jlong) cam;
						jlong visibleBounds_j = (jlong) visibleBounds;
						jboolean onlyShadowCasters_j = (jboolean) onlyShadowCasters;
						jmethodID __method = __gr->getMethod("_findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , cam_j, visibleBounds_j, onlyShadowCasters_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_findVisibleObjects(cam, visibleBounds, onlyShadowCasters);
					}
				}
				virtual void _applySceneAnimations()
				{
					if (this->_gRef != NULL && this->m__applySceneAnimations_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("_applySceneAnimations_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_applySceneAnimations();
					}
				}
				virtual void _renderVisibleObjects()
				{
					if (this->_gRef != NULL && this->m__renderVisibleObjects_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("_renderVisibleObjects_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_renderVisibleObjects();
					}
				}
				virtual void _renderScene(EarthView::World::Graphic::CCamera* camera, EarthView::World::Graphic::CViewport* vp, ev_bool includeOverlays)
				{
					if (this->_gRef != NULL && this->m__renderScene_CCamera_CViewport_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong camera_j = (jlong) camera;
						jlong vp_j = (jlong) vp;
						jboolean includeOverlays_j = (jboolean) includeOverlays;
						jmethodID __method = __gr->getMethod("_renderScene_CCamera_CViewport_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , camera_j, vp_j, includeOverlays_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_renderScene(camera, vp, includeOverlays);
					}
				}
				virtual void _queueSkiesForRendering(EarthView::World::Graphic::CCamera* cam)
				{
					if (this->_gRef != NULL && this->m__queueSkiesForRendering_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong cam_j = (jlong) cam;
						jmethodID __method = __gr->getMethod("_queueSkiesForRendering_CCamera_callback");
						__env->CallVoidMethod(__obj, __method , cam_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_queueSkiesForRendering(cam);
					}
				}
				virtual void _setDestinationRenderSystem(EarthView::World::Graphic::CRenderSystem* ref_sys)
				{
					if (this->_gRef != NULL && this->m__setDestinationRenderSystem_CRenderSystem_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ref_sys_j = (jlong) ref_sys;
						jmethodID __method = __gr->getMethod("_setDestinationRenderSystem_CRenderSystem_callback");
						__env->CallVoidMethod(__obj, __method , ref_sys_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setDestinationRenderSystem(ref_sys);
					}
				}
				virtual void setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_bool drawFirst, Real bow, ev_int32 xsegments, ev_int32 ysegments, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jdouble bow_j = (jdouble) bow;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, drawFirst_j, bow_j, xsegments_j, ysegments_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow, xsegments, ysegments, groupName);
					}
				}
				virtual void setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_bool drawFirst, Real bow, ev_int32 xsegments, ev_int32 ysegments)
				{
					if (this->_gRef != NULL && this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jdouble bow_j = (jdouble) bow;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jmethodID __method = __gr->getMethod("setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, drawFirst_j, bow_j, xsegments_j, ysegments_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow, xsegments, ysegments);
					}
				}
				virtual void setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_bool drawFirst, Real bow, ev_int32 xsegments)
				{
					if (this->_gRef != NULL && this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jdouble bow_j = (jdouble) bow;
						jint xsegments_j = (jint) xsegments;
						jmethodID __method = __gr->getMethod("setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, drawFirst_j, bow_j, xsegments_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow, xsegments);
					}
				}
				virtual void setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_bool drawFirst, Real bow)
				{
					if (this->_gRef != NULL && this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jdouble bow_j = (jdouble) bow;
						jmethodID __method = __gr->getMethod("setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, drawFirst_j, bow_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow);
					}
				}
				virtual void setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_bool drawFirst)
				{
					if (this->_gRef != NULL && this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jmethodID __method = __gr->getMethod("setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, drawFirst_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst);
					}
				}
				virtual void setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling)
				{
					if (this->_gRef != NULL && this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jmethodID __method = __gr->getMethod("setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling);
					}
				}
				virtual void setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale)
				{
					if (this->_gRef != NULL && this->m_setSkyPlane_ev_bool_CPlane_EVString_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jmethodID __method = __gr->getMethod("setSkyPlane_ev_bool_CPlane_EVString_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyPlane(enable, plane, materialName, scale);
					}
				}
				virtual void setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName)
				{
					if (this->_gRef != NULL && this->m_setSkyPlane_ev_bool_CPlane_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jmethodID __method = __gr->getMethod("setSkyPlane_ev_bool_CPlane_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyPlane(enable, plane, materialName);
					}
				}
				virtual void _setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_uint8 renderQueue, Real bow, ev_int32 xsegments, ev_int32 ysegments, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jshort renderQueue_j = (jshort) renderQueue;
						jdouble bow_j = (jdouble) bow;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, renderQueue_j, bow_j, xsegments_j, ysegments_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow, xsegments, ysegments, groupName);
					}
				}
				virtual void _setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_uint8 renderQueue, Real bow, ev_int32 xsegments, ev_int32 ysegments)
				{
					if (this->_gRef != NULL && this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jshort renderQueue_j = (jshort) renderQueue;
						jdouble bow_j = (jdouble) bow;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jmethodID __method = __gr->getMethod("_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, renderQueue_j, bow_j, xsegments_j, ysegments_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow, xsegments, ysegments);
					}
				}
				virtual void _setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_uint8 renderQueue, Real bow, ev_int32 xsegments)
				{
					if (this->_gRef != NULL && this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jshort renderQueue_j = (jshort) renderQueue;
						jdouble bow_j = (jdouble) bow;
						jint xsegments_j = (jint) xsegments;
						jmethodID __method = __gr->getMethod("_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, renderQueue_j, bow_j, xsegments_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow, xsegments);
					}
				}
				virtual void _setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_uint8 renderQueue, Real bow)
				{
					if (this->_gRef != NULL && this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jshort renderQueue_j = (jshort) renderQueue;
						jdouble bow_j = (jdouble) bow;
						jmethodID __method = __gr->getMethod("_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, renderQueue_j, bow_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow);
					}
				}
				virtual void _setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling, ev_uint8 renderQueue)
				{
					if (this->_gRef != NULL && this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jshort renderQueue_j = (jshort) renderQueue;
						jmethodID __method = __gr->getMethod("_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j, renderQueue_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue);
					}
				}
				virtual void _setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale, Real tiling)
				{
					if (this->_gRef != NULL && this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jdouble tiling_j = (jdouble) tiling;
						jmethodID __method = __gr->getMethod("_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j, tiling_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling);
					}
				}
				virtual void _setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName, Real scale)
				{
					if (this->_gRef != NULL && this->m__setSkyPlane_ev_bool_CPlane_EVString_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble scale_j = (jdouble) scale;
						jmethodID __method = __gr->getMethod("_setSkyPlane_ev_bool_CPlane_EVString_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j, scale_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyPlane(enable, plane, materialName, scale);
					}
				}
				virtual void _setSkyPlane(ev_bool enable, const EarthView::World::Spatial::Math::CPlane& plane, const EVString& materialName)
				{
					if (this->_gRef != NULL && this->m__setSkyPlane_ev_bool_CPlane_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jlong plane_j = (jlong) &plane;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jmethodID __method = __gr->getMethod("_setSkyPlane_ev_bool_CPlane_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, plane_j, materialName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyPlane(enable, plane, materialName);
					}
				}
				virtual void setSkyPlaneEnabled(ev_bool enable)
				{
					if (this->_gRef != NULL && this->m_setSkyPlaneEnabled_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jmethodID __method = __gr->getMethod("setSkyPlaneEnabled_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enable_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyPlaneEnabled(enable);
					}
				}
				virtual ev_bool isSkyPlaneEnabled() const
				{
					if (this->_gRef != NULL && this->m_isSkyPlaneEnabled_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isSkyPlaneEnabled_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::isSkyPlaneEnabled();
					}
				}
				virtual EarthView::World::Graphic::CSceneNode* getSkyPlaneNode() const
				{
					if (this->_gRef != NULL && this->m_getSkyPlaneNode_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSkyPlaneNode_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSkyPlaneNode();
					}
				}
				virtual const EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters& getSkyPlaneGenParameters() const
				{
					if (this->_gRef != NULL && this->m_getSkyPlaneGenParameters_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSkyPlaneGenParameters_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters &__values1 = *(EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSkyPlaneGenParameters();
					}
				}
				virtual void setSkyBox(ev_bool enable, const EVString& materialName, Real distance, ev_bool drawFirst, const EarthView::World::Spatial::Math::CQuaternion& orientation, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jlong orientation_j = (jlong) &orientation;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, distance_j, drawFirst_j, orientation_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyBox(enable, materialName, distance, drawFirst, orientation, groupName);
					}
				}
				virtual void setSkyBox(ev_bool enable, const EVString& materialName, Real distance, ev_bool drawFirst, const EarthView::World::Spatial::Math::CQuaternion& orientation)
				{
					if (this->_gRef != NULL && this->m_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jlong orientation_j = (jlong) &orientation;
						jmethodID __method = __gr->getMethod("setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, distance_j, drawFirst_j, orientation_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyBox(enable, materialName, distance, drawFirst, orientation);
					}
				}
				virtual void setSkyBox(ev_bool enable, const EVString& materialName, Real distance, ev_bool drawFirst)
				{
					if (this->_gRef != NULL && this->m_setSkyBox_ev_bool_EVString_Real_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jmethodID __method = __gr->getMethod("setSkyBox_ev_bool_EVString_Real_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, distance_j, drawFirst_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyBox(enable, materialName, distance, drawFirst);
					}
				}
				virtual void setSkyBox(ev_bool enable, const EVString& materialName, Real distance)
				{
					if (this->_gRef != NULL && this->m_setSkyBox_ev_bool_EVString_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble distance_j = (jdouble) distance;
						jmethodID __method = __gr->getMethod("setSkyBox_ev_bool_EVString_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, distance_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyBox(enable, materialName, distance);
					}
				}
				virtual void setSkyBox(ev_bool enable, const EVString& materialName)
				{
					if (this->_gRef != NULL && this->m_setSkyBox_ev_bool_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jmethodID __method = __gr->getMethod("setSkyBox_ev_bool_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyBox(enable, materialName);
					}
				}
				virtual void _setSkyBox(ev_bool enable, const EVString& materialName, Real distance, ev_uint8 renderQueue, const EarthView::World::Spatial::Math::CQuaternion& orientation, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jlong orientation_j = (jlong) &orientation;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("_setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, distance_j, renderQueue_j, orientation_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyBox(enable, materialName, distance, renderQueue, orientation, groupName);
					}
				}
				virtual void _setSkyBox(ev_bool enable, const EVString& materialName, Real distance, ev_uint8 renderQueue, const EarthView::World::Spatial::Math::CQuaternion& orientation)
				{
					if (this->_gRef != NULL && this->m__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jlong orientation_j = (jlong) &orientation;
						jmethodID __method = __gr->getMethod("_setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, distance_j, renderQueue_j, orientation_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyBox(enable, materialName, distance, renderQueue, orientation);
					}
				}
				virtual void _setSkyBox(ev_bool enable, const EVString& materialName, Real distance, ev_uint8 renderQueue)
				{
					if (this->_gRef != NULL && this->m__setSkyBox_ev_bool_EVString_Real_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jmethodID __method = __gr->getMethod("_setSkyBox_ev_bool_EVString_Real_ev_uint8_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, distance_j, renderQueue_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyBox(enable, materialName, distance, renderQueue);
					}
				}
				virtual void _setSkyBox(ev_bool enable, const EVString& materialName, Real distance)
				{
					if (this->_gRef != NULL && this->m__setSkyBox_ev_bool_EVString_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble distance_j = (jdouble) distance;
						jmethodID __method = __gr->getMethod("_setSkyBox_ev_bool_EVString_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, distance_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyBox(enable, materialName, distance);
					}
				}
				virtual void _setSkyBox(ev_bool enable, const EVString& materialName)
				{
					if (this->_gRef != NULL && this->m__setSkyBox_ev_bool_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jmethodID __method = __gr->getMethod("_setSkyBox_ev_bool_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyBox(enable, materialName);
					}
				}
				virtual void setSkyBoxEnabled(ev_bool enable)
				{
					if (this->_gRef != NULL && this->m_setSkyBoxEnabled_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jmethodID __method = __gr->getMethod("setSkyBoxEnabled_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enable_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyBoxEnabled(enable);
					}
				}
				virtual ev_bool isSkyBoxEnabled() const
				{
					if (this->_gRef != NULL && this->m_isSkyBoxEnabled_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isSkyBoxEnabled_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::isSkyBoxEnabled();
					}
				}
				virtual EarthView::World::Graphic::CSceneNode* getSkyBoxNode() const
				{
					if (this->_gRef != NULL && this->m_getSkyBoxNode_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSkyBoxNode_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSkyBoxNode();
					}
				}
				virtual const EarthView::World::Graphic::CSceneManager::SkyBoxGenParameters& getSkyBoxGenParameters() const
				{
					if (this->_gRef != NULL && this->m_getSkyBoxGenParameters_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSkyBoxGenParameters_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CSceneManager::SkyBoxGenParameters &__values1 = *(EarthView::World::Graphic::CSceneManager::SkyBoxGenParameters*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSkyBoxGenParameters();
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_bool drawFirst, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments, ev_int32 ysegments, ev_int32 ysegments_keep, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jint ysegments_keep_j = (jint) ysegments_keep;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, drawFirst_j, orientation_j, xsegments_j, ysegments_j, ysegments_keep_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments, ysegments, ysegments_keep, groupName);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_bool drawFirst, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments, ev_int32 ysegments, ev_int32 ysegments_keep)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jint ysegments_keep_j = (jint) ysegments_keep;
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, drawFirst_j, orientation_j, xsegments_j, ysegments_j, ysegments_keep_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments, ysegments, ysegments_keep);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_bool drawFirst, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments, ev_int32 ysegments)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, drawFirst_j, orientation_j, xsegments_j, ysegments_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments, ysegments);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_bool drawFirst, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, drawFirst_j, orientation_j, xsegments_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_bool drawFirst, const EarthView::World::Spatial::Math::CQuaternion& orientation)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jlong orientation_j = (jlong) &orientation;
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, drawFirst_j, orientation_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_bool drawFirst)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jboolean drawFirst_j = (jboolean) drawFirst;
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, drawFirst_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_Real_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyDome(enable, materialName, curvature, tiling);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName, Real curvature)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyDome(enable, materialName, curvature);
					}
				}
				virtual void setSkyDome(ev_bool enable, const EVString& materialName)
				{
					if (this->_gRef != NULL && this->m_setSkyDome_ev_bool_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jmethodID __method = __gr->getMethod("setSkyDome_ev_bool_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyDome(enable, materialName);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_uint8 renderQueue, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments, ev_int32 ysegments, ev_int32 ysegments_keep, const EVString& groupName)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jint ysegments_keep_j = (jint) ysegments_keep;
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, renderQueue_j, orientation_j, xsegments_j, ysegments_j, ysegments_keep_j, groupName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments, ysegments, ysegments_keep, groupName);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_uint8 renderQueue, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments, ev_int32 ysegments, ev_int32 ysegments_keep)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jint ysegments_keep_j = (jint) ysegments_keep;
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, renderQueue_j, orientation_j, xsegments_j, ysegments_j, ysegments_keep_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments, ysegments, ysegments_keep);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_uint8 renderQueue, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments, ev_int32 ysegments)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jint ysegments_j = (jint) ysegments;
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, renderQueue_j, orientation_j, xsegments_j, ysegments_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments, ysegments);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_uint8 renderQueue, const EarthView::World::Spatial::Math::CQuaternion& orientation, ev_int32 xsegments)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jlong orientation_j = (jlong) &orientation;
						jint xsegments_j = (jint) xsegments;
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, renderQueue_j, orientation_j, xsegments_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_uint8 renderQueue, const EarthView::World::Spatial::Math::CQuaternion& orientation)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jlong orientation_j = (jlong) &orientation;
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, renderQueue_j, orientation_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance, ev_uint8 renderQueue)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jshort renderQueue_j = (jshort) renderQueue;
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j, renderQueue_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling, Real distance)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jdouble distance_j = (jdouble) distance;
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_Real_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j, distance_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature, Real tiling)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jdouble tiling_j = (jdouble) tiling;
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j, tiling_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyDome(enable, materialName, curvature, tiling);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName, Real curvature)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jdouble curvature_j = (jdouble) curvature;
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_Real_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j, curvature_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyDome(enable, materialName, curvature);
					}
				}
				virtual void _setSkyDome(ev_bool enable, const EVString& materialName)
				{
					if (this->_gRef != NULL && this->m__setSkyDome_ev_bool_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jmethodID __method = __gr->getMethod("_setSkyDome_ev_bool_EVString_callback");
						__env->CallVoidMethod(__obj, __method , enable_j, materialName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setSkyDome(enable, materialName);
					}
				}
				virtual void setSkyDomeEnabled(ev_bool enable)
				{
					if (this->_gRef != NULL && this->m_setSkyDomeEnabled_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jmethodID __method = __gr->getMethod("setSkyDomeEnabled_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enable_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSkyDomeEnabled(enable);
					}
				}
				virtual ev_bool isSkyDomeEnabled() const
				{
					if (this->_gRef != NULL && this->m_isSkyDomeEnabled_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isSkyDomeEnabled_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::isSkyDomeEnabled();
					}
				}
				virtual EarthView::World::Graphic::CSceneNode* getSkyDomeNode() const
				{
					if (this->_gRef != NULL && this->m_getSkyDomeNode_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSkyDomeNode_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneNode *__values1 = (EarthView::World::Graphic::CSceneNode*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSkyDomeNode();
					}
				}
				virtual const EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters& getSkyDomeGenParameters() const
				{
					if (this->_gRef != NULL && this->m_getSkyDomeGenParameters_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSkyDomeGenParameters_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters &__values1 = *(EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSkyDomeGenParameters();
					}
				}
				virtual EarthView::World::Graphic::FogMode getFogMode() const
				{
					if (this->_gRef != NULL && this->m_getFogMode_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getFogMode_void_callback");
						jint __values1_j = (jint)__env->CallIntMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::FogMode __values1 = (EarthView::World::Graphic::FogMode) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getFogMode();
					}
				}
				virtual const EarthView::World::Graphic::CColourValue& getFogColour() const
				{
					if (this->_gRef != NULL && this->m_getFogColour_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getFogColour_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CColourValue &__values1 = *(const EarthView::World::Graphic::CColourValue*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getFogColour();
					}
				}
				virtual Real getFogStart() const
				{
					if (this->_gRef != NULL && this->m_getFogStart_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getFogStart_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getFogStart();
					}
				}
				virtual Real getFogEnd() const
				{
					if (this->_gRef != NULL && this->m_getFogEnd_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getFogEnd_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getFogEnd();
					}
				}
				virtual Real getFogDensity() const
				{
					if (this->_gRef != NULL && this->m_getFogDensity_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getFogDensity_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getFogDensity();
					}
				}
				virtual EarthView::World::Graphic::CBillboardSet* createBillboardSet(const EVString& name, ev_uint32 poolSize)
				{
					if (this->_gRef != NULL && this->m_createBillboardSet_EVString_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jlong poolSize_j = (jlong) poolSize;
						jmethodID __method = __gr->getMethod("createBillboardSet_EVString_ev_uint32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j, poolSize_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CBillboardSet *__values1 = (EarthView::World::Graphic::CBillboardSet*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createBillboardSet(name, poolSize);
					}
				}
				virtual EarthView::World::Graphic::CBillboardSet* createBillboardSet(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createBillboardSet_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createBillboardSet_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CBillboardSet *__values1 = (EarthView::World::Graphic::CBillboardSet*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createBillboardSet(name);
					}
				}
				virtual EarthView::World::Graphic::CBillboardSet* createBillboardSet(ev_uint32 poolSize)
				{
					if (this->_gRef != NULL && this->m_createBillboardSet_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong poolSize_j = (jlong) poolSize;
						jmethodID __method = __gr->getMethod("createBillboardSet_ev_uint32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , poolSize_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CBillboardSet *__values1 = (EarthView::World::Graphic::CBillboardSet*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createBillboardSet(poolSize);
					}
				}
				virtual EarthView::World::Graphic::CBillboardSet* createBillboardSet()
				{
					if (this->_gRef != NULL && this->m_createBillboardSet_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createBillboardSet_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CBillboardSet *__values1 = (EarthView::World::Graphic::CBillboardSet*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createBillboardSet();
					}
				}
				virtual EarthView::World::Graphic::CBillboardSet* getBillboardSet(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getBillboardSet_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getBillboardSet_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CBillboardSet *__values1 = (EarthView::World::Graphic::CBillboardSet*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getBillboardSet(name);
					}
				}
				virtual ev_bool hasBillboardSet(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasBillboardSet_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasBillboardSet_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::hasBillboardSet(name);
					}
				}
				virtual void destroyBillboardSet(EarthView::World::Graphic::CBillboardSet* set)
				{
					if (this->_gRef != NULL && this->m_destroyBillboardSet_CBillboardSet_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong set_j = (jlong) set;
						jmethodID __method = __gr->getMethod("destroyBillboardSet_CBillboardSet_callback");
						__env->CallVoidMethod(__obj, __method , set_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyBillboardSet(set);
					}
				}
				virtual void destroyBillboardSet(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyBillboardSet_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyBillboardSet_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyBillboardSet(name);
					}
				}
				virtual void destroyAllBillboardSets()
				{
					if (this->_gRef != NULL && this->m_destroyAllBillboardSets_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllBillboardSets_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyAllBillboardSets();
					}
				}
				virtual void setDisplaySceneNodes(ev_bool display)
				{
					if (this->_gRef != NULL && this->m_setDisplaySceneNodes_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean display_j = (jboolean) display;
						jmethodID __method = __gr->getMethod("setDisplaySceneNodes_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , display_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setDisplaySceneNodes(display);
					}
				}
				virtual ev_bool getDisplaySceneNodes() const
				{
					if (this->_gRef != NULL && this->m_getDisplaySceneNodes_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getDisplaySceneNodes_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getDisplaySceneNodes();
					}
				}
				virtual EarthView::World::Graphic::CAnimation* createAnimation(const EVString& name, Real length)
				{
					if (this->_gRef != NULL && this->m_createAnimation_EVString_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jdouble length_j = (jdouble) length;
						jmethodID __method = __gr->getMethod("createAnimation_EVString_Real_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j, length_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CAnimation *__values1 = (EarthView::World::Graphic::CAnimation*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createAnimation(name, length);
					}
				}
				virtual EarthView::World::Graphic::CAnimation* getAnimation(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getAnimation_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getAnimation_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CAnimation *__values1 = (EarthView::World::Graphic::CAnimation*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getAnimation(name);
					}
				}
				virtual ev_bool hasAnimation(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasAnimation_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasAnimation_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::hasAnimation(name);
					}
				}
				virtual void destroyAnimation(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyAnimation_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyAnimation_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyAnimation(name);
					}
				}
				virtual void destroyAllAnimations()
				{
					if (this->_gRef != NULL && this->m_destroyAllAnimations_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllAnimations_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyAllAnimations();
					}
				}
				virtual EarthView::World::Graphic::CAnimationState* createAnimationState(const EVString& animName)
				{
					if (this->_gRef != NULL && this->m_createAnimationState_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring animName_wch = animName;
						jstring animName_j = __env->NewString((const jchar*)animName_wch.getString(), animName_wch.size());
						jmethodID __method = __gr->getMethod("createAnimationState_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , animName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CAnimationState *__values1 = (EarthView::World::Graphic::CAnimationState*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createAnimationState(animName);
					}
				}
				virtual EarthView::World::Graphic::CAnimationState* getAnimationState(const EVString& animName) const
				{
					if (this->_gRef != NULL && this->m_getAnimationState_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring animName_wch = animName;
						jstring animName_j = __env->NewString((const jchar*)animName_wch.getString(), animName_wch.size());
						jmethodID __method = __gr->getMethod("getAnimationState_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , animName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CAnimationState *__values1 = (EarthView::World::Graphic::CAnimationState*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getAnimationState(animName);
					}
				}
				virtual ev_bool hasAnimationState(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasAnimationState_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasAnimationState_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::hasAnimationState(name);
					}
				}
				virtual void destroyAnimationState(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyAnimationState_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyAnimationState_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyAnimationState(name);
					}
				}
				virtual void destroyAllAnimationStates()
				{
					if (this->_gRef != NULL && this->m_destroyAllAnimationStates_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllAnimationStates_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyAllAnimationStates();
					}
				}
				virtual void manualRender(EarthView::World::Graphic::CRenderOperation* rend, EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CViewport* vp, const EarthView::World::Spatial::Math::CMatrix4& worldMatrix, const EarthView::World::Spatial::Math::CMatrix4& viewMatrix, const EarthView::World::Spatial::Math::CMatrix4& projMatrix, ev_bool doBeginEndFrame)
				{
					if (this->_gRef != NULL && this->m_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong vp_j = (jlong) vp;
						jlong worldMatrix_j = (jlong) &worldMatrix;
						jlong viewMatrix_j = (jlong) &viewMatrix;
						jlong projMatrix_j = (jlong) &projMatrix;
						jboolean doBeginEndFrame_j = (jboolean) doBeginEndFrame;
						jmethodID __method = __gr->getMethod("manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, vp_j, worldMatrix_j, viewMatrix_j, projMatrix_j, doBeginEndFrame_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::manualRender(rend, pass, vp, worldMatrix, viewMatrix, projMatrix, doBeginEndFrame);
					}
				}
				virtual void manualRender(EarthView::World::Graphic::CRenderOperation* rend, EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CViewport* vp, const EarthView::World::Spatial::Math::CMatrix4& worldMatrix, const EarthView::World::Spatial::Math::CMatrix4& viewMatrix, const EarthView::World::Spatial::Math::CMatrix4& projMatrix)
				{
					if (this->_gRef != NULL && this->m_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong vp_j = (jlong) vp;
						jlong worldMatrix_j = (jlong) &worldMatrix;
						jlong viewMatrix_j = (jlong) &viewMatrix;
						jlong projMatrix_j = (jlong) &projMatrix;
						jmethodID __method = __gr->getMethod("manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, vp_j, worldMatrix_j, viewMatrix_j, projMatrix_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::manualRender(rend, pass, vp, worldMatrix, viewMatrix, projMatrix);
					}
				}
				virtual void manualRender(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CViewport* vp, const EarthView::World::Spatial::Math::CMatrix4& viewMatrix, const EarthView::World::Spatial::Math::CMatrix4& projMatrix, ev_bool doBeginEndFrame, ev_bool lightScissoringClipping, ev_bool doLightIteration, const EarthView::World::Graphic::LightList* manualLightList)
				{
					if (this->_gRef != NULL && this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong vp_j = (jlong) vp;
						jlong viewMatrix_j = (jlong) &viewMatrix;
						jlong projMatrix_j = (jlong) &projMatrix;
						jboolean doBeginEndFrame_j = (jboolean) doBeginEndFrame;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jlong manualLightList_j = (jlong) manualLightList;
						jmethodID __method = __gr->getMethod("manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, vp_j, viewMatrix_j, projMatrix_j, doBeginEndFrame_j, lightScissoringClipping_j, doLightIteration_j, manualLightList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame, lightScissoringClipping, doLightIteration, manualLightList);
					}
				}
				virtual void manualRender(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CViewport* vp, const EarthView::World::Spatial::Math::CMatrix4& viewMatrix, const EarthView::World::Spatial::Math::CMatrix4& projMatrix, ev_bool doBeginEndFrame, ev_bool lightScissoringClipping, ev_bool doLightIteration)
				{
					if (this->_gRef != NULL && this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong vp_j = (jlong) vp;
						jlong viewMatrix_j = (jlong) &viewMatrix;
						jlong projMatrix_j = (jlong) &projMatrix;
						jboolean doBeginEndFrame_j = (jboolean) doBeginEndFrame;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jmethodID __method = __gr->getMethod("manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, vp_j, viewMatrix_j, projMatrix_j, doBeginEndFrame_j, lightScissoringClipping_j, doLightIteration_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame, lightScissoringClipping, doLightIteration);
					}
				}
				virtual void manualRender(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CViewport* vp, const EarthView::World::Spatial::Math::CMatrix4& viewMatrix, const EarthView::World::Spatial::Math::CMatrix4& projMatrix, ev_bool doBeginEndFrame, ev_bool lightScissoringClipping)
				{
					if (this->_gRef != NULL && this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong vp_j = (jlong) vp;
						jlong viewMatrix_j = (jlong) &viewMatrix;
						jlong projMatrix_j = (jlong) &projMatrix;
						jboolean doBeginEndFrame_j = (jboolean) doBeginEndFrame;
						jboolean lightScissoringClipping_j = (jboolean) lightScissoringClipping;
						jmethodID __method = __gr->getMethod("manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, vp_j, viewMatrix_j, projMatrix_j, doBeginEndFrame_j, lightScissoringClipping_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame, lightScissoringClipping);
					}
				}
				virtual void manualRender(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CViewport* vp, const EarthView::World::Spatial::Math::CMatrix4& viewMatrix, const EarthView::World::Spatial::Math::CMatrix4& projMatrix, ev_bool doBeginEndFrame)
				{
					if (this->_gRef != NULL && this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong vp_j = (jlong) vp;
						jlong viewMatrix_j = (jlong) &viewMatrix;
						jlong projMatrix_j = (jlong) &projMatrix;
						jboolean doBeginEndFrame_j = (jboolean) doBeginEndFrame;
						jmethodID __method = __gr->getMethod("manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, vp_j, viewMatrix_j, projMatrix_j, doBeginEndFrame_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame);
					}
				}
				virtual void manualRender(EarthView::World::Graphic::CRenderable* rend, const EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CViewport* vp, const EarthView::World::Spatial::Math::CMatrix4& viewMatrix, const EarthView::World::Spatial::Math::CMatrix4& projMatrix)
				{
					if (this->_gRef != NULL && this->m_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rend_j = (jlong) rend;
						jlong pass_j = (jlong) pass;
						jlong vp_j = (jlong) vp;
						jlong viewMatrix_j = (jlong) &viewMatrix;
						jlong projMatrix_j = (jlong) &projMatrix;
						jmethodID __method = __gr->getMethod("manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_callback");
						__env->CallVoidMethod(__obj, __method , rend_j, pass_j, vp_j, viewMatrix_j, projMatrix_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix);
					}
				}
				virtual EarthView::World::Graphic::CRenderQueue* getRenderQueue()
				{
					if (this->_gRef != NULL && this->m_getRenderQueue_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getRenderQueue_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CRenderQueue *__values1 = (EarthView::World::Graphic::CRenderQueue*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getRenderQueue();
					}
				}
				virtual void addRenderQueueListener(EarthView::World::Graphic::CRenderQueueListener* ref_newListener)
				{
					if (this->_gRef != NULL && this->m_addRenderQueueListener_CRenderQueueListener_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ref_newListener_j = (jlong) ref_newListener;
						jmethodID __method = __gr->getMethod("addRenderQueueListener_CRenderQueueListener_callback");
						__env->CallVoidMethod(__obj, __method , ref_newListener_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::addRenderQueueListener(ref_newListener);
					}
				}
				virtual void removeRenderQueueListener(EarthView::World::Graphic::CRenderQueueListener* delListener)
				{
					if (this->_gRef != NULL && this->m_removeRenderQueueListener_CRenderQueueListener_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong delListener_j = (jlong) delListener;
						jmethodID __method = __gr->getMethod("removeRenderQueueListener_CRenderQueueListener_callback");
						__env->CallVoidMethod(__obj, __method , delListener_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::removeRenderQueueListener(delListener);
					}
				}
				virtual void addRenderObjectListener(EarthView::World::Graphic::CRenderObjectListener* ref_newListener)
				{
					if (this->_gRef != NULL && this->m_addRenderObjectListener_CRenderObjectListener_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ref_newListener_j = (jlong) ref_newListener;
						jmethodID __method = __gr->getMethod("addRenderObjectListener_CRenderObjectListener_callback");
						__env->CallVoidMethod(__obj, __method , ref_newListener_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::addRenderObjectListener(ref_newListener);
					}
				}
				virtual void removeRenderObjectListener(EarthView::World::Graphic::CRenderObjectListener* delListener)
				{
					if (this->_gRef != NULL && this->m_removeRenderObjectListener_CRenderObjectListener_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong delListener_j = (jlong) delListener;
						jmethodID __method = __gr->getMethod("removeRenderObjectListener_CRenderObjectListener_callback");
						__env->CallVoidMethod(__obj, __method , delListener_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::removeRenderObjectListener(delListener);
					}
				}
				virtual void addSpecialCaseRenderQueue(ev_uint8 qid)
				{
					if (this->_gRef != NULL && this->m_addSpecialCaseRenderQueue_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort qid_j = (jshort) qid;
						jmethodID __method = __gr->getMethod("addSpecialCaseRenderQueue_ev_uint8_callback");
						__env->CallVoidMethod(__obj, __method , qid_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::addSpecialCaseRenderQueue(qid);
					}
				}
				virtual void removeSpecialCaseRenderQueue(ev_uint8 qid)
				{
					if (this->_gRef != NULL && this->m_removeSpecialCaseRenderQueue_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort qid_j = (jshort) qid;
						jmethodID __method = __gr->getMethod("removeSpecialCaseRenderQueue_ev_uint8_callback");
						__env->CallVoidMethod(__obj, __method , qid_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::removeSpecialCaseRenderQueue(qid);
					}
				}
				virtual void clearSpecialCaseRenderQueues()
				{
					if (this->_gRef != NULL && this->m_clearSpecialCaseRenderQueues_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("clearSpecialCaseRenderQueues_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::clearSpecialCaseRenderQueues();
					}
				}
				virtual void setSpecialCaseRenderQueueMode(EarthView::World::Graphic::CSceneManager::SpecialCaseRenderQueueMode mode)
				{
					if (this->_gRef != NULL && this->m_setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint mode_j = (jint) mode;
						jmethodID __method = __gr->getMethod("setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_callback");
						__env->CallVoidMethod(__obj, __method , mode_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setSpecialCaseRenderQueueMode(mode);
					}
				}
				virtual EarthView::World::Graphic::CSceneManager::SpecialCaseRenderQueueMode getSpecialCaseRenderQueueMode()
				{
					if (this->_gRef != NULL && this->m_getSpecialCaseRenderQueueMode_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getSpecialCaseRenderQueueMode_void_callback");
						jint __values1_j = (jint)__env->CallIntMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneManager::SpecialCaseRenderQueueMode __values1 = (EarthView::World::Graphic::CSceneManager::SpecialCaseRenderQueueMode) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getSpecialCaseRenderQueueMode();
					}
				}
				virtual ev_bool isRenderQueueToBeProcessed(ev_uint8 qid)
				{
					if (this->_gRef != NULL && this->m_isRenderQueueToBeProcessed_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort qid_j = (jshort) qid;
						jmethodID __method = __gr->getMethod("isRenderQueueToBeProcessed_ev_uint8_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , qid_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::isRenderQueueToBeProcessed(qid);
					}
				}
				virtual void setWorldGeometryRenderQueue(ev_uint8 qid)
				{
					if (this->_gRef != NULL && this->m_setWorldGeometryRenderQueue_ev_uint8_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jshort qid_j = (jshort) qid;
						jmethodID __method = __gr->getMethod("setWorldGeometryRenderQueue_ev_uint8_callback");
						__env->CallVoidMethod(__obj, __method , qid_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setWorldGeometryRenderQueue(qid);
					}
				}
				virtual ev_uint8 getWorldGeometryRenderQueue()
				{
					if (this->_gRef != NULL && this->m_getWorldGeometryRenderQueue_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getWorldGeometryRenderQueue_void_callback");
						jshort __values1_j = (jshort)__env->CallShortMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_uint8 __values1 = (ev_uint8) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getWorldGeometryRenderQueue();
					}
				}
				virtual void showBoundingBoxes(ev_bool bShow)
				{
					if (this->_gRef != NULL && this->m_showBoundingBoxes_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean bShow_j = (jboolean) bShow;
						jmethodID __method = __gr->getMethod("showBoundingBoxes_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , bShow_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::showBoundingBoxes(bShow);
					}
				}
				virtual ev_bool getShowBoundingBoxes() const
				{
					if (this->_gRef != NULL && this->m_getShowBoundingBoxes_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShowBoundingBoxes_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShowBoundingBoxes();
					}
				}
				virtual void _notifyAutotrackingSceneNode(EarthView::World::Graphic::CSceneNode* node, ev_bool autoTrack)
				{
					if (this->_gRef != NULL && this->m__notifyAutotrackingSceneNode_CSceneNode_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong node_j = (jlong) node;
						jboolean autoTrack_j = (jboolean) autoTrack;
						jmethodID __method = __gr->getMethod("_notifyAutotrackingSceneNode_CSceneNode_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , node_j, autoTrack_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_notifyAutotrackingSceneNode(node, autoTrack);
					}
				}
				virtual EarthView::World::Graphic::CAxisAlignedBoxSceneQuery* createAABBQuery(const EarthView::World::Spatial::Math::CAxisAlignedBox& box, ev_uint32 mask)
				{
					if (this->_gRef != NULL && this->m_createAABBQuery_CAxisAlignedBox_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong box_j = (jlong) &box;
						jlong mask_j = (jlong) mask;
						jmethodID __method = __gr->getMethod("createAABBQuery_CAxisAlignedBox_ev_uint32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , box_j, mask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CAxisAlignedBoxSceneQuery *__values1 = (EarthView::World::Graphic::CAxisAlignedBoxSceneQuery*) __values1_j;
						if(__values1 != NULL) {
							((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(false);
						}
						return __values1;
					}
					else
					{
						return this->CSceneManager::createAABBQuery(box, mask);
					}
				}
				virtual EarthView::World::Graphic::CAxisAlignedBoxSceneQuery* createAABBQuery(const EarthView::World::Spatial::Math::CAxisAlignedBox& box)
				{
					if (this->_gRef != NULL && this->m_createAABBQuery_CAxisAlignedBox_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong box_j = (jlong) &box;
						jmethodID __method = __gr->getMethod("createAABBQuery_CAxisAlignedBox_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , box_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CAxisAlignedBoxSceneQuery *__values1 = (EarthView::World::Graphic::CAxisAlignedBoxSceneQuery*) __values1_j;
						if(__values1 != NULL) {
							((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(false);
						}
						return __values1;
					}
					else
					{
						return this->CSceneManager::createAABBQuery(box);
					}
				}
				virtual EarthView::World::Graphic::CSphereSceneQuery* createSphereQuery(const EarthView::World::Spatial::Math::CSphere& sphere, ev_uint32 mask)
				{
					if (this->_gRef != NULL && this->m_createSphereQuery_CSphere_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong sphere_j = (jlong) &sphere;
						jlong mask_j = (jlong) mask;
						jmethodID __method = __gr->getMethod("createSphereQuery_CSphere_ev_uint32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , sphere_j, mask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSphereSceneQuery *__values1 = (EarthView::World::Graphic::CSphereSceneQuery*) __values1_j;
						if(__values1 != NULL) {
							((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(false);
						}
						return __values1;
					}
					else
					{
						return this->CSceneManager::createSphereQuery(sphere, mask);
					}
				}
				virtual EarthView::World::Graphic::CSphereSceneQuery* createSphereQuery(const EarthView::World::Spatial::Math::CSphere& sphere)
				{
					if (this->_gRef != NULL && this->m_createSphereQuery_CSphere_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong sphere_j = (jlong) &sphere;
						jmethodID __method = __gr->getMethod("createSphereQuery_CSphere_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , sphere_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSphereSceneQuery *__values1 = (EarthView::World::Graphic::CSphereSceneQuery*) __values1_j;
						if(__values1 != NULL) {
							((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(false);
						}
						return __values1;
					}
					else
					{
						return this->CSceneManager::createSphereQuery(sphere);
					}
				}
				virtual EarthView::World::Graphic::CPlaneBoundedVolumeListSceneQuery* createPlaneBoundedVolumeQuery(const EarthView::World::Spatial::Math::PlaneBoundedVolumeList& volumes, ev_uint32 mask)
				{
					if (this->_gRef != NULL && this->m_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong volumes_j = (jlong) &volumes;
						jlong mask_j = (jlong) mask;
						jmethodID __method = __gr->getMethod("createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , volumes_j, mask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CPlaneBoundedVolumeListSceneQuery *__values1 = (EarthView::World::Graphic::CPlaneBoundedVolumeListSceneQuery*) __values1_j;
						if(__values1 != NULL) {
							((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(false);
						}
						return __values1;
					}
					else
					{
						return this->CSceneManager::createPlaneBoundedVolumeQuery(volumes, mask);
					}
				}
				virtual EarthView::World::Graphic::CPlaneBoundedVolumeListSceneQuery* createPlaneBoundedVolumeQuery(const EarthView::World::Spatial::Math::PlaneBoundedVolumeList& volumes)
				{
					if (this->_gRef != NULL && this->m_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong volumes_j = (jlong) &volumes;
						jmethodID __method = __gr->getMethod("createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , volumes_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CPlaneBoundedVolumeListSceneQuery *__values1 = (EarthView::World::Graphic::CPlaneBoundedVolumeListSceneQuery*) __values1_j;
						if(__values1 != NULL) {
							((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(false);
						}
						return __values1;
					}
					else
					{
						return this->CSceneManager::createPlaneBoundedVolumeQuery(volumes);
					}
				}
				virtual EarthView::World::Graphic::CRaySceneQuery* createRayQuery(const EarthView::World::Spatial::Math::CRay& ray, ev_uint32 mask)
				{
					if (this->_gRef != NULL && this->m_createRayQuery_CRay_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ray_j = (jlong) &ray;
						jlong mask_j = (jlong) mask;
						jmethodID __method = __gr->getMethod("createRayQuery_CRay_ev_uint32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , ray_j, mask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CRaySceneQuery *__values1 = (EarthView::World::Graphic::CRaySceneQuery*) __values1_j;
						if(__values1 != NULL) {
							((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(false);
						}
						return __values1;
					}
					else
					{
						return this->CSceneManager::createRayQuery(ray, mask);
					}
				}
				virtual EarthView::World::Graphic::CRaySceneQuery* createRayQuery(const EarthView::World::Spatial::Math::CRay& ray)
				{
					if (this->_gRef != NULL && this->m_createRayQuery_CRay_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ray_j = (jlong) &ray;
						jmethodID __method = __gr->getMethod("createRayQuery_CRay_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , ray_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CRaySceneQuery *__values1 = (EarthView::World::Graphic::CRaySceneQuery*) __values1_j;
						if(__values1 != NULL) {
							((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(false);
						}
						return __values1;
					}
					else
					{
						return this->CSceneManager::createRayQuery(ray);
					}
				}
				virtual EarthView::World::Graphic::CIntersectionSceneQuery* createIntersectionQuery(ev_uint32 mask)
				{
					if (this->_gRef != NULL && this->m_createIntersectionQuery_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong mask_j = (jlong) mask;
						jmethodID __method = __gr->getMethod("createIntersectionQuery_ev_uint32_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , mask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CIntersectionSceneQuery *__values1 = (EarthView::World::Graphic::CIntersectionSceneQuery*) __values1_j;
						if(__values1 != NULL) {
							((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(false);
						}
						return __values1;
					}
					else
					{
						return this->CSceneManager::createIntersectionQuery(mask);
					}
				}
				virtual EarthView::World::Graphic::CIntersectionSceneQuery* createIntersectionQuery()
				{
					if (this->_gRef != NULL && this->m_createIntersectionQuery_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("createIntersectionQuery_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CIntersectionSceneQuery *__values1 = (EarthView::World::Graphic::CIntersectionSceneQuery*) __values1_j;
						if(__values1 != NULL) {
							((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(false);
						}
						return __values1;
					}
					else
					{
						return this->CSceneManager::createIntersectionQuery();
					}
				}
				virtual void destroyQuery(EarthView::World::Graphic::CSceneQuery* query)
				{
					if (this->_gRef != NULL && this->m_destroyQuery_CSceneQuery_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong query_j = (jlong) query;
						jmethodID __method = __gr->getMethod("destroyQuery_CSceneQuery_callback");
						__env->CallVoidMethod(__obj, __method , query_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyQuery(query);
					}
				}
				virtual void setShadowTechnique(EarthView::World::Graphic::ShadowTechnique technique)
				{
					if (this->_gRef != NULL && this->m_setShadowTechnique_ShadowTechnique_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint technique_j = (jint) technique;
						jmethodID __method = __gr->getMethod("setShadowTechnique_ShadowTechnique_callback");
						__env->CallVoidMethod(__obj, __method , technique_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTechnique(technique);
					}
				}
				virtual EarthView::World::Graphic::ShadowTechnique getShadowTechnique() const
				{
					if (this->_gRef != NULL && this->m_getShadowTechnique_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowTechnique_void_callback");
						jint __values1_j = (jint)__env->CallIntMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::ShadowTechnique __values1 = (EarthView::World::Graphic::ShadowTechnique) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShadowTechnique();
					}
				}
				virtual void setShowDebugShadows(ev_bool debug)
				{
					if (this->_gRef != NULL && this->m_setShowDebugShadows_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean debug_j = (jboolean) debug;
						jmethodID __method = __gr->getMethod("setShowDebugShadows_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , debug_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShowDebugShadows(debug);
					}
				}
				virtual ev_bool getShowDebugShadows() const
				{
					if (this->_gRef != NULL && this->m_getShowDebugShadows_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShowDebugShadows_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShowDebugShadows();
					}
				}
				virtual void setShadowColour(const EarthView::World::Graphic::CColourValue& colour)
				{
					if (this->_gRef != NULL && this->m_setShadowColour_CColourValue_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong colour_j = (jlong) &colour;
						jmethodID __method = __gr->getMethod("setShadowColour_CColourValue_callback");
						__env->CallVoidMethod(__obj, __method , colour_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowColour(colour);
					}
				}
				virtual const EarthView::World::Graphic::CColourValue& getShadowColour() const
				{
					if (this->_gRef != NULL && this->m_getShadowColour_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowColour_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CColourValue &__values1 = *(const EarthView::World::Graphic::CColourValue*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShadowColour();
					}
				}
				virtual void setShadowDirectionalLightExtrusionDistance(Real dist)
				{
					if (this->_gRef != NULL && this->m_setShadowDirectionalLightExtrusionDistance_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble dist_j = (jdouble) dist;
						jmethodID __method = __gr->getMethod("setShadowDirectionalLightExtrusionDistance_Real_callback");
						__env->CallVoidMethod(__obj, __method , dist_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowDirectionalLightExtrusionDistance(dist);
					}
				}
				virtual Real getShadowDirectionalLightExtrusionDistance() const
				{
					if (this->_gRef != NULL && this->m_getShadowDirectionalLightExtrusionDistance_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowDirectionalLightExtrusionDistance_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShadowDirectionalLightExtrusionDistance();
					}
				}
				virtual void setShadowColorRRatio(Real rRatio)
				{
					if (this->_gRef != NULL && this->m_setShadowColorRRatio_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble rRatio_j = (jdouble) rRatio;
						jmethodID __method = __gr->getMethod("setShadowColorRRatio_Real_callback");
						__env->CallVoidMethod(__obj, __method , rRatio_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowColorRRatio(rRatio);
					}
				}
				virtual void setShadowColorGRatio(Real gRatio)
				{
					if (this->_gRef != NULL && this->m_setShadowColorGRatio_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble gRatio_j = (jdouble) gRatio;
						jmethodID __method = __gr->getMethod("setShadowColorGRatio_Real_callback");
						__env->CallVoidMethod(__obj, __method , gRatio_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowColorGRatio(gRatio);
					}
				}
				virtual void setShadowColorBRatio(Real bRatio)
				{
					if (this->_gRef != NULL && this->m_setShadowColorBRatio_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble bRatio_j = (jdouble) bRatio;
						jmethodID __method = __gr->getMethod("setShadowColorBRatio_Real_callback");
						__env->CallVoidMethod(__obj, __method , bRatio_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowColorBRatio(bRatio);
					}
				}
				virtual Real getShadowColorRRatio() const
				{
					if (this->_gRef != NULL && this->m_getShadowColorRRatio_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowColorRRatio_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShadowColorRRatio();
					}
				}
				virtual Real getShadowColorGRatio() const
				{
					if (this->_gRef != NULL && this->m_getShadowColorGRatio_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowColorGRatio_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShadowColorGRatio();
					}
				}
				virtual Real getShadowColorBRatio() const
				{
					if (this->_gRef != NULL && this->m_getShadowColorBRatio_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowColorBRatio_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShadowColorBRatio();
					}
				}
				virtual void setShadowFarDistance(Real distance)
				{
					if (this->_gRef != NULL && this->m_setShadowFarDistance_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble distance_j = (jdouble) distance;
						jmethodID __method = __gr->getMethod("setShadowFarDistance_Real_callback");
						__env->CallVoidMethod(__obj, __method , distance_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowFarDistance(distance);
					}
				}
				virtual Real getShadowFarDistance() const
				{
					if (this->_gRef != NULL && this->m_getShadowFarDistance_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowFarDistance_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShadowFarDistance();
					}
				}
				virtual Real getShadowFarDistanceSquared() const
				{
					if (this->_gRef != NULL && this->m_getShadowFarDistanceSquared_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowFarDistanceSquared_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShadowFarDistanceSquared();
					}
				}
				virtual void setShadowIndexBufferSize(ev_size_t size)
				{
					if (this->_gRef != NULL && this->m_setShadowIndexBufferSize_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong size_j = (jlong) size;
						jmethodID __method = __gr->getMethod("setShadowIndexBufferSize_ev_size_t_callback");
						__env->CallVoidMethod(__obj, __method , size_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowIndexBufferSize(size);
					}
				}
				virtual ev_size_t getShadowIndexBufferSize() const
				{
					if (this->_gRef != NULL && this->m_getShadowIndexBufferSize_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowIndexBufferSize_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_size_t __values1 = (ev_size_t) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShadowIndexBufferSize();
					}
				}
				virtual void setShadowTextureSize(ev_uint16 size)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureSize_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint size_j = (jint) size;
						jmethodID __method = __gr->getMethod("setShadowTextureSize_ev_uint16_callback");
						__env->CallVoidMethod(__obj, __method , size_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTextureSize(size);
					}
				}
				virtual void setShadowTextureConfig(ev_size_t shadowIndex, ev_uint16 width, ev_uint16 height, EarthView::World::Graphic::PixelFormat format)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong shadowIndex_j = (jlong) shadowIndex;
						jint width_j = (jint) width;
						jint height_j = (jint) height;
						jint format_j = (jint) format;
						jmethodID __method = __gr->getMethod("setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_callback");
						__env->CallVoidMethod(__obj, __method , shadowIndex_j, width_j, height_j, format_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTextureConfig(shadowIndex, width, height, format);
					}
				}
				virtual void setShadowTextureConfig(ev_size_t shadowIndex, ev_uint16 width, ev_uint16 height, EarthView::World::Graphic::PixelFormat format, ev_uint16 fsaa)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong shadowIndex_j = (jlong) shadowIndex;
						jint width_j = (jint) width;
						jint height_j = (jint) height;
						jint format_j = (jint) format;
						jint fsaa_j = (jint) fsaa;
						jmethodID __method = __gr->getMethod("setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback");
						__env->CallVoidMethod(__obj, __method , shadowIndex_j, width_j, height_j, format_j, fsaa_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTextureConfig(shadowIndex, width, height, format, fsaa);
					}
				}
				virtual void setShadowTextureConfig(ev_size_t shadowIndex, ev_uint16 width, ev_uint16 height, EarthView::World::Graphic::PixelFormat format, ev_uint16 fsaa, ev_uint16 depthBufferPoolId)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong shadowIndex_j = (jlong) shadowIndex;
						jint width_j = (jint) width;
						jint height_j = (jint) height;
						jint format_j = (jint) format;
						jint fsaa_j = (jint) fsaa;
						jint depthBufferPoolId_j = (jint) depthBufferPoolId;
						jmethodID __method = __gr->getMethod("setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback");
						__env->CallVoidMethod(__obj, __method , shadowIndex_j, width_j, height_j, format_j, fsaa_j, depthBufferPoolId_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTextureConfig(shadowIndex, width, height, format, fsaa, depthBufferPoolId);
					}
				}
				virtual void setShadowTextureConfig(ev_size_t shadowIndex, const EarthView::World::Graphic::ShadowTextureConfig& config)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureConfig_ev_size_t_ShadowTextureConfig_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong shadowIndex_j = (jlong) shadowIndex;
						jlong config_j = (jlong) &config;
						jmethodID __method = __gr->getMethod("setShadowTextureConfig_ev_size_t_ShadowTextureConfig_callback");
						__env->CallVoidMethod(__obj, __method , shadowIndex_j, config_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTextureConfig(shadowIndex, config);
					}
				}
				virtual void setShadowTexturePixelFormat(EarthView::World::Graphic::PixelFormat fmt)
				{
					if (this->_gRef != NULL && this->m_setShadowTexturePixelFormat_PixelFormat_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint fmt_j = (jint) fmt;
						jmethodID __method = __gr->getMethod("setShadowTexturePixelFormat_PixelFormat_callback");
						__env->CallVoidMethod(__obj, __method , fmt_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTexturePixelFormat(fmt);
					}
				}
				virtual void setShadowTextureFSAA(ev_uint16 fsaa)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureFSAA_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint fsaa_j = (jint) fsaa;
						jmethodID __method = __gr->getMethod("setShadowTextureFSAA_ev_uint16_callback");
						__env->CallVoidMethod(__obj, __method , fsaa_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTextureFSAA(fsaa);
					}
				}
				virtual void setShadowTextureCount(ev_size_t count)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureCount_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong count_j = (jlong) count;
						jmethodID __method = __gr->getMethod("setShadowTextureCount_ev_size_t_callback");
						__env->CallVoidMethod(__obj, __method , count_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTextureCount(count);
					}
				}
				virtual void setShadowTextureSettings(ev_uint16 size, ev_uint16 count)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureSettings_ev_uint16_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint size_j = (jint) size;
						jint count_j = (jint) count;
						jmethodID __method = __gr->getMethod("setShadowTextureSettings_ev_uint16_ev_uint16_callback");
						__env->CallVoidMethod(__obj, __method , size_j, count_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTextureSettings(size, count);
					}
				}
				virtual void setShadowTextureSettings(ev_uint16 size, ev_uint16 count, EarthView::World::Graphic::PixelFormat fmt)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint size_j = (jint) size;
						jint count_j = (jint) count;
						jint fmt_j = (jint) fmt;
						jmethodID __method = __gr->getMethod("setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_callback");
						__env->CallVoidMethod(__obj, __method , size_j, count_j, fmt_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTextureSettings(size, count, fmt);
					}
				}
				virtual void setShadowTextureSettings(ev_uint16 size, ev_uint16 count, EarthView::World::Graphic::PixelFormat fmt, ev_uint16 fsaa)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint size_j = (jint) size;
						jint count_j = (jint) count;
						jint fmt_j = (jint) fmt;
						jint fsaa_j = (jint) fsaa;
						jmethodID __method = __gr->getMethod("setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback");
						__env->CallVoidMethod(__obj, __method , size_j, count_j, fmt_j, fsaa_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTextureSettings(size, count, fmt, fsaa);
					}
				}
				virtual void setShadowTextureSettings(ev_uint16 size, ev_uint16 count, EarthView::World::Graphic::PixelFormat fmt, ev_uint16 fsaa, ev_uint16 depthBufferPoolId)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint size_j = (jint) size;
						jint count_j = (jint) count;
						jint fmt_j = (jint) fmt;
						jint fsaa_j = (jint) fsaa;
						jint depthBufferPoolId_j = (jint) depthBufferPoolId;
						jmethodID __method = __gr->getMethod("setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback");
						__env->CallVoidMethod(__obj, __method , size_j, count_j, fmt_j, fsaa_j, depthBufferPoolId_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTextureSettings(size, count, fmt, fsaa, depthBufferPoolId);
					}
				}
				virtual const EarthView::World::Graphic::CTexturePtr& getShadowTexture(ev_size_t shadowIndex)
				{
					if (this->_gRef != NULL && this->m_getShadowTexture_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong shadowIndex_j = (jlong) shadowIndex;
						jmethodID __method = __gr->getMethod("getShadowTexture_ev_size_t_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , shadowIndex_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CTexturePtr &__values1 = *(const EarthView::World::Graphic::CTexturePtr*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShadowTexture(shadowIndex);
					}
				}
				virtual void setShadowDirLightTextureOffset(Real offset)
				{
					if (this->_gRef != NULL && this->m_setShadowDirLightTextureOffset_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble offset_j = (jdouble) offset;
						jmethodID __method = __gr->getMethod("setShadowDirLightTextureOffset_Real_callback");
						__env->CallVoidMethod(__obj, __method , offset_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowDirLightTextureOffset(offset);
					}
				}
				virtual Real getShadowDirLightTextureOffset() const
				{
					if (this->_gRef != NULL && this->m_getShadowDirLightTextureOffset_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowDirLightTextureOffset_void_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShadowDirLightTextureOffset();
					}
				}
				virtual void setShadowTextureFadeStart(Real fadeStart)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureFadeStart_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble fadeStart_j = (jdouble) fadeStart;
						jmethodID __method = __gr->getMethod("setShadowTextureFadeStart_Real_callback");
						__env->CallVoidMethod(__obj, __method , fadeStart_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTextureFadeStart(fadeStart);
					}
				}
				virtual void setShadowTextureFadeEnd(Real fadeEnd)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureFadeEnd_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble fadeEnd_j = (jdouble) fadeEnd;
						jmethodID __method = __gr->getMethod("setShadowTextureFadeEnd_Real_callback");
						__env->CallVoidMethod(__obj, __method , fadeEnd_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTextureFadeEnd(fadeEnd);
					}
				}
				virtual void setShadowTextureSelfShadow(ev_bool selfShadow)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureSelfShadow_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean selfShadow_j = (jboolean) selfShadow;
						jmethodID __method = __gr->getMethod("setShadowTextureSelfShadow_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , selfShadow_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTextureSelfShadow(selfShadow);
					}
				}
				virtual ev_bool getShadowTextureSelfShadow() const
				{
					if (this->_gRef != NULL && this->m_getShadowTextureSelfShadow_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowTextureSelfShadow_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShadowTextureSelfShadow();
					}
				}
				virtual void setShadowTextureCasterMaterial(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureCasterMaterial_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("setShadowTextureCasterMaterial_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTextureCasterMaterial(name);
					}
				}
				virtual void setShadowTextureReceiverMaterial(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_setShadowTextureReceiverMaterial_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("setShadowTextureReceiverMaterial_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowTextureReceiverMaterial(name);
					}
				}
				virtual void setShadowCasterRenderBackFaces(ev_bool bf)
				{
					if (this->_gRef != NULL && this->m_setShadowCasterRenderBackFaces_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean bf_j = (jboolean) bf;
						jmethodID __method = __gr->getMethod("setShadowCasterRenderBackFaces_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , bf_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowCasterRenderBackFaces(bf);
					}
				}
				virtual ev_bool getShadowCasterRenderBackFaces() const
				{
					if (this->_gRef != NULL && this->m_getShadowCasterRenderBackFaces_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowCasterRenderBackFaces_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShadowCasterRenderBackFaces();
					}
				}
				virtual void setShadowCameraSetup(const EarthView::World::Graphic::ShadowCameraSetupPtr& shadowSetup)
				{
					if (this->_gRef != NULL && this->m_setShadowCameraSetup_ShadowCameraSetupPtr_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong shadowSetup_j = (jlong) &shadowSetup;
						jmethodID __method = __gr->getMethod("setShadowCameraSetup_ShadowCameraSetupPtr_callback");
						__env->CallVoidMethod(__obj, __method , shadowSetup_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowCameraSetup(shadowSetup);
					}
				}
				virtual const EarthView::World::Graphic::ShadowCameraSetupPtr& getShadowCameraSetup() const
				{
					if (this->_gRef != NULL && this->m_getShadowCameraSetup_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowCameraSetup_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::ShadowCameraSetupPtr &__values1 = *(const EarthView::World::Graphic::ShadowCameraSetupPtr*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShadowCameraSetup();
					}
				}
				virtual void setShadowUseInfiniteFarPlane(ev_bool enable)
				{
					if (this->_gRef != NULL && this->m_setShadowUseInfiniteFarPlane_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jmethodID __method = __gr->getMethod("setShadowUseInfiniteFarPlane_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enable_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowUseInfiniteFarPlane(enable);
					}
				}
				virtual ev_bool isShadowTechniqueStencilBased() const
				{
					if (this->_gRef != NULL && this->m_isShadowTechniqueStencilBased_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isShadowTechniqueStencilBased_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::isShadowTechniqueStencilBased();
					}
				}
				virtual ev_bool isShadowTechniqueTextureBased() const
				{
					if (this->_gRef != NULL && this->m_isShadowTechniqueTextureBased_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isShadowTechniqueTextureBased_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::isShadowTechniqueTextureBased();
					}
				}
				virtual ev_bool isShadowTechniqueModulative() const
				{
					if (this->_gRef != NULL && this->m_isShadowTechniqueModulative_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isShadowTechniqueModulative_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::isShadowTechniqueModulative();
					}
				}
				virtual ev_bool isShadowTechniqueAdditive() const
				{
					if (this->_gRef != NULL && this->m_isShadowTechniqueAdditive_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isShadowTechniqueAdditive_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::isShadowTechniqueAdditive();
					}
				}
				virtual ev_bool isShadowTechniqueIntegrated() const
				{
					if (this->_gRef != NULL && this->m_isShadowTechniqueIntegrated_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isShadowTechniqueIntegrated_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::isShadowTechniqueIntegrated();
					}
				}
				virtual ev_bool isShadowTechniqueInUse() const
				{
					if (this->_gRef != NULL && this->m_isShadowTechniqueInUse_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isShadowTechniqueInUse_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::isShadowTechniqueInUse();
					}
				}
				virtual void setShadowUseLightClipPlanes(ev_bool enabled)
				{
					if (this->_gRef != NULL && this->m_setShadowUseLightClipPlanes_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enabled_j = (jboolean) enabled;
						jmethodID __method = __gr->getMethod("setShadowUseLightClipPlanes_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enabled_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setShadowUseLightClipPlanes(enabled);
					}
				}
				virtual ev_bool getShadowUseLightClipPlanes() const
				{
					if (this->_gRef != NULL && this->m_getShadowUseLightClipPlanes_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getShadowUseLightClipPlanes_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getShadowUseLightClipPlanes();
					}
				}
				virtual void _setActiveCompositorChain(EarthView::World::Graphic::CCompositorChain* chain)
				{
					if (this->_gRef != NULL && this->m__setActiveCompositorChain_CCompositorChain_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong chain_j = (jlong) chain;
						jmethodID __method = __gr->getMethod("_setActiveCompositorChain_CCompositorChain_callback");
						__env->CallVoidMethod(__obj, __method , chain_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_setActiveCompositorChain(chain);
					}
				}
				virtual void setLateMaterialResolving(ev_bool isLate)
				{
					if (this->_gRef != NULL && this->m_setLateMaterialResolving_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean isLate_j = (jboolean) isLate;
						jmethodID __method = __gr->getMethod("setLateMaterialResolving_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , isLate_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setLateMaterialResolving(isLate);
					}
				}
				virtual ev_bool isLateMaterialResolving() const
				{
					if (this->_gRef != NULL && this->m_isLateMaterialResolving_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("isLateMaterialResolving_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::isLateMaterialResolving();
					}
				}
				virtual EarthView::World::Graphic::CCompositorChain* _getActiveCompositorChain() const
				{
					if (this->_gRef != NULL && this->m__getActiveCompositorChain_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("_getActiveCompositorChain_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CCompositorChain *__values1 = (EarthView::World::Graphic::CCompositorChain*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::_getActiveCompositorChain();
					}
				}
				virtual void addListener(EarthView::World::Graphic::CSceneManager::CSceneManagerListener* ref_s)
				{
					if (this->_gRef != NULL && this->m_addListener_CSceneManagerListener_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong ref_s_j = (jlong) ref_s;
						jmethodID __method = __gr->getMethod("addListener_CSceneManagerListener_callback");
						__env->CallVoidMethod(__obj, __method , ref_s_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::addListener(ref_s);
					}
				}
				virtual void removeListener(EarthView::World::Graphic::CSceneManager::CSceneManagerListener* s)
				{
					if (this->_gRef != NULL && this->m_removeListener_CSceneManagerListener_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong s_j = (jlong) s;
						jmethodID __method = __gr->getMethod("removeListener_CSceneManagerListener_callback");
						__env->CallVoidMethod(__obj, __method , s_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::removeListener(s);
					}
				}
				virtual ev_bool existListener(EarthView::World::Graphic::CSceneManager::CSceneManagerListener* s)
				{
					if (this->_gRef != NULL && this->m_existListener_CSceneManagerListener_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong s_j = (jlong) s;
						jmethodID __method = __gr->getMethod("existListener_CSceneManagerListener_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , s_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::existListener(s);
					}
				}
				virtual EarthView::World::Graphic::CStaticGeometry* createStaticGeometry(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createStaticGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createStaticGeometry_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CStaticGeometry *__values1 = (EarthView::World::Graphic::CStaticGeometry*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createStaticGeometry(name);
					}
				}
				virtual EarthView::World::Graphic::CStaticGeometry* getStaticGeometry(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getStaticGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getStaticGeometry_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CStaticGeometry *__values1 = (EarthView::World::Graphic::CStaticGeometry*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getStaticGeometry(name);
					}
				}
				virtual ev_bool hasStaticGeometry(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_hasStaticGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("hasStaticGeometry_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::hasStaticGeometry(name);
					}
				}
				virtual void destroyStaticGeometry(EarthView::World::Graphic::CStaticGeometry* geom)
				{
					if (this->_gRef != NULL && this->m_destroyStaticGeometry_CStaticGeometry_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong geom_j = (jlong) geom;
						jmethodID __method = __gr->getMethod("destroyStaticGeometry_CStaticGeometry_callback");
						__env->CallVoidMethod(__obj, __method , geom_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyStaticGeometry(geom);
					}
				}
				virtual void destroyStaticGeometry(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyStaticGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyStaticGeometry_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyStaticGeometry(name);
					}
				}
				virtual void destroyAllStaticGeometry()
				{
					if (this->_gRef != NULL && this->m_destroyAllStaticGeometry_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllStaticGeometry_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyAllStaticGeometry();
					}
				}
				virtual EarthView::World::Graphic::CInstancedGeometry* createInstancedGeometry(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_createInstancedGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("createInstancedGeometry_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CInstancedGeometry *__values1 = (EarthView::World::Graphic::CInstancedGeometry*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createInstancedGeometry(name);
					}
				}
				virtual EarthView::World::Graphic::CInstancedGeometry* getInstancedGeometry(const EVString& name) const
				{
					if (this->_gRef != NULL && this->m_getInstancedGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("getInstancedGeometry_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CInstancedGeometry *__values1 = (EarthView::World::Graphic::CInstancedGeometry*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getInstancedGeometry(name);
					}
				}
				virtual void destroyInstancedGeometry(EarthView::World::Graphic::CInstancedGeometry* geom)
				{
					if (this->_gRef != NULL && this->m_destroyInstancedGeometry_CInstancedGeometry_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong geom_j = (jlong) geom;
						jmethodID __method = __gr->getMethod("destroyInstancedGeometry_CInstancedGeometry_callback");
						__env->CallVoidMethod(__obj, __method , geom_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyInstancedGeometry(geom);
					}
				}
				virtual void destroyInstancedGeometry(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyInstancedGeometry_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyInstancedGeometry_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyInstancedGeometry(name);
					}
				}
				virtual void destroyAllInstancedGeometry()
				{
					if (this->_gRef != NULL && this->m_destroyAllInstancedGeometry_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllInstancedGeometry_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyAllInstancedGeometry();
					}
				}
				virtual EarthView::World::Graphic::CInstanceManager* createInstanceManager(const EVString& customName, const EVString& meshName, const EVString& groupName, EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique, ev_size_t numInstancesPerBatch, ev_uint16 flags, ev_uint16 subMeshIdx)
				{
					if (this->_gRef != NULL && this->m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring customName_wch = customName;
						jstring customName_j = __env->NewString((const jchar*)customName_wch.getString(), customName_wch.size());
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jint technique_j = (jint) technique;
						jlong numInstancesPerBatch_j = (jlong) numInstancesPerBatch;
						jint flags_j = (jint) flags;
						jint subMeshIdx_j = (jint) subMeshIdx;
						jmethodID __method = __gr->getMethod("createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , customName_j, meshName_j, groupName_j, technique_j, numInstancesPerBatch_j, flags_j, subMeshIdx_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CInstanceManager *__values1 = (EarthView::World::Graphic::CInstanceManager*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createInstanceManager(customName, meshName, groupName, technique, numInstancesPerBatch, flags, subMeshIdx);
					}
				}
				virtual EarthView::World::Graphic::CInstanceManager* createInstanceManager(const EVString& customName, const EVString& meshName, const EVString& groupName, EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique, ev_size_t numInstancesPerBatch, ev_uint16 flags)
				{
					if (this->_gRef != NULL && this->m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring customName_wch = customName;
						jstring customName_j = __env->NewString((const jchar*)customName_wch.getString(), customName_wch.size());
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jint technique_j = (jint) technique;
						jlong numInstancesPerBatch_j = (jlong) numInstancesPerBatch;
						jint flags_j = (jint) flags;
						jmethodID __method = __gr->getMethod("createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , customName_j, meshName_j, groupName_j, technique_j, numInstancesPerBatch_j, flags_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CInstanceManager *__values1 = (EarthView::World::Graphic::CInstanceManager*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createInstanceManager(customName, meshName, groupName, technique, numInstancesPerBatch, flags);
					}
				}
				virtual EarthView::World::Graphic::CInstanceManager* createInstanceManager(const EVString& customName, const EVString& meshName, const EVString& groupName, EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique, ev_size_t numInstancesPerBatch)
				{
					if (this->_gRef != NULL && this->m_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring customName_wch = customName;
						jstring customName_j = __env->NewString((const jchar*)customName_wch.getString(), customName_wch.size());
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						jint technique_j = (jint) technique;
						jlong numInstancesPerBatch_j = (jlong) numInstancesPerBatch;
						jmethodID __method = __gr->getMethod("createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , customName_j, meshName_j, groupName_j, technique_j, numInstancesPerBatch_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CInstanceManager *__values1 = (EarthView::World::Graphic::CInstanceManager*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createInstanceManager(customName, meshName, groupName, technique, numInstancesPerBatch);
					}
				}
				virtual EarthView::World::Graphic::CInstanceManager* getInstanceManager(const EVString& managerName) const
				{
					if (this->_gRef != NULL && this->m_getInstanceManager_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring managerName_wch = managerName;
						jstring managerName_j = __env->NewString((const jchar*)managerName_wch.getString(), managerName_wch.size());
						jmethodID __method = __gr->getMethod("getInstanceManager_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , managerName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CInstanceManager *__values1 = (EarthView::World::Graphic::CInstanceManager*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getInstanceManager(managerName);
					}
				}
				virtual ev_bool hasInstanceManager(const EVString& managerName) const
				{
					if (this->_gRef != NULL && this->m_hasInstanceManager_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring managerName_wch = managerName;
						jstring managerName_j = __env->NewString((const jchar*)managerName_wch.getString(), managerName_wch.size());
						jmethodID __method = __gr->getMethod("hasInstanceManager_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , managerName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::hasInstanceManager(managerName);
					}
				}
				virtual void destroyInstanceManager(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyInstanceManager_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyInstanceManager_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyInstanceManager(name);
					}
				}
				virtual void destroyInstanceManager(EarthView::World::Graphic::CInstanceManager* instanceManager)
				{
					if (this->_gRef != NULL && this->m_destroyInstanceManager_CInstanceManager_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong instanceManager_j = (jlong) instanceManager;
						jmethodID __method = __gr->getMethod("destroyInstanceManager_CInstanceManager_callback");
						__env->CallVoidMethod(__obj, __method , instanceManager_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyInstanceManager(instanceManager);
					}
				}
				virtual void destroyInstanceManagerWithThreadSafe(const EVString& name)
				{
					if (this->_gRef != NULL && this->m_destroyInstanceManagerWithThreadSafe_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						jmethodID __method = __gr->getMethod("destroyInstanceManagerWithThreadSafe_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyInstanceManagerWithThreadSafe(name);
					}
				}
				virtual void destroyInstanceManagerWithThreadSafe(EarthView::World::Graphic::CInstanceManager* instanceManager)
				{
					if (this->_gRef != NULL && this->m_destroyInstanceManagerWithThreadSafe_CInstanceManager_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong instanceManager_j = (jlong) instanceManager;
						jmethodID __method = __gr->getMethod("destroyInstanceManagerWithThreadSafe_CInstanceManager_callback");
						__env->CallVoidMethod(__obj, __method , instanceManager_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyInstanceManagerWithThreadSafe(instanceManager);
					}
				}
				virtual void destroyAllInstanceManagers()
				{
					if (this->_gRef != NULL && this->m_destroyAllInstanceManagers_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllInstanceManagers_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyAllInstanceManagers();
					}
				}
				virtual ev_size_t getNumInstancesPerBatch(const EVString& meshName, const EVString& groupName, const EVString& materialName, EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique, ev_size_t numInstancesPerBatch)
				{
					if (this->_gRef != NULL && this->m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jint technique_j = (jint) technique;
						jlong numInstancesPerBatch_j = (jlong) numInstancesPerBatch;
						jmethodID __method = __gr->getMethod("getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , meshName_j, groupName_j, materialName_j, technique_j, numInstancesPerBatch_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_size_t __values1 = (ev_size_t) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getNumInstancesPerBatch(meshName, groupName, materialName, technique, numInstancesPerBatch);
					}
				}
				virtual ev_size_t getNumInstancesPerBatch(const EVString& meshName, const EVString& groupName, const EVString& materialName, EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique, ev_size_t numInstancesPerBatch, ev_uint16 flags)
				{
					if (this->_gRef != NULL && this->m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jint technique_j = (jint) technique;
						jlong numInstancesPerBatch_j = (jlong) numInstancesPerBatch;
						jint flags_j = (jint) flags;
						jmethodID __method = __gr->getMethod("getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , meshName_j, groupName_j, materialName_j, technique_j, numInstancesPerBatch_j, flags_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_size_t __values1 = (ev_size_t) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getNumInstancesPerBatch(meshName, groupName, materialName, technique, numInstancesPerBatch, flags);
					}
				}
				virtual ev_size_t getNumInstancesPerBatch(const EVString& meshName, const EVString& groupName, const EVString& materialName, EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique, ev_size_t numInstancesPerBatch, ev_uint16 flags, ev_uint16 subMeshIdx)
				{
					if (this->_gRef != NULL && this->m_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring meshName_wch = meshName;
						jstring meshName_j = __env->NewString((const jchar*)meshName_wch.getString(), meshName_wch.size());
						EarthView::World::Core::ev_wstring groupName_wch = groupName;
						jstring groupName_j = __env->NewString((const jchar*)groupName_wch.getString(), groupName_wch.size());
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						jint technique_j = (jint) technique;
						jlong numInstancesPerBatch_j = (jlong) numInstancesPerBatch;
						jint flags_j = (jint) flags;
						jint subMeshIdx_j = (jint) subMeshIdx;
						jmethodID __method = __gr->getMethod("getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , meshName_j, groupName_j, materialName_j, technique_j, numInstancesPerBatch_j, flags_j, subMeshIdx_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_size_t __values1 = (ev_size_t) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getNumInstancesPerBatch(meshName, groupName, materialName, technique, numInstancesPerBatch, flags, subMeshIdx);
					}
				}
				virtual EarthView::World::Graphic::CInstancedEntity* createInstancedEntity(const EVString& materialName, const EVString& managerName)
				{
					if (this->_gRef != NULL && this->m_createInstancedEntity_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring materialName_wch = materialName;
						jstring materialName_j = __env->NewString((const jchar*)materialName_wch.getString(), materialName_wch.size());
						EarthView::World::Core::ev_wstring managerName_wch = managerName;
						jstring managerName_j = __env->NewString((const jchar*)managerName_wch.getString(), managerName_wch.size());
						jmethodID __method = __gr->getMethod("createInstancedEntity_EVString_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , materialName_j, managerName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CInstancedEntity *__values1 = (EarthView::World::Graphic::CInstancedEntity*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createInstancedEntity(materialName, managerName);
					}
				}
				virtual void destroyInstancedEntity(EarthView::World::Graphic::CInstancedEntity* instancedEntity)
				{
					if (this->_gRef != NULL && this->m_destroyInstancedEntity_CInstancedEntity_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong instancedEntity_j = (jlong) instancedEntity;
						jmethodID __method = __gr->getMethod("destroyInstancedEntity_CInstancedEntity_callback");
						__env->CallVoidMethod(__obj, __method , instancedEntity_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyInstancedEntity(instancedEntity);
					}
				}
				virtual EarthView::World::Graphic::CMovableObject* createMovableObject(const EVString& name, const EVString& typeName, const EarthView::World::Core::CommonStringPairList* params)
				{
					if (this->_gRef != NULL && this->m_createMovableObject_EVString_EVString_CommonStringPairList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jlong params_j = (jlong) params;
						jmethodID __method = __gr->getMethod("createMovableObject_EVString_EVString_CommonStringPairList_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j, typeName_j, params_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CMovableObject *__values1 = (EarthView::World::Graphic::CMovableObject*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createMovableObject(name, typeName, params);
					}
				}
				virtual EarthView::World::Graphic::CMovableObject* createMovableObject(const EVString& name, const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_createMovableObject_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("createMovableObject_EVString_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j, typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CMovableObject *__values1 = (EarthView::World::Graphic::CMovableObject*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createMovableObject(name, typeName);
					}
				}
				virtual EarthView::World::Graphic::CMovableObject* createMovableObject(const EVString& typeName, const EarthView::World::Core::CommonStringPairList* params)
				{
					if (this->_gRef != NULL && this->m_createMovableObject_EVString_CommonStringPairList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jlong params_j = (jlong) params;
						jmethodID __method = __gr->getMethod("createMovableObject_EVString_CommonStringPairList_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , typeName_j, params_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CMovableObject *__values1 = (EarthView::World::Graphic::CMovableObject*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createMovableObject(typeName, params);
					}
				}
				virtual EarthView::World::Graphic::CMovableObject* createMovableObject(const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_createMovableObject_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("createMovableObject_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CMovableObject *__values1 = (EarthView::World::Graphic::CMovableObject*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::createMovableObject(typeName);
					}
				}
				virtual void destroyMovableObject(const EVString& name, const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_destroyMovableObject_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("destroyMovableObject_EVString_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j, typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyMovableObject(name, typeName);
					}
				}
				virtual void destroyMovableObject(EarthView::World::Graphic::CMovableObject* m)
				{
					if (this->_gRef != NULL && this->m_destroyMovableObject_CMovableObject_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong m_j = (jlong) m;
						jmethodID __method = __gr->getMethod("destroyMovableObject_CMovableObject_callback");
						__env->CallVoidMethod(__obj, __method , m_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyMovableObject(m);
					}
				}
				virtual void destroyAllMovableObjectsByType(const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_destroyAllMovableObjectsByType_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("destroyAllMovableObjectsByType_EVString_callback");
						__env->CallVoidMethod(__obj, __method , typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyAllMovableObjectsByType(typeName);
					}
				}
				virtual void destroyAllMovableObjects()
				{
					if (this->_gRef != NULL && this->m_destroyAllMovableObjects_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("destroyAllMovableObjects_void_callback");
						__env->CallVoidMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::destroyAllMovableObjects();
					}
				}
				virtual EarthView::World::Graphic::CMovableObject* getMovableObject(const EVString& name, const EVString& typeName) const
				{
					if (this->_gRef != NULL && this->m_getMovableObject_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("getMovableObject_EVString_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , name_j, typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CMovableObject *__values1 = (EarthView::World::Graphic::CMovableObject*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getMovableObject(name, typeName);
					}
				}
				virtual ev_bool hasMovableObject(const EVString& name, const EVString& typeName) const
				{
					if (this->_gRef != NULL && this->m_hasMovableObject_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("hasMovableObject_EVString_EVString_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , name_j, typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::hasMovableObject(name, typeName);
					}
				}
				virtual EarthView::World::Graphic::CSceneManager::MovableObjectIterator getMovableObjectIterator(const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_getMovableObjectIterator_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("getMovableObjectIterator_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneManager::MovableObjectIterator __values1 = *(EarthView::World::Graphic::CSceneManager::MovableObjectIterator*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getMovableObjectIterator(typeName);
					}
				}
				virtual void injectMovableObject(EarthView::World::Graphic::CMovableObject* m)
				{
					if (this->_gRef != NULL && this->m_injectMovableObject_CMovableObject_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong m_j = (jlong) m;
						jmethodID __method = __gr->getMethod("injectMovableObject_CMovableObject_callback");
						__env->CallVoidMethod(__obj, __method , m_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::injectMovableObject(m);
					}
				}
				virtual void extractMovableObject(const EVString& name, const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_extractMovableObject_EVString_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring name_wch = name;
						jstring name_j = __env->NewString((const jchar*)name_wch.getString(), name_wch.size());
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("extractMovableObject_EVString_EVString_callback");
						__env->CallVoidMethod(__obj, __method , name_j, typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::extractMovableObject(name, typeName);
					}
				}
				virtual void extractMovableObject(EarthView::World::Graphic::CMovableObject* m)
				{
					if (this->_gRef != NULL && this->m_extractMovableObject_CMovableObject_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong m_j = (jlong) m;
						jmethodID __method = __gr->getMethod("extractMovableObject_CMovableObject_callback");
						__env->CallVoidMethod(__obj, __method , m_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::extractMovableObject(m);
					}
				}
				virtual void extractAllMovableObjectsByType(const EVString& typeName)
				{
					if (this->_gRef != NULL && this->m_extractAllMovableObjectsByType_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring typeName_wch = typeName;
						jstring typeName_j = __env->NewString((const jchar*)typeName_wch.getString(), typeName_wch.size());
						jmethodID __method = __gr->getMethod("extractAllMovableObjectsByType_EVString_callback");
						__env->CallVoidMethod(__obj, __method , typeName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::extractAllMovableObjectsByType(typeName);
					}
				}
				virtual void setVisibilityMask(ev_uint32 vmask)
				{
					if (this->_gRef != NULL && this->m_setVisibilityMask_ev_uint32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong vmask_j = (jlong) vmask;
						jmethodID __method = __gr->getMethod("setVisibilityMask_ev_uint32_callback");
						__env->CallVoidMethod(__obj, __method , vmask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setVisibilityMask(vmask);
					}
				}
				virtual ev_uint32 getVisibilityMask()
				{
					if (this->_gRef != NULL && this->m_getVisibilityMask_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getVisibilityMask_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_uint32 __values1 = (ev_uint32) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getVisibilityMask();
					}
				}
				virtual void setFindVisibleObjects(ev_bool find)
				{
					if (this->_gRef != NULL && this->m_setFindVisibleObjects_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean find_j = (jboolean) find;
						jmethodID __method = __gr->getMethod("setFindVisibleObjects_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , find_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setFindVisibleObjects(find);
					}
				}
				virtual ev_bool getFindVisibleObjects()
				{
					if (this->_gRef != NULL && this->m_getFindVisibleObjects_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getFindVisibleObjects_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getFindVisibleObjects();
					}
				}
				virtual void setNormaliseNormalsOnScale(ev_bool n)
				{
					if (this->_gRef != NULL && this->m_setNormaliseNormalsOnScale_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean n_j = (jboolean) n;
						jmethodID __method = __gr->getMethod("setNormaliseNormalsOnScale_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , n_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setNormaliseNormalsOnScale(n);
					}
				}
				virtual ev_bool getNormaliseNormalsOnScale() const
				{
					if (this->_gRef != NULL && this->m_getNormaliseNormalsOnScale_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getNormaliseNormalsOnScale_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getNormaliseNormalsOnScale();
					}
				}
				virtual void setFlipCullingOnNegativeScale(ev_bool n)
				{
					if (this->_gRef != NULL && this->m_setFlipCullingOnNegativeScale_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean n_j = (jboolean) n;
						jmethodID __method = __gr->getMethod("setFlipCullingOnNegativeScale_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , n_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setFlipCullingOnNegativeScale(n);
					}
				}
				virtual ev_bool getFlipCullingOnNegativeScale() const
				{
					if (this->_gRef != NULL && this->m_getFlipCullingOnNegativeScale_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getFlipCullingOnNegativeScale_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getFlipCullingOnNegativeScale();
					}
				}
				virtual void _injectRenderWithPass(EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CRenderable* rend, ev_bool shadowDerivation, ev_bool doLightIteration, const EarthView::World::Graphic::LightList* manualLightList)
				{
					if (this->_gRef != NULL && this->m__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jlong rend_j = (jlong) rend;
						jboolean shadowDerivation_j = (jboolean) shadowDerivation;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jlong manualLightList_j = (jlong) manualLightList;
						jmethodID __method = __gr->getMethod("_injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_callback");
						__env->CallVoidMethod(__obj, __method , pass_j, rend_j, shadowDerivation_j, doLightIteration_j, manualLightList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_injectRenderWithPass(pass, rend, shadowDerivation, doLightIteration, manualLightList);
					}
				}
				virtual void _injectRenderWithPass(EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CRenderable* rend, ev_bool shadowDerivation, ev_bool doLightIteration)
				{
					if (this->_gRef != NULL && this->m__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jlong rend_j = (jlong) rend;
						jboolean shadowDerivation_j = (jboolean) shadowDerivation;
						jboolean doLightIteration_j = (jboolean) doLightIteration;
						jmethodID __method = __gr->getMethod("_injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , pass_j, rend_j, shadowDerivation_j, doLightIteration_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_injectRenderWithPass(pass, rend, shadowDerivation, doLightIteration);
					}
				}
				virtual void _injectRenderWithPass(EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CRenderable* rend, ev_bool shadowDerivation)
				{
					if (this->_gRef != NULL && this->m__injectRenderWithPass_CPass_CRenderable_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jlong rend_j = (jlong) rend;
						jboolean shadowDerivation_j = (jboolean) shadowDerivation;
						jmethodID __method = __gr->getMethod("_injectRenderWithPass_CPass_CRenderable_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , pass_j, rend_j, shadowDerivation_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_injectRenderWithPass(pass, rend, shadowDerivation);
					}
				}
				virtual void _injectRenderWithPass(EarthView::World::Graphic::CPass* pass, EarthView::World::Graphic::CRenderable* rend)
				{
					if (this->_gRef != NULL && this->m__injectRenderWithPass_CPass_CRenderable_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jlong rend_j = (jlong) rend;
						jmethodID __method = __gr->getMethod("_injectRenderWithPass_CPass_CRenderable_callback");
						__env->CallVoidMethod(__obj, __method , pass_j, rend_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_injectRenderWithPass(pass, rend);
					}
				}
				virtual void _suppressRenderStateChanges(ev_bool suppress)
				{
					if (this->_gRef != NULL && this->m__suppressRenderStateChanges_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean suppress_j = (jboolean) suppress;
						jmethodID __method = __gr->getMethod("_suppressRenderStateChanges_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , suppress_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_suppressRenderStateChanges(suppress);
					}
				}
				virtual ev_bool _areRenderStateChangesSuppressed() const
				{
					if (this->_gRef != NULL && this->m__areRenderStateChangesSuppressed_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("_areRenderStateChangesSuppressed_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::_areRenderStateChangesSuppressed();
					}
				}
				virtual const EarthView::World::Graphic::CPass* _setPass(const EarthView::World::Graphic::CPass* pass, ev_bool evenIfSuppressed, ev_bool shadowDerivation)
				{
					if (this->_gRef != NULL && this->m__setPass_CPass_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jboolean evenIfSuppressed_j = (jboolean) evenIfSuppressed;
						jboolean shadowDerivation_j = (jboolean) shadowDerivation;
						jmethodID __method = __gr->getMethod("_setPass_CPass_ev_bool_ev_bool_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , pass_j, evenIfSuppressed_j, shadowDerivation_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CPass *__values1 = (const EarthView::World::Graphic::CPass*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::_setPass(pass, evenIfSuppressed, shadowDerivation);
					}
				}
				virtual const EarthView::World::Graphic::CPass* _setPass(const EarthView::World::Graphic::CPass* pass, ev_bool evenIfSuppressed)
				{
					if (this->_gRef != NULL && this->m__setPass_CPass_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jboolean evenIfSuppressed_j = (jboolean) evenIfSuppressed;
						jmethodID __method = __gr->getMethod("_setPass_CPass_ev_bool_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , pass_j, evenIfSuppressed_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CPass *__values1 = (const EarthView::World::Graphic::CPass*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::_setPass(pass, evenIfSuppressed);
					}
				}
				virtual const EarthView::World::Graphic::CPass* _setPass(const EarthView::World::Graphic::CPass* pass)
				{
					if (this->_gRef != NULL && this->m__setPass_CPass_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong pass_j = (jlong) pass;
						jmethodID __method = __gr->getMethod("_setPass_CPass_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , pass_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::CPass *__values1 = (const EarthView::World::Graphic::CPass*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::_setPass(pass);
					}
				}
				virtual void _markGpuParamsDirty(ev_uint16 mask)
				{
					if (this->_gRef != NULL && this->m__markGpuParamsDirty_ev_uint16_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint mask_j = (jint) mask;
						jmethodID __method = __gr->getMethod("_markGpuParamsDirty_ev_uint16_callback");
						__env->CallVoidMethod(__obj, __method , mask_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_markGpuParamsDirty(mask);
					}
				}
				virtual void _suppressShadows(ev_bool suppress)
				{
					if (this->_gRef != NULL && this->m__suppressShadows_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean suppress_j = (jboolean) suppress;
						jmethodID __method = __gr->getMethod("_suppressShadows_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , suppress_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_suppressShadows(suppress);
					}
				}
				virtual ev_bool _areShadowsSuppressed() const
				{
					if (this->_gRef != NULL && this->m__areShadowsSuppressed_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("_areShadowsSuppressed_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::_areShadowsSuppressed();
					}
				}
				virtual void _renderQueueGroupObjects(EarthView::World::Graphic::CRenderQueueGroup* group, EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om)
				{
					if (this->_gRef != NULL && this->m__renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong group_j = (jlong) group;
						jint om_j = (jint) om;
						jmethodID __method = __gr->getMethod("_renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback");
						__env->CallVoidMethod(__obj, __method , group_j, om_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::_renderQueueGroupObjects(group, om);
					}
				}
				virtual void setCameraRelativeRendering(ev_bool rel)
				{
					if (this->_gRef != NULL && this->m_setCameraRelativeRendering_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean rel_j = (jboolean) rel;
						jmethodID __method = __gr->getMethod("setCameraRelativeRendering_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , rel_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setCameraRelativeRendering(rel);
					}
				}
				virtual ev_bool getCameraRelativeRendering() const
				{
					if (this->_gRef != NULL && this->m_getCameraRelativeRendering_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getCameraRelativeRendering_void_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getCameraRelativeRendering();
					}
				}
				virtual Real getHeightAt(Real latitude, Real lontitude, ev_real32 targetSamplesPerDegrees)
				{
					if (this->_gRef != NULL && this->m_getHeightAt_Real_Real_ev_real32_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble latitude_j = (jdouble) latitude;
						jdouble lontitude_j = (jdouble) lontitude;
						jfloat targetSamplesPerDegrees_j = (jfloat) targetSamplesPerDegrees;
						jmethodID __method = __gr->getMethod("getHeightAt_Real_Real_ev_real32_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method , latitude_j, lontitude_j, targetSamplesPerDegrees_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getHeightAt(latitude, lontitude, targetSamplesPerDegrees);
					}
				}
				virtual Real getBestHeightAt(Real latitude, Real lontitude)
				{
					if (this->_gRef != NULL && this->m_getBestHeightAt_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble latitude_j = (jdouble) latitude;
						jdouble lontitude_j = (jdouble) lontitude;
						jmethodID __method = __gr->getMethod("getBestHeightAt_Real_Real_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method , latitude_j, lontitude_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getBestHeightAt(latitude, lontitude);
					}
				}
				virtual Real getHeightAtTile(Real latitude, Real lontitude)
				{
					if (this->_gRef != NULL && this->m_getHeightAtTile_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jdouble latitude_j = (jdouble) latitude;
						jdouble lontitude_j = (jdouble) lontitude;
						jmethodID __method = __gr->getMethod("getHeightAtTile_Real_Real_callback");
						jdouble __values1_j = (jdouble)__env->CallDoubleMethod(__obj, __method , latitude_j, lontitude_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						Real __values1 = (Real) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getHeightAtTile(latitude, lontitude);
					}
				}
				virtual ev_bool getTileEnvelope(ev_int32 level, ev_uint32 row, ev_uint32 col, Real& minX, Real& maxX, Real& minY, Real& maxY)
				{
					if (this->_gRef != NULL && this->m_getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jint level_j = (jint) level;
						jlong row_j = (jlong) row;
						jlong col_j = (jlong) col;
						jlong minX_j = (jlong) &minX;
						jlong maxX_j = (jlong) &maxX;
						jlong minY_j = (jlong) &minY;
						jlong maxY_j = (jlong) &maxY;
						jmethodID __method = __gr->getMethod("getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , level_j, row_j, col_j, minX_j, maxX_j, minY_j, maxY_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::getTileEnvelope(level, row, col, minX, maxX, minY, maxY);
					}
				}
				virtual ev_bool addTempLayer(EarthView::World::Spatial::Atlas::ILayer* layer)
				{
					if (this->_gRef != NULL && this->m_addTempLayer_ILayer_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong layer_j = (jlong) layer;
						jmethodID __method = __gr->getMethod("addTempLayer_ILayer_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , layer_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::addTempLayer(layer);
					}
				}
				virtual ev_bool removeTempLayer(EarthView::World::Spatial::Atlas::ILayer* layer)
				{
					if (this->_gRef != NULL && this->m_removeTempLayer_ILayer_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong layer_j = (jlong) layer;
						jmethodID __method = __gr->getMethod("removeTempLayer_ILayer_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , layer_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManager::removeTempLayer(layer);
					}
				}
				virtual void updateQuadImage(bool updateImageGroup, bool updateFeatureGroup, bool updateKmlGroup)
				{
					if (this->_gRef != NULL && this->m_updateQuadImage_bool_bool_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean updateImageGroup_j = (jboolean) updateImageGroup;
						jboolean updateFeatureGroup_j = (jboolean) updateFeatureGroup;
						jboolean updateKmlGroup_j = (jboolean) updateKmlGroup;
						jmethodID __method = __gr->getMethod("updateQuadImage_bool_bool_bool_callback");
						__env->CallVoidMethod(__obj, __method , updateImageGroup_j, updateFeatureGroup_j, updateKmlGroup_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::updateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup);
					}
				}
				virtual void updateQuadImage(bool updateImageGroup, bool updateFeatureGroup, bool updateKmlGroup, Real minX, Real maxX, Real minY, Real maxY)
				{
					if (this->_gRef != NULL && this->m_updateQuadImage_bool_bool_bool_Real_Real_Real_Real_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean updateImageGroup_j = (jboolean) updateImageGroup;
						jboolean updateFeatureGroup_j = (jboolean) updateFeatureGroup;
						jboolean updateKmlGroup_j = (jboolean) updateKmlGroup;
						jdouble minX_j = (jdouble) minX;
						jdouble maxX_j = (jdouble) maxX;
						jdouble minY_j = (jdouble) minY;
						jdouble maxY_j = (jdouble) maxY;
						jmethodID __method = __gr->getMethod("updateQuadImage_bool_bool_bool_Real_Real_Real_Real_callback");
						__env->CallVoidMethod(__obj, __method , updateImageGroup_j, updateFeatureGroup_j, updateKmlGroup_j, minX_j, maxX_j, minY_j, maxY_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::updateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup, minX, maxX, minY, maxY);
					}
				}
				virtual void updateOBQ(ev_bool bUpdateVectorTexture, ev_bool bUpdateKmlTexture, ev_bool bUpdateTemporaryTexture, ev_bool bUpdateTerrain)
				{
					if (this->_gRef != NULL && this->m_updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean bUpdateVectorTexture_j = (jboolean) bUpdateVectorTexture;
						jboolean bUpdateKmlTexture_j = (jboolean) bUpdateKmlTexture;
						jboolean bUpdateTemporaryTexture_j = (jboolean) bUpdateTemporaryTexture;
						jboolean bUpdateTerrain_j = (jboolean) bUpdateTerrain;
						jmethodID __method = __gr->getMethod("updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , bUpdateVectorTexture_j, bUpdateKmlTexture_j, bUpdateTemporaryTexture_j, bUpdateTerrain_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::updateOBQ(bUpdateVectorTexture, bUpdateKmlTexture, bUpdateTemporaryTexture, bUpdateTerrain);
					}
				}
				virtual void setCollisionDetectionEnable(ev_bool enable)
				{
					if (this->_gRef != NULL && this->m_setCollisionDetectionEnable_ev_bool_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jboolean enable_j = (jboolean) enable;
						jmethodID __method = __gr->getMethod("setCollisionDetectionEnable_ev_bool_callback");
						__env->CallVoidMethod(__obj, __method , enable_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManager::setCollisionDetectionEnable(enable);
					}
				}
			};
			REGISTER_FACTORY_CLASS(JCSceneManagerProxy);
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_get_1WORLD_1GEOMETRY_1TYPE_1MASK_1void(JNIEnv *__env, jclass __clazz)
			{
				jlong __values1_j = (jlong) (EarthView::World::Graphic::CSceneManager::WORLD_GEOMETRY_TYPE_MASK);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_set_1WORLD_1GEOMETRY_1TYPE_1MASK_1ev_1uint32(JNIEnv *__env, jclass __clazz, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::WORLD_GEOMETRY_TYPE_MASK = (ev_uint32)__values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_get_1ENTITY_1TYPE_1MASK_1void(JNIEnv *__env, jclass __clazz)
			{
				jlong __values1_j = (jlong) (EarthView::World::Graphic::CSceneManager::ENTITY_TYPE_MASK);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_set_1ENTITY_1TYPE_1MASK_1ev_1uint32(JNIEnv *__env, jclass __clazz, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::ENTITY_TYPE_MASK = (ev_uint32)__values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_get_1FX_1TYPE_1MASK_1void(JNIEnv *__env, jclass __clazz)
			{
				jlong __values1_j = (jlong) (EarthView::World::Graphic::CSceneManager::FX_TYPE_MASK);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_set_1FX_1TYPE_1MASK_1ev_1uint32(JNIEnv *__env, jclass __clazz, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::FX_TYPE_MASK = (ev_uint32)__values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_get_1STATICGEOMETRY_1TYPE_1MASK_1void(JNIEnv *__env, jclass __clazz)
			{
				jlong __values1_j = (jlong) (EarthView::World::Graphic::CSceneManager::STATICGEOMETRY_TYPE_MASK);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_set_1STATICGEOMETRY_1TYPE_1MASK_1ev_1uint32(JNIEnv *__env, jclass __clazz, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::STATICGEOMETRY_TYPE_MASK = (ev_uint32)__values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_get_1LIGHT_1TYPE_1MASK_1void(JNIEnv *__env, jclass __clazz)
			{
				jlong __values1_j = (jlong) (EarthView::World::Graphic::CSceneManager::LIGHT_TYPE_MASK);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_set_1LIGHT_1TYPE_1MASK_1ev_1uint32(JNIEnv *__env, jclass __clazz, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::LIGHT_TYPE_MASK = (ev_uint32)__values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_get_1FRUSTUM_1TYPE_1MASK_1void(JNIEnv *__env, jclass __clazz)
			{
				jlong __values1_j = (jlong) (EarthView::World::Graphic::CSceneManager::FRUSTUM_TYPE_MASK);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_set_1FRUSTUM_1TYPE_1MASK_1ev_1uint32(JNIEnv *__env, jclass __clazz, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::FRUSTUM_TYPE_MASK = (ev_uint32)__values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_get_1USER_1TYPE_1MASK_1LIMIT_1void(JNIEnv *__env, jclass __clazz)
			{
				jlong __values1_j = (jlong) (EarthView::World::Graphic::CSceneManager::USER_TYPE_MASK_LIMIT);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_set_1USER_1TYPE_1MASK_1LIMIT_1ev_1uint32(JNIEnv *__env, jclass __clazz, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::USER_TYPE_MASK_LIMIT = (ev_uint32)__values1_j;
			}
			extern "C" JNIEXPORT jstring JNICALL Java_com_earthview_world_graphic_SceneManager_get_1GlobeCameraName_1void(JNIEnv *__env, jclass __clazz)
			{
				EarthView::World::Core::ev_wstring __values1_ch = EarthView::World::Graphic::CSceneManager::GlobeCameraName;
				jstring __values1_j = __env->NewString((const jchar*)__values1_ch.getString(), __values1_ch.size());
				return __values1_j;
			}
			extern "C" JNIEXPORT jintArray JNICALL Java_com_earthview_world_graphic_SceneManager_00024IlluminationRenderStageHelper_getEnumValues (JNIEnv *__env, jclass __clazz)
			{
				jint enum_values[] = {
					CSceneManager::IRS_NONE,
					CSceneManager::IRS_RENDER_TO_TEXTURE,
					CSceneManager::IRS_RENDER_RECEIVER_PASS
				};
				jintArray array = __env->NewIntArray(3);
				__env->SetIntArrayRegion(array, 0, 3, enum_values);
				return array;
			}
			extern "C" JNIEXPORT jintArray JNICALL Java_com_earthview_world_graphic_SceneManager_00024SpecialCaseRenderQueueModeHelper_getEnumValues (JNIEnv *__env, jclass __clazz)
			{
				jint enum_values[] = {
					CSceneManager::SCRQM_INCLUDE,
					CSceneManager::SCRQM_EXCLUDE
				};
				jintArray array = __env->NewIntArray(2);
				__env->SetIntArrayRegion(array, 0, 2, enum_values);
				return array;
			}
			extern "C" JNIEXPORT jintArray JNICALL Java_com_earthview_world_graphic_SceneManager_00024BoxPlaneHelper_getEnumValues (JNIEnv *__env, jclass __clazz)
			{
				jint enum_values[] = {
					CSceneManager::BP_FRONT,
					CSceneManager::BP_BACK,
					CSceneManager::BP_LEFT,
					CSceneManager::BP_RIGHT,
					CSceneManager::BP_UP,
					CSceneManager::BP_DOWN
				};
				jintArray array = __env->NewIntArray(6);
				__env->SetIntArrayRegion(array, 0, 6, enum_values);
				return array;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyDomeGenParameters_Create(JNIEnv *__env, jclass __clazz)
			{
				EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters *pObjectX = new EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters();
				return (jlong) pObjectX;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyDomeGenParameters_Destroy(JNIEnv *__env, jclass __clazz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters*)pObjXXXX;
				delete pObjectX;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyDomeGenParameters_get_1skyDomeCurvature_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters*)pObjXXXX;
				jdouble __values1_j = (jdouble)(pObjectX->skyDomeCurvature);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyDomeGenParameters_set_1skyDomeCurvature_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jdouble __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters*)pObjXXXX;
				pObjectX->skyDomeCurvature = (Real)__values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyDomeGenParameters_get_1skyDomeTiling_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters*)pObjXXXX;
				jdouble __values1_j = (jdouble)(pObjectX->skyDomeTiling);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyDomeGenParameters_set_1skyDomeTiling_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jdouble __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters*)pObjXXXX;
				pObjectX->skyDomeTiling = (Real)__values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyDomeGenParameters_get_1skyDomeDistance_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters*)pObjXXXX;
				jdouble __values1_j = (jdouble)(pObjectX->skyDomeDistance);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyDomeGenParameters_set_1skyDomeDistance_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jdouble __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters*)pObjXXXX;
				pObjectX->skyDomeDistance = (Real)__values1_j;
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyDomeGenParameters_get_1skyDomeXSegments_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters*)pObjXXXX;
				jint __values1_j = (jint)(pObjectX->skyDomeXSegments);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyDomeGenParameters_set_1skyDomeXSegments_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jint __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters*)pObjXXXX;
				pObjectX->skyDomeXSegments = (ev_int32)__values1_j;
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyDomeGenParameters_get_1skyDomeYSegments_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters*)pObjXXXX;
				jint __values1_j = (jint)(pObjectX->skyDomeYSegments);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyDomeGenParameters_set_1skyDomeYSegments_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jint __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters*)pObjXXXX;
				pObjectX->skyDomeYSegments = (ev_int32)__values1_j;
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyDomeGenParameters_get_1skyDomeYSegments_1keep_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters*)pObjXXXX;
				jint __values1_j = (jint)(pObjectX->skyDomeYSegments_keep);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyDomeGenParameters_set_1skyDomeYSegments_1keep_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jint __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters*)pObjXXXX;
				pObjectX->skyDomeYSegments_keep = (ev_int32)__values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyPlaneGenParameters_Create(JNIEnv *__env, jclass __clazz)
			{
				EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters *pObjectX = new EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters();
				return (jlong) pObjectX;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyPlaneGenParameters_Destroy(JNIEnv *__env, jclass __clazz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters*)pObjXXXX;
				delete pObjectX;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyPlaneGenParameters_get_1skyPlaneScale_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters*)pObjXXXX;
				jdouble __values1_j = (jdouble)(pObjectX->skyPlaneScale);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyPlaneGenParameters_set_1skyPlaneScale_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jdouble __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters*)pObjXXXX;
				pObjectX->skyPlaneScale = (Real)__values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyPlaneGenParameters_get_1skyPlaneTiling_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters*)pObjXXXX;
				jdouble __values1_j = (jdouble)(pObjectX->skyPlaneTiling);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyPlaneGenParameters_set_1skyPlaneTiling_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jdouble __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters*)pObjXXXX;
				pObjectX->skyPlaneTiling = (Real)__values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyPlaneGenParameters_get_1skyPlaneBow_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters*)pObjXXXX;
				jdouble __values1_j = (jdouble)(pObjectX->skyPlaneBow);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyPlaneGenParameters_set_1skyPlaneBow_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jdouble __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters*)pObjXXXX;
				pObjectX->skyPlaneBow = (Real)__values1_j;
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyPlaneGenParameters_get_1skyPlaneXSegments_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters*)pObjXXXX;
				jint __values1_j = (jint)(pObjectX->skyPlaneXSegments);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyPlaneGenParameters_set_1skyPlaneXSegments_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jint __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters*)pObjXXXX;
				pObjectX->skyPlaneXSegments = (ev_int32)__values1_j;
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyPlaneGenParameters_get_1skyPlaneYSegments_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters*)pObjXXXX;
				jint __values1_j = (jint)(pObjectX->skyPlaneYSegments);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyPlaneGenParameters_set_1skyPlaneYSegments_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jint __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters*)pObjXXXX;
				pObjectX->skyPlaneYSegments = (ev_int32)__values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyBoxGenParameters_Create(JNIEnv *__env, jclass __clazz)
			{
				EarthView::World::Graphic::CSceneManager::SkyBoxGenParameters *pObjectX = new EarthView::World::Graphic::CSceneManager::SkyBoxGenParameters();
				return (jlong) pObjectX;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyBoxGenParameters_Destroy(JNIEnv *__env, jclass __clazz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::SkyBoxGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyBoxGenParameters*)pObjXXXX;
				delete pObjectX;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyBoxGenParameters_get_1skyBoxDistance_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::SkyBoxGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyBoxGenParameters*)pObjXXXX;
				jdouble __values1_j = (jdouble)(pObjectX->skyBoxDistance);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SkyBoxGenParameters_set_1skyBoxDistance_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jdouble __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::SkyBoxGenParameters *pObjectX = (EarthView::World::Graphic::CSceneManager::SkyBoxGenParameters*)pObjXXXX;
				pObjectX->skyBoxDistance = (Real)__values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowMapGround_render_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j)
			{
				const EarthView::World::Graphic::CCamera *cam = (const EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CSceneManager::ShadowMapGround *pObjectX = (EarthView::World::Graphic::CSceneManager::ShadowMapGround*) pObjXXXX;
				pObjectX->render(cam);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowMapGround_disableRender_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::ShadowMapGround *pObjectX = (EarthView::World::Graphic::CSceneManager::ShadowMapGround*) pObjXXXX;
				pObjectX->disableRender();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowFullScreenQuad_render_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::ShadowFullScreenQuad *pObjectX = (EarthView::World::Graphic::CSceneManager::ShadowFullScreenQuad*) pObjXXXX;
				pObjectX->render();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowFullScreenQuad_disableRender_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::ShadowFullScreenQuad *pObjectX = (EarthView::World::Graphic::CSceneManager::ShadowFullScreenQuad*) pObjXXXX;
				pObjectX->disableRender();
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowFullScreenQuad_get_1mFullScreenQuadRenderable_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::ShadowFullScreenQuad *pObjectX = (EarthView::World::Graphic::CSceneManager::ShadowFullScreenQuad*)pObjXXXX;
				jlong __values1_j = (jlong)(pObjectX->mFullScreenQuadRenderable);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowFullScreenQuad_set_1mFullScreenQuadRenderable_1CSimpleRenderable(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::ShadowFullScreenQuad *pObjectX = (EarthView::World::Graphic::CSceneManager::ShadowFullScreenQuad*)pObjXXXX;
				pObjectX->mFullScreenQuadRenderable = (EarthView::World::Graphic::CSimpleRenderable*) __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowFullScreenQuad_GetMaterialVB_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::ShadowFullScreenQuad *pObjectX = (EarthView::World::Graphic::CSceneManager::ShadowFullScreenQuad*) pObjXXXX;
				EarthView::World::Graphic::CMaterialPtr __values1 = pObjectX->GetMaterialVB();
				EarthView::World::Graphic::CMaterialPtr *returnvalues = new EarthView::World::Graphic::CMaterialPtr(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowFullScreenQuad_GetMaterialHB_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::ShadowFullScreenQuad *pObjectX = (EarthView::World::Graphic::CSceneManager::ShadowFullScreenQuad*) pObjXXXX;
				EarthView::World::Graphic::CMaterialPtr __values1 = pObjectX->GetMaterialHB();
				EarthView::World::Graphic::CMaterialPtr *returnvalues = new EarthView::World::Graphic::CMaterialPtr(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			class JCSceneManagerListenerProxy : public EarthView::World::Graphic::CSceneManager::CSceneManagerListener
			{
			 private:
				EarthView::World::Core::ev_string m_preUpdateSceneGraph_CSceneManager_CCamera_callback;
				EarthView::World::Core::ev_string m_postUpdateSceneGraph_CSceneManager_CCamera_callback;
				EarthView::World::Core::ev_string m_preFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback;
				EarthView::World::Core::ev_string m_postFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback;
				EarthView::World::Core::ev_string m_shadowTexturesUpdated_ev_size_t_callback;
				EarthView::World::Core::ev_string m_shadowTextureCasterPreViewProj_CLight_CCamera_ev_size_t_callback;
				EarthView::World::Core::ev_string m_shadowTextureReceiverPreViewProj_CLight_CFrustum_callback;
				EarthView::World::Core::ev_string m_sortLightsAffectingFrustum_LightList_callback;
				EarthView::World::Core::ev_string m_sceneManagerDestroyed_CSceneManager_callback;
			public:
				JCSceneManagerListenerProxy(EarthView::World::Core::CNameValuePairList *pList) : CSceneManagerListener(pList)
				{
				}
				ev_void unRegisterJavaReference()
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
					if(__gr != NULL)
					{
						delete __gr;
						this->registerJavaReference(NULL);
					}
				}
			public:
				void register_preUpdateSceneGraph_CSceneManager_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_preUpdateSceneGraph_CSceneManager_CCamera_callback = __method;
				}
				void register_postUpdateSceneGraph_CSceneManager_CCamera_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_postUpdateSceneGraph_CSceneManager_CCamera_callback = __method;
				}
				void register_preFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_preFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback = __method;
				}
				void register_postFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_postFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback = __method;
				}
				void register_shadowTexturesUpdated_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_shadowTexturesUpdated_ev_size_t_callback = __method;
				}
				void register_shadowTextureCasterPreViewProj_CLight_CCamera_ev_size_t_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_shadowTextureCasterPreViewProj_CLight_CCamera_ev_size_t_callback = __method;
				}
				void register_shadowTextureReceiverPreViewProj_CLight_CFrustum_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_shadowTextureReceiverPreViewProj_CLight_CFrustum_callback = __method;
				}
				void register_sortLightsAffectingFrustum_LightList_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_sortLightsAffectingFrustum_LightList_callback = __method;
				}
				void register_sceneManagerDestroyed_CSceneManager_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_sceneManagerDestroyed_CSceneManager_callback = __method;
				}
				virtual void preUpdateSceneGraph(EarthView::World::Graphic::CSceneManager* source, EarthView::World::Graphic::CCamera* camera)
				{
					if (this->_gRef != NULL && this->m_preUpdateSceneGraph_CSceneManager_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong source_j = (jlong) source;
						jlong camera_j = (jlong) camera;
						jmethodID __method = __gr->getMethod("preUpdateSceneGraph_CSceneManager_CCamera_callback");
						__env->CallVoidMethod(__obj, __method , source_j, camera_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManagerListener::preUpdateSceneGraph(source, camera);
					}
				}
				virtual void postUpdateSceneGraph(EarthView::World::Graphic::CSceneManager* source, EarthView::World::Graphic::CCamera* camera)
				{
					if (this->_gRef != NULL && this->m_postUpdateSceneGraph_CSceneManager_CCamera_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong source_j = (jlong) source;
						jlong camera_j = (jlong) camera;
						jmethodID __method = __gr->getMethod("postUpdateSceneGraph_CSceneManager_CCamera_callback");
						__env->CallVoidMethod(__obj, __method , source_j, camera_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManagerListener::postUpdateSceneGraph(source, camera);
					}
				}
				virtual void preFindVisibleObjects(EarthView::World::Graphic::CSceneManager* source, EarthView::World::Graphic::CSceneManager::IlluminationRenderStage irs, EarthView::World::Graphic::CViewport* v)
				{
					if (this->_gRef != NULL && this->m_preFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong source_j = (jlong) source;
						jint irs_j = (jint) irs;
						jlong v_j = (jlong) v;
						jmethodID __method = __gr->getMethod("preFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback");
						__env->CallVoidMethod(__obj, __method , source_j, irs_j, v_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManagerListener::preFindVisibleObjects(source, irs, v);
					}
				}
				virtual void postFindVisibleObjects(EarthView::World::Graphic::CSceneManager* source, EarthView::World::Graphic::CSceneManager::IlluminationRenderStage irs, EarthView::World::Graphic::CViewport* v)
				{
					if (this->_gRef != NULL && this->m_postFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong source_j = (jlong) source;
						jint irs_j = (jint) irs;
						jlong v_j = (jlong) v;
						jmethodID __method = __gr->getMethod("postFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback");
						__env->CallVoidMethod(__obj, __method , source_j, irs_j, v_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManagerListener::postFindVisibleObjects(source, irs, v);
					}
				}
				virtual void shadowTexturesUpdated(ev_size_t numberOfShadowTextures)
				{
					if (this->_gRef != NULL && this->m_shadowTexturesUpdated_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong numberOfShadowTextures_j = (jlong) numberOfShadowTextures;
						jmethodID __method = __gr->getMethod("shadowTexturesUpdated_ev_size_t_callback");
						__env->CallVoidMethod(__obj, __method , numberOfShadowTextures_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManagerListener::shadowTexturesUpdated(numberOfShadowTextures);
					}
				}
				virtual void shadowTextureCasterPreViewProj(EarthView::World::Graphic::CLight* light, EarthView::World::Graphic::CCamera* camera, ev_size_t iteration)
				{
					if (this->_gRef != NULL && this->m_shadowTextureCasterPreViewProj_CLight_CCamera_ev_size_t_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong light_j = (jlong) light;
						jlong camera_j = (jlong) camera;
						jlong iteration_j = (jlong) iteration;
						jmethodID __method = __gr->getMethod("shadowTextureCasterPreViewProj_CLight_CCamera_ev_size_t_callback");
						__env->CallVoidMethod(__obj, __method , light_j, camera_j, iteration_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManagerListener::shadowTextureCasterPreViewProj(light, camera, iteration);
					}
				}
				virtual void shadowTextureReceiverPreViewProj(EarthView::World::Graphic::CLight* light, EarthView::World::Graphic::CFrustum* frustum)
				{
					if (this->_gRef != NULL && this->m_shadowTextureReceiverPreViewProj_CLight_CFrustum_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong light_j = (jlong) light;
						jlong frustum_j = (jlong) frustum;
						jmethodID __method = __gr->getMethod("shadowTextureReceiverPreViewProj_CLight_CFrustum_callback");
						__env->CallVoidMethod(__obj, __method , light_j, frustum_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManagerListener::shadowTextureReceiverPreViewProj(light, frustum);
					}
				}
				virtual ev_bool sortLightsAffectingFrustum(EarthView::World::Graphic::LightList& lightList)
				{
					if (this->_gRef != NULL && this->m_sortLightsAffectingFrustum_LightList_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong lightList_j = (jlong) &lightList;
						jmethodID __method = __gr->getMethod("sortLightsAffectingFrustum_LightList_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , lightList_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManagerListener::sortLightsAffectingFrustum(lightList);
					}
				}
				virtual void sceneManagerDestroyed(EarthView::World::Graphic::CSceneManager* source)
				{
					if (this->_gRef != NULL && this->m_sceneManagerDestroyed_CSceneManager_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong source_j = (jlong) source;
						jmethodID __method = __gr->getMethod("sceneManagerDestroyed_CSceneManager_callback");
						__env->CallVoidMethod(__obj, __method , source_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManagerListener::sceneManagerDestroyed(source);
					}
				}
			};
			REGISTER_FACTORY_CLASS(JCSceneManagerListenerProxy);
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_preUpdateSceneGraph_1CSceneManager_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong source_j, jlong camera_j)
			{
				EarthView::World::Graphic::CSceneManager *source = (EarthView::World::Graphic::CSceneManager*) source_j;
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerListenerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::preUpdateSceneGraph(source, camera);
				}
				else
				{
					pObjectX->preUpdateSceneGraph(source, camera);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_register_1preUpdateSceneGraph_1CSceneManager_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerListenerProxy *pObjectX = (JCSceneManagerListenerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_preUpdateSceneGraph_CSceneManager_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"preUpdateSceneGraph_CSceneManager_CCamera_callback", "(JJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_preUpdateSceneGraph_1CSceneManager_1CCamera_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong source_j, jlong camera_j)
			{
				EarthView::World::Graphic::CSceneManager *source = (EarthView::World::Graphic::CSceneManager*) source_j;
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::preUpdateSceneGraph(source, camera);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_postUpdateSceneGraph_1CSceneManager_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong source_j, jlong camera_j)
			{
				EarthView::World::Graphic::CSceneManager *source = (EarthView::World::Graphic::CSceneManager*) source_j;
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerListenerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::postUpdateSceneGraph(source, camera);
				}
				else
				{
					pObjectX->postUpdateSceneGraph(source, camera);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_register_1postUpdateSceneGraph_1CSceneManager_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerListenerProxy *pObjectX = (JCSceneManagerListenerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_postUpdateSceneGraph_CSceneManager_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"postUpdateSceneGraph_CSceneManager_CCamera_callback", "(JJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_postUpdateSceneGraph_1CSceneManager_1CCamera_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong source_j, jlong camera_j)
			{
				EarthView::World::Graphic::CSceneManager *source = (EarthView::World::Graphic::CSceneManager*) source_j;
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::postUpdateSceneGraph(source, camera);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_preFindVisibleObjects_1CSceneManager_1IlluminationRenderStage_1CViewport(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong source_j, jint irs_j, jlong v_j)
			{
				EarthView::World::Graphic::CSceneManager *source = (EarthView::World::Graphic::CSceneManager*) source_j;
				EarthView::World::Graphic::CSceneManager::IlluminationRenderStage irs = (EarthView::World::Graphic::CSceneManager::IlluminationRenderStage) irs_j;
				EarthView::World::Graphic::CViewport *v = (EarthView::World::Graphic::CViewport*) v_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerListenerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::preFindVisibleObjects(source, irs, v);
				}
				else
				{
					pObjectX->preFindVisibleObjects(source, irs, v);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_register_1preFindVisibleObjects_1CSceneManager_1IlluminationRenderStage_1CViewport(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerListenerProxy *pObjectX = (JCSceneManagerListenerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_preFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"preFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback", "(JIJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_preFindVisibleObjects_1CSceneManager_1IlluminationRenderStage_1CViewport_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong source_j, jint irs_j, jlong v_j)
			{
				EarthView::World::Graphic::CSceneManager *source = (EarthView::World::Graphic::CSceneManager*) source_j;
				EarthView::World::Graphic::CSceneManager::IlluminationRenderStage irs = (EarthView::World::Graphic::CSceneManager::IlluminationRenderStage) irs_j;
				EarthView::World::Graphic::CViewport *v = (EarthView::World::Graphic::CViewport*) v_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::preFindVisibleObjects(source, irs, v);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_postFindVisibleObjects_1CSceneManager_1IlluminationRenderStage_1CViewport(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong source_j, jint irs_j, jlong v_j)
			{
				EarthView::World::Graphic::CSceneManager *source = (EarthView::World::Graphic::CSceneManager*) source_j;
				EarthView::World::Graphic::CSceneManager::IlluminationRenderStage irs = (EarthView::World::Graphic::CSceneManager::IlluminationRenderStage) irs_j;
				EarthView::World::Graphic::CViewport *v = (EarthView::World::Graphic::CViewport*) v_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerListenerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::postFindVisibleObjects(source, irs, v);
				}
				else
				{
					pObjectX->postFindVisibleObjects(source, irs, v);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_register_1postFindVisibleObjects_1CSceneManager_1IlluminationRenderStage_1CViewport(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerListenerProxy *pObjectX = (JCSceneManagerListenerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_postFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"postFindVisibleObjects_CSceneManager_IlluminationRenderStage_CViewport_callback", "(JIJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_postFindVisibleObjects_1CSceneManager_1IlluminationRenderStage_1CViewport_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong source_j, jint irs_j, jlong v_j)
			{
				EarthView::World::Graphic::CSceneManager *source = (EarthView::World::Graphic::CSceneManager*) source_j;
				EarthView::World::Graphic::CSceneManager::IlluminationRenderStage irs = (EarthView::World::Graphic::CSceneManager::IlluminationRenderStage) irs_j;
				EarthView::World::Graphic::CViewport *v = (EarthView::World::Graphic::CViewport*) v_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::postFindVisibleObjects(source, irs, v);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_shadowTexturesUpdated_1ev_1size_1t(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong numberOfShadowTextures_j)
			{
				ev_size_t numberOfShadowTextures = (ev_size_t) numberOfShadowTextures_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerListenerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::shadowTexturesUpdated(numberOfShadowTextures);
				}
				else
				{
					pObjectX->shadowTexturesUpdated(numberOfShadowTextures);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_register_1shadowTexturesUpdated_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerListenerProxy *pObjectX = (JCSceneManagerListenerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_shadowTexturesUpdated_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"shadowTexturesUpdated_ev_size_t_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_shadowTexturesUpdated_1ev_1size_1t_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong numberOfShadowTextures_j)
			{
				ev_size_t numberOfShadowTextures = (ev_size_t) numberOfShadowTextures_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::shadowTexturesUpdated(numberOfShadowTextures);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_shadowTextureCasterPreViewProj_1CLight_1CCamera_1ev_1size_1t(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong light_j, jlong camera_j, jlong iteration_j)
			{
				EarthView::World::Graphic::CLight *light = (EarthView::World::Graphic::CLight*) light_j;
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				ev_size_t iteration = (ev_size_t) iteration_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerListenerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::shadowTextureCasterPreViewProj(light, camera, iteration);
				}
				else
				{
					pObjectX->shadowTextureCasterPreViewProj(light, camera, iteration);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_register_1shadowTextureCasterPreViewProj_1CLight_1CCamera_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerListenerProxy *pObjectX = (JCSceneManagerListenerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_shadowTextureCasterPreViewProj_CLight_CCamera_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"shadowTextureCasterPreViewProj_CLight_CCamera_ev_size_t_callback", "(JJJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_shadowTextureCasterPreViewProj_1CLight_1CCamera_1ev_1size_1t_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong light_j, jlong camera_j, jlong iteration_j)
			{
				EarthView::World::Graphic::CLight *light = (EarthView::World::Graphic::CLight*) light_j;
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				ev_size_t iteration = (ev_size_t) iteration_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::shadowTextureCasterPreViewProj(light, camera, iteration);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_shadowTextureReceiverPreViewProj_1CLight_1CFrustum(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong light_j, jlong frustum_j)
			{
				EarthView::World::Graphic::CLight *light = (EarthView::World::Graphic::CLight*) light_j;
				EarthView::World::Graphic::CFrustum *frustum = (EarthView::World::Graphic::CFrustum*) frustum_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerListenerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::shadowTextureReceiverPreViewProj(light, frustum);
				}
				else
				{
					pObjectX->shadowTextureReceiverPreViewProj(light, frustum);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_register_1shadowTextureReceiverPreViewProj_1CLight_1CFrustum(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerListenerProxy *pObjectX = (JCSceneManagerListenerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_shadowTextureReceiverPreViewProj_CLight_CFrustum_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"shadowTextureReceiverPreViewProj_CLight_CFrustum_callback", "(JJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_shadowTextureReceiverPreViewProj_1CLight_1CFrustum_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong light_j, jlong frustum_j)
			{
				EarthView::World::Graphic::CLight *light = (EarthView::World::Graphic::CLight*) light_j;
				EarthView::World::Graphic::CFrustum *frustum = (EarthView::World::Graphic::CFrustum*) frustum_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::shadowTextureReceiverPreViewProj(light, frustum);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_sortLightsAffectingFrustum_1LightList(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong lightList_j)
			{
				EarthView::World::Graphic::LightList &lightList = *(EarthView::World::Graphic::LightList*) lightList_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerListenerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::sortLightsAffectingFrustum(lightList);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->sortLightsAffectingFrustum(lightList);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_register_1sortLightsAffectingFrustum_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerListenerProxy *pObjectX = (JCSceneManagerListenerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_sortLightsAffectingFrustum_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"sortLightsAffectingFrustum_LightList_callback", "(J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_sortLightsAffectingFrustum_1LightList_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong lightList_j)
			{
				EarthView::World::Graphic::LightList &lightList = *(EarthView::World::Graphic::LightList*) lightList_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::sortLightsAffectingFrustum(lightList);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_sceneManagerDestroyed_1CSceneManager(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong source_j)
			{
				EarthView::World::Graphic::CSceneManager *source = (EarthView::World::Graphic::CSceneManager*) source_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerListenerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::sceneManagerDestroyed(source);
				}
				else
				{
					pObjectX->sceneManagerDestroyed(source);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_register_1sceneManagerDestroyed_1CSceneManager(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerListenerProxy *pObjectX = (JCSceneManagerListenerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_sceneManagerDestroyed_CSceneManager_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"sceneManagerDestroyed_CSceneManager_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneManagerListener_sceneManagerDestroyed_1CSceneManager_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong source_j)
			{
				EarthView::World::Graphic::CSceneManager *source = (EarthView::World::Graphic::CSceneManager*) source_j;
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::CSceneManagerListener::sceneManagerDestroyed(source);
			}
			class JCSceneMgrQueuedRenderableVisitorProxy : public EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor
			{
			 private:
				EarthView::World::Core::ev_string m_visit_RenderablePass_callback;
				EarthView::World::Core::ev_string m_visit_CPass_callback;
				EarthView::World::Core::ev_string m_visit_CRenderable_callback;
			public:
				JCSceneMgrQueuedRenderableVisitorProxy(EarthView::World::Core::CNameValuePairList *pList) : CSceneMgrQueuedRenderableVisitor(pList)
				{
				}
				ev_void unRegisterJavaReference()
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
					if(__gr != NULL)
					{
						delete __gr;
						this->registerJavaReference(NULL);
					}
				}
			public:
				void register_visit_RenderablePass_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_visit_RenderablePass_callback = __method;
				}
				void register_visit_CPass_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_visit_CPass_callback = __method;
				}
				void register_visit_CRenderable_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_visit_CRenderable_callback = __method;
				}
				virtual void visit(EarthView::World::Graphic::CRenderable* r)
				{
					if (this->_gRef != NULL && this->m_visit_CRenderable_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong r_j = (jlong) r;
						jmethodID __method = __gr->getMethod("visit_CRenderable_callback");
						__env->CallVoidMethod(__obj, __method , r_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneMgrQueuedRenderableVisitor::visit(r);
					}
				}
				virtual ev_bool visit(const EarthView::World::Graphic::CPass* p)
				{
					if (this->_gRef != NULL && this->m_visit_CPass_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong p_j = (jlong) p;
						jmethodID __method = __gr->getMethod("visit_CPass_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , p_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneMgrQueuedRenderableVisitor::visit(p);
					}
				}
				virtual void visit(EarthView::World::Graphic::RenderablePass* rp)
				{
					if (this->_gRef != NULL && this->m_visit_RenderablePass_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong rp_j = (jlong) rp;
						jmethodID __method = __gr->getMethod("visit_RenderablePass_callback");
						__env->CallVoidMethod(__obj, __method , rp_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneMgrQueuedRenderableVisitor::visit(rp);
					}
				}
			};
			REGISTER_FACTORY_CLASS(JCSceneMgrQueuedRenderableVisitorProxy);
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_visit_1CRenderable(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong r_j)
			{
				EarthView::World::Graphic::CRenderable *r = (EarthView::World::Graphic::CRenderable*) r_j;
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneMgrQueuedRenderableVisitorProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor::visit(r);
				}
				else
				{
					pObjectX->visit(r);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_register_1visit_1CRenderable(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneMgrQueuedRenderableVisitorProxy *pObjectX = (JCSceneMgrQueuedRenderableVisitorProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_visit_CRenderable_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"visit_CRenderable_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_visit_1CRenderable_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong r_j)
			{
				EarthView::World::Graphic::CRenderable *r = (EarthView::World::Graphic::CRenderable*) r_j;
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor::visit(r);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_visit_1CPass(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong p_j)
			{
				const EarthView::World::Graphic::CPass *p = (const EarthView::World::Graphic::CPass*) p_j;
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneMgrQueuedRenderableVisitorProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor::visit(p);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->visit(p);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_register_1visit_1CPass(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneMgrQueuedRenderableVisitorProxy *pObjectX = (JCSceneMgrQueuedRenderableVisitorProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_visit_CPass_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"visit_CPass_callback", "(J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_visit_1CPass_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong p_j)
			{
				const EarthView::World::Graphic::CPass *p = (const EarthView::World::Graphic::CPass*) p_j;
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor::visit(p);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_visit_1RenderablePass(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rp_j)
			{
				EarthView::World::Graphic::RenderablePass *rp = (EarthView::World::Graphic::RenderablePass*) rp_j;
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneMgrQueuedRenderableVisitorProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor::visit(rp);
				}
				else
				{
					pObjectX->visit(rp);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_register_1visit_1RenderablePass(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneMgrQueuedRenderableVisitorProxy *pObjectX = (JCSceneMgrQueuedRenderableVisitorProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_visit_RenderablePass_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"visit_RenderablePass_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_visit_1RenderablePass_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rp_j)
			{
				EarthView::World::Graphic::RenderablePass *rp = (EarthView::World::Graphic::RenderablePass*) rp_j;
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor::visit(rp);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_get_1targetSceneMgr_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor*)pObjXXXX;
				jlong __values1_j = (jlong)(pObjectX->targetSceneMgr);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_set_1targetSceneMgr_1CSceneManager(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor*)pObjXXXX;
				pObjectX->targetSceneMgr = (EarthView::World::Graphic::CSceneManager*) __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_get_1transparentShadowCastersMode_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor*)pObjXXXX;
				jboolean __values1_j = (jboolean)(pObjectX->transparentShadowCastersMode);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_set_1transparentShadowCastersMode_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jboolean __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor*)pObjXXXX;
				pObjectX->transparentShadowCastersMode = (ev_bool)__values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_get_1autoLights_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor*)pObjXXXX;
				jboolean __values1_j = (jboolean)(pObjectX->autoLights);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_set_1autoLights_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jboolean __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor*)pObjXXXX;
				pObjectX->autoLights = (ev_bool)__values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_get_1manualLightList_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor*)pObjXXXX;
				jlong __values1_j = (jlong)(pObjectX->manualLightList);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_set_1manualLightList_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor*)pObjXXXX;
				pObjectX->manualLightList = (EarthView::World::Graphic::LightList*) __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_get_1scissoring_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor*)pObjXXXX;
				jboolean __values1_j = (jboolean)(pObjectX->scissoring);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024SceneMgrQueuedRenderableVisitor_set_1scissoring_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jboolean __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor *pObjectX = (EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor*)pObjXXXX;
				pObjectX->scissoring = (ev_bool)__values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraList_push_1EVString_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring key_j, jlong ref_val_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* key_ch = (const ev_char*)__env->GetStringUTFChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringUTFChars(key_j, (const char *)key_ch);
				#else
				const ev_wchar* key_ch = (const ev_wchar*)__env->GetStringChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringChars(key_j, (const jchar *)key_ch);
				#endif
				EarthView::World::Graphic::CCamera *&ref_val = *(EarthView::World::Graphic::CCamera**) ref_val_j;
				EarthView::World::Graphic::CSceneManager::CameraList *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraList*) pObjXXXX;
				ev_bool __values1 = pObjectX->push(key, ref_val);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraList_exist_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring key_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* key_ch = (const ev_char*)__env->GetStringUTFChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringUTFChars(key_j, (const char *)key_ch);
				#else
				const ev_wchar* key_ch = (const ev_wchar*)__env->GetStringChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringChars(key_j, (const jchar *)key_ch);
				#endif
				EarthView::World::Graphic::CSceneManager::CameraList *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraList*) pObjXXXX;
				ev_bool __values1 = pObjectX->exist(key);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraList_OperatorIndex_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring key_j )
			{
				EarthView::World::Graphic::CSceneManager::CameraList& pObjectX = *(EarthView::World::Graphic::CSceneManager::CameraList*) pObjXXXX;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* key_ch = (const ev_char*)__env->GetStringUTFChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringUTFChars(key_j, (const char *)key_ch);
				#else
				const ev_wchar* key_ch = (const ev_wchar*)__env->GetStringChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringChars(key_j, (const jchar *)key_ch);
				#endif
				EarthView::World::Graphic::CCamera*& __values1 = pObjectX[key];
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraList_get_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring key_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* key_ch = (const ev_char*)__env->GetStringUTFChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringUTFChars(key_j, (const char *)key_ch);
				#else
				const ev_wchar* key_ch = (const ev_wchar*)__env->GetStringChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringChars(key_j, (const jchar *)key_ch);
				#endif
				EarthView::World::Graphic::CSceneManager::CameraList *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraList*) pObjXXXX;
				EarthView::World::Graphic::CCamera*& __values1 = pObjectX->get(key);
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraList_erase_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring key_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* key_ch = (const ev_char*)__env->GetStringUTFChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringUTFChars(key_j, (const char *)key_ch);
				#else
				const ev_wchar* key_ch = (const ev_wchar*)__env->GetStringChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringChars(key_j, (const jchar *)key_ch);
				#endif
				EarthView::World::Graphic::CSceneManager::CameraList *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraList*) pObjXXXX;
				pObjectX->erase(key);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraList_size_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager::CameraList *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraList*) pObjXXXX;
				ev_size_t __values1 = pObjectX->size();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraList_clear_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::CameraList *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraList*) pObjXXXX;
				pObjectX->clear();
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraList_empty_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager::CameraList *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraList*) pObjXXXX;
				ev_bool __values1 = pObjectX->empty();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationList_push_1EVString_1CAnimation(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring key_j, jlong ref_val_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* key_ch = (const ev_char*)__env->GetStringUTFChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringUTFChars(key_j, (const char *)key_ch);
				#else
				const ev_wchar* key_ch = (const ev_wchar*)__env->GetStringChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringChars(key_j, (const jchar *)key_ch);
				#endif
				EarthView::World::Graphic::CAnimation *&ref_val = *(EarthView::World::Graphic::CAnimation**) ref_val_j;
				EarthView::World::Graphic::CSceneManager::AnimationList *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationList*) pObjXXXX;
				ev_bool __values1 = pObjectX->push(key, ref_val);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationList_exist_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring key_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* key_ch = (const ev_char*)__env->GetStringUTFChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringUTFChars(key_j, (const char *)key_ch);
				#else
				const ev_wchar* key_ch = (const ev_wchar*)__env->GetStringChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringChars(key_j, (const jchar *)key_ch);
				#endif
				EarthView::World::Graphic::CSceneManager::AnimationList *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationList*) pObjXXXX;
				ev_bool __values1 = pObjectX->exist(key);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationList_OperatorIndex_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring key_j )
			{
				EarthView::World::Graphic::CSceneManager::AnimationList& pObjectX = *(EarthView::World::Graphic::CSceneManager::AnimationList*) pObjXXXX;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* key_ch = (const ev_char*)__env->GetStringUTFChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringUTFChars(key_j, (const char *)key_ch);
				#else
				const ev_wchar* key_ch = (const ev_wchar*)__env->GetStringChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringChars(key_j, (const jchar *)key_ch);
				#endif
				EarthView::World::Graphic::CAnimation*& __values1 = pObjectX[key];
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationList_get_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring key_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* key_ch = (const ev_char*)__env->GetStringUTFChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringUTFChars(key_j, (const char *)key_ch);
				#else
				const ev_wchar* key_ch = (const ev_wchar*)__env->GetStringChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringChars(key_j, (const jchar *)key_ch);
				#endif
				EarthView::World::Graphic::CSceneManager::AnimationList *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationList*) pObjXXXX;
				EarthView::World::Graphic::CAnimation*& __values1 = pObjectX->get(key);
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationList_erase_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring key_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* key_ch = (const ev_char*)__env->GetStringUTFChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringUTFChars(key_j, (const char *)key_ch);
				#else
				const ev_wchar* key_ch = (const ev_wchar*)__env->GetStringChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringChars(key_j, (const jchar *)key_ch);
				#endif
				EarthView::World::Graphic::CSceneManager::AnimationList *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationList*) pObjXXXX;
				pObjectX->erase(key);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationList_size_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager::AnimationList *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationList*) pObjXXXX;
				ev_size_t __values1 = pObjectX->size();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationList_clear_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::AnimationList *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationList*) pObjXXXX;
				pObjectX->clear();
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationList_empty_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager::AnimationList *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationList*) pObjXXXX;
				ev_bool __values1 = pObjectX->empty();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectMap_push_1EVString_1CMovableObject(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring key_j, jlong val_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* key_ch = (const ev_char*)__env->GetStringUTFChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringUTFChars(key_j, (const char *)key_ch);
				#else
				const ev_wchar* key_ch = (const ev_wchar*)__env->GetStringChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringChars(key_j, (const jchar *)key_ch);
				#endif
				EarthView::World::Graphic::CMovableObject *&val = *(EarthView::World::Graphic::CMovableObject**) val_j;
				EarthView::World::Graphic::CSceneManager::MovableObjectMap *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectMap*) pObjXXXX;
				ev_bool __values1 = pObjectX->push(key, val);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectMap_exist_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring key_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* key_ch = (const ev_char*)__env->GetStringUTFChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringUTFChars(key_j, (const char *)key_ch);
				#else
				const ev_wchar* key_ch = (const ev_wchar*)__env->GetStringChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringChars(key_j, (const jchar *)key_ch);
				#endif
				EarthView::World::Graphic::CSceneManager::MovableObjectMap *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectMap*) pObjXXXX;
				ev_bool __values1 = pObjectX->exist(key);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectMap_OperatorIndex_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring key_j )
			{
				EarthView::World::Graphic::CSceneManager::MovableObjectMap& pObjectX = *(EarthView::World::Graphic::CSceneManager::MovableObjectMap*) pObjXXXX;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* key_ch = (const ev_char*)__env->GetStringUTFChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringUTFChars(key_j, (const char *)key_ch);
				#else
				const ev_wchar* key_ch = (const ev_wchar*)__env->GetStringChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringChars(key_j, (const jchar *)key_ch);
				#endif
				EarthView::World::Graphic::CMovableObject*& __values1 = pObjectX[key];
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectMap_get_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring key_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* key_ch = (const ev_char*)__env->GetStringUTFChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringUTFChars(key_j, (const char *)key_ch);
				#else
				const ev_wchar* key_ch = (const ev_wchar*)__env->GetStringChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringChars(key_j, (const jchar *)key_ch);
				#endif
				EarthView::World::Graphic::CSceneManager::MovableObjectMap *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectMap*) pObjXXXX;
				EarthView::World::Graphic::CMovableObject*& __values1 = pObjectX->get(key);
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectMap_erase_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring key_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* key_ch = (const ev_char*)__env->GetStringUTFChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringUTFChars(key_j, (const char *)key_ch);
				#else
				const ev_wchar* key_ch = (const ev_wchar*)__env->GetStringChars(key_j,JNI_FALSE);
				const EVString key = key_ch;
				__env->ReleaseStringChars(key_j, (const jchar *)key_ch);
				#endif
				EarthView::World::Graphic::CSceneManager::MovableObjectMap *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectMap*) pObjXXXX;
				pObjectX->erase(key);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectMap_size_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager::MovableObjectMap *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectMap*) pObjXXXX;
				ev_size_t __values1 = pObjectX->size();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectMap_clear_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::MovableObjectMap *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectMap*) pObjXXXX;
				pObjectX->clear();
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectMap_empty_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager::MovableObjectMap *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectMap*) pObjXXXX;
				ev_bool __values1 = pObjectX->empty();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createSceneNodeImpl_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createSceneNodeImpl();
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->createSceneNodeImpl();
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createSceneNodeImpl_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createSceneNodeImpl_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createSceneNodeImpl_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createSceneNodeImpl_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createSceneNodeImpl();
				if(__values1 != NULL) {					((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
				}				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createSceneNodeImpl_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createSceneNodeImpl(name);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->createSceneNodeImpl(name);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createSceneNodeImpl_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createSceneNodeImpl_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createSceneNodeImpl_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createSceneNodeImpl_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createSceneNodeImpl(name);
				if(__values1 != NULL) {					((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
				}				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getHeightMapRendering_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->getHeightMapRendering();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024LightInfo_get_1light_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::LightInfo *pObjectX = (EarthView::World::Graphic::CSceneManager::LightInfo*)pObjXXXX;
				jlong __values1_j = (jlong)(pObjectX->light);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024LightInfo_set_1light_1CLight(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::LightInfo *pObjectX = (EarthView::World::Graphic::CSceneManager::LightInfo*)pObjXXXX;
				pObjectX->light = (EarthView::World::Graphic::CLight*) __values1_j;
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_00024LightInfo_get_1type_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::LightInfo *pObjectX = (EarthView::World::Graphic::CSceneManager::LightInfo*)pObjXXXX;
				jint __values1_j = (jint)(pObjectX->type);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024LightInfo_set_1type_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jint __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::LightInfo *pObjectX = (EarthView::World::Graphic::CSceneManager::LightInfo*)pObjXXXX;
				pObjectX->type = (ev_int32)__values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_00024LightInfo_get_1range_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::LightInfo *pObjectX = (EarthView::World::Graphic::CSceneManager::LightInfo*)pObjXXXX;
				jdouble __values1_j = (jdouble)(pObjectX->range);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024LightInfo_set_1range_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jdouble __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::LightInfo *pObjectX = (EarthView::World::Graphic::CSceneManager::LightInfo*)pObjXXXX;
				pObjectX->range = (Real)__values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024LightInfo_get_1position_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::LightInfo *pObjectX = (EarthView::World::Graphic::CSceneManager::LightInfo*)pObjXXXX;
				jlong __values1_j = (jlong) &(pObjectX->position);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024LightInfo_set_1position_1CVector3(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::LightInfo *pObjectX = (EarthView::World::Graphic::CSceneManager::LightInfo*)pObjXXXX;
				pObjectX->position = *(EarthView::World::Spatial::Math::CVector3*) __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024LightInfo_get_1lightMask_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::LightInfo *pObjectX = (EarthView::World::Graphic::CSceneManager::LightInfo*)pObjXXXX;
				jlong __values1_j = (jlong) (pObjectX->lightMask);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024LightInfo_set_1lightMask_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::LightInfo *pObjectX = (EarthView::World::Graphic::CSceneManager::LightInfo*)pObjXXXX;
				pObjectX->lightMask = (ev_uint32)__values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024LightInfo_OperatorEquals_1LightInfo(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong rhs_j )
			{
				EarthView::World::Graphic::CSceneManager::LightInfo& pObjectX = *(EarthView::World::Graphic::CSceneManager::LightInfo*) pObjXXXX;
				const EarthView::World::Graphic::CSceneManager::LightInfo &rhs = *(EarthView::World::Graphic::CSceneManager::LightInfo*) rhs_j;
				ev_bool __values1 = (pObjectX == rhs);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024LightInfo_OperatorNotEquals_1LightInfo(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong rhs_j )
			{
				EarthView::World::Graphic::CSceneManager::LightInfo& pObjectX = *(EarthView::World::Graphic::CSceneManager::LightInfo*) pObjXXXX;
				const EarthView::World::Graphic::CSceneManager::LightInfo &rhs = *(EarthView::World::Graphic::CSceneManager::LightInfo*) rhs_j;
				ev_bool __values1 = (pObjectX != rhs);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_initRenderQueue_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::initRenderQueue();
				}
				else
				{
					pObjectX->initRenderQueue();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1initRenderQueue_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_initRenderQueue_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"initRenderQueue_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_initRenderQueue_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::initRenderQueue();
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_deriveShadowCasterPass_1CPass(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j)
			{
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					const EarthView::World::Graphic::CPass* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::deriveShadowCasterPass(pass);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					const EarthView::World::Graphic::CPass* __values1 = pObjectX->deriveShadowCasterPass(pass);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1deriveShadowCasterPass_1CPass(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_deriveShadowCasterPass_CPass_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"deriveShadowCasterPass_CPass_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_deriveShadowCasterPass_1CPass_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j)
			{
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::CPass* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::deriveShadowCasterPass(pass);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_deriveShadowReceiverPass_1CPass(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j)
			{
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					const EarthView::World::Graphic::CPass* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::deriveShadowReceiverPass(pass);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					const EarthView::World::Graphic::CPass* __values1 = pObjectX->deriveShadowReceiverPass(pass);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1deriveShadowReceiverPass_1CPass(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_deriveShadowReceiverPass_CPass_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"deriveShadowReceiverPass_CPass_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_deriveShadowReceiverPass_1CPass_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j)
			{
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::CPass* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::deriveShadowReceiverPass(pass);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_validatePassForRendering_1CPass(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j)
			{
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::validatePassForRendering(pass);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->validatePassForRendering(pass);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1validatePassForRendering_1CPass(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_validatePassForRendering_CPass_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"validatePassForRendering_CPass_callback", "(J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_validatePassForRendering_1CPass_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j)
			{
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::validatePassForRendering(pass);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_validateRenderableForRendering_1CPass_1CRenderable(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j, jlong rend_j)
			{
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				const EarthView::World::Graphic::CRenderable *rend = (const EarthView::World::Graphic::CRenderable*) rend_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::validateRenderableForRendering(pass, rend);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->validateRenderableForRendering(pass, rend);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1validateRenderableForRendering_1CPass_1CRenderable(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_validateRenderableForRendering_CPass_CRenderable_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"validateRenderableForRendering_CPass_CRenderable_callback", "(JJ)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_validateRenderableForRendering_1CPass_1CRenderable_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j, jlong rend_j)
			{
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				const EarthView::World::Graphic::CRenderable *rend = (const EarthView::World::Graphic::CRenderable*) rend_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::validateRenderableForRendering(pass, rend);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createSkyboxPlane_1BoxPlane_1Real_1CQuaternion_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint bp_j, jdouble distance_j, jlong orientation_j, jstring groupName_j)
			{
				EarthView::World::Graphic::CSceneManager::BoxPlane bp = (EarthView::World::Graphic::CSceneManager::BoxPlane) bp_j;
				Real distance = (Real) distance_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CMeshPtr __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createSkyboxPlane(bp, distance, orientation, groupName);
					EarthView::World::Graphic::CMeshPtr *returnvalues = new EarthView::World::Graphic::CMeshPtr(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CMeshPtr __values1 = pObjectX->createSkyboxPlane(bp, distance, orientation, groupName);
					EarthView::World::Graphic::CMeshPtr *returnvalues = new EarthView::World::Graphic::CMeshPtr(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createSkyboxPlane_1BoxPlane_1Real_1CQuaternion_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createSkyboxPlane_BoxPlane_Real_CQuaternion_EVString_callback", "(IDJLjava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createSkyboxPlane_1BoxPlane_1Real_1CQuaternion_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint bp_j, jdouble distance_j, jlong orientation_j, jstring groupName_j)
			{
				EarthView::World::Graphic::CSceneManager::BoxPlane bp = (EarthView::World::Graphic::CSceneManager::BoxPlane) bp_j;
				Real distance = (Real) distance_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CMeshPtr __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createSkyboxPlane(bp, distance, orientation, groupName);
				EarthView::World::Graphic::CMeshPtr *returnvalues = new EarthView::World::Graphic::CMeshPtr(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createSkydomePlane_1BoxPlane_1Real_1Real_1Real_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint bp_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jlong orientation_j, jint xsegments_j, jint ysegments_j, jint ySegmentsToKeep_j, jstring groupName_j)
			{
				EarthView::World::Graphic::CSceneManager::BoxPlane bp = (EarthView::World::Graphic::CSceneManager::BoxPlane) bp_j;
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				ev_int32 ySegmentsToKeep = (ev_int32) ySegmentsToKeep_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CMeshPtr __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createSkydomePlane(bp, curvature, tiling, distance, orientation, xsegments, ysegments, ySegmentsToKeep, groupName);
					EarthView::World::Graphic::CMeshPtr *returnvalues = new EarthView::World::Graphic::CMeshPtr(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CMeshPtr __values1 = pObjectX->createSkydomePlane(bp, curvature, tiling, distance, orientation, xsegments, ysegments, ySegmentsToKeep, groupName);
					EarthView::World::Graphic::CMeshPtr *returnvalues = new EarthView::World::Graphic::CMeshPtr(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createSkydomePlane_1BoxPlane_1Real_1Real_1Real_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createSkydomePlane_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback", "(IDDDJIIILjava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createSkydomePlane_1BoxPlane_1Real_1Real_1Real_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint bp_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jlong orientation_j, jint xsegments_j, jint ysegments_j, jint ySegmentsToKeep_j, jstring groupName_j)
			{
				EarthView::World::Graphic::CSceneManager::BoxPlane bp = (EarthView::World::Graphic::CSceneManager::BoxPlane) bp_j;
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				ev_int32 ySegmentsToKeep = (ev_int32) ySegmentsToKeep_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CMeshPtr __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createSkydomePlane(bp, curvature, tiling, distance, orientation, xsegments, ysegments, ySegmentsToKeep, groupName);
				EarthView::World::Graphic::CMeshPtr *returnvalues = new EarthView::World::Graphic::CMeshPtr(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_useRenderableViewProjMode_1CRenderable_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pRend_j, jboolean fixedFunction_j)
			{
				const EarthView::World::Graphic::CRenderable *pRend = (const EarthView::World::Graphic::CRenderable*) pRend_j;
				ev_bool fixedFunction = (ev_bool) fixedFunction_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::useRenderableViewProjMode(pRend, fixedFunction);
				}
				else
				{
					pObjectX->useRenderableViewProjMode(pRend, fixedFunction);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1useRenderableViewProjMode_1CRenderable_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_useRenderableViewProjMode_CRenderable_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"useRenderableViewProjMode_CRenderable_ev_bool_callback", "(JZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_useRenderableViewProjMode_1CRenderable_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pRend_j, jboolean fixedFunction_j)
			{
				const EarthView::World::Graphic::CRenderable *pRend = (const EarthView::World::Graphic::CRenderable*) pRend_j;
				ev_bool fixedFunction = (ev_bool) fixedFunction_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::useRenderableViewProjMode(pRend, fixedFunction);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_resetViewProjMode_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean fixedFunction_j)
			{
				ev_bool fixedFunction = (ev_bool) fixedFunction_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::resetViewProjMode(fixedFunction);
				}
				else
				{
					pObjectX->resetViewProjMode(fixedFunction);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1resetViewProjMode_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_resetViewProjMode_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"resetViewProjMode_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_resetViewProjMode_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean fixedFunction_j)
			{
				ev_bool fixedFunction = (ev_bool) fixedFunction_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::resetViewProjMode(fixedFunction);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_firePreRenderQueues_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::firePreRenderQueues();
				}
				else
				{
					pObjectX->firePreRenderQueues();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1firePreRenderQueues_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_firePreRenderQueues_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"firePreRenderQueues_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_firePreRenderQueues_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::firePreRenderQueues();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_firePostRenderQueues_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::firePostRenderQueues();
				}
				else
				{
					pObjectX->firePostRenderQueues();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1firePostRenderQueues_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_firePostRenderQueues_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"firePostRenderQueues_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_firePostRenderQueues_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::firePostRenderQueues();
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_fireRenderQueueStarted_1ev_1uint8_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort id_j, jstring invocation_j)
			{
				ev_uint8 id = (ev_uint8) id_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* invocation_ch = (const ev_char*)__env->GetStringUTFChars(invocation_j,JNI_FALSE);
				const EVString invocation = invocation_ch;
				__env->ReleaseStringUTFChars(invocation_j, (const char *)invocation_ch);
				#else
				const ev_wchar* invocation_ch = (const ev_wchar*)__env->GetStringChars(invocation_j,JNI_FALSE);
				const EVString invocation = invocation_ch;
				__env->ReleaseStringChars(invocation_j, (const jchar *)invocation_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::fireRenderQueueStarted(id, invocation);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->fireRenderQueueStarted(id, invocation);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1fireRenderQueueStarted_1ev_1uint8_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_fireRenderQueueStarted_ev_uint8_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"fireRenderQueueStarted_ev_uint8_EVString_callback", "(SLjava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_fireRenderQueueStarted_1ev_1uint8_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort id_j, jstring invocation_j)
			{
				ev_uint8 id = (ev_uint8) id_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* invocation_ch = (const ev_char*)__env->GetStringUTFChars(invocation_j,JNI_FALSE);
				const EVString invocation = invocation_ch;
				__env->ReleaseStringUTFChars(invocation_j, (const char *)invocation_ch);
				#else
				const ev_wchar* invocation_ch = (const ev_wchar*)__env->GetStringChars(invocation_j,JNI_FALSE);
				const EVString invocation = invocation_ch;
				__env->ReleaseStringChars(invocation_j, (const jchar *)invocation_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::fireRenderQueueStarted(id, invocation);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_fireRenderQueueEnded_1ev_1uint8_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort id_j, jstring invocation_j)
			{
				ev_uint8 id = (ev_uint8) id_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* invocation_ch = (const ev_char*)__env->GetStringUTFChars(invocation_j,JNI_FALSE);
				const EVString invocation = invocation_ch;
				__env->ReleaseStringUTFChars(invocation_j, (const char *)invocation_ch);
				#else
				const ev_wchar* invocation_ch = (const ev_wchar*)__env->GetStringChars(invocation_j,JNI_FALSE);
				const EVString invocation = invocation_ch;
				__env->ReleaseStringChars(invocation_j, (const jchar *)invocation_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::fireRenderQueueEnded(id, invocation);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->fireRenderQueueEnded(id, invocation);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1fireRenderQueueEnded_1ev_1uint8_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_fireRenderQueueEnded_ev_uint8_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"fireRenderQueueEnded_ev_uint8_EVString_callback", "(SLjava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_fireRenderQueueEnded_1ev_1uint8_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort id_j, jstring invocation_j)
			{
				ev_uint8 id = (ev_uint8) id_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* invocation_ch = (const ev_char*)__env->GetStringUTFChars(invocation_j,JNI_FALSE);
				const EVString invocation = invocation_ch;
				__env->ReleaseStringUTFChars(invocation_j, (const char *)invocation_ch);
				#else
				const ev_wchar* invocation_ch = (const ev_wchar*)__env->GetStringChars(invocation_j,JNI_FALSE);
				const EVString invocation = invocation_ch;
				__env->ReleaseStringChars(invocation_j, (const jchar *)invocation_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::fireRenderQueueEnded(id, invocation);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_fireRenderSingleObjectStarted_1CRenderable_1CPass_1CAutoParamDataSource_1LightList_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong source_j, jlong pLightList_j, jboolean suppressRenderStateChanges_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				const EarthView::World::Graphic::CAutoParamDataSource *source = (const EarthView::World::Graphic::CAutoParamDataSource*) source_j;
				const EarthView::World::Graphic::LightList *pLightList = (const EarthView::World::Graphic::LightList*) pLightList_j;
				ev_bool suppressRenderStateChanges = (ev_bool) suppressRenderStateChanges_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::fireRenderSingleObjectStarted(rend, pass, source, pLightList, suppressRenderStateChanges);
				}
				else
				{
					pObjectX->fireRenderSingleObjectStarted(rend, pass, source, pLightList, suppressRenderStateChanges);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1fireRenderSingleObjectStarted_1CRenderable_1CPass_1CAutoParamDataSource_1LightList_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"fireRenderSingleObjectStarted_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback", "(JJJJZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_fireRenderSingleObjectStarted_1CRenderable_1CPass_1CAutoParamDataSource_1LightList_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong source_j, jlong pLightList_j, jboolean suppressRenderStateChanges_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				const EarthView::World::Graphic::CAutoParamDataSource *source = (const EarthView::World::Graphic::CAutoParamDataSource*) source_j;
				const EarthView::World::Graphic::LightList *pLightList = (const EarthView::World::Graphic::LightList*) pLightList_j;
				ev_bool suppressRenderStateChanges = (ev_bool) suppressRenderStateChanges_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::fireRenderSingleObjectStarted(rend, pass, source, pLightList, suppressRenderStateChanges);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_fireRenderSingleObjectEnd_1CRenderable_1CPass_1CAutoParamDataSource_1LightList_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong source_j, jlong pLightList_j, jboolean suppressRenderStateChanges_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				const EarthView::World::Graphic::CAutoParamDataSource *source = (const EarthView::World::Graphic::CAutoParamDataSource*) source_j;
				const EarthView::World::Graphic::LightList *pLightList = (const EarthView::World::Graphic::LightList*) pLightList_j;
				ev_bool suppressRenderStateChanges = (ev_bool) suppressRenderStateChanges_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::fireRenderSingleObjectEnd(rend, pass, source, pLightList, suppressRenderStateChanges);
				}
				else
				{
					pObjectX->fireRenderSingleObjectEnd(rend, pass, source, pLightList, suppressRenderStateChanges);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1fireRenderSingleObjectEnd_1CRenderable_1CPass_1CAutoParamDataSource_1LightList_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"fireRenderSingleObjectEnd_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_callback", "(JJJJZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_fireRenderSingleObjectEnd_1CRenderable_1CPass_1CAutoParamDataSource_1LightList_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong source_j, jlong pLightList_j, jboolean suppressRenderStateChanges_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				const EarthView::World::Graphic::CAutoParamDataSource *source = (const EarthView::World::Graphic::CAutoParamDataSource*) source_j;
				const EarthView::World::Graphic::LightList *pLightList = (const EarthView::World::Graphic::LightList*) pLightList_j;
				ev_bool suppressRenderStateChanges = (ev_bool) suppressRenderStateChanges_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::fireRenderSingleObjectEnd(rend, pass, source, pLightList, suppressRenderStateChanges);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_fireShadowTexturesUpdated_1ev_1size_1t(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong numberOfShadowTextures_j)
			{
				ev_size_t numberOfShadowTextures = (ev_size_t) numberOfShadowTextures_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::fireShadowTexturesUpdated(numberOfShadowTextures);
				}
				else
				{
					pObjectX->fireShadowTexturesUpdated(numberOfShadowTextures);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1fireShadowTexturesUpdated_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_fireShadowTexturesUpdated_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"fireShadowTexturesUpdated_ev_size_t_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_fireShadowTexturesUpdated_1ev_1size_1t_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong numberOfShadowTextures_j)
			{
				ev_size_t numberOfShadowTextures = (ev_size_t) numberOfShadowTextures_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::fireShadowTexturesUpdated(numberOfShadowTextures);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_fireShadowTexturesPreCaster_1CLight_1CCamera_1ev_1size_1t(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong light_j, jlong camera_j, jlong iteration_j)
			{
				EarthView::World::Graphic::CLight *light = (EarthView::World::Graphic::CLight*) light_j;
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				ev_size_t iteration = (ev_size_t) iteration_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::fireShadowTexturesPreCaster(light, camera, iteration);
				}
				else
				{
					pObjectX->fireShadowTexturesPreCaster(light, camera, iteration);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1fireShadowTexturesPreCaster_1CLight_1CCamera_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"fireShadowTexturesPreCaster_CLight_CCamera_ev_size_t_callback", "(JJJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_fireShadowTexturesPreCaster_1CLight_1CCamera_1ev_1size_1t_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong light_j, jlong camera_j, jlong iteration_j)
			{
				EarthView::World::Graphic::CLight *light = (EarthView::World::Graphic::CLight*) light_j;
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				ev_size_t iteration = (ev_size_t) iteration_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::fireShadowTexturesPreCaster(light, camera, iteration);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_fireShadowTexturesPreReceiver_1CLight_1CFrustum(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong light_j, jlong f_j)
			{
				EarthView::World::Graphic::CLight *light = (EarthView::World::Graphic::CLight*) light_j;
				EarthView::World::Graphic::CFrustum *f = (EarthView::World::Graphic::CFrustum*) f_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::fireShadowTexturesPreReceiver(light, f);
				}
				else
				{
					pObjectX->fireShadowTexturesPreReceiver(light, f);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1fireShadowTexturesPreReceiver_1CLight_1CFrustum(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_fireShadowTexturesPreReceiver_CLight_CFrustum_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"fireShadowTexturesPreReceiver_CLight_CFrustum_callback", "(JJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_fireShadowTexturesPreReceiver_1CLight_1CFrustum_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong light_j, jlong f_j)
			{
				EarthView::World::Graphic::CLight *light = (EarthView::World::Graphic::CLight*) light_j;
				EarthView::World::Graphic::CFrustum *f = (EarthView::World::Graphic::CFrustum*) f_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::fireShadowTexturesPreReceiver(light, f);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_firePreUpdateSceneGraph_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong camera_j)
			{
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::firePreUpdateSceneGraph(camera);
				}
				else
				{
					pObjectX->firePreUpdateSceneGraph(camera);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1firePreUpdateSceneGraph_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_firePreUpdateSceneGraph_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"firePreUpdateSceneGraph_CCamera_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_firePreUpdateSceneGraph_1CCamera_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong camera_j)
			{
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::firePreUpdateSceneGraph(camera);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_firePostUpdateSceneGraph_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong camera_j)
			{
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::firePostUpdateSceneGraph(camera);
				}
				else
				{
					pObjectX->firePostUpdateSceneGraph(camera);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1firePostUpdateSceneGraph_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_firePostUpdateSceneGraph_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"firePostUpdateSceneGraph_CCamera_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_firePostUpdateSceneGraph_1CCamera_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong camera_j)
			{
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::firePostUpdateSceneGraph(camera);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_firePreFindVisibleObjects_1CViewport(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong v_j)
			{
				EarthView::World::Graphic::CViewport *v = (EarthView::World::Graphic::CViewport*) v_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::firePreFindVisibleObjects(v);
				}
				else
				{
					pObjectX->firePreFindVisibleObjects(v);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1firePreFindVisibleObjects_1CViewport(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_firePreFindVisibleObjects_CViewport_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"firePreFindVisibleObjects_CViewport_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_firePreFindVisibleObjects_1CViewport_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong v_j)
			{
				EarthView::World::Graphic::CViewport *v = (EarthView::World::Graphic::CViewport*) v_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::firePreFindVisibleObjects(v);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_firePostFindVisibleObjects_1CViewport(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong v_j)
			{
				EarthView::World::Graphic::CViewport *v = (EarthView::World::Graphic::CViewport*) v_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::firePostFindVisibleObjects(v);
				}
				else
				{
					pObjectX->firePostFindVisibleObjects(v);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1firePostFindVisibleObjects_1CViewport(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_firePostFindVisibleObjects_CViewport_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"firePostFindVisibleObjects_CViewport_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_firePostFindVisibleObjects_1CViewport_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong v_j)
			{
				EarthView::World::Graphic::CViewport *v = (EarthView::World::Graphic::CViewport*) v_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::firePostFindVisibleObjects(v);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_fireSceneManagerDestroyed_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::fireSceneManagerDestroyed();
				}
				else
				{
					pObjectX->fireSceneManagerDestroyed();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1fireSceneManagerDestroyed_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_fireSceneManagerDestroyed_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"fireSceneManagerDestroyed_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_fireSceneManagerDestroyed_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::fireSceneManagerDestroyed();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setViewport_1CViewport(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong vp_j)
			{
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setViewport(vp);
				}
				else
				{
					pObjectX->setViewport(vp);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setViewport_1CViewport(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setViewport_CViewport_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setViewport_CViewport_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setViewport_1CViewport_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong vp_j)
			{
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setViewport(vp);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderVisibleObjectsDefaultSequence_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::renderVisibleObjectsDefaultSequence();
				}
				else
				{
					pObjectX->renderVisibleObjectsDefaultSequence();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1renderVisibleObjectsDefaultSequence_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderVisibleObjectsDefaultSequence_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderVisibleObjectsDefaultSequence_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderVisibleObjectsDefaultSequence_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::renderVisibleObjectsDefaultSequence();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderVisibleObjectsCustomSequence_1CRenderQueueInvocationSequence(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong s_j)
			{
				EarthView::World::Graphic::CRenderQueueInvocationSequence *s = (EarthView::World::Graphic::CRenderQueueInvocationSequence*) s_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::renderVisibleObjectsCustomSequence(s);
				}
				else
				{
					pObjectX->renderVisibleObjectsCustomSequence(s);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1renderVisibleObjectsCustomSequence_1CRenderQueueInvocationSequence(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderVisibleObjectsCustomSequence_CRenderQueueInvocationSequence_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderVisibleObjectsCustomSequence_1CRenderQueueInvocationSequence_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong s_j)
			{
				EarthView::World::Graphic::CRenderQueueInvocationSequence *s = (EarthView::World::Graphic::CRenderQueueInvocationSequence*) s_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::renderVisibleObjectsCustomSequence(s);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_prepareRenderQueue_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::prepareRenderQueue();
				}
				else
				{
					pObjectX->prepareRenderQueue();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1prepareRenderQueue_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_prepareRenderQueue_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"prepareRenderQueue_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_prepareRenderQueue_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::prepareRenderQueue();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderSingleObject_1CRenderable_1CPass_1ev_1bool_1ev_1bool_1LightList(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jboolean lightScissoringClipping_j, jboolean doLightIteration_j, jlong manualLightList_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				const EarthView::World::Graphic::LightList *manualLightList = (const EarthView::World::Graphic::LightList*) manualLightList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::renderSingleObject(rend, pass, lightScissoringClipping, doLightIteration, manualLightList);
				}
				else
				{
					pObjectX->renderSingleObject(rend, pass, lightScissoringClipping, doLightIteration, manualLightList);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1renderSingleObject_1CRenderable_1CPass_1ev_1bool_1ev_1bool_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_LightList_callback", "(JJZZJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderSingleObject_1CRenderable_1CPass_1ev_1bool_1ev_1bool_1LightList_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jboolean lightScissoringClipping_j, jboolean doLightIteration_j, jlong manualLightList_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				const EarthView::World::Graphic::LightList *manualLightList = (const EarthView::World::Graphic::LightList*) manualLightList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::renderSingleObject(rend, pass, lightScissoringClipping, doLightIteration, manualLightList);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderSingleObject_1CRenderable_1CPass_1ev_1bool_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jboolean lightScissoringClipping_j, jboolean doLightIteration_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::renderSingleObject(rend, pass, lightScissoringClipping, doLightIteration);
				}
				else
				{
					pObjectX->renderSingleObject(rend, pass, lightScissoringClipping, doLightIteration);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1renderSingleObject_1CRenderable_1CPass_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderSingleObject_CRenderable_CPass_ev_bool_ev_bool_callback", "(JJZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderSingleObject_1CRenderable_1CPass_1ev_1bool_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jboolean lightScissoringClipping_j, jboolean doLightIteration_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::renderSingleObject(rend, pass, lightScissoringClipping, doLightIteration);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createAutoParamDataSource_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CAutoParamDataSource* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createAutoParamDataSource();
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CAutoParamDataSource* __values1 = pObjectX->createAutoParamDataSource();
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createAutoParamDataSource_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createAutoParamDataSource_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createAutoParamDataSource_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createAutoParamDataSource_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CAutoParamDataSource* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createAutoParamDataSource();
				if(__values1 != NULL) {					((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
				}				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getAutoParamDataSource_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CAutoParamDataSource* __values1 = pObjectX->getAutoParamDataSource();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_findLightsAffectingFrustum_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong camera_j)
			{
				const EarthView::World::Graphic::CCamera *camera = (const EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::findLightsAffectingFrustum(camera);
				}
				else
				{
					pObjectX->findLightsAffectingFrustum(camera);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1findLightsAffectingFrustum_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_findLightsAffectingFrustum_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"findLightsAffectingFrustum_CCamera_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_findLightsAffectingFrustum_1CCamera_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong camera_j)
			{
				const EarthView::World::Graphic::CCamera *camera = (const EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::findLightsAffectingFrustum(camera);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_initShadowVolumeMaterials_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::initShadowVolumeMaterials();
				}
				else
				{
					pObjectX->initShadowVolumeMaterials();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1initShadowVolumeMaterials_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_initShadowVolumeMaterials_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"initShadowVolumeMaterials_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_initShadowVolumeMaterials_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::initShadowVolumeMaterials();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_ensureShadowTexturesCreated_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::ensureShadowTexturesCreated();
				}
				else
				{
					pObjectX->ensureShadowTexturesCreated();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1ensureShadowTexturesCreated_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_ensureShadowTexturesCreated_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"ensureShadowTexturesCreated_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_ensureShadowTexturesCreated_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::ensureShadowTexturesCreated();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyShadowTextures_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyShadowTextures();
				}
				else
				{
					pObjectX->destroyShadowTextures();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyShadowTextures_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyShadowTextures_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyShadowTextures_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyShadowTextures_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyShadowTextures();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_prepareShadowTextures_1CCamera_1CViewport_1LightList(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j, jlong vp_j, jlong lightList_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Graphic::LightList *lightList = (const EarthView::World::Graphic::LightList*) lightList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::prepareShadowTextures(cam, vp, lightList);
				}
				else
				{
					pObjectX->prepareShadowTextures(cam, vp, lightList);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1prepareShadowTextures_1CCamera_1CViewport_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_prepareShadowTextures_CCamera_CViewport_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"prepareShadowTextures_CCamera_CViewport_LightList_callback", "(JJJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_prepareShadowTextures_1CCamera_1CViewport_1LightList_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j, jlong vp_j, jlong lightList_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Graphic::LightList *lightList = (const EarthView::World::Graphic::LightList*) lightList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::prepareShadowTextures(cam, vp, lightList);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_prepareShadowTextures_1CCamera_1CViewport(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j, jlong vp_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::prepareShadowTextures(cam, vp);
				}
				else
				{
					pObjectX->prepareShadowTextures(cam, vp);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1prepareShadowTextures_1CCamera_1CViewport(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_prepareShadowTextures_CCamera_CViewport_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"prepareShadowTextures_CCamera_CViewport_callback", "(JJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_prepareShadowTextures_1CCamera_1CViewport_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j, jlong vp_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::prepareShadowTextures(cam, vp);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setImageDefaultMaterial_1CMaterialPtr(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong matPtr_j)
			{
				const EarthView::World::Graphic::CMaterialPtr &matPtr = *(EarthView::World::Graphic::CMaterialPtr*) matPtr_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setImageDefaultMaterial(matPtr);
				}
				else
				{
					pObjectX->setImageDefaultMaterial(matPtr);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setImageDefaultMaterial_1CMaterialPtr(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setImageDefaultMaterial_CMaterialPtr_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setImageDefaultMaterial_CMaterialPtr_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setImageDefaultMaterial_1CMaterialPtr_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong matPtr_j)
			{
				const EarthView::World::Graphic::CMaterialPtr &matPtr = *(EarthView::World::Graphic::CMaterialPtr*) matPtr_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setImageDefaultMaterial(matPtr);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setImageUseDefaultMaterial_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean useDefaultMat_j)
			{
				const ev_bool useDefaultMat = (const ev_bool) useDefaultMat_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setImageUseDefaultMaterial(useDefaultMat);
				}
				else
				{
					pObjectX->setImageUseDefaultMaterial(useDefaultMat);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setImageUseDefaultMaterial_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setImageUseDefaultMaterial_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setImageUseDefaultMaterial_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setImageUseDefaultMaterial_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean useDefaultMat_j)
			{
				const ev_bool useDefaultMat = (const ev_bool) useDefaultMat_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setImageUseDefaultMaterial(useDefaultMat);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSunPosition_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Spatial::Math::CVector3 __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSunPosition();
					EarthView::World::Spatial::Math::CVector3 *returnvalues = new EarthView::World::Spatial::Math::CVector3(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
				else
				{
					EarthView::World::Spatial::Math::CVector3 __values1 = pObjectX->getSunPosition();
					EarthView::World::Spatial::Math::CVector3 *returnvalues = new EarthView::World::Spatial::Math::CVector3(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSunPosition_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSunPosition_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSunPosition_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSunPosition_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Spatial::Math::CVector3 __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSunPosition();
				EarthView::World::Spatial::Math::CVector3 *returnvalues = new EarthView::World::Spatial::Math::CVector3(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setAtmosphereVisible_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean visible_j)
			{
				const ev_bool visible = (const ev_bool) visible_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setAtmosphereVisible(visible);
				}
				else
				{
					pObjectX->setAtmosphereVisible(visible);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setAtmosphereVisible_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setAtmosphereVisible_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setAtmosphereVisible_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setAtmosphereVisible_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean visible_j)
			{
				const ev_bool visible = (const ev_bool) visible_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setAtmosphereVisible(visible);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_storeAtmosphereVisibleState_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::storeAtmosphereVisibleState();
				}
				else
				{
					pObjectX->storeAtmosphereVisibleState();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1storeAtmosphereVisibleState_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_storeAtmosphereVisibleState_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"storeAtmosphereVisibleState_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_storeAtmosphereVisibleState_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::storeAtmosphereVisibleState();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_restoreAtmosphereVisibleState_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::restoreAtmosphereVisibleState();
				}
				else
				{
					pObjectX->restoreAtmosphereVisibleState();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1restoreAtmosphereVisibleState_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_restoreAtmosphereVisibleState_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"restoreAtmosphereVisibleState_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_restoreAtmosphereVisibleState_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::restoreAtmosphereVisibleState();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSunVisible_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean flag_j)
			{
				ev_bool flag = (ev_bool) flag_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSunVisible(flag);
				}
				else
				{
					pObjectX->setSunVisible(flag);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSunVisible_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSunVisible_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSunVisible_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSunVisible_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean flag_j)
			{
				ev_bool flag = (ev_bool) flag_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSunVisible(flag);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024RenderContext_get_1renderQueue_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::RenderContext *pObjectX = (EarthView::World::Graphic::CSceneManager::RenderContext*)pObjXXXX;
				jlong __values1_j = (jlong)(pObjectX->renderQueue);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024RenderContext_set_1renderQueue_1CRenderQueue(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::RenderContext *pObjectX = (EarthView::World::Graphic::CSceneManager::RenderContext*)pObjXXXX;
				pObjectX->renderQueue = (EarthView::World::Graphic::CRenderQueue*) __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024RenderContext_get_1viewport_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::RenderContext *pObjectX = (EarthView::World::Graphic::CSceneManager::RenderContext*)pObjXXXX;
				jlong __values1_j = (jlong)(pObjectX->viewport);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024RenderContext_set_1viewport_1CViewport(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::RenderContext *pObjectX = (EarthView::World::Graphic::CSceneManager::RenderContext*)pObjXXXX;
				pObjectX->viewport = (EarthView::World::Graphic::CViewport*) __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024RenderContext_get_1camera_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::RenderContext *pObjectX = (EarthView::World::Graphic::CSceneManager::RenderContext*)pObjXXXX;
				jlong __values1_j = (jlong)(pObjectX->camera);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024RenderContext_set_1camera_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::RenderContext *pObjectX = (EarthView::World::Graphic::CSceneManager::RenderContext*)pObjXXXX;
				pObjectX->camera = (EarthView::World::Graphic::CCamera*) __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024RenderContext_get_1activeChain_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::RenderContext *pObjectX = (EarthView::World::Graphic::CSceneManager::RenderContext*)pObjXXXX;
				jlong __values1_j = (jlong)(pObjectX->activeChain);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024RenderContext_set_1activeChain_1CCompositorChain(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::RenderContext *pObjectX = (EarthView::World::Graphic::CSceneManager::RenderContext*)pObjXXXX;
				pObjectX->activeChain = (EarthView::World::Graphic::CCompositorChain*) __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024RenderContext_get_1rsContext_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::RenderContext *pObjectX = (EarthView::World::Graphic::CSceneManager::RenderContext*)pObjXXXX;
				jlong __values1_j = (jlong)(pObjectX->rsContext);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024RenderContext_set_1rsContext_1RenderSystemContext(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::RenderContext *pObjectX = (EarthView::World::Graphic::CSceneManager::RenderContext*)pObjXXXX;
				pObjectX->rsContext = (EarthView::World::Graphic::CRenderSystem::RenderSystemContext*) __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager__1pauseRendering_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CSceneManager::RenderContext* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::_pauseRendering();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CSceneManager::RenderContext* __values1 = pObjectX->_pauseRendering();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1pauseRendering_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__pauseRendering_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_pauseRendering_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager__1pauseRendering_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CSceneManager::RenderContext* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::_pauseRendering();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1resumeRendering_1RenderContext(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong context_j)
			{
				EarthView::World::Graphic::CSceneManager::RenderContext *context = (EarthView::World::Graphic::CSceneManager::RenderContext*) context_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_resumeRendering(context);
				}
				else
				{
					pObjectX->_resumeRendering(context);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1resumeRendering_1RenderContext(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__resumeRendering_RenderContext_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_resumeRendering_RenderContext_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1resumeRendering_1RenderContext_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong context_j)
			{
				EarthView::World::Graphic::CSceneManager::RenderContext *context = (EarthView::World::Graphic::CSceneManager::RenderContext*) context_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_resumeRendering(context);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowCasterList_push_1back_1CShadowCaster(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ref_t_j)
			{
				EarthView::World::Graphic::CShadowCaster *&ref_t = *(EarthView::World::Graphic::CShadowCaster**) ref_t_j;
				EarthView::World::Graphic::CSceneManager::ShadowCasterList *pObjectX = (EarthView::World::Graphic::CSceneManager::ShadowCasterList*) pObjXXXX;
				pObjectX->push_back(ref_t);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowCasterList_remove_1ev_1size_1t(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pos_j)
			{
				ev_size_t pos = (ev_size_t) pos_j;
				EarthView::World::Graphic::CSceneManager::ShadowCasterList *pObjectX = (EarthView::World::Graphic::CSceneManager::ShadowCasterList*) pObjXXXX;
				pObjectX->remove(pos);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowCasterList_empty_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager::ShadowCasterList *pObjectX = (EarthView::World::Graphic::CSceneManager::ShadowCasterList*) pObjXXXX;
				ev_bool __values1 = pObjectX->empty();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowCasterList_OperatorIndex_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong n_j )
			{
				EarthView::World::Graphic::CSceneManager::ShadowCasterList& pObjectX = *(EarthView::World::Graphic::CSceneManager::ShadowCasterList*) pObjXXXX;
				ev_size_t n = (ev_size_t) n_j;
				EarthView::World::Graphic::CShadowCaster*& __values1 = pObjectX[n];
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowCasterList_at_1ev_1size_1t(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong n_j)
			{
				ev_size_t n = (ev_size_t) n_j;
				EarthView::World::Graphic::CSceneManager::ShadowCasterList *pObjectX = (EarthView::World::Graphic::CSceneManager::ShadowCasterList*) pObjXXXX;
				EarthView::World::Graphic::CShadowCaster*& __values1 = pObjectX->at(n);
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowCasterList_size_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager::ShadowCasterList *pObjectX = (EarthView::World::Graphic::CSceneManager::ShadowCasterList*) pObjXXXX;
				ev_size_t __values1 = pObjectX->size();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowCasterList_resize_1ev_1size_1t(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong newSize_j)
			{
				ev_size_t newSize = (ev_size_t) newSize_j;
				EarthView::World::Graphic::CSceneManager::ShadowCasterList *pObjectX = (EarthView::World::Graphic::CSceneManager::ShadowCasterList*) pObjXXXX;
				pObjectX->resize(newSize);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowCasterList_reserve_1ev_1size_1t(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong count_j)
			{
				ev_size_t count = (ev_size_t) count_j;
				EarthView::World::Graphic::CSceneManager::ShadowCasterList *pObjectX = (EarthView::World::Graphic::CSceneManager::ShadowCasterList*) pObjXXXX;
				pObjectX->reserve(count);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowCasterList_clear_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::ShadowCasterList *pObjectX = (EarthView::World::Graphic::CSceneManager::ShadowCasterList*) pObjXXXX;
				pObjectX->clear();
			}
			class JCShadowCasterSceneQueryListenerProxy : public EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListener
			{
			 private:
				EarthView::World::Core::ev_string m_queryResult_CMovableObject_callback;
				EarthView::World::Core::ev_string m_queryResult_CMovableObject_IntVector_callback;
				EarthView::World::Core::ev_string m_queryResult_WorldFragment_callback;
			public:
				JCShadowCasterSceneQueryListenerProxy(EarthView::World::Core::CNameValuePairList *pList) : CShadowCasterSceneQueryListener(pList)
				{
				}
				ev_void unRegisterJavaReference()
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
					if(__gr != NULL)
					{
						delete __gr;
						this->registerJavaReference(NULL);
					}
				}
			public:
				void register_queryResult_CMovableObject_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_queryResult_CMovableObject_callback = __method;
				}
				void register_queryResult_CMovableObject_IntVector_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_queryResult_CMovableObject_IntVector_callback = __method;
				}
				void register_queryResult_WorldFragment_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_queryResult_WorldFragment_callback = __method;
				}
				virtual ev_bool queryResult(EarthView::World::Graphic::CMovableObject* object)
				{
					if (this->_gRef != NULL && this->m_queryResult_CMovableObject_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong object_j = (jlong) object;
						jmethodID __method = __gr->getMethod("queryResult_CMovableObject_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , object_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CShadowCasterSceneQueryListener::queryResult(object);
					}
				}
				virtual ev_bool queryResult(EarthView::World::Graphic::CSceneQuery::WorldFragment* fragment)
				{
					if (this->_gRef != NULL && this->m_queryResult_WorldFragment_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong fragment_j = (jlong) fragment;
						jmethodID __method = __gr->getMethod("queryResult_WorldFragment_callback");
						jboolean __values1_j = (jboolean)__env->CallBooleanMethod(__obj, __method , fragment_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						ev_bool __values1 = (ev_bool) __values1_j;
						return __values1;
					}
					else
					{
						return this->CShadowCasterSceneQueryListener::queryResult(fragment);
					}
				}
			};
			REGISTER_FACTORY_CLASS(JCShadowCasterSceneQueryListenerProxy);
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowCasterSceneQueryListener_prepare_1ev_1bool_1PlaneBoundedVolumeList_1CLight_1CCamera_1ShadowCasterList_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean lightInFrustum_j, jlong lightClipVolumes_j, jlong light_j, jlong cam_j, jlong casterList_j, jdouble farDistSquared_j)
			{
				ev_bool lightInFrustum = (ev_bool) lightInFrustum_j;
				const EarthView::World::Spatial::Math::PlaneBoundedVolumeList *lightClipVolumes = (const EarthView::World::Spatial::Math::PlaneBoundedVolumeList*) lightClipVolumes_j;
				const EarthView::World::Graphic::CLight *light = (const EarthView::World::Graphic::CLight*) light_j;
				const EarthView::World::Graphic::CCamera *cam = (const EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CSceneManager::ShadowCasterList *casterList = (EarthView::World::Graphic::CSceneManager::ShadowCasterList*) casterList_j;
				Real farDistSquared = (Real) farDistSquared_j;
				EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListener*) pObjXXXX;
				pObjectX->prepare(lightInFrustum, lightClipVolumes, light, cam, casterList, farDistSquared);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowCasterSceneQueryListener_queryResult_1CMovableObject(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong object_j)
			{
				EarthView::World::Graphic::CMovableObject *object = (EarthView::World::Graphic::CMovableObject*) object_j;
				EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListener*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCShadowCasterSceneQueryListenerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListener::queryResult(object);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->queryResult(object);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowCasterSceneQueryListener_register_1queryResult_1CMovableObject(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCShadowCasterSceneQueryListenerProxy *pObjectX = (JCShadowCasterSceneQueryListenerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_queryResult_CMovableObject_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"queryResult_CMovableObject_callback", "(J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowCasterSceneQueryListener_queryResult_1CMovableObject_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong object_j)
			{
				EarthView::World::Graphic::CMovableObject *object = (EarthView::World::Graphic::CMovableObject*) object_j;
				EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListener*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListener::queryResult(object);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowCasterSceneQueryListener_queryResult_1WorldFragment(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong fragment_j)
			{
				EarthView::World::Graphic::CSceneQuery::WorldFragment *fragment = (EarthView::World::Graphic::CSceneQuery::WorldFragment*) fragment_j;
				EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListener*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCShadowCasterSceneQueryListenerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListener::queryResult(fragment);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->queryResult(fragment);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowCasterSceneQueryListener_register_1queryResult_1WorldFragment(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCShadowCasterSceneQueryListenerProxy *pObjectX = (JCShadowCasterSceneQueryListenerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_queryResult_WorldFragment_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"queryResult_WorldFragment_callback", "(J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowCasterSceneQueryListener_queryResult_1WorldFragment_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong fragment_j)
			{
				EarthView::World::Graphic::CSceneQuery::WorldFragment *fragment = (EarthView::World::Graphic::CSceneQuery::WorldFragment*) fragment_j;
				EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListener *pObjectX = (EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListener*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListener::queryResult(fragment);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024ShadowCasterSceneQueryListener_register_1queryResult_1CMovableObject_1IntVector(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCShadowCasterSceneQueryListenerProxy *pObjectX = (JCShadowCasterSceneQueryListenerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_queryResult_CMovableObject_IntVector_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"queryResult_CMovableObject_IntVector_callback", "(JJ)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderShadowVolumesToStencil_1CLight_1CCamera_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong light_j, jlong cam_j, jboolean calcScissor_j)
			{
				const EarthView::World::Graphic::CLight *light = (const EarthView::World::Graphic::CLight*) light_j;
				const EarthView::World::Graphic::CCamera *cam = (const EarthView::World::Graphic::CCamera*) cam_j;
				ev_bool calcScissor = (ev_bool) calcScissor_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::renderShadowVolumesToStencil(light, cam, calcScissor);
				}
				else
				{
					pObjectX->renderShadowVolumesToStencil(light, cam, calcScissor);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1renderShadowVolumesToStencil_1CLight_1CCamera_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderShadowVolumesToStencil_CLight_CCamera_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderShadowVolumesToStencil_CLight_CCamera_ev_bool_callback", "(JJZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderShadowVolumesToStencil_1CLight_1CCamera_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong light_j, jlong cam_j, jboolean calcScissor_j)
			{
				const EarthView::World::Graphic::CLight *light = (const EarthView::World::Graphic::CLight*) light_j;
				const EarthView::World::Graphic::CCamera *cam = (const EarthView::World::Graphic::CCamera*) cam_j;
				ev_bool calcScissor = (ev_bool) calcScissor_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::renderShadowVolumesToStencil(light, cam, calcScissor);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowVolumeStencilState_1ev_1bool_1ev_1bool_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean secondpass_j, jboolean zfail_j, jboolean twosided_j)
			{
				ev_bool secondpass = (ev_bool) secondpass_j;
				ev_bool zfail = (ev_bool) zfail_j;
				ev_bool twosided = (ev_bool) twosided_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowVolumeStencilState(secondpass, zfail, twosided);
				}
				else
				{
					pObjectX->setShadowVolumeStencilState(secondpass, zfail, twosided);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowVolumeStencilState_1ev_1bool_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowVolumeStencilState_ev_bool_ev_bool_ev_bool_callback", "(ZZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowVolumeStencilState_1ev_1bool_1ev_1bool_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean secondpass_j, jboolean zfail_j, jboolean twosided_j)
			{
				ev_bool secondpass = (ev_bool) secondpass_j;
				ev_bool zfail = (ev_bool) zfail_j;
				ev_bool twosided = (ev_bool) twosided_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowVolumeStencilState(secondpass, zfail, twosided);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_findShadowCastersForLight_1CLight_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong light_j, jlong camera_j)
			{
				const EarthView::World::Graphic::CLight *light = (const EarthView::World::Graphic::CLight*) light_j;
				const EarthView::World::Graphic::CCamera *camera = (const EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					const EarthView::World::Graphic::CSceneManager::ShadowCasterList& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::findShadowCastersForLight(light, camera);
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
				else
				{
					const EarthView::World::Graphic::CSceneManager::ShadowCasterList& __values1 = pObjectX->findShadowCastersForLight(light, camera);
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1findShadowCastersForLight_1CLight_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_findShadowCastersForLight_CLight_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"findShadowCastersForLight_CLight_CCamera_callback", "(JJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_findShadowCastersForLight_1CLight_1CCamera_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong light_j, jlong camera_j)
			{
				const EarthView::World::Graphic::CLight *light = (const EarthView::World::Graphic::CLight*) light_j;
				const EarthView::World::Graphic::CCamera *camera = (const EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::CSceneManager::ShadowCasterList& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::findShadowCastersForLight(light, camera);
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderBasicQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pGroup_j, jint om_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *pGroup = (EarthView::World::Graphic::CRenderQueueGroup*) pGroup_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::renderBasicQueueGroupObjects(pGroup, om);
				}
				else
				{
					pObjectX->renderBasicQueueGroupObjects(pGroup, om);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1renderBasicQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderBasicQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderBasicQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pGroup_j, jint om_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *pGroup = (EarthView::World::Graphic::CRenderQueueGroup*) pGroup_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::renderBasicQueueGroupObjects(pGroup, om);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderAdditiveStencilShadowedQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong group_j, jint om_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *group = (EarthView::World::Graphic::CRenderQueueGroup*) group_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::renderAdditiveStencilShadowedQueueGroupObjects(group, om);
				}
				else
				{
					pObjectX->renderAdditiveStencilShadowedQueueGroupObjects(group, om);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1renderAdditiveStencilShadowedQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderAdditiveStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderAdditiveStencilShadowedQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong group_j, jint om_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *group = (EarthView::World::Graphic::CRenderQueueGroup*) group_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::renderAdditiveStencilShadowedQueueGroupObjects(group, om);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderModulativeStencilShadowedQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong group_j, jint om_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *group = (EarthView::World::Graphic::CRenderQueueGroup*) group_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::renderModulativeStencilShadowedQueueGroupObjects(group, om);
				}
				else
				{
					pObjectX->renderModulativeStencilShadowedQueueGroupObjects(group, om);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1renderModulativeStencilShadowedQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderModulativeStencilShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderModulativeStencilShadowedQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong group_j, jint om_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *group = (EarthView::World::Graphic::CRenderQueueGroup*) group_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::renderModulativeStencilShadowedQueueGroupObjects(group, om);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderTextureShadowCasterQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong group_j, jint om_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *group = (EarthView::World::Graphic::CRenderQueueGroup*) group_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::renderTextureShadowCasterQueueGroupObjects(group, om);
				}
				else
				{
					pObjectX->renderTextureShadowCasterQueueGroupObjects(group, om);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1renderTextureShadowCasterQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderTextureShadowCasterQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderTextureShadowCasterQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong group_j, jint om_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *group = (EarthView::World::Graphic::CRenderQueueGroup*) group_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::renderTextureShadowCasterQueueGroupObjects(group, om);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderTextureShadowReceiverQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong group_j, jint om_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *group = (EarthView::World::Graphic::CRenderQueueGroup*) group_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::renderTextureShadowReceiverQueueGroupObjects(group, om);
				}
				else
				{
					pObjectX->renderTextureShadowReceiverQueueGroupObjects(group, om);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1renderTextureShadowReceiverQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderTextureShadowReceiverQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderTextureShadowReceiverQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong group_j, jint om_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *group = (EarthView::World::Graphic::CRenderQueueGroup*) group_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::renderTextureShadowReceiverQueueGroupObjects(group, om);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderModulativeTextureShadowedQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong group_j, jint om_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *group = (EarthView::World::Graphic::CRenderQueueGroup*) group_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::renderModulativeTextureShadowedQueueGroupObjects(group, om);
				}
				else
				{
					pObjectX->renderModulativeTextureShadowedQueueGroupObjects(group, om);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1renderModulativeTextureShadowedQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderModulativeTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderModulativeTextureShadowedQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong group_j, jint om_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *group = (EarthView::World::Graphic::CRenderQueueGroup*) group_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::renderModulativeTextureShadowedQueueGroupObjects(group, om);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderAdditiveTextureShadowedQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong group_j, jint om_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *group = (EarthView::World::Graphic::CRenderQueueGroup*) group_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::renderAdditiveTextureShadowedQueueGroupObjects(group, om);
				}
				else
				{
					pObjectX->renderAdditiveTextureShadowedQueueGroupObjects(group, om);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1renderAdditiveTextureShadowedQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderAdditiveTextureShadowedQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderAdditiveTextureShadowedQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong group_j, jint om_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *group = (EarthView::World::Graphic::CRenderQueueGroup*) group_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::renderAdditiveTextureShadowedQueueGroupObjects(group, om);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderObjects_1CQueuedRenderableCollection_1OrganisationMode_1ev_1bool_1ev_1bool_1LightList(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong objs_j, jint om_j, jboolean lightScissoringClipping_j, jboolean doLightIteration_j, jlong manualLightList_j)
			{
				const EarthView::World::Graphic::CQueuedRenderableCollection &objs = *(EarthView::World::Graphic::CQueuedRenderableCollection*) objs_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				const EarthView::World::Graphic::LightList *manualLightList = (const EarthView::World::Graphic::LightList*) manualLightList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::renderObjects(objs, om, lightScissoringClipping, doLightIteration, manualLightList);
				}
				else
				{
					pObjectX->renderObjects(objs, om, lightScissoringClipping, doLightIteration, manualLightList);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1renderObjects_1CQueuedRenderableCollection_1OrganisationMode_1ev_1bool_1ev_1bool_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback", "(JIZZJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderObjects_1CQueuedRenderableCollection_1OrganisationMode_1ev_1bool_1ev_1bool_1LightList_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong objs_j, jint om_j, jboolean lightScissoringClipping_j, jboolean doLightIteration_j, jlong manualLightList_j)
			{
				const EarthView::World::Graphic::CQueuedRenderableCollection &objs = *(EarthView::World::Graphic::CQueuedRenderableCollection*) objs_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				const EarthView::World::Graphic::LightList *manualLightList = (const EarthView::World::Graphic::LightList*) manualLightList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::renderObjects(objs, om, lightScissoringClipping, doLightIteration, manualLightList);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderObjects_1CQueuedRenderableCollection_1OrganisationMode_1ev_1bool_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong objs_j, jint om_j, jboolean lightScissoringClipping_j, jboolean doLightIteration_j)
			{
				const EarthView::World::Graphic::CQueuedRenderableCollection &objs = *(EarthView::World::Graphic::CQueuedRenderableCollection*) objs_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::renderObjects(objs, om, lightScissoringClipping, doLightIteration);
				}
				else
				{
					pObjectX->renderObjects(objs, om, lightScissoringClipping, doLightIteration);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1renderObjects_1CQueuedRenderableCollection_1OrganisationMode_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback", "(JIZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderObjects_1CQueuedRenderableCollection_1OrganisationMode_1ev_1bool_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong objs_j, jint om_j, jboolean lightScissoringClipping_j, jboolean doLightIteration_j)
			{
				const EarthView::World::Graphic::CQueuedRenderableCollection &objs = *(EarthView::World::Graphic::CQueuedRenderableCollection*) objs_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::renderObjects(objs, om, lightScissoringClipping, doLightIteration);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderTransparentShadowCasterObjects_1CQueuedRenderableCollection_1OrganisationMode_1ev_1bool_1ev_1bool_1LightList(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong objs_j, jint om_j, jboolean lightScissoringClipping_j, jboolean doLightIteration_j, jlong manualLightList_j)
			{
				const EarthView::World::Graphic::CQueuedRenderableCollection &objs = *(EarthView::World::Graphic::CQueuedRenderableCollection*) objs_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				const EarthView::World::Graphic::LightList *manualLightList = (const EarthView::World::Graphic::LightList*) manualLightList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::renderTransparentShadowCasterObjects(objs, om, lightScissoringClipping, doLightIteration, manualLightList);
				}
				else
				{
					pObjectX->renderTransparentShadowCasterObjects(objs, om, lightScissoringClipping, doLightIteration, manualLightList);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1renderTransparentShadowCasterObjects_1CQueuedRenderableCollection_1OrganisationMode_1ev_1bool_1ev_1bool_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_callback", "(JIZZJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderTransparentShadowCasterObjects_1CQueuedRenderableCollection_1OrganisationMode_1ev_1bool_1ev_1bool_1LightList_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong objs_j, jint om_j, jboolean lightScissoringClipping_j, jboolean doLightIteration_j, jlong manualLightList_j)
			{
				const EarthView::World::Graphic::CQueuedRenderableCollection &objs = *(EarthView::World::Graphic::CQueuedRenderableCollection*) objs_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				const EarthView::World::Graphic::LightList *manualLightList = (const EarthView::World::Graphic::LightList*) manualLightList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::renderTransparentShadowCasterObjects(objs, om, lightScissoringClipping, doLightIteration, manualLightList);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderTransparentShadowCasterObjects_1CQueuedRenderableCollection_1OrganisationMode_1ev_1bool_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong objs_j, jint om_j, jboolean lightScissoringClipping_j, jboolean doLightIteration_j)
			{
				const EarthView::World::Graphic::CQueuedRenderableCollection &objs = *(EarthView::World::Graphic::CQueuedRenderableCollection*) objs_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::renderTransparentShadowCasterObjects(objs, om, lightScissoringClipping, doLightIteration);
				}
				else
				{
					pObjectX->renderTransparentShadowCasterObjects(objs, om, lightScissoringClipping, doLightIteration);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1renderTransparentShadowCasterObjects_1CQueuedRenderableCollection_1OrganisationMode_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"renderTransparentShadowCasterObjects_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_callback", "(JIZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_renderTransparentShadowCasterObjects_1CQueuedRenderableCollection_1OrganisationMode_1ev_1bool_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong objs_j, jint om_j, jboolean lightScissoringClipping_j, jboolean doLightIteration_j)
			{
				const EarthView::World::Graphic::CQueuedRenderableCollection &objs = *(EarthView::World::Graphic::CQueuedRenderableCollection*) objs_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::renderTransparentShadowCasterObjects(objs, om, lightScissoringClipping, doLightIteration);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_updateRenderQueueSplitOptions_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::updateRenderQueueSplitOptions();
				}
				else
				{
					pObjectX->updateRenderQueueSplitOptions();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1updateRenderQueueSplitOptions_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_updateRenderQueueSplitOptions_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"updateRenderQueueSplitOptions_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_updateRenderQueueSplitOptions_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::updateRenderQueueSplitOptions();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_updateRenderQueueGroupSplitOptions_1CRenderQueueGroup_1ev_1bool_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong group_j, jboolean suppressShadows_j, jboolean suppressRenderState_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *group = (EarthView::World::Graphic::CRenderQueueGroup*) group_j;
				ev_bool suppressShadows = (ev_bool) suppressShadows_j;
				ev_bool suppressRenderState = (ev_bool) suppressRenderState_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::updateRenderQueueGroupSplitOptions(group, suppressShadows, suppressRenderState);
				}
				else
				{
					pObjectX->updateRenderQueueGroupSplitOptions(group, suppressShadows, suppressRenderState);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1updateRenderQueueGroupSplitOptions_1CRenderQueueGroup_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"updateRenderQueueGroupSplitOptions_CRenderQueueGroup_ev_bool_ev_bool_callback", "(JZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_updateRenderQueueGroupSplitOptions_1CRenderQueueGroup_1ev_1bool_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong group_j, jboolean suppressShadows_j, jboolean suppressRenderState_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *group = (EarthView::World::Graphic::CRenderQueueGroup*) group_j;
				ev_bool suppressShadows = (ev_bool) suppressShadows_j;
				ev_bool suppressRenderState = (ev_bool) suppressRenderState_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::updateRenderQueueGroupSplitOptions(group, suppressShadows, suppressRenderState);
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_buildAndSetScissor_1LightList_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ll_j, jlong cam_j)
			{
				const EarthView::World::Graphic::LightList &ll = *(EarthView::World::Graphic::LightList*) ll_j;
				const EarthView::World::Graphic::CCamera *cam = (const EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::ClipResult __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::buildAndSetScissor(ll, cam);
					jint __values1_j = (jint) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::ClipResult __values1 = pObjectX->buildAndSetScissor(ll, cam);
					jint __values1_j = (jint) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1buildAndSetScissor_1LightList_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_buildAndSetScissor_LightList_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"buildAndSetScissor_LightList_CCamera_callback", "(JJ)I");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_buildAndSetScissor_1LightList_1CCamera_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ll_j, jlong cam_j)
			{
				const EarthView::World::Graphic::LightList &ll = *(EarthView::World::Graphic::LightList*) ll_j;
				const EarthView::World::Graphic::CCamera *cam = (const EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::ClipResult __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::buildAndSetScissor(ll, cam);
				jint __values1_j = (jint) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_buildScissor_1CLight_1CCamera_1RealRect(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong l_j, jlong cam_j, jlong rect_j)
			{
				const EarthView::World::Graphic::CLight *l = (const EarthView::World::Graphic::CLight*) l_j;
				const EarthView::World::Graphic::CCamera *cam = (const EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::RealRect &rect = *(EarthView::World::Graphic::RealRect*) rect_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::buildScissor(l, cam, rect);
				}
				else
				{
					pObjectX->buildScissor(l, cam, rect);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1buildScissor_1CLight_1CCamera_1RealRect(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_buildScissor_CLight_CCamera_RealRect_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"buildScissor_CLight_CCamera_RealRect_callback", "(JJJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_buildScissor_1CLight_1CCamera_1RealRect_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong l_j, jlong cam_j, jlong rect_j)
			{
				const EarthView::World::Graphic::CLight *l = (const EarthView::World::Graphic::CLight*) l_j;
				const EarthView::World::Graphic::CCamera *cam = (const EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::RealRect &rect = *(EarthView::World::Graphic::RealRect*) rect_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::buildScissor(l, cam, rect);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_resetScissor_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::resetScissor();
				}
				else
				{
					pObjectX->resetScissor();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1resetScissor_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_resetScissor_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"resetScissor_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_resetScissor_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::resetScissor();
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_buildAndSetLightClip_1LightList(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ll_j)
			{
				const EarthView::World::Graphic::LightList &ll = *(EarthView::World::Graphic::LightList*) ll_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::ClipResult __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::buildAndSetLightClip(ll);
					jint __values1_j = (jint) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::ClipResult __values1 = pObjectX->buildAndSetLightClip(ll);
					jint __values1_j = (jint) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1buildAndSetLightClip_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_buildAndSetLightClip_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"buildAndSetLightClip_LightList_callback", "(J)I");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_buildAndSetLightClip_1LightList_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ll_j)
			{
				const EarthView::World::Graphic::LightList &ll = *(EarthView::World::Graphic::LightList*) ll_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::ClipResult __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::buildAndSetLightClip(ll);
				jint __values1_j = (jint) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_buildLightClip_1CLight_1PlaneList(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong l_j, jlong planes_j)
			{
				const EarthView::World::Graphic::CLight *l = (const EarthView::World::Graphic::CLight*) l_j;
				EarthView::World::Spatial::Math::PlaneList &planes = *(EarthView::World::Spatial::Math::PlaneList*) planes_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::buildLightClip(l, planes);
				}
				else
				{
					pObjectX->buildLightClip(l, planes);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1buildLightClip_1CLight_1PlaneList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_buildLightClip_CLight_PlaneList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"buildLightClip_CLight_PlaneList_callback", "(JJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_buildLightClip_1CLight_1PlaneList_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong l_j, jlong planes_j)
			{
				const EarthView::World::Graphic::CLight *l = (const EarthView::World::Graphic::CLight*) l_j;
				EarthView::World::Spatial::Math::PlaneList &planes = *(EarthView::World::Spatial::Math::PlaneList*) planes_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::buildLightClip(l, planes);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_resetLightClip_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::resetLightClip();
				}
				else
				{
					pObjectX->resetLightClip();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1resetLightClip_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_resetLightClip_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"resetLightClip_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_resetLightClip_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::resetLightClip();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_checkCachedLightClippingInfo_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::checkCachedLightClippingInfo();
				}
				else
				{
					pObjectX->checkCachedLightClippingInfo();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1checkCachedLightClippingInfo_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_checkCachedLightClippingInfo_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"checkCachedLightClippingInfo_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_checkCachedLightClippingInfo_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::checkCachedLightClippingInfo();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_useLights_1LightList_1ev_1uint16(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong lights_j, jint limit_j)
			{
				const EarthView::World::Graphic::LightList &lights = *(EarthView::World::Graphic::LightList*) lights_j;
				ev_uint16 limit = (ev_uint16) limit_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::useLights(lights, limit);
				}
				else
				{
					pObjectX->useLights(lights, limit);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1useLights_1LightList_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_useLights_LightList_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"useLights_LightList_ev_uint16_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_useLights_1LightList_1ev_1uint16_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong lights_j, jint limit_j)
			{
				const EarthView::World::Graphic::LightList &lights = *(EarthView::World::Graphic::LightList*) lights_j;
				ev_uint16 limit = (ev_uint16) limit_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::useLights(lights, limit);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setViewMatrix_1CMatrix4(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong m_j)
			{
				const EarthView::World::Spatial::Math::CMatrix4 &m = *(EarthView::World::Spatial::Math::CMatrix4*) m_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setViewMatrix(m);
				}
				else
				{
					pObjectX->setViewMatrix(m);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setViewMatrix_1CMatrix4(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setViewMatrix_CMatrix4_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setViewMatrix_CMatrix4_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setViewMatrix_1CMatrix4_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong m_j)
			{
				const EarthView::World::Spatial::Math::CMatrix4 &m = *(EarthView::World::Spatial::Math::CMatrix4*) m_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setViewMatrix(m);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_useLightsGpuProgram_1CPass_1LightList(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j, jlong lights_j)
			{
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				const EarthView::World::Graphic::LightList *lights = (const EarthView::World::Graphic::LightList*) lights_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::useLightsGpuProgram(pass, lights);
				}
				else
				{
					pObjectX->useLightsGpuProgram(pass, lights);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1useLightsGpuProgram_1CPass_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_useLightsGpuProgram_CPass_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"useLightsGpuProgram_CPass_LightList_callback", "(JJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_useLightsGpuProgram_1CPass_1LightList_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j, jlong lights_j)
			{
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				const EarthView::World::Graphic::LightList *lights = (const EarthView::World::Graphic::LightList*) lights_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::useLightsGpuProgram(pass, lights);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_bindGpuProgram_1CGpuProgram(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong prog_j)
			{
				EarthView::World::Graphic::CGpuProgram *prog = (EarthView::World::Graphic::CGpuProgram*) prog_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::bindGpuProgram(prog);
				}
				else
				{
					pObjectX->bindGpuProgram(prog);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1bindGpuProgram_1CGpuProgram(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_bindGpuProgram_CGpuProgram_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"bindGpuProgram_CGpuProgram_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_bindGpuProgram_1CGpuProgram_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong prog_j)
			{
				EarthView::World::Graphic::CGpuProgram *prog = (EarthView::World::Graphic::CGpuProgram*) prog_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::bindGpuProgram(prog);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_updateGpuProgramParameters_1CPass(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong p_j)
			{
				const EarthView::World::Graphic::CPass *p = (const EarthView::World::Graphic::CPass*) p_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::updateGpuProgramParameters(p);
				}
				else
				{
					pObjectX->updateGpuProgramParameters(p);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1updateGpuProgramParameters_1CPass(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_updateGpuProgramParameters_CPass_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"updateGpuProgramParameters_CPass_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_updateGpuProgramParameters_1CPass_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong p_j)
			{
				const EarthView::World::Graphic::CPass *p = (const EarthView::World::Graphic::CPass*) p_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::updateGpuProgramParameters(p);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getName_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EVString& __values1 = pObjectX->getName();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jstring JNICALL Java_com_earthview_world_graphic_SceneManager_getTypeName_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EVString __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getTypeName();
					EarthView::World::Core::ev_wstring valuesw1 = __values1;
					jstring __values1_j = __env->NewString((const jchar*)valuesw1.getString(), valuesw1.size());
					return __values1_j;
				}
				else
				{
					EVString __values1 = pObjectX->getTypeName();
					EarthView::World::Core::ev_wstring valuesw1 = __values1;
					jstring __values1_j = __env->NewString((const jchar*)valuesw1.getString(), valuesw1.size());
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getTypeName_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getTypeName_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getTypeName_void_callback", "()Ljava/lang/String;");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jstring JNICALL Java_com_earthview_world_graphic_SceneManager_getTypeName_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EVString __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getTypeName();
				EarthView::World::Core::ev_wstring valuesw1 = __values1;
				jstring __values1_j = __env->NewString((const jchar*)valuesw1.getString(), valuesw1.size());
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createCamera_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CCamera* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createCamera(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CCamera* __values1 = pObjectX->createCamera(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createCamera_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createCamera_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createCamera_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createCamera_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CCamera* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createCamera(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getCamera_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CCamera* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getCamera(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CCamera* __values1 = pObjectX->getCamera(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getCamera_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getCamera_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getCamera_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getCamera_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CCamera* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getCamera(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasCamera_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasCamera(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->hasCamera(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1hasCamera_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasCamera_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasCamera_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasCamera_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasCamera(name);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyCamera_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyCamera(cam);
				}
				else
				{
					pObjectX->destroyCamera(cam);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyCamera_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyCamera_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyCamera_CCamera_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyCamera_1CCamera_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyCamera(cam);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyCamera_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyCamera(name);
				}
				else
				{
					pObjectX->destroyCamera(name);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyCamera_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyCamera_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyCamera_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyCamera_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyCamera(name);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllCameras_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllCameras();
				}
				else
				{
					pObjectX->destroyAllCameras();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyAllCameras_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllCameras_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllCameras_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllCameras_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllCameras();
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createLight_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CLight* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createLight(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CLight* __values1 = pObjectX->createLight(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createLight_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createLight_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createLight_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createLight_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CLight* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createLight(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createLight_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CLight* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createLight();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CLight* __values1 = pObjectX->createLight();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createLight_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createLight_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createLight_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createLight_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CLight* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createLight();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_getLightCount_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_uint16 __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getLightCount();
					jint __values1_j = (jint) __values1;
					return __values1_j;
				}
				else
				{
					ev_uint16 __values1 = pObjectX->getLightCount();
					jint __values1_j = (jint) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getLightCount_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getLightCount_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getLightCount_void_callback", "()I");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_getLightCount_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_uint16 __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getLightCount();
				jint __values1_j = (jint) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getLight_1ev_1uint16(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint index_j)
			{
				ev_uint16 index = (ev_uint16) index_j;
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CLight* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getLight(index);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CLight* __values1 = pObjectX->getLight(index);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getLight_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getLight_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getLight_ev_uint16_callback", "(I)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getLight_1ev_1uint16_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint index_j)
			{
				ev_uint16 index = (ev_uint16) index_j;
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CLight* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getLight(index);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getLight_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CLight* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getLight(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CLight* __values1 = pObjectX->getLight(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getLight_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getLight_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getLight_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getLight_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CLight* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getLight(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasLight_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasLight(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->hasLight(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1hasLight_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasLight_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasLight_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasLight_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasLight(name);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getLightClippingPlanes_1CLight(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong l_j)
			{
				EarthView::World::Graphic::CLight *l = (EarthView::World::Graphic::CLight*) l_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					const EarthView::World::Spatial::Math::PlaneList& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getLightClippingPlanes(l);
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
				else
				{
					const EarthView::World::Spatial::Math::PlaneList& __values1 = pObjectX->getLightClippingPlanes(l);
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getLightClippingPlanes_1CLight(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getLightClippingPlanes_CLight_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getLightClippingPlanes_CLight_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getLightClippingPlanes_1CLight_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong l_j)
			{
				EarthView::World::Graphic::CLight *l = (EarthView::World::Graphic::CLight*) l_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Spatial::Math::PlaneList& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getLightClippingPlanes(l);
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getLightScissorRect_1CLight_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong l_j, jlong cam_j)
			{
				EarthView::World::Graphic::CLight *l = (EarthView::World::Graphic::CLight*) l_j;
				const EarthView::World::Graphic::CCamera *cam = (const EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					const EarthView::World::Graphic::RealRect& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getLightScissorRect(l, cam);
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
				else
				{
					const EarthView::World::Graphic::RealRect& __values1 = pObjectX->getLightScissorRect(l, cam);
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getLightScissorRect_1CLight_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getLightScissorRect_CLight_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getLightScissorRect_CLight_CCamera_callback", "(JJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getLightScissorRect_1CLight_1CCamera_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong l_j, jlong cam_j)
			{
				EarthView::World::Graphic::CLight *l = (EarthView::World::Graphic::CLight*) l_j;
				const EarthView::World::Graphic::CCamera *cam = (const EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::RealRect& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getLightScissorRect(l, cam);
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyLight_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyLight(name);
				}
				else
				{
					pObjectX->destroyLight(name);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyLight_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyLight_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyLight_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyLight_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyLight(name);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyLight_1CLight(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong light_j)
			{
				EarthView::World::Graphic::CLight *light = (EarthView::World::Graphic::CLight*) light_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyLight(light);
				}
				else
				{
					pObjectX->destroyLight(light);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyLight_1CLight(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyLight_CLight_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyLight_CLight_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyLight_1CLight_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong light_j)
			{
				EarthView::World::Graphic::CLight *light = (EarthView::World::Graphic::CLight*) light_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyLight(light);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllLights_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllLights();
				}
				else
				{
					pObjectX->destroyAllLights();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyAllLights_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllLights_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllLights_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllLights_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllLights();
			}
			extern "C" JNIEXPORT jstring JNICALL Java_com_earthview_world_graphic_SceneManager_getSoftShadowTexName_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EVString __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSoftShadowTexName();
					EarthView::World::Core::ev_wstring valuesw1 = __values1;
					jstring __values1_j = __env->NewString((const jchar*)valuesw1.getString(), valuesw1.size());
					return __values1_j;
				}
				else
				{
					EVString __values1 = pObjectX->getSoftShadowTexName();
					EarthView::World::Core::ev_wstring valuesw1 = __values1;
					jstring __values1_j = __env->NewString((const jchar*)valuesw1.getString(), valuesw1.size());
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSoftShadowTexName_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSoftShadowTexName_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSoftShadowTexName_void_callback", "()Ljava/lang/String;");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jstring JNICALL Java_com_earthview_world_graphic_SceneManager_getSoftShadowTexName_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EVString __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSoftShadowTexName();
				EarthView::World::Core::ev_wstring valuesw1 = __values1;
				jstring __values1_j = __env->NewString((const jchar*)valuesw1.getString(), valuesw1.size());
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowTexCam_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CCamera* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowTexCam();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CCamera* __values1 = pObjectX->getShadowTexCam();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShadowTexCam_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowTexCam_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowTexCam_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowTexCam_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CCamera* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowTexCam();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSoftShadowProjMatrix_1ev_1uint16(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint index_j)
			{
				ev_uint16 index = (ev_uint16) index_j;
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Spatial::Math::CMatrix4 __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSoftShadowProjMatrix(index);
					EarthView::World::Spatial::Math::CMatrix4 *returnvalues = new EarthView::World::Spatial::Math::CMatrix4(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
				else
				{
					EarthView::World::Spatial::Math::CMatrix4 __values1 = pObjectX->getSoftShadowProjMatrix(index);
					EarthView::World::Spatial::Math::CMatrix4 *returnvalues = new EarthView::World::Spatial::Math::CMatrix4(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSoftShadowProjMatrix_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSoftShadowProjMatrix_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSoftShadowProjMatrix_ev_uint16_callback", "(I)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSoftShadowProjMatrix_1ev_1uint16_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint index_j)
			{
				ev_uint16 index = (ev_uint16) index_j;
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Spatial::Math::CMatrix4 __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSoftShadowProjMatrix(index);
				EarthView::World::Spatial::Math::CMatrix4 *returnvalues = new EarthView::World::Spatial::Math::CMatrix4(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getCascadeEyeSpaceDepthArray_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Spatial::Math::CVector4 __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getCascadeEyeSpaceDepthArray();
					EarthView::World::Spatial::Math::CVector4 *returnvalues = new EarthView::World::Spatial::Math::CVector4(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
				else
				{
					EarthView::World::Spatial::Math::CVector4 __values1 = pObjectX->getCascadeEyeSpaceDepthArray();
					EarthView::World::Spatial::Math::CVector4 *returnvalues = new EarthView::World::Spatial::Math::CVector4(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getCascadeEyeSpaceDepthArray_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getCascadeEyeSpaceDepthArray_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getCascadeEyeSpaceDepthArray_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getCascadeEyeSpaceDepthArray_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Spatial::Math::CVector4 __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getCascadeEyeSpaceDepthArray();
				EarthView::World::Spatial::Math::CVector4 *returnvalues = new EarthView::World::Spatial::Math::CVector4(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT jfloat JNICALL Java_com_earthview_world_graphic_SceneManager_getSoftShadowNearClip_1ev_1uint8(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort index_j)
			{
				ev_uint8 index = (ev_uint8) index_j;
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					float __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSoftShadowNearClip(index);
					jfloat __values1_j = (jfloat)__values1;
					return __values1_j;
				}
				else
				{
					float __values1 = pObjectX->getSoftShadowNearClip(index);
					jfloat __values1_j = (jfloat)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSoftShadowNearClip_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSoftShadowNearClip_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSoftShadowNearClip_ev_uint8_callback", "(S)F");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jfloat JNICALL Java_com_earthview_world_graphic_SceneManager_getSoftShadowNearClip_1ev_1uint8_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort index_j)
			{
				ev_uint8 index = (ev_uint8) index_j;
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				float __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSoftShadowNearClip(index);
				jfloat __values1_j = (jfloat)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jfloat JNICALL Java_com_earthview_world_graphic_SceneManager_getSoftShadowFarClip_1ev_1uint8(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort index_j)
			{
				ev_uint8 index = (ev_uint8) index_j;
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					float __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSoftShadowFarClip(index);
					jfloat __values1_j = (jfloat)__values1;
					return __values1_j;
				}
				else
				{
					float __values1 = pObjectX->getSoftShadowFarClip(index);
					jfloat __values1_j = (jfloat)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSoftShadowFarClip_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSoftShadowFarClip_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSoftShadowFarClip_ev_uint8_callback", "(S)F");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jfloat JNICALL Java_com_earthview_world_graphic_SceneManager_getSoftShadowFarClip_1ev_1uint8_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort index_j)
			{
				ev_uint8 index = (ev_uint8) index_j;
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				float __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSoftShadowFarClip(index);
				jfloat __values1_j = (jfloat)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getIsUseSoftShadowFitToCascadesMode_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getIsUseSoftShadowFitToCascadesMode();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					bool __values1 = pObjectX->getIsUseSoftShadowFitToCascadesMode();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getIsUseSoftShadowFitToCascadesMode_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getIsUseSoftShadowFitToCascadesMode_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getIsUseSoftShadowFitToCascadesMode_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getIsUseSoftShadowFitToCascadesMode_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getIsUseSoftShadowFitToCascadesMode();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setIsUseSoftShadowFitToCascadesMode_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean flag_j)
			{
				bool flag = (bool) flag_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setIsUseSoftShadowFitToCascadesMode(flag);
				}
				else
				{
					pObjectX->setIsUseSoftShadowFitToCascadesMode(flag);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setIsUseSoftShadowFitToCascadesMode_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setIsUseSoftShadowFitToCascadesMode_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setIsUseSoftShadowFitToCascadesMode_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setIsUseSoftShadowFitToCascadesMode_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean flag_j)
			{
				bool flag = (bool) flag_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setIsUseSoftShadowFitToCascadesMode(flag);
			}
			extern "C" JNIEXPORT jshort JNICALL Java_com_earthview_world_graphic_SceneManager_getCurrentClipIndex_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_uint8 __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getCurrentClipIndex();
					jshort __values1_j = (jshort) __values1;
					return __values1_j;
				}
				else
				{
					ev_uint8 __values1 = pObjectX->getCurrentClipIndex();
					jshort __values1_j = (jshort) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getCurrentClipIndex_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getCurrentClipIndex_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getCurrentClipIndex_void_callback", "()S");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jshort JNICALL Java_com_earthview_world_graphic_SceneManager_getCurrentClipIndex_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_uint8 __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getCurrentClipIndex();
				jshort __values1_j = (jshort) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getIsUseSoftShadowTechnique_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getIsUseSoftShadowTechnique();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					bool __values1 = pObjectX->getIsUseSoftShadowTechnique();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getIsUseSoftShadowTechnique_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getIsUseSoftShadowTechnique_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getIsUseSoftShadowTechnique_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getIsUseSoftShadowTechnique_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getIsUseSoftShadowTechnique();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setIsUseSoftShadowTechnique_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean flag_j)
			{
				bool flag = (bool) flag_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setIsUseSoftShadowTechnique(flag);
				}
				else
				{
					pObjectX->setIsUseSoftShadowTechnique(flag);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setIsUseSoftShadowTechnique_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setIsUseSoftShadowTechnique_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setIsUseSoftShadowTechnique_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setIsUseSoftShadowTechnique_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean flag_j)
			{
				bool flag = (bool) flag_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setIsUseSoftShadowTechnique(flag);
			}
			extern "C" JNIEXPORT jfloat JNICALL Java_com_earthview_world_graphic_SceneManager_getCascadePartitionsPercent_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					float __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getCascadePartitionsPercent();
					jfloat __values1_j = (jfloat)__values1;
					return __values1_j;
				}
				else
				{
					float __values1 = pObjectX->getCascadePartitionsPercent();
					jfloat __values1_j = (jfloat)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getCascadePartitionsPercent_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getCascadePartitionsPercent_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getCascadePartitionsPercent_void_callback", "()F");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jfloat JNICALL Java_com_earthview_world_graphic_SceneManager_getCascadePartitionsPercent_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				float __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getCascadePartitionsPercent();
				jfloat __values1_j = (jfloat)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setCascadePartitionsPercent_1float(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jfloat percent_j)
			{
				float percent = (float) percent_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setCascadePartitionsPercent(percent);
				}
				else
				{
					pObjectX->setCascadePartitionsPercent(percent);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setCascadePartitionsPercent_1float(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setCascadePartitionsPercent_float_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setCascadePartitionsPercent_float_callback", "(F)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setCascadePartitionsPercent_1float_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jfloat percent_j)
			{
				float percent = (float) percent_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setCascadePartitionsPercent(percent);
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_getCascadePartitionsDistance_1ev_1uint8(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort index_j)
			{
				ev_uint8 index = (ev_uint8) index_j;
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					int __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getCascadePartitionsDistance(index);
					jint __values1_j = (jint)__values1;
					return __values1_j;
				}
				else
				{
					int __values1 = pObjectX->getCascadePartitionsDistance(index);
					jint __values1_j = (jint)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getCascadePartitionsDistance_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getCascadePartitionsDistance_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getCascadePartitionsDistance_ev_uint8_callback", "(S)I");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_getCascadePartitionsDistance_1ev_1uint8_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort index_j)
			{
				ev_uint8 index = (ev_uint8) index_j;
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				int __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getCascadePartitionsDistance(index);
				jint __values1_j = (jint)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setCascadePartitionsDistance_1ev_1uint8_1ev_1uint8(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort index_j, jshort distance_j)
			{
				ev_uint8 index = (ev_uint8) index_j;
				ev_uint8 distance = (ev_uint8) distance_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setCascadePartitionsDistance(index, distance);
				}
				else
				{
					pObjectX->setCascadePartitionsDistance(index, distance);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setCascadePartitionsDistance_1ev_1uint8_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setCascadePartitionsDistance_ev_uint8_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setCascadePartitionsDistance_ev_uint8_ev_uint8_callback", "(SS)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setCascadePartitionsDistance_1ev_1uint8_1ev_1uint8_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort index_j, jshort distance_j)
			{
				ev_uint8 index = (ev_uint8) index_j;
				ev_uint8 distance = (ev_uint8) distance_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setCascadePartitionsDistance(index, distance);
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_getSoftShadowOffsetFormat_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::PixelFormat __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSoftShadowOffsetFormat();
					jint __values1_j = (jint) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::PixelFormat __values1 = pObjectX->getSoftShadowOffsetFormat();
					jint __values1_j = (jint) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSoftShadowOffsetFormat_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSoftShadowOffsetFormat_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSoftShadowOffsetFormat_void_callback", "()I");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_getSoftShadowOffsetFormat_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::PixelFormat __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSoftShadowOffsetFormat();
				jint __values1_j = (jint) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_checkShadowCasterInFrustum_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong camera_j)
			{
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::checkShadowCasterInFrustum(camera);
				}
				else
				{
					pObjectX->checkShadowCasterInFrustum(camera);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1checkShadowCasterInFrustum_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_checkShadowCasterInFrustum_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"checkShadowCasterInFrustum_CCamera_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_checkShadowCasterInFrustum_1CCamera_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong camera_j)
			{
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::checkShadowCasterInFrustum(camera);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasShadowCasterInFrustum_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasShadowCasterInFrustum();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					bool __values1 = pObjectX->hasShadowCasterInFrustum();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1hasShadowCasterInFrustum_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasShadowCasterInFrustum_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasShadowCasterInFrustum_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasShadowCasterInFrustum_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasShadowCasterInFrustum();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getSoftShadowLightBleedPower_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSoftShadowLightBleedPower();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getSoftShadowLightBleedPower();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSoftShadowLightBleedPower_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSoftShadowLightBleedPower_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSoftShadowLightBleedPower_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getSoftShadowLightBleedPower_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSoftShadowLightBleedPower();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSoftShadowLightBleedPower_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble power_j)
			{
				Real power = (Real) power_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSoftShadowLightBleedPower(power);
				}
				else
				{
					pObjectX->setSoftShadowLightBleedPower(power);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSoftShadowLightBleedPower_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSoftShadowLightBleedPower_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSoftShadowLightBleedPower_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSoftShadowLightBleedPower_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble power_j)
			{
				Real power = (Real) power_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSoftShadowLightBleedPower(power);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getSoftShadowDepthOffset_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSoftShadowDepthOffset();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getSoftShadowDepthOffset();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSoftShadowDepthOffset_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSoftShadowDepthOffset_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSoftShadowDepthOffset_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getSoftShadowDepthOffset_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSoftShadowDepthOffset();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSoftShadowDepthOffset_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble offset_j)
			{
				Real offset = (Real) offset_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSoftShadowDepthOffset(offset);
				}
				else
				{
					pObjectX->setSoftShadowDepthOffset(offset);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSoftShadowDepthOffset_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSoftShadowDepthOffset_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSoftShadowDepthOffset_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSoftShadowDepthOffset_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble offset_j)
			{
				Real offset = (Real) offset_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSoftShadowDepthOffset(offset);
			}
			extern "C" JNIEXPORT jfloat JNICALL Java_com_earthview_world_graphic_SceneManager_getSoftShadowNormalFactor_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					float __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSoftShadowNormalFactor();
					jfloat __values1_j = (jfloat)__values1;
					return __values1_j;
				}
				else
				{
					float __values1 = pObjectX->getSoftShadowNormalFactor();
					jfloat __values1_j = (jfloat)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSoftShadowNormalFactor_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSoftShadowNormalFactor_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSoftShadowNormalFactor_void_callback", "()F");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jfloat JNICALL Java_com_earthview_world_graphic_SceneManager_getSoftShadowNormalFactor_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				float __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSoftShadowNormalFactor();
				jfloat __values1_j = (jfloat)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSoftShadowNormalFactor_1float(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jfloat factor_j)
			{
				float factor = (float) factor_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSoftShadowNormalFactor(factor);
				}
				else
				{
					pObjectX->setSoftShadowNormalFactor(factor);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSoftShadowNormalFactor_1float(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSoftShadowNormalFactor_float_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSoftShadowNormalFactor_float_callback", "(F)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSoftShadowNormalFactor_1float_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jfloat factor_j)
			{
				float factor = (float) factor_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSoftShadowNormalFactor(factor);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1notifyLightsDirty_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_notifyLightsDirty();
				}
				else
				{
					pObjectX->_notifyLightsDirty();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1notifyLightsDirty_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__notifyLightsDirty_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_notifyLightsDirty_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1notifyLightsDirty_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_notifyLightsDirty();
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager__1getLightsDirtyCounter_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_uint32 __values1 = pObjectX->_getLightsDirtyCounter();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager__1getLightsAffectingFrustum_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					const EarthView::World::Graphic::LightList& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::_getLightsAffectingFrustum();
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
				else
				{
					const EarthView::World::Graphic::LightList& __values1 = pObjectX->_getLightsAffectingFrustum();
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1getLightsAffectingFrustum_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__getLightsAffectingFrustum_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_getLightsAffectingFrustum_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager__1getLightsAffectingFrustum_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::LightList& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::_getLightsAffectingFrustum();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1populateLightList_1CVector3_1Real_1LightList_1ev_1uint32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong position_j, jdouble radius_j, jlong destList_j, jlong lightMask_j)
			{
				const EarthView::World::Spatial::Math::CVector3 &position = *(EarthView::World::Spatial::Math::CVector3*) position_j;
				Real radius = (Real) radius_j;
				EarthView::World::Graphic::LightList &destList = *(EarthView::World::Graphic::LightList*) destList_j;
				ev_uint32 lightMask = (ev_uint32) lightMask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_populateLightList(position, radius, destList, lightMask);
				}
				else
				{
					pObjectX->_populateLightList(position, radius, destList, lightMask);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1populateLightList_1CVector3_1Real_1LightList_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__populateLightList_CVector3_Real_LightList_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_populateLightList_CVector3_Real_LightList_ev_uint32_callback", "(JDJJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1populateLightList_1CVector3_1Real_1LightList_1ev_1uint32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong position_j, jdouble radius_j, jlong destList_j, jlong lightMask_j)
			{
				const EarthView::World::Spatial::Math::CVector3 &position = *(EarthView::World::Spatial::Math::CVector3*) position_j;
				Real radius = (Real) radius_j;
				EarthView::World::Graphic::LightList &destList = *(EarthView::World::Graphic::LightList*) destList_j;
				ev_uint32 lightMask = (ev_uint32) lightMask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_populateLightList(position, radius, destList, lightMask);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1populateLightList_1CVector3_1Real_1LightList(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong position_j, jdouble radius_j, jlong destList_j)
			{
				const EarthView::World::Spatial::Math::CVector3 &position = *(EarthView::World::Spatial::Math::CVector3*) position_j;
				Real radius = (Real) radius_j;
				EarthView::World::Graphic::LightList &destList = *(EarthView::World::Graphic::LightList*) destList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_populateLightList(position, radius, destList);
				}
				else
				{
					pObjectX->_populateLightList(position, radius, destList);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1populateLightList_1CVector3_1Real_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__populateLightList_CVector3_Real_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_populateLightList_CVector3_Real_LightList_callback", "(JDJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1populateLightList_1CVector3_1Real_1LightList_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong position_j, jdouble radius_j, jlong destList_j)
			{
				const EarthView::World::Spatial::Math::CVector3 &position = *(EarthView::World::Spatial::Math::CVector3*) position_j;
				Real radius = (Real) radius_j;
				EarthView::World::Graphic::LightList &destList = *(EarthView::World::Graphic::LightList*) destList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_populateLightList(position, radius, destList);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_showImage_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean visible_j)
			{
				ev_bool visible = (ev_bool) visible_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::showImage(visible);
				}
				else
				{
					pObjectX->showImage(visible);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1showImage_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_showImage_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"showImage_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_showImage_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean visible_j)
			{
				ev_bool visible = (ev_bool) visible_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::showImage(visible);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getImageVisible_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getImageVisible();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getImageVisible();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getImageVisible_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getImageVisible_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getImageVisible_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getImageVisible_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getImageVisible();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_showOcean_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean visible_j)
			{
				ev_bool visible = (ev_bool) visible_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::showOcean(visible);
				}
				else
				{
					pObjectX->showOcean(visible);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1showOcean_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_showOcean_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"showOcean_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_showOcean_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean visible_j)
			{
				ev_bool visible = (ev_bool) visible_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::showOcean(visible);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getOceanVisible_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getOceanVisible();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getOceanVisible();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getOceanVisible_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getOceanVisible_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getOceanVisible_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getOceanVisible_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getOceanVisible();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1populateLightList_1CSceneNode_1Real_1LightList_1ev_1uint32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong sn_j, jdouble radius_j, jlong destList_j, jlong lightMask_j)
			{
				const EarthView::World::Graphic::CSceneNode *sn = (const EarthView::World::Graphic::CSceneNode*) sn_j;
				Real radius = (Real) radius_j;
				EarthView::World::Graphic::LightList &destList = *(EarthView::World::Graphic::LightList*) destList_j;
				ev_uint32 lightMask = (ev_uint32) lightMask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_populateLightList(sn, radius, destList, lightMask);
				}
				else
				{
					pObjectX->_populateLightList(sn, radius, destList, lightMask);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1populateLightList_1CSceneNode_1Real_1LightList_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__populateLightList_CSceneNode_Real_LightList_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_populateLightList_CSceneNode_Real_LightList_ev_uint32_callback", "(JDJJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1populateLightList_1CSceneNode_1Real_1LightList_1ev_1uint32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong sn_j, jdouble radius_j, jlong destList_j, jlong lightMask_j)
			{
				const EarthView::World::Graphic::CSceneNode *sn = (const EarthView::World::Graphic::CSceneNode*) sn_j;
				Real radius = (Real) radius_j;
				EarthView::World::Graphic::LightList &destList = *(EarthView::World::Graphic::LightList*) destList_j;
				ev_uint32 lightMask = (ev_uint32) lightMask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_populateLightList(sn, radius, destList, lightMask);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1populateLightList_1CSceneNode_1Real_1LightList(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong sn_j, jdouble radius_j, jlong destList_j)
			{
				const EarthView::World::Graphic::CSceneNode *sn = (const EarthView::World::Graphic::CSceneNode*) sn_j;
				Real radius = (Real) radius_j;
				EarthView::World::Graphic::LightList &destList = *(EarthView::World::Graphic::LightList*) destList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_populateLightList(sn, radius, destList);
				}
				else
				{
					pObjectX->_populateLightList(sn, radius, destList);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1populateLightList_1CSceneNode_1Real_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__populateLightList_CSceneNode_Real_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_populateLightList_CSceneNode_Real_LightList_callback", "(JDJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1populateLightList_1CSceneNode_1Real_1LightList_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong sn_j, jdouble radius_j, jlong destList_j)
			{
				const EarthView::World::Graphic::CSceneNode *sn = (const EarthView::World::Graphic::CSceneNode*) sn_j;
				Real radius = (Real) radius_j;
				EarthView::World::Graphic::LightList &destList = *(EarthView::World::Graphic::LightList*) destList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_populateLightList(sn, radius, destList);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createSceneNode_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createSceneNode();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->createSceneNode();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createSceneNode_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createSceneNode_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createSceneNode_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createSceneNode_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createSceneNode();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createSceneNode_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createSceneNode(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->createSceneNode(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createSceneNode_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createSceneNode_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createSceneNode_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createSceneNode_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createSceneNode(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroySceneNode_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroySceneNode(name);
				}
				else
				{
					pObjectX->destroySceneNode(name);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroySceneNode_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroySceneNode_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroySceneNode_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroySceneNode_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroySceneNode(name);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroySceneNode_1CSceneNode(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong sn_j)
			{
				EarthView::World::Graphic::CSceneNode *sn = (EarthView::World::Graphic::CSceneNode*) sn_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroySceneNode(sn);
				}
				else
				{
					pObjectX->destroySceneNode(sn);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroySceneNode_1CSceneNode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroySceneNode_CSceneNode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroySceneNode_CSceneNode_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroySceneNode_1CSceneNode_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong sn_j)
			{
				EarthView::World::Graphic::CSceneNode *sn = (EarthView::World::Graphic::CSceneNode*) sn_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroySceneNode(sn);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getRootSceneNode_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getRootSceneNode();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->getRootSceneNode();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getRootSceneNode_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getRootSceneNode_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getRootSceneNode_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getRootSceneNode_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getRootSceneNode();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSceneNode_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSceneNode(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->getSceneNode(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSceneNode_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSceneNode_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSceneNode_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSceneNode_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSceneNode(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasSceneNode_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasSceneNode(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->hasSceneNode(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1hasSceneNode_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasSceneNode_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasSceneNode_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasSceneNode_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasSceneNode(name);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString_1EVString_1IntVector_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring entityName_j, jstring meshName_j, jlong subentityIndics_j, jstring groupName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* entityName_ch = (const ev_char*)__env->GetStringUTFChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringUTFChars(entityName_j, (const char *)entityName_ch);
				#else
				const ev_wchar* entityName_ch = (const ev_wchar*)__env->GetStringChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringChars(entityName_j, (const jchar *)entityName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				const EarthView::World::Core::IntVector &subentityIndics = *(EarthView::World::Core::IntVector*) subentityIndics_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(entityName, meshName, subentityIndics, groupName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->createEntity(entityName, meshName, subentityIndics, groupName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createEntity_1EVString_1EVString_1IntVector_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_EVString_IntVector_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_EVString_IntVector_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString_1EVString_1IntVector_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring entityName_j, jstring meshName_j, jlong subentityIndics_j, jstring groupName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* entityName_ch = (const ev_char*)__env->GetStringUTFChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringUTFChars(entityName_j, (const char *)entityName_ch);
				#else
				const ev_wchar* entityName_ch = (const ev_wchar*)__env->GetStringChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringChars(entityName_j, (const jchar *)entityName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				const EarthView::World::Core::IntVector &subentityIndics = *(EarthView::World::Core::IntVector*) subentityIndics_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(entityName, meshName, subentityIndics, groupName);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString_1EVString_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring entityName_j, jstring meshName_j, jstring groupName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* entityName_ch = (const ev_char*)__env->GetStringUTFChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringUTFChars(entityName_j, (const char *)entityName_ch);
				#else
				const ev_wchar* entityName_ch = (const ev_wchar*)__env->GetStringChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringChars(entityName_j, (const jchar *)entityName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(entityName, meshName, groupName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->createEntity(entityName, meshName, groupName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createEntity_1EVString_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString_1EVString_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring entityName_j, jstring meshName_j, jstring groupName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* entityName_ch = (const ev_char*)__env->GetStringUTFChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringUTFChars(entityName_j, (const char *)entityName_ch);
				#else
				const ev_wchar* entityName_ch = (const ev_wchar*)__env->GetStringChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringChars(entityName_j, (const jchar *)entityName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(entityName, meshName, groupName);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString_1EVString_1IntVector(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring entityName_j, jstring meshName_j, jlong subentityIndics_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* entityName_ch = (const ev_char*)__env->GetStringUTFChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringUTFChars(entityName_j, (const char *)entityName_ch);
				#else
				const ev_wchar* entityName_ch = (const ev_wchar*)__env->GetStringChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringChars(entityName_j, (const jchar *)entityName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				const EarthView::World::Core::IntVector &subentityIndics = *(EarthView::World::Core::IntVector*) subentityIndics_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(entityName, meshName, subentityIndics);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->createEntity(entityName, meshName, subentityIndics);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createEntity_1EVString_1EVString_1IntVector(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_EVString_IntVector_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_EVString_IntVector_callback", "(Ljava/lang/String;Ljava/lang/String;J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString_1EVString_1IntVector_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring entityName_j, jstring meshName_j, jlong subentityIndics_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* entityName_ch = (const ev_char*)__env->GetStringUTFChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringUTFChars(entityName_j, (const char *)entityName_ch);
				#else
				const ev_wchar* entityName_ch = (const ev_wchar*)__env->GetStringChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringChars(entityName_j, (const jchar *)entityName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				const EarthView::World::Core::IntVector &subentityIndics = *(EarthView::World::Core::IntVector*) subentityIndics_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(entityName, meshName, subentityIndics);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring entityName_j, jstring meshName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* entityName_ch = (const ev_char*)__env->GetStringUTFChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringUTFChars(entityName_j, (const char *)entityName_ch);
				#else
				const ev_wchar* entityName_ch = (const ev_wchar*)__env->GetStringChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringChars(entityName_j, (const jchar *)entityName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(entityName, meshName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->createEntity(entityName, meshName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createEntity_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring entityName_j, jstring meshName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* entityName_ch = (const ev_char*)__env->GetStringUTFChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringUTFChars(entityName_j, (const char *)entityName_ch);
				#else
				const ev_wchar* entityName_ch = (const ev_wchar*)__env->GetStringChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringChars(entityName_j, (const jchar *)entityName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(entityName, meshName);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString_1CMeshPtr_1IntVector(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring entityName_j, jlong pMesh_j, jlong subentityIndics_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* entityName_ch = (const ev_char*)__env->GetStringUTFChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringUTFChars(entityName_j, (const char *)entityName_ch);
				#else
				const ev_wchar* entityName_ch = (const ev_wchar*)__env->GetStringChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringChars(entityName_j, (const jchar *)entityName_ch);
				#endif
				const EarthView::World::Graphic::CMeshPtr &pMesh = *(EarthView::World::Graphic::CMeshPtr*) pMesh_j;
				const EarthView::World::Core::IntVector &subentityIndics = *(EarthView::World::Core::IntVector*) subentityIndics_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(entityName, pMesh, subentityIndics);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->createEntity(entityName, pMesh, subentityIndics);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createEntity_1EVString_1CMeshPtr_1IntVector(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_CMeshPtr_IntVector_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_CMeshPtr_IntVector_callback", "(Ljava/lang/String;JJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString_1CMeshPtr_1IntVector_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring entityName_j, jlong pMesh_j, jlong subentityIndics_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* entityName_ch = (const ev_char*)__env->GetStringUTFChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringUTFChars(entityName_j, (const char *)entityName_ch);
				#else
				const ev_wchar* entityName_ch = (const ev_wchar*)__env->GetStringChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringChars(entityName_j, (const jchar *)entityName_ch);
				#endif
				const EarthView::World::Graphic::CMeshPtr &pMesh = *(EarthView::World::Graphic::CMeshPtr*) pMesh_j;
				const EarthView::World::Core::IntVector &subentityIndics = *(EarthView::World::Core::IntVector*) subentityIndics_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(entityName, pMesh, subentityIndics);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString_1CMeshPtr(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring entityName_j, jlong pMesh_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* entityName_ch = (const ev_char*)__env->GetStringUTFChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringUTFChars(entityName_j, (const char *)entityName_ch);
				#else
				const ev_wchar* entityName_ch = (const ev_wchar*)__env->GetStringChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringChars(entityName_j, (const jchar *)entityName_ch);
				#endif
				const EarthView::World::Graphic::CMeshPtr &pMesh = *(EarthView::World::Graphic::CMeshPtr*) pMesh_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(entityName, pMesh);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->createEntity(entityName, pMesh);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createEntity_1EVString_1CMeshPtr(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_CMeshPtr_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_CMeshPtr_callback", "(Ljava/lang/String;J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString_1CMeshPtr_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring entityName_j, jlong pMesh_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* entityName_ch = (const ev_char*)__env->GetStringUTFChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringUTFChars(entityName_j, (const char *)entityName_ch);
				#else
				const ev_wchar* entityName_ch = (const ev_wchar*)__env->GetStringChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringChars(entityName_j, (const jchar *)entityName_ch);
				#endif
				const EarthView::World::Graphic::CMeshPtr &pMesh = *(EarthView::World::Graphic::CMeshPtr*) pMesh_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(entityName, pMesh);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1CMeshPtr_1IntVector(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pMesh_j, jlong subentityIndics_j)
			{
				const EarthView::World::Graphic::CMeshPtr &pMesh = *(EarthView::World::Graphic::CMeshPtr*) pMesh_j;
				const EarthView::World::Core::IntVector &subentityIndics = *(EarthView::World::Core::IntVector*) subentityIndics_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(pMesh, subentityIndics);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->createEntity(pMesh, subentityIndics);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createEntity_1CMeshPtr_1IntVector(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_CMeshPtr_IntVector_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_CMeshPtr_IntVector_callback", "(JJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1CMeshPtr_1IntVector_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pMesh_j, jlong subentityIndics_j)
			{
				const EarthView::World::Graphic::CMeshPtr &pMesh = *(EarthView::World::Graphic::CMeshPtr*) pMesh_j;
				const EarthView::World::Core::IntVector &subentityIndics = *(EarthView::World::Core::IntVector*) subentityIndics_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(pMesh, subentityIndics);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1CMeshPtr(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pMesh_j)
			{
				const EarthView::World::Graphic::CMeshPtr &pMesh = *(EarthView::World::Graphic::CMeshPtr*) pMesh_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(pMesh);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->createEntity(pMesh);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createEntity_1CMeshPtr(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_CMeshPtr_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_CMeshPtr_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1CMeshPtr_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pMesh_j)
			{
				const EarthView::World::Graphic::CMeshPtr &pMesh = *(EarthView::World::Graphic::CMeshPtr*) pMesh_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(pMesh);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString_1IntVector(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring meshName_j, jlong subentityIndics_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				const EarthView::World::Core::IntVector &subentityIndics = *(EarthView::World::Core::IntVector*) subentityIndics_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(meshName, subentityIndics);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->createEntity(meshName, subentityIndics);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createEntity_1EVString_1IntVector(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_IntVector_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_IntVector_callback", "(Ljava/lang/String;J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString_1IntVector_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring meshName_j, jlong subentityIndics_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				const EarthView::World::Core::IntVector &subentityIndics = *(EarthView::World::Core::IntVector*) subentityIndics_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(meshName, subentityIndics);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring meshName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(meshName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->createEntity(meshName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createEntity_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring meshName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(meshName);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jintArray JNICALL Java_com_earthview_world_graphic_SceneManager_00024PrefabTypeHelper_getEnumValues (JNIEnv *__env, jclass __clazz)
			{
				jint enum_values[] = {
					CSceneManager::PT_PLANE,
					CSceneManager::PT_CUBE,
					CSceneManager::PT_SPHERE
				};
				jintArray array = __env->NewIntArray(3);
				__env->SetIntArrayRegion(array, 0, 3, enum_values);
				return array;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString_1PrefabType(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring entityName_j, jint ptype_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* entityName_ch = (const ev_char*)__env->GetStringUTFChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringUTFChars(entityName_j, (const char *)entityName_ch);
				#else
				const ev_wchar* entityName_ch = (const ev_wchar*)__env->GetStringChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringChars(entityName_j, (const jchar *)entityName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager::PrefabType ptype = (EarthView::World::Graphic::CSceneManager::PrefabType) ptype_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(entityName, ptype);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->createEntity(entityName, ptype);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createEntity_1EVString_1PrefabType(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_EVString_PrefabType_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_EVString_PrefabType_callback", "(Ljava/lang/String;I)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1EVString_1PrefabType_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring entityName_j, jint ptype_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* entityName_ch = (const ev_char*)__env->GetStringUTFChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringUTFChars(entityName_j, (const char *)entityName_ch);
				#else
				const ev_wchar* entityName_ch = (const ev_wchar*)__env->GetStringChars(entityName_j,JNI_FALSE);
				const EVString entityName = entityName_ch;
				__env->ReleaseStringChars(entityName_j, (const jchar *)entityName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager::PrefabType ptype = (EarthView::World::Graphic::CSceneManager::PrefabType) ptype_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(entityName, ptype);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1PrefabType(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint ptype_j)
			{
				EarthView::World::Graphic::CSceneManager::PrefabType ptype = (EarthView::World::Graphic::CSceneManager::PrefabType) ptype_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(ptype);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->createEntity(ptype);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createEntity_1PrefabType(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createEntity_PrefabType_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createEntity_PrefabType_callback", "(I)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createEntity_1PrefabType_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint ptype_j)
			{
				EarthView::World::Graphic::CSceneManager::PrefabType ptype = (EarthView::World::Graphic::CSceneManager::PrefabType) ptype_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createEntity(ptype);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getEntity_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getEntity(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CEntity* __values1 = pObjectX->getEntity(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getEntity_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getEntity_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getEntity_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getEntity_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getEntity(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasEntity_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasEntity(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->hasEntity(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1hasEntity_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasEntity_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasEntity_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasEntity_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasEntity(name);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyEntity_1CEntity(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ent_j)
			{
				EarthView::World::Graphic::CEntity *ent = (EarthView::World::Graphic::CEntity*) ent_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyEntity(ent);
				}
				else
				{
					pObjectX->destroyEntity(ent);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyEntity_1CEntity(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyEntity_CEntity_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyEntity_CEntity_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyEntity_1CEntity_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ent_j)
			{
				EarthView::World::Graphic::CEntity *ent = (EarthView::World::Graphic::CEntity*) ent_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyEntity(ent);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyEntity_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyEntity(name);
				}
				else
				{
					pObjectX->destroyEntity(name);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyEntity_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyEntity_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyEntity_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyEntity_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyEntity(name);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllEntities_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllEntities();
				}
				else
				{
					pObjectX->destroyAllEntities();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyAllEntities_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllEntities_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllEntities_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllEntities_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllEntities();
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createManualObject_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CManualObject* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createManualObject(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CManualObject* __values1 = pObjectX->createManualObject(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createManualObject_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createManualObject_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createManualObject_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createManualObject_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CManualObject* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createManualObject(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createManualObject_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CManualObject* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createManualObject();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CManualObject* __values1 = pObjectX->createManualObject();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createManualObject_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createManualObject_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createManualObject_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createManualObject_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CManualObject* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createManualObject();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getManualObject_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CManualObject* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getManualObject(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CManualObject* __values1 = pObjectX->getManualObject(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getManualObject_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getManualObject_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getManualObject_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getManualObject_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CManualObject* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getManualObject(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasManualObject_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasManualObject(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->hasManualObject(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1hasManualObject_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasManualObject_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasManualObject_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasManualObject_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasManualObject(name);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyManualObject_1CManualObject(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong obj_j)
			{
				EarthView::World::Graphic::CManualObject *obj = (EarthView::World::Graphic::CManualObject*) obj_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyManualObject(obj);
				}
				else
				{
					pObjectX->destroyManualObject(obj);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyManualObject_1CManualObject(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyManualObject_CManualObject_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyManualObject_CManualObject_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyManualObject_1CManualObject_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong obj_j)
			{
				EarthView::World::Graphic::CManualObject *obj = (EarthView::World::Graphic::CManualObject*) obj_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyManualObject(obj);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyManualObject_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyManualObject(name);
				}
				else
				{
					pObjectX->destroyManualObject(name);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyManualObject_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyManualObject_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyManualObject_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyManualObject_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyManualObject(name);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllManualObjects_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllManualObjects();
				}
				else
				{
					pObjectX->destroyAllManualObjects();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyAllManualObjects_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllManualObjects_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllManualObjects_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllManualObjects_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllManualObjects();
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_usingWebMercator_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::usingWebMercator();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->usingWebMercator();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1usingWebMercator_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_usingWebMercator_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"usingWebMercator_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_usingWebMercator_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::usingWebMercator();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createBillboardChain_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CBillboardChain* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createBillboardChain(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CBillboardChain* __values1 = pObjectX->createBillboardChain(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createBillboardChain_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createBillboardChain_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createBillboardChain_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createBillboardChain_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CBillboardChain* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createBillboardChain(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createBillboardChain_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CBillboardChain* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createBillboardChain();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CBillboardChain* __values1 = pObjectX->createBillboardChain();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createBillboardChain_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createBillboardChain_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createBillboardChain_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createBillboardChain_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CBillboardChain* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createBillboardChain();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getBillboardChain_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CBillboardChain* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getBillboardChain(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CBillboardChain* __values1 = pObjectX->getBillboardChain(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getBillboardChain_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getBillboardChain_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getBillboardChain_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getBillboardChain_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CBillboardChain* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getBillboardChain(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasBillboardChain_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasBillboardChain(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->hasBillboardChain(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1hasBillboardChain_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasBillboardChain_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasBillboardChain_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasBillboardChain_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasBillboardChain(name);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyBillboardChain_1CBillboardChain(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong obj_j)
			{
				EarthView::World::Graphic::CBillboardChain *obj = (EarthView::World::Graphic::CBillboardChain*) obj_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyBillboardChain(obj);
				}
				else
				{
					pObjectX->destroyBillboardChain(obj);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyBillboardChain_1CBillboardChain(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyBillboardChain_CBillboardChain_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyBillboardChain_CBillboardChain_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyBillboardChain_1CBillboardChain_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong obj_j)
			{
				EarthView::World::Graphic::CBillboardChain *obj = (EarthView::World::Graphic::CBillboardChain*) obj_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyBillboardChain(obj);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyBillboardChain_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyBillboardChain(name);
				}
				else
				{
					pObjectX->destroyBillboardChain(name);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyBillboardChain_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyBillboardChain_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyBillboardChain_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyBillboardChain_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyBillboardChain(name);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllBillboardChains_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllBillboardChains();
				}
				else
				{
					pObjectX->destroyAllBillboardChains();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyAllBillboardChains_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllBillboardChains_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllBillboardChains_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllBillboardChains_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllBillboardChains();
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createRibbonTrail_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CRibbonTrail* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createRibbonTrail(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CRibbonTrail* __values1 = pObjectX->createRibbonTrail(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createRibbonTrail_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createRibbonTrail_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createRibbonTrail_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createRibbonTrail_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CRibbonTrail* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createRibbonTrail(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createRibbonTrail_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CRibbonTrail* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createRibbonTrail();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CRibbonTrail* __values1 = pObjectX->createRibbonTrail();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createRibbonTrail_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createRibbonTrail_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createRibbonTrail_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createRibbonTrail_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CRibbonTrail* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createRibbonTrail();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getRibbonTrail_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CRibbonTrail* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getRibbonTrail(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CRibbonTrail* __values1 = pObjectX->getRibbonTrail(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getRibbonTrail_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getRibbonTrail_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getRibbonTrail_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getRibbonTrail_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CRibbonTrail* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getRibbonTrail(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasRibbonTrail_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasRibbonTrail(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->hasRibbonTrail(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1hasRibbonTrail_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasRibbonTrail_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasRibbonTrail_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasRibbonTrail_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasRibbonTrail(name);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyRibbonTrail_1CRibbonTrail(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong obj_j)
			{
				EarthView::World::Graphic::CRibbonTrail *obj = (EarthView::World::Graphic::CRibbonTrail*) obj_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyRibbonTrail(obj);
				}
				else
				{
					pObjectX->destroyRibbonTrail(obj);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyRibbonTrail_1CRibbonTrail(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyRibbonTrail_CRibbonTrail_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyRibbonTrail_CRibbonTrail_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyRibbonTrail_1CRibbonTrail_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong obj_j)
			{
				EarthView::World::Graphic::CRibbonTrail *obj = (EarthView::World::Graphic::CRibbonTrail*) obj_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyRibbonTrail(obj);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyRibbonTrail_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyRibbonTrail(name);
				}
				else
				{
					pObjectX->destroyRibbonTrail(name);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyRibbonTrail_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyRibbonTrail_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyRibbonTrail_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyRibbonTrail_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyRibbonTrail(name);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllRibbonTrails_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllRibbonTrails();
				}
				else
				{
					pObjectX->destroyAllRibbonTrails();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyAllRibbonTrails_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllRibbonTrails_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllRibbonTrails_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllRibbonTrails_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllRibbonTrails();
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createParticleSystem_1EVString_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jstring templateName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* templateName_ch = (const ev_char*)__env->GetStringUTFChars(templateName_j,JNI_FALSE);
				const EVString templateName = templateName_ch;
				__env->ReleaseStringUTFChars(templateName_j, (const char *)templateName_ch);
				#else
				const ev_wchar* templateName_ch = (const ev_wchar*)__env->GetStringChars(templateName_j,JNI_FALSE);
				const EVString templateName = templateName_ch;
				__env->ReleaseStringChars(templateName_j, (const jchar *)templateName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createParticleSystem(name, templateName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->createParticleSystem(name, templateName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createParticleSystem_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createParticleSystem_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createParticleSystem_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createParticleSystem_1EVString_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jstring templateName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* templateName_ch = (const ev_char*)__env->GetStringUTFChars(templateName_j,JNI_FALSE);
				const EVString templateName = templateName_ch;
				__env->ReleaseStringUTFChars(templateName_j, (const char *)templateName_ch);
				#else
				const ev_wchar* templateName_ch = (const ev_wchar*)__env->GetStringChars(templateName_j,JNI_FALSE);
				const EVString templateName = templateName_ch;
				__env->ReleaseStringChars(templateName_j, (const jchar *)templateName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createParticleSystem(name, templateName);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createParticleSystem_1EVString_1ev_1size_1t_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jlong quota_j, jstring resourceGroup_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				ev_size_t quota = (ev_size_t) quota_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* resourceGroup_ch = (const ev_char*)__env->GetStringUTFChars(resourceGroup_j,JNI_FALSE);
				const EVString resourceGroup = resourceGroup_ch;
				__env->ReleaseStringUTFChars(resourceGroup_j, (const char *)resourceGroup_ch);
				#else
				const ev_wchar* resourceGroup_ch = (const ev_wchar*)__env->GetStringChars(resourceGroup_j,JNI_FALSE);
				const EVString resourceGroup = resourceGroup_ch;
				__env->ReleaseStringChars(resourceGroup_j, (const jchar *)resourceGroup_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createParticleSystem(name, quota, resourceGroup);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->createParticleSystem(name, quota, resourceGroup);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createParticleSystem_1EVString_1ev_1size_1t_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createParticleSystem_EVString_ev_size_t_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createParticleSystem_EVString_ev_size_t_EVString_callback", "(Ljava/lang/String;JLjava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createParticleSystem_1EVString_1ev_1size_1t_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jlong quota_j, jstring resourceGroup_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				ev_size_t quota = (ev_size_t) quota_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* resourceGroup_ch = (const ev_char*)__env->GetStringUTFChars(resourceGroup_j,JNI_FALSE);
				const EVString resourceGroup = resourceGroup_ch;
				__env->ReleaseStringUTFChars(resourceGroup_j, (const char *)resourceGroup_ch);
				#else
				const ev_wchar* resourceGroup_ch = (const ev_wchar*)__env->GetStringChars(resourceGroup_j,JNI_FALSE);
				const EVString resourceGroup = resourceGroup_ch;
				__env->ReleaseStringChars(resourceGroup_j, (const jchar *)resourceGroup_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createParticleSystem(name, quota, resourceGroup);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createParticleSystem_1EVString_1ev_1size_1t(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jlong quota_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				ev_size_t quota = (ev_size_t) quota_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createParticleSystem(name, quota);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->createParticleSystem(name, quota);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createParticleSystem_1EVString_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createParticleSystem_EVString_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createParticleSystem_EVString_ev_size_t_callback", "(Ljava/lang/String;J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createParticleSystem_1EVString_1ev_1size_1t_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jlong quota_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				ev_size_t quota = (ev_size_t) quota_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createParticleSystem(name, quota);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createParticleSystem_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createParticleSystem(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->createParticleSystem(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createParticleSystem_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createParticleSystem_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createParticleSystem_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createParticleSystem_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createParticleSystem(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createParticleSystem_1ev_1size_1t_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong quota_j, jstring resourceGroup_j)
			{
				ev_size_t quota = (ev_size_t) quota_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* resourceGroup_ch = (const ev_char*)__env->GetStringUTFChars(resourceGroup_j,JNI_FALSE);
				const EVString resourceGroup = resourceGroup_ch;
				__env->ReleaseStringUTFChars(resourceGroup_j, (const char *)resourceGroup_ch);
				#else
				const ev_wchar* resourceGroup_ch = (const ev_wchar*)__env->GetStringChars(resourceGroup_j,JNI_FALSE);
				const EVString resourceGroup = resourceGroup_ch;
				__env->ReleaseStringChars(resourceGroup_j, (const jchar *)resourceGroup_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createParticleSystem(quota, resourceGroup);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->createParticleSystem(quota, resourceGroup);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createParticleSystem_1ev_1size_1t_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createParticleSystem_ev_size_t_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createParticleSystem_ev_size_t_EVString_callback", "(JLjava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createParticleSystem_1ev_1size_1t_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong quota_j, jstring resourceGroup_j)
			{
				ev_size_t quota = (ev_size_t) quota_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* resourceGroup_ch = (const ev_char*)__env->GetStringUTFChars(resourceGroup_j,JNI_FALSE);
				const EVString resourceGroup = resourceGroup_ch;
				__env->ReleaseStringUTFChars(resourceGroup_j, (const char *)resourceGroup_ch);
				#else
				const ev_wchar* resourceGroup_ch = (const ev_wchar*)__env->GetStringChars(resourceGroup_j,JNI_FALSE);
				const EVString resourceGroup = resourceGroup_ch;
				__env->ReleaseStringChars(resourceGroup_j, (const jchar *)resourceGroup_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createParticleSystem(quota, resourceGroup);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createParticleSystem_1ev_1size_1t(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong quota_j)
			{
				ev_size_t quota = (ev_size_t) quota_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createParticleSystem(quota);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->createParticleSystem(quota);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createParticleSystem_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createParticleSystem_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createParticleSystem_ev_size_t_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createParticleSystem_1ev_1size_1t_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong quota_j)
			{
				ev_size_t quota = (ev_size_t) quota_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createParticleSystem(quota);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createParticleSystem_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createParticleSystem();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->createParticleSystem();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createParticleSystem_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createParticleSystem_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createParticleSystem_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createParticleSystem_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createParticleSystem();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getParticleSystem_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getParticleSystem(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->getParticleSystem(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getParticleSystem_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getParticleSystem_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getParticleSystem_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getParticleSystem_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CParticleSystem* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getParticleSystem(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasParticleSystem_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasParticleSystem(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->hasParticleSystem(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1hasParticleSystem_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasParticleSystem_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasParticleSystem_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasParticleSystem_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasParticleSystem(name);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyParticleSystem_1CParticleSystem(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong obj_j)
			{
				EarthView::World::Graphic::CParticleSystem *obj = (EarthView::World::Graphic::CParticleSystem*) obj_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyParticleSystem(obj);
				}
				else
				{
					pObjectX->destroyParticleSystem(obj);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyParticleSystem_1CParticleSystem(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyParticleSystem_CParticleSystem_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyParticleSystem_CParticleSystem_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyParticleSystem_1CParticleSystem_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong obj_j)
			{
				EarthView::World::Graphic::CParticleSystem *obj = (EarthView::World::Graphic::CParticleSystem*) obj_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyParticleSystem(obj);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyParticleSystem_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyParticleSystem(name);
				}
				else
				{
					pObjectX->destroyParticleSystem(name);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyParticleSystem_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyParticleSystem_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyParticleSystem_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyParticleSystem_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyParticleSystem(name);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllParticleSystems_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllParticleSystems();
				}
				else
				{
					pObjectX->destroyAllParticleSystems();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyAllParticleSystems_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllParticleSystems_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllParticleSystems_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllParticleSystems_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllParticleSystems();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_clearScene_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::clearScene();
				}
				else
				{
					pObjectX->clearScene();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1clearScene_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_clearScene_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"clearScene_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_clearScene_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::clearScene();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setAmbientLight_1CColourValue(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong colour_j)
			{
				const EarthView::World::Graphic::CColourValue &colour = *(EarthView::World::Graphic::CColourValue*) colour_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->setAmbientLight(colour);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getAmbientLight_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::CColourValue& __values1 = pObjectX->getAmbientLight();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_prepareWorldGeometry_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring filename_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* filename_ch = (const ev_char*)__env->GetStringUTFChars(filename_j,JNI_FALSE);
				const EVString filename = filename_ch;
				__env->ReleaseStringUTFChars(filename_j, (const char *)filename_ch);
				#else
				const ev_wchar* filename_ch = (const ev_wchar*)__env->GetStringChars(filename_j,JNI_FALSE);
				const EVString filename = filename_ch;
				__env->ReleaseStringChars(filename_j, (const jchar *)filename_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::prepareWorldGeometry(filename);
				}
				else
				{
					pObjectX->prepareWorldGeometry(filename);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1prepareWorldGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_prepareWorldGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"prepareWorldGeometry_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_prepareWorldGeometry_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring filename_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* filename_ch = (const ev_char*)__env->GetStringUTFChars(filename_j,JNI_FALSE);
				const EVString filename = filename_ch;
				__env->ReleaseStringUTFChars(filename_j, (const char *)filename_ch);
				#else
				const ev_wchar* filename_ch = (const ev_wchar*)__env->GetStringChars(filename_j,JNI_FALSE);
				const EVString filename = filename_ch;
				__env->ReleaseStringChars(filename_j, (const jchar *)filename_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::prepareWorldGeometry(filename);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_prepareWorldGeometry_1DataStreamPtr_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong stream_j, jstring typeName_j)
			{
				EarthView::World::Core::DataStreamPtr &stream = *(EarthView::World::Core::DataStreamPtr*) stream_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::prepareWorldGeometry(stream, typeName);
				}
				else
				{
					pObjectX->prepareWorldGeometry(stream, typeName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1prepareWorldGeometry_1DataStreamPtr_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_prepareWorldGeometry_DataStreamPtr_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"prepareWorldGeometry_DataStreamPtr_EVString_callback", "(JLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_prepareWorldGeometry_1DataStreamPtr_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong stream_j, jstring typeName_j)
			{
				EarthView::World::Core::DataStreamPtr &stream = *(EarthView::World::Core::DataStreamPtr*) stream_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::prepareWorldGeometry(stream, typeName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_prepareWorldGeometry_1DataStreamPtr(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong stream_j)
			{
				EarthView::World::Core::DataStreamPtr &stream = *(EarthView::World::Core::DataStreamPtr*) stream_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::prepareWorldGeometry(stream);
				}
				else
				{
					pObjectX->prepareWorldGeometry(stream);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1prepareWorldGeometry_1DataStreamPtr(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_prepareWorldGeometry_DataStreamPtr_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"prepareWorldGeometry_DataStreamPtr_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_prepareWorldGeometry_1DataStreamPtr_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong stream_j)
			{
				EarthView::World::Core::DataStreamPtr &stream = *(EarthView::World::Core::DataStreamPtr*) stream_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::prepareWorldGeometry(stream);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setWorldGeometry_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring filename_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* filename_ch = (const ev_char*)__env->GetStringUTFChars(filename_j,JNI_FALSE);
				const EVString filename = filename_ch;
				__env->ReleaseStringUTFChars(filename_j, (const char *)filename_ch);
				#else
				const ev_wchar* filename_ch = (const ev_wchar*)__env->GetStringChars(filename_j,JNI_FALSE);
				const EVString filename = filename_ch;
				__env->ReleaseStringChars(filename_j, (const jchar *)filename_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setWorldGeometry(filename);
				}
				else
				{
					pObjectX->setWorldGeometry(filename);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setWorldGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setWorldGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setWorldGeometry_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setWorldGeometry_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring filename_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* filename_ch = (const ev_char*)__env->GetStringUTFChars(filename_j,JNI_FALSE);
				const EVString filename = filename_ch;
				__env->ReleaseStringUTFChars(filename_j, (const char *)filename_ch);
				#else
				const ev_wchar* filename_ch = (const ev_wchar*)__env->GetStringChars(filename_j,JNI_FALSE);
				const EVString filename = filename_ch;
				__env->ReleaseStringChars(filename_j, (const jchar *)filename_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setWorldGeometry(filename);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setWorldGeometry_1DataStreamPtr_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong stream_j, jstring typeName_j)
			{
				EarthView::World::Core::DataStreamPtr &stream = *(EarthView::World::Core::DataStreamPtr*) stream_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setWorldGeometry(stream, typeName);
				}
				else
				{
					pObjectX->setWorldGeometry(stream, typeName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setWorldGeometry_1DataStreamPtr_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setWorldGeometry_DataStreamPtr_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setWorldGeometry_DataStreamPtr_EVString_callback", "(JLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setWorldGeometry_1DataStreamPtr_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong stream_j, jstring typeName_j)
			{
				EarthView::World::Core::DataStreamPtr &stream = *(EarthView::World::Core::DataStreamPtr*) stream_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setWorldGeometry(stream, typeName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setWorldGeometry_1DataStreamPtr(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong stream_j)
			{
				EarthView::World::Core::DataStreamPtr &stream = *(EarthView::World::Core::DataStreamPtr*) stream_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setWorldGeometry(stream);
				}
				else
				{
					pObjectX->setWorldGeometry(stream);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setWorldGeometry_1DataStreamPtr(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setWorldGeometry_DataStreamPtr_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setWorldGeometry_DataStreamPtr_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setWorldGeometry_1DataStreamPtr_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong stream_j)
			{
				EarthView::World::Core::DataStreamPtr &stream = *(EarthView::World::Core::DataStreamPtr*) stream_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setWorldGeometry(stream);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_estimateWorldGeometry_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring filename_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* filename_ch = (const ev_char*)__env->GetStringUTFChars(filename_j,JNI_FALSE);
				const EVString filename = filename_ch;
				__env->ReleaseStringUTFChars(filename_j, (const char *)filename_ch);
				#else
				const ev_wchar* filename_ch = (const ev_wchar*)__env->GetStringChars(filename_j,JNI_FALSE);
				const EVString filename = filename_ch;
				__env->ReleaseStringChars(filename_j, (const jchar *)filename_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_size_t __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::estimateWorldGeometry(filename);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					ev_size_t __values1 = pObjectX->estimateWorldGeometry(filename);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1estimateWorldGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_estimateWorldGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"estimateWorldGeometry_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_estimateWorldGeometry_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring filename_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* filename_ch = (const ev_char*)__env->GetStringUTFChars(filename_j,JNI_FALSE);
				const EVString filename = filename_ch;
				__env->ReleaseStringUTFChars(filename_j, (const char *)filename_ch);
				#else
				const ev_wchar* filename_ch = (const ev_wchar*)__env->GetStringChars(filename_j,JNI_FALSE);
				const EVString filename = filename_ch;
				__env->ReleaseStringChars(filename_j, (const jchar *)filename_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_size_t __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::estimateWorldGeometry(filename);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_estimateWorldGeometry_1DataStreamPtr_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong stream_j, jstring typeName_j)
			{
				EarthView::World::Core::DataStreamPtr &stream = *(EarthView::World::Core::DataStreamPtr*) stream_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_size_t __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::estimateWorldGeometry(stream, typeName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					ev_size_t __values1 = pObjectX->estimateWorldGeometry(stream, typeName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1estimateWorldGeometry_1DataStreamPtr_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_estimateWorldGeometry_DataStreamPtr_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"estimateWorldGeometry_DataStreamPtr_EVString_callback", "(JLjava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_estimateWorldGeometry_1DataStreamPtr_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong stream_j, jstring typeName_j)
			{
				EarthView::World::Core::DataStreamPtr &stream = *(EarthView::World::Core::DataStreamPtr*) stream_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_size_t __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::estimateWorldGeometry(stream, typeName);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_estimateWorldGeometry_1DataStreamPtr(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong stream_j)
			{
				EarthView::World::Core::DataStreamPtr &stream = *(EarthView::World::Core::DataStreamPtr*) stream_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_size_t __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::estimateWorldGeometry(stream);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					ev_size_t __values1 = pObjectX->estimateWorldGeometry(stream);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1estimateWorldGeometry_1DataStreamPtr(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_estimateWorldGeometry_DataStreamPtr_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"estimateWorldGeometry_DataStreamPtr_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_estimateWorldGeometry_1DataStreamPtr_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong stream_j)
			{
				EarthView::World::Core::DataStreamPtr &stream = *(EarthView::World::Core::DataStreamPtr*) stream_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_size_t __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::estimateWorldGeometry(stream);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSuggestedViewpoint_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean random_j)
			{
				ev_bool random = (ev_bool) random_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::ViewPoint __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSuggestedViewpoint(random);
					EarthView::World::Graphic::ViewPoint *returnvalues = new EarthView::World::Graphic::ViewPoint(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::ViewPoint __values1 = pObjectX->getSuggestedViewpoint(random);
					EarthView::World::Graphic::ViewPoint *returnvalues = new EarthView::World::Graphic::ViewPoint(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSuggestedViewpoint_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSuggestedViewpoint_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSuggestedViewpoint_ev_bool_callback", "(Z)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSuggestedViewpoint_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean random_j)
			{
				ev_bool random = (ev_bool) random_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::ViewPoint __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSuggestedViewpoint(random);
				EarthView::World::Graphic::ViewPoint *returnvalues = new EarthView::World::Graphic::ViewPoint(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSuggestedViewpoint_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::ViewPoint __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSuggestedViewpoint();
					EarthView::World::Graphic::ViewPoint *returnvalues = new EarthView::World::Graphic::ViewPoint(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::ViewPoint __values1 = pObjectX->getSuggestedViewpoint();
					EarthView::World::Graphic::ViewPoint *returnvalues = new EarthView::World::Graphic::ViewPoint(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSuggestedViewpoint_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSuggestedViewpoint_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSuggestedViewpoint_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSuggestedViewpoint_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::ViewPoint __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSuggestedViewpoint();
				EarthView::World::Graphic::ViewPoint *returnvalues = new EarthView::World::Graphic::ViewPoint(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_setOption_1EVString_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring strKey_j, jlong pValue_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* strKey_ch = (const ev_char*)__env->GetStringUTFChars(strKey_j,JNI_FALSE);
				const EVString strKey = strKey_ch;
				__env->ReleaseStringUTFChars(strKey_j, (const char *)strKey_ch);
				#else
				const ev_wchar* strKey_ch = (const ev_wchar*)__env->GetStringChars(strKey_j,JNI_FALSE);
				const EVString strKey = strKey_ch;
				__env->ReleaseStringChars(strKey_j, (const jchar *)strKey_ch);
				#endif
				const void *pValue = (const void*) pValue_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::setOption(strKey, pValue);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->setOption(strKey, pValue);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setOption_1EVString_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setOption_EVString_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setOption_EVString_void_callback", "(Ljava/lang/String;J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_setOption_1EVString_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring strKey_j, jlong pValue_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* strKey_ch = (const ev_char*)__env->GetStringUTFChars(strKey_j,JNI_FALSE);
				const EVString strKey = strKey_ch;
				__env->ReleaseStringUTFChars(strKey_j, (const char *)strKey_ch);
				#else
				const ev_wchar* strKey_ch = (const ev_wchar*)__env->GetStringChars(strKey_j,JNI_FALSE);
				const EVString strKey = strKey_ch;
				__env->ReleaseStringChars(strKey_j, (const jchar *)strKey_ch);
				#endif
				const void *pValue = (const void*) pValue_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::setOption(strKey, pValue);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getOption_1EVString_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring strKey_j, jlong pDestValue_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* strKey_ch = (const ev_char*)__env->GetStringUTFChars(strKey_j,JNI_FALSE);
				const EVString strKey = strKey_ch;
				__env->ReleaseStringUTFChars(strKey_j, (const char *)strKey_ch);
				#else
				const ev_wchar* strKey_ch = (const ev_wchar*)__env->GetStringChars(strKey_j,JNI_FALSE);
				const EVString strKey = strKey_ch;
				__env->ReleaseStringChars(strKey_j, (const jchar *)strKey_ch);
				#endif
				void *pDestValue = (void*) pDestValue_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getOption(strKey, pDestValue);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getOption(strKey, pDestValue);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getOption_1EVString_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getOption_EVString_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getOption_EVString_void_callback", "(Ljava/lang/String;J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getOption_1EVString_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring strKey_j, jlong pDestValue_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* strKey_ch = (const ev_char*)__env->GetStringUTFChars(strKey_j,JNI_FALSE);
				const EVString strKey = strKey_ch;
				__env->ReleaseStringUTFChars(strKey_j, (const char *)strKey_ch);
				#else
				const ev_wchar* strKey_ch = (const ev_wchar*)__env->GetStringChars(strKey_j,JNI_FALSE);
				const EVString strKey = strKey_ch;
				__env->ReleaseStringChars(strKey_j, (const jchar *)strKey_ch);
				#endif
				void *pDestValue = (void*) pDestValue_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getOption(strKey, pDestValue);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasOption_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring strKey_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* strKey_ch = (const ev_char*)__env->GetStringUTFChars(strKey_j,JNI_FALSE);
				const EVString strKey = strKey_ch;
				__env->ReleaseStringUTFChars(strKey_j, (const char *)strKey_ch);
				#else
				const ev_wchar* strKey_ch = (const ev_wchar*)__env->GetStringChars(strKey_j,JNI_FALSE);
				const EVString strKey = strKey_ch;
				__env->ReleaseStringChars(strKey_j, (const jchar *)strKey_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasOption(strKey);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->hasOption(strKey);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1hasOption_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasOption_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasOption_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasOption_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring strKey_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* strKey_ch = (const ev_char*)__env->GetStringUTFChars(strKey_j,JNI_FALSE);
				const EVString strKey = strKey_ch;
				__env->ReleaseStringUTFChars(strKey_j, (const char *)strKey_ch);
				#else
				const ev_wchar* strKey_ch = (const ev_wchar*)__env->GetStringChars(strKey_j,JNI_FALSE);
				const EVString strKey = strKey_ch;
				__env->ReleaseStringChars(strKey_j, (const jchar *)strKey_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasOption(strKey);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getOptionValues_1EVString_1StringVector(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring strKey_j, jlong refValueList_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* strKey_ch = (const ev_char*)__env->GetStringUTFChars(strKey_j,JNI_FALSE);
				const EVString strKey = strKey_ch;
				__env->ReleaseStringUTFChars(strKey_j, (const char *)strKey_ch);
				#else
				const ev_wchar* strKey_ch = (const ev_wchar*)__env->GetStringChars(strKey_j,JNI_FALSE);
				const EVString strKey = strKey_ch;
				__env->ReleaseStringChars(strKey_j, (const jchar *)strKey_ch);
				#endif
				EarthView::World::Core::StringVector &refValueList = *(EarthView::World::Core::StringVector*) refValueList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getOptionValues(strKey, refValueList);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getOptionValues(strKey, refValueList);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getOptionValues_1EVString_1StringVector(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getOptionValues_EVString_StringVector_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getOptionValues_EVString_StringVector_callback", "(Ljava/lang/String;J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getOptionValues_1EVString_1StringVector_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring strKey_j, jlong refValueList_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* strKey_ch = (const ev_char*)__env->GetStringUTFChars(strKey_j,JNI_FALSE);
				const EVString strKey = strKey_ch;
				__env->ReleaseStringUTFChars(strKey_j, (const char *)strKey_ch);
				#else
				const ev_wchar* strKey_ch = (const ev_wchar*)__env->GetStringChars(strKey_j,JNI_FALSE);
				const EVString strKey = strKey_ch;
				__env->ReleaseStringChars(strKey_j, (const jchar *)strKey_ch);
				#endif
				EarthView::World::Core::StringVector &refValueList = *(EarthView::World::Core::StringVector*) refValueList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getOptionValues(strKey, refValueList);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getOptionKeys_1StringVector(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong refKeys_j)
			{
				EarthView::World::Core::StringVector &refKeys = *(EarthView::World::Core::StringVector*) refKeys_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getOptionKeys(refKeys);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getOptionKeys(refKeys);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getOptionKeys_1StringVector(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getOptionKeys_StringVector_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getOptionKeys_StringVector_callback", "(J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getOptionKeys_1StringVector_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong refKeys_j)
			{
				EarthView::World::Core::StringVector &refKeys = *(EarthView::World::Core::StringVector*) refKeys_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getOptionKeys(refKeys);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1updateSceneGraph_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_updateSceneGraph(cam);
				}
				else
				{
					pObjectX->_updateSceneGraph(cam);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1updateSceneGraph_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__updateSceneGraph_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_updateSceneGraph_CCamera_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1updateSceneGraph_1CCamera_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_updateSceneGraph(cam);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1findVisibleObjects_1CCamera_1VisibleObjectsBoundsInfo_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j, jlong visibleBounds_j, jboolean onlyShadowCasters_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *visibleBounds = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*) visibleBounds_j;
				ev_bool onlyShadowCasters = (ev_bool) onlyShadowCasters_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_findVisibleObjects(cam, visibleBounds, onlyShadowCasters);
				}
				else
				{
					pObjectX->_findVisibleObjects(cam, visibleBounds, onlyShadowCasters);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1findVisibleObjects_1CCamera_1VisibleObjectsBoundsInfo_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_findVisibleObjects_CCamera_VisibleObjectsBoundsInfo_ev_bool_callback", "(JJZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1findVisibleObjects_1CCamera_1VisibleObjectsBoundsInfo_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j, jlong visibleBounds_j, jboolean onlyShadowCasters_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::VisibleObjectsBoundsInfo *visibleBounds = (EarthView::World::Graphic::VisibleObjectsBoundsInfo*) visibleBounds_j;
				ev_bool onlyShadowCasters = (ev_bool) onlyShadowCasters_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_findVisibleObjects(cam, visibleBounds, onlyShadowCasters);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1applySceneAnimations_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_applySceneAnimations();
				}
				else
				{
					pObjectX->_applySceneAnimations();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1applySceneAnimations_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__applySceneAnimations_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_applySceneAnimations_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1applySceneAnimations_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_applySceneAnimations();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1renderVisibleObjects_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_renderVisibleObjects();
				}
				else
				{
					pObjectX->_renderVisibleObjects();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1renderVisibleObjects_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__renderVisibleObjects_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_renderVisibleObjects_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1renderVisibleObjects_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_renderVisibleObjects();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1renderScene_1CCamera_1CViewport_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong camera_j, jlong vp_j, jboolean includeOverlays_j)
			{
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				ev_bool includeOverlays = (ev_bool) includeOverlays_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_renderScene(camera, vp, includeOverlays);
				}
				else
				{
					pObjectX->_renderScene(camera, vp, includeOverlays);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1renderScene_1CCamera_1CViewport_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__renderScene_CCamera_CViewport_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_renderScene_CCamera_CViewport_ev_bool_callback", "(JJZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1renderScene_1CCamera_1CViewport_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong camera_j, jlong vp_j, jboolean includeOverlays_j)
			{
				EarthView::World::Graphic::CCamera *camera = (EarthView::World::Graphic::CCamera*) camera_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				ev_bool includeOverlays = (ev_bool) includeOverlays_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_renderScene(camera, vp, includeOverlays);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1queueSkiesForRendering_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_queueSkiesForRendering(cam);
				}
				else
				{
					pObjectX->_queueSkiesForRendering(cam);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1queueSkiesForRendering_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__queueSkiesForRendering_CCamera_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_queueSkiesForRendering_CCamera_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1queueSkiesForRendering_1CCamera_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j)
			{
				EarthView::World::Graphic::CCamera *cam = (EarthView::World::Graphic::CCamera*) cam_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_queueSkiesForRendering(cam);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setDestinationRenderSystem_1CRenderSystem(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ref_sys_j)
			{
				EarthView::World::Graphic::CRenderSystem *ref_sys = (EarthView::World::Graphic::CRenderSystem*) ref_sys_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setDestinationRenderSystem(ref_sys);
				}
				else
				{
					pObjectX->_setDestinationRenderSystem(ref_sys);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setDestinationRenderSystem_1CRenderSystem(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setDestinationRenderSystem_CRenderSystem_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setDestinationRenderSystem_CRenderSystem_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setDestinationRenderSystem_1CRenderSystem_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ref_sys_j)
			{
				EarthView::World::Graphic::CRenderSystem *ref_sys = (EarthView::World::Graphic::CRenderSystem*) ref_sys_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setDestinationRenderSystem(ref_sys);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool_1Real_1ev_1int32_1ev_1int32_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jboolean drawFirst_j, jdouble bow_j, jint xsegments_j, jint ysegments_j, jstring groupName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				Real bow = (Real) bow_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow, xsegments, ysegments, groupName);
				}
				else
				{
					pObjectX->setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow, xsegments, ysegments, groupName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool_1Real_1ev_1int32_1ev_1int32_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_callback", "(ZJLjava/lang/String;DDZDIILjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool_1Real_1ev_1int32_1ev_1int32_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jboolean drawFirst_j, jdouble bow_j, jint xsegments_j, jint ysegments_j, jstring groupName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				Real bow = (Real) bow_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow, xsegments, ysegments, groupName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool_1Real_1ev_1int32_1ev_1int32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jboolean drawFirst_j, jdouble bow_j, jint xsegments_j, jint ysegments_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				Real bow = (Real) bow_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow, xsegments, ysegments);
				}
				else
				{
					pObjectX->setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow, xsegments, ysegments);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool_1Real_1ev_1int32_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_callback", "(ZJLjava/lang/String;DDZDII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool_1Real_1ev_1int32_1ev_1int32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jboolean drawFirst_j, jdouble bow_j, jint xsegments_j, jint ysegments_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				Real bow = (Real) bow_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow, xsegments, ysegments);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool_1Real_1ev_1int32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jboolean drawFirst_j, jdouble bow_j, jint xsegments_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				Real bow = (Real) bow_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow, xsegments);
				}
				else
				{
					pObjectX->setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow, xsegments);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool_1Real_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_callback", "(ZJLjava/lang/String;DDZDI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool_1Real_1ev_1int32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jboolean drawFirst_j, jdouble bow_j, jint xsegments_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				Real bow = (Real) bow_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow, xsegments);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jboolean drawFirst_j, jdouble bow_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				Real bow = (Real) bow_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow);
				}
				else
				{
					pObjectX->setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_callback", "(ZJLjava/lang/String;DDZD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jboolean drawFirst_j, jdouble bow_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				Real bow = (Real) bow_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst, bow);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jboolean drawFirst_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst);
				}
				else
				{
					pObjectX->setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_bool_callback", "(ZJLjava/lang/String;DDZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jboolean drawFirst_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling, drawFirst);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling);
				}
				else
				{
					pObjectX->setSkyPlane(enable, plane, materialName, scale, tiling);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback", "(ZJLjava/lang/String;DD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlane(enable, plane, materialName, scale, tiling);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlane(enable, plane, materialName, scale);
				}
				else
				{
					pObjectX->setSkyPlane(enable, plane, materialName, scale);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlane_ev_bool_CPlane_EVString_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlane_ev_bool_CPlane_EVString_Real_callback", "(ZJLjava/lang/String;D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlane(enable, plane, materialName, scale);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlane_1ev_1bool_1CPlane_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlane(enable, plane, materialName);
				}
				else
				{
					pObjectX->setSkyPlane(enable, plane, materialName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyPlane_1ev_1bool_1CPlane_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlane_ev_bool_CPlane_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlane_ev_bool_CPlane_EVString_callback", "(ZJLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlane_1ev_1bool_1CPlane_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlane(enable, plane, materialName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8_1Real_1ev_1int32_1ev_1int32_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jshort renderQueue_j, jdouble bow_j, jint xsegments_j, jint ysegments_j, jstring groupName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				Real bow = (Real) bow_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow, xsegments, ysegments, groupName);
				}
				else
				{
					pObjectX->_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow, xsegments, ysegments, groupName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8_1Real_1ev_1int32_1ev_1int32_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_callback", "(ZJLjava/lang/String;DDSDIILjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8_1Real_1ev_1int32_1ev_1int32_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jshort renderQueue_j, jdouble bow_j, jint xsegments_j, jint ysegments_j, jstring groupName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				Real bow = (Real) bow_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow, xsegments, ysegments, groupName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8_1Real_1ev_1int32_1ev_1int32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jshort renderQueue_j, jdouble bow_j, jint xsegments_j, jint ysegments_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				Real bow = (Real) bow_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow, xsegments, ysegments);
				}
				else
				{
					pObjectX->_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow, xsegments, ysegments);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8_1Real_1ev_1int32_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_callback", "(ZJLjava/lang/String;DDSDII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8_1Real_1ev_1int32_1ev_1int32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jshort renderQueue_j, jdouble bow_j, jint xsegments_j, jint ysegments_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				Real bow = (Real) bow_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow, xsegments, ysegments);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8_1Real_1ev_1int32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jshort renderQueue_j, jdouble bow_j, jint xsegments_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				Real bow = (Real) bow_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow, xsegments);
				}
				else
				{
					pObjectX->_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow, xsegments);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8_1Real_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_callback", "(ZJLjava/lang/String;DDSDI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8_1Real_1ev_1int32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jshort renderQueue_j, jdouble bow_j, jint xsegments_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				Real bow = (Real) bow_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow, xsegments);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jshort renderQueue_j, jdouble bow_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				Real bow = (Real) bow_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow);
				}
				else
				{
					pObjectX->_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_callback", "(ZJLjava/lang/String;DDSD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jshort renderQueue_j, jdouble bow_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				Real bow = (Real) bow_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue, bow);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jshort renderQueue_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue);
				}
				else
				{
					pObjectX->_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_ev_uint8_callback", "(ZJLjava/lang/String;DDS)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1ev_1uint8_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j, jshort renderQueue_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling, renderQueue);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling);
				}
				else
				{
					pObjectX->_setSkyPlane(enable, plane, materialName, scale, tiling);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyPlane_ev_bool_CPlane_EVString_Real_Real_callback", "(ZJLjava/lang/String;DD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j, jdouble tiling_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				Real tiling = (Real) tiling_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyPlane(enable, plane, materialName, scale, tiling);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyPlane(enable, plane, materialName, scale);
				}
				else
				{
					pObjectX->_setSkyPlane(enable, plane, materialName, scale);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyPlane_ev_bool_CPlane_EVString_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyPlane_ev_bool_CPlane_EVString_Real_callback", "(ZJLjava/lang/String;D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyPlane_1ev_1bool_1CPlane_1EVString_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j, jdouble scale_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real scale = (Real) scale_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyPlane(enable, plane, materialName, scale);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyPlane_1ev_1bool_1CPlane_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyPlane(enable, plane, materialName);
				}
				else
				{
					pObjectX->_setSkyPlane(enable, plane, materialName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyPlane_1ev_1bool_1CPlane_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyPlane_ev_bool_CPlane_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyPlane_ev_bool_CPlane_EVString_callback", "(ZJLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyPlane_1ev_1bool_1CPlane_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jlong plane_j, jstring materialName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				const EarthView::World::Spatial::Math::CPlane &plane = *(EarthView::World::Spatial::Math::CPlane*) plane_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyPlane(enable, plane, materialName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlaneEnabled_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlaneEnabled(enable);
				}
				else
				{
					pObjectX->setSkyPlaneEnabled(enable);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyPlaneEnabled_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyPlaneEnabled_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyPlaneEnabled_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyPlaneEnabled_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyPlaneEnabled(enable);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isSkyPlaneEnabled_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isSkyPlaneEnabled();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->isSkyPlaneEnabled();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1isSkyPlaneEnabled_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isSkyPlaneEnabled_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isSkyPlaneEnabled_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isSkyPlaneEnabled_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isSkyPlaneEnabled();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSkyPlaneNode_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSkyPlaneNode();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->getSkyPlaneNode();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSkyPlaneNode_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSkyPlaneNode_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSkyPlaneNode_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSkyPlaneNode_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSkyPlaneNode();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSkyPlaneGenParameters_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					const EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSkyPlaneGenParameters();
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
				else
				{
					const EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters& __values1 = pObjectX->getSkyPlaneGenParameters();
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSkyPlaneGenParameters_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSkyPlaneGenParameters_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSkyPlaneGenParameters_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSkyPlaneGenParameters_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::CSceneManager::SkyPlaneGenParameters& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSkyPlaneGenParameters();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyBox_1ev_1bool_1EVString_1Real_1ev_1bool_1CQuaternion_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble distance_j, jboolean drawFirst_j, jlong orientation_j, jstring groupName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyBox(enable, materialName, distance, drawFirst, orientation, groupName);
				}
				else
				{
					pObjectX->setSkyBox(enable, materialName, distance, drawFirst, orientation, groupName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1bool_1CQuaternion_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_callback", "(ZLjava/lang/String;DZJLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyBox_1ev_1bool_1EVString_1Real_1ev_1bool_1CQuaternion_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble distance_j, jboolean drawFirst_j, jlong orientation_j, jstring groupName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyBox(enable, materialName, distance, drawFirst, orientation, groupName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyBox_1ev_1bool_1EVString_1Real_1ev_1bool_1CQuaternion(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble distance_j, jboolean drawFirst_j, jlong orientation_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyBox(enable, materialName, distance, drawFirst, orientation);
				}
				else
				{
					pObjectX->setSkyBox(enable, materialName, distance, drawFirst, orientation);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1bool_1CQuaternion(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyBox_ev_bool_EVString_Real_ev_bool_CQuaternion_callback", "(ZLjava/lang/String;DZJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyBox_1ev_1bool_1EVString_1Real_1ev_1bool_1CQuaternion_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble distance_j, jboolean drawFirst_j, jlong orientation_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyBox(enable, materialName, distance, drawFirst, orientation);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyBox_1ev_1bool_1EVString_1Real_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble distance_j, jboolean drawFirst_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyBox(enable, materialName, distance, drawFirst);
				}
				else
				{
					pObjectX->setSkyBox(enable, materialName, distance, drawFirst);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyBox_ev_bool_EVString_Real_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyBox_ev_bool_EVString_Real_ev_bool_callback", "(ZLjava/lang/String;DZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyBox_1ev_1bool_1EVString_1Real_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble distance_j, jboolean drawFirst_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyBox(enable, materialName, distance, drawFirst);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyBox_1ev_1bool_1EVString_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble distance_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real distance = (Real) distance_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyBox(enable, materialName, distance);
				}
				else
				{
					pObjectX->setSkyBox(enable, materialName, distance);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyBox_1ev_1bool_1EVString_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyBox_ev_bool_EVString_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyBox_ev_bool_EVString_Real_callback", "(ZLjava/lang/String;D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyBox_1ev_1bool_1EVString_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble distance_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real distance = (Real) distance_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyBox(enable, materialName, distance);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyBox_1ev_1bool_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyBox(enable, materialName);
				}
				else
				{
					pObjectX->setSkyBox(enable, materialName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyBox_1ev_1bool_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyBox_ev_bool_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyBox_ev_bool_EVString_callback", "(ZLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyBox_1ev_1bool_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyBox(enable, materialName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1uint8_1CQuaternion_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble distance_j, jshort renderQueue_j, jlong orientation_j, jstring groupName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyBox(enable, materialName, distance, renderQueue, orientation, groupName);
				}
				else
				{
					pObjectX->_setSkyBox(enable, materialName, distance, renderQueue, orientation, groupName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1uint8_1CQuaternion_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_callback", "(ZLjava/lang/String;DSJLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1uint8_1CQuaternion_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble distance_j, jshort renderQueue_j, jlong orientation_j, jstring groupName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyBox(enable, materialName, distance, renderQueue, orientation, groupName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1uint8_1CQuaternion(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble distance_j, jshort renderQueue_j, jlong orientation_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyBox(enable, materialName, distance, renderQueue, orientation);
				}
				else
				{
					pObjectX->_setSkyBox(enable, materialName, distance, renderQueue, orientation);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1uint8_1CQuaternion(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyBox_ev_bool_EVString_Real_ev_uint8_CQuaternion_callback", "(ZLjava/lang/String;DSJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1uint8_1CQuaternion_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble distance_j, jshort renderQueue_j, jlong orientation_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyBox(enable, materialName, distance, renderQueue, orientation);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1uint8(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble distance_j, jshort renderQueue_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyBox(enable, materialName, distance, renderQueue);
				}
				else
				{
					pObjectX->_setSkyBox(enable, materialName, distance, renderQueue);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyBox_ev_bool_EVString_Real_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyBox_ev_bool_EVString_Real_ev_uint8_callback", "(ZLjava/lang/String;DS)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyBox_1ev_1bool_1EVString_1Real_1ev_1uint8_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble distance_j, jshort renderQueue_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyBox(enable, materialName, distance, renderQueue);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyBox_1ev_1bool_1EVString_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble distance_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real distance = (Real) distance_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyBox(enable, materialName, distance);
				}
				else
				{
					pObjectX->_setSkyBox(enable, materialName, distance);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyBox_1ev_1bool_1EVString_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyBox_ev_bool_EVString_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyBox_ev_bool_EVString_Real_callback", "(ZLjava/lang/String;D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyBox_1ev_1bool_1EVString_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble distance_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real distance = (Real) distance_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyBox(enable, materialName, distance);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyBox_1ev_1bool_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyBox(enable, materialName);
				}
				else
				{
					pObjectX->_setSkyBox(enable, materialName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyBox_1ev_1bool_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyBox_ev_bool_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyBox_ev_bool_EVString_callback", "(ZLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyBox_1ev_1bool_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyBox(enable, materialName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyBoxEnabled_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyBoxEnabled(enable);
				}
				else
				{
					pObjectX->setSkyBoxEnabled(enable);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyBoxEnabled_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyBoxEnabled_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyBoxEnabled_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyBoxEnabled_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyBoxEnabled(enable);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isSkyBoxEnabled_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isSkyBoxEnabled();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->isSkyBoxEnabled();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1isSkyBoxEnabled_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isSkyBoxEnabled_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isSkyBoxEnabled_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isSkyBoxEnabled_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isSkyBoxEnabled();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSkyBoxNode_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSkyBoxNode();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->getSkyBoxNode();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSkyBoxNode_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSkyBoxNode_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSkyBoxNode_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSkyBoxNode_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSkyBoxNode();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSkyBoxGenParameters_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					const EarthView::World::Graphic::CSceneManager::SkyBoxGenParameters& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSkyBoxGenParameters();
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
				else
				{
					const EarthView::World::Graphic::CSceneManager::SkyBoxGenParameters& __values1 = pObjectX->getSkyBoxGenParameters();
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSkyBoxGenParameters_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSkyBoxGenParameters_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSkyBoxGenParameters_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSkyBoxGenParameters_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::CSceneManager::SkyBoxGenParameters& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSkyBoxGenParameters();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jboolean drawFirst_j, jlong orientation_j, jint xsegments_j, jint ysegments_j, jint ysegments_keep_j, jstring groupName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				ev_int32 ysegments_keep = (ev_int32) ysegments_keep_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments, ysegments, ysegments_keep, groupName);
				}
				else
				{
					pObjectX->setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments, ysegments, ysegments_keep, groupName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback", "(ZLjava/lang/String;DDDZJIIILjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jboolean drawFirst_j, jlong orientation_j, jint xsegments_j, jint ysegments_j, jint ysegments_keep_j, jstring groupName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				ev_int32 ysegments_keep = (ev_int32) ysegments_keep_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments, ysegments, ysegments_keep, groupName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jboolean drawFirst_j, jlong orientation_j, jint xsegments_j, jint ysegments_j, jint ysegments_keep_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				ev_int32 ysegments_keep = (ev_int32) ysegments_keep_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments, ysegments, ysegments_keep);
				}
				else
				{
					pObjectX->setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments, ysegments, ysegments_keep);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_callback", "(ZLjava/lang/String;DDDZJIII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jboolean drawFirst_j, jlong orientation_j, jint xsegments_j, jint ysegments_j, jint ysegments_keep_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				ev_int32 ysegments_keep = (ev_int32) ysegments_keep_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments, ysegments, ysegments_keep);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion_1ev_1int32_1ev_1int32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jboolean drawFirst_j, jlong orientation_j, jint xsegments_j, jint ysegments_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments, ysegments);
				}
				else
				{
					pObjectX->setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments, ysegments);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion_1ev_1int32_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_callback", "(ZLjava/lang/String;DDDZJII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion_1ev_1int32_1ev_1int32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jboolean drawFirst_j, jlong orientation_j, jint xsegments_j, jint ysegments_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments, ysegments);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion_1ev_1int32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jboolean drawFirst_j, jlong orientation_j, jint xsegments_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments);
				}
				else
				{
					pObjectX->setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_callback", "(ZLjava/lang/String;DDDZJI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion_1ev_1int32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jboolean drawFirst_j, jlong orientation_j, jint xsegments_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation, xsegments);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jboolean drawFirst_j, jlong orientation_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation);
				}
				else
				{
					pObjectX->setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_callback", "(ZLjava/lang/String;DDDZJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1CQuaternion_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jboolean drawFirst_j, jlong orientation_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, orientation);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jboolean drawFirst_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst);
				}
				else
				{
					pObjectX->setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_Real_Real_ev_bool_callback", "(ZLjava/lang/String;DDDZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jboolean drawFirst_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_bool drawFirst = (ev_bool) drawFirst_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance);
				}
				else
				{
					pObjectX->setSkyDome(enable, materialName, curvature, tiling, distance);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_Real_Real_callback", "(ZLjava/lang/String;DDD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature, tiling, distance);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature, tiling);
				}
				else
				{
					pObjectX->setSkyDome(enable, materialName, curvature, tiling);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_Real_callback", "(ZLjava/lang/String;DD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature, tiling);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature);
				}
				else
				{
					pObjectX->setSkyDome(enable, materialName, curvature);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyDome_1ev_1bool_1EVString_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_Real_callback", "(ZLjava/lang/String;D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName, curvature);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName);
				}
				else
				{
					pObjectX->setSkyDome(enable, materialName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyDome_1ev_1bool_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDome_ev_bool_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDome_ev_bool_EVString_callback", "(ZLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDome_1ev_1bool_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDome(enable, materialName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jshort renderQueue_j, jlong orientation_j, jint xsegments_j, jint ysegments_j, jint ysegments_keep_j, jstring groupName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				ev_int32 ysegments_keep = (ev_int32) ysegments_keep_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments, ysegments, ysegments_keep, groupName);
				}
				else
				{
					pObjectX->_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments, ysegments, ysegments_keep, groupName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_callback", "(ZLjava/lang/String;DDDSJIIILjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jshort renderQueue_j, jlong orientation_j, jint xsegments_j, jint ysegments_j, jint ysegments_keep_j, jstring groupName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				ev_int32 ysegments_keep = (ev_int32) ysegments_keep_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments, ysegments, ysegments_keep, groupName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jshort renderQueue_j, jlong orientation_j, jint xsegments_j, jint ysegments_j, jint ysegments_keep_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				ev_int32 ysegments_keep = (ev_int32) ysegments_keep_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments, ysegments, ysegments_keep);
				}
				else
				{
					pObjectX->_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments, ysegments, ysegments_keep);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_callback", "(ZLjava/lang/String;DDDSJIII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion_1ev_1int32_1ev_1int32_1ev_1int32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jshort renderQueue_j, jlong orientation_j, jint xsegments_j, jint ysegments_j, jint ysegments_keep_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				ev_int32 ysegments_keep = (ev_int32) ysegments_keep_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments, ysegments, ysegments_keep);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion_1ev_1int32_1ev_1int32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jshort renderQueue_j, jlong orientation_j, jint xsegments_j, jint ysegments_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments, ysegments);
				}
				else
				{
					pObjectX->_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments, ysegments);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion_1ev_1int32_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_callback", "(ZLjava/lang/String;DDDSJII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion_1ev_1int32_1ev_1int32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jshort renderQueue_j, jlong orientation_j, jint xsegments_j, jint ysegments_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				ev_int32 ysegments = (ev_int32) ysegments_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments, ysegments);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion_1ev_1int32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jshort renderQueue_j, jlong orientation_j, jint xsegments_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments);
				}
				else
				{
					pObjectX->_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion_1ev_1int32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_callback", "(ZLjava/lang/String;DDDSJI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion_1ev_1int32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jshort renderQueue_j, jlong orientation_j, jint xsegments_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				ev_int32 xsegments = (ev_int32) xsegments_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation, xsegments);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jshort renderQueue_j, jlong orientation_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation);
				}
				else
				{
					pObjectX->_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_callback", "(ZLjava/lang/String;DDDSJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1CQuaternion_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jshort renderQueue_j, jlong orientation_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				const EarthView::World::Spatial::Math::CQuaternion &orientation = *(EarthView::World::Spatial::Math::CQuaternion*) orientation_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue, orientation);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jshort renderQueue_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue);
				}
				else
				{
					pObjectX->_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_Real_Real_ev_uint8_callback", "(ZLjava/lang/String;DDDS)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1ev_1uint8_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j, jshort renderQueue_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				ev_uint8 renderQueue = (ev_uint8) renderQueue_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance, renderQueue);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance);
				}
				else
				{
					pObjectX->_setSkyDome(enable, materialName, curvature, tiling, distance);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_Real_Real_callback", "(ZLjava/lang/String;DDD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j, jdouble distance_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				Real distance = (Real) distance_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature, tiling, distance);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature, tiling);
				}
				else
				{
					pObjectX->_setSkyDome(enable, materialName, curvature, tiling);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_Real_callback", "(ZLjava/lang/String;DD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j, jdouble tiling_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				Real tiling = (Real) tiling_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature, tiling);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature);
				}
				else
				{
					pObjectX->_setSkyDome(enable, materialName, curvature);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyDome_1ev_1bool_1EVString_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_Real_callback", "(ZLjava/lang/String;D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j, jdouble curvature_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				Real curvature = (Real) curvature_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName, curvature);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName);
				}
				else
				{
					pObjectX->_setSkyDome(enable, materialName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setSkyDome_1ev_1bool_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setSkyDome_ev_bool_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setSkyDome_ev_bool_EVString_callback", "(ZLjava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setSkyDome_1ev_1bool_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j, jstring materialName_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setSkyDome(enable, materialName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDomeEnabled_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDomeEnabled(enable);
				}
				else
				{
					pObjectX->setSkyDomeEnabled(enable);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSkyDomeEnabled_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSkyDomeEnabled_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSkyDomeEnabled_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSkyDomeEnabled_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSkyDomeEnabled(enable);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isSkyDomeEnabled_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isSkyDomeEnabled();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->isSkyDomeEnabled();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1isSkyDomeEnabled_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isSkyDomeEnabled_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isSkyDomeEnabled_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isSkyDomeEnabled_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isSkyDomeEnabled();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSkyDomeNode_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSkyDomeNode();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->getSkyDomeNode();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSkyDomeNode_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSkyDomeNode_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSkyDomeNode_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSkyDomeNode_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CSceneNode* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSkyDomeNode();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSkyDomeGenParameters_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					const EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSkyDomeGenParameters();
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
				else
				{
					const EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters& __values1 = pObjectX->getSkyDomeGenParameters();
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSkyDomeGenParameters_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSkyDomeGenParameters_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSkyDomeGenParameters_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getSkyDomeGenParameters_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::CSceneManager::SkyDomeGenParameters& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSkyDomeGenParameters();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setFog_1FogMode_1CColourValue_1Real_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint mode_j, jlong colour_j, jdouble expDensity_j, jdouble linearStart_j, jdouble linearEnd_j)
			{
				EarthView::World::Graphic::FogMode mode = (EarthView::World::Graphic::FogMode) mode_j;
				const EarthView::World::Graphic::CColourValue &colour = *(EarthView::World::Graphic::CColourValue*) colour_j;
				Real expDensity = (Real) expDensity_j;
				Real linearStart = (Real) linearStart_j;
				Real linearEnd = (Real) linearEnd_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->setFog(mode, colour, expDensity, linearStart, linearEnd);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setFog_1FogMode_1CColourValue_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint mode_j, jlong colour_j, jdouble expDensity_j, jdouble linearStart_j)
			{
				EarthView::World::Graphic::FogMode mode = (EarthView::World::Graphic::FogMode) mode_j;
				const EarthView::World::Graphic::CColourValue &colour = *(EarthView::World::Graphic::CColourValue*) colour_j;
				Real expDensity = (Real) expDensity_j;
				Real linearStart = (Real) linearStart_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->setFog(mode, colour, expDensity, linearStart);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setFog_1FogMode_1CColourValue_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint mode_j, jlong colour_j, jdouble expDensity_j)
			{
				EarthView::World::Graphic::FogMode mode = (EarthView::World::Graphic::FogMode) mode_j;
				const EarthView::World::Graphic::CColourValue &colour = *(EarthView::World::Graphic::CColourValue*) colour_j;
				Real expDensity = (Real) expDensity_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->setFog(mode, colour, expDensity);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setFog_1FogMode_1CColourValue(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint mode_j, jlong colour_j)
			{
				EarthView::World::Graphic::FogMode mode = (EarthView::World::Graphic::FogMode) mode_j;
				const EarthView::World::Graphic::CColourValue &colour = *(EarthView::World::Graphic::CColourValue*) colour_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->setFog(mode, colour);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setFog_1FogMode(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint mode_j)
			{
				EarthView::World::Graphic::FogMode mode = (EarthView::World::Graphic::FogMode) mode_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->setFog(mode);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setFog_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->setFog();
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_getFogMode_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::FogMode __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getFogMode();
					jint __values1_j = (jint) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::FogMode __values1 = pObjectX->getFogMode();
					jint __values1_j = (jint) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getFogMode_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getFogMode_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getFogMode_void_callback", "()I");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_getFogMode_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::FogMode __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getFogMode();
				jint __values1_j = (jint) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getFogColour_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					const EarthView::World::Graphic::CColourValue& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getFogColour();
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
				else
				{
					const EarthView::World::Graphic::CColourValue& __values1 = pObjectX->getFogColour();
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getFogColour_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getFogColour_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getFogColour_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getFogColour_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::CColourValue& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getFogColour();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getFogStart_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getFogStart();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getFogStart();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getFogStart_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getFogStart_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getFogStart_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getFogStart_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getFogStart();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getFogEnd_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getFogEnd();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getFogEnd();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getFogEnd_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getFogEnd_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getFogEnd_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getFogEnd_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getFogEnd();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getFogDensity_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getFogDensity();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getFogDensity();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getFogDensity_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getFogDensity_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getFogDensity_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getFogDensity_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getFogDensity();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createBillboardSet_1EVString_1ev_1uint32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jlong poolSize_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				ev_uint32 poolSize = (ev_uint32) poolSize_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CBillboardSet* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createBillboardSet(name, poolSize);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CBillboardSet* __values1 = pObjectX->createBillboardSet(name, poolSize);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createBillboardSet_1EVString_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createBillboardSet_EVString_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createBillboardSet_EVString_ev_uint32_callback", "(Ljava/lang/String;J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createBillboardSet_1EVString_1ev_1uint32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jlong poolSize_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				ev_uint32 poolSize = (ev_uint32) poolSize_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CBillboardSet* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createBillboardSet(name, poolSize);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createBillboardSet_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CBillboardSet* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createBillboardSet(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CBillboardSet* __values1 = pObjectX->createBillboardSet(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createBillboardSet_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createBillboardSet_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createBillboardSet_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createBillboardSet_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CBillboardSet* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createBillboardSet(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createBillboardSet_1ev_1uint32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong poolSize_j)
			{
				ev_uint32 poolSize = (ev_uint32) poolSize_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CBillboardSet* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createBillboardSet(poolSize);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CBillboardSet* __values1 = pObjectX->createBillboardSet(poolSize);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createBillboardSet_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createBillboardSet_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createBillboardSet_ev_uint32_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createBillboardSet_1ev_1uint32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong poolSize_j)
			{
				ev_uint32 poolSize = (ev_uint32) poolSize_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CBillboardSet* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createBillboardSet(poolSize);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createBillboardSet_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CBillboardSet* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createBillboardSet();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CBillboardSet* __values1 = pObjectX->createBillboardSet();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createBillboardSet_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createBillboardSet_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createBillboardSet_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createBillboardSet_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CBillboardSet* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createBillboardSet();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getBillboardSet_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CBillboardSet* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getBillboardSet(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CBillboardSet* __values1 = pObjectX->getBillboardSet(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getBillboardSet_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getBillboardSet_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getBillboardSet_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getBillboardSet_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CBillboardSet* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getBillboardSet(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasBillboardSet_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasBillboardSet(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->hasBillboardSet(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1hasBillboardSet_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasBillboardSet_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasBillboardSet_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasBillboardSet_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasBillboardSet(name);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyBillboardSet_1CBillboardSet(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong set_j)
			{
				EarthView::World::Graphic::CBillboardSet *set = (EarthView::World::Graphic::CBillboardSet*) set_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyBillboardSet(set);
				}
				else
				{
					pObjectX->destroyBillboardSet(set);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyBillboardSet_1CBillboardSet(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyBillboardSet_CBillboardSet_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyBillboardSet_CBillboardSet_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyBillboardSet_1CBillboardSet_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong set_j)
			{
				EarthView::World::Graphic::CBillboardSet *set = (EarthView::World::Graphic::CBillboardSet*) set_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyBillboardSet(set);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyBillboardSet_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyBillboardSet(name);
				}
				else
				{
					pObjectX->destroyBillboardSet(name);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyBillboardSet_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyBillboardSet_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyBillboardSet_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyBillboardSet_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyBillboardSet(name);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllBillboardSets_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllBillboardSets();
				}
				else
				{
					pObjectX->destroyAllBillboardSets();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyAllBillboardSets_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllBillboardSets_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllBillboardSets_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllBillboardSets_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllBillboardSets();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setDisplaySceneNodes_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean display_j)
			{
				ev_bool display = (ev_bool) display_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setDisplaySceneNodes(display);
				}
				else
				{
					pObjectX->setDisplaySceneNodes(display);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setDisplaySceneNodes_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setDisplaySceneNodes_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setDisplaySceneNodes_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setDisplaySceneNodes_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean display_j)
			{
				ev_bool display = (ev_bool) display_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setDisplaySceneNodes(display);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getDisplaySceneNodes_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getDisplaySceneNodes();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getDisplaySceneNodes();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getDisplaySceneNodes_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getDisplaySceneNodes_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getDisplaySceneNodes_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getDisplaySceneNodes_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getDisplaySceneNodes();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createAnimation_1EVString_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jdouble length_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				Real length = (Real) length_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CAnimation* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createAnimation(name, length);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CAnimation* __values1 = pObjectX->createAnimation(name, length);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createAnimation_1EVString_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createAnimation_EVString_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createAnimation_EVString_Real_callback", "(Ljava/lang/String;D)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createAnimation_1EVString_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jdouble length_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				Real length = (Real) length_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CAnimation* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createAnimation(name, length);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getAnimation_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CAnimation* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getAnimation(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CAnimation* __values1 = pObjectX->getAnimation(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getAnimation_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getAnimation_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getAnimation_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getAnimation_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CAnimation* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getAnimation(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasAnimation_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasAnimation(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->hasAnimation(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1hasAnimation_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasAnimation_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasAnimation_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasAnimation_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasAnimation(name);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAnimation_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyAnimation(name);
				}
				else
				{
					pObjectX->destroyAnimation(name);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyAnimation_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAnimation_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAnimation_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAnimation_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyAnimation(name);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllAnimations_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllAnimations();
				}
				else
				{
					pObjectX->destroyAllAnimations();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyAllAnimations_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllAnimations_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllAnimations_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllAnimations_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllAnimations();
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createAnimationState_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring animName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* animName_ch = (const ev_char*)__env->GetStringUTFChars(animName_j,JNI_FALSE);
				const EVString animName = animName_ch;
				__env->ReleaseStringUTFChars(animName_j, (const char *)animName_ch);
				#else
				const ev_wchar* animName_ch = (const ev_wchar*)__env->GetStringChars(animName_j,JNI_FALSE);
				const EVString animName = animName_ch;
				__env->ReleaseStringChars(animName_j, (const jchar *)animName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CAnimationState* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createAnimationState(animName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CAnimationState* __values1 = pObjectX->createAnimationState(animName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createAnimationState_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createAnimationState_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createAnimationState_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createAnimationState_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring animName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* animName_ch = (const ev_char*)__env->GetStringUTFChars(animName_j,JNI_FALSE);
				const EVString animName = animName_ch;
				__env->ReleaseStringUTFChars(animName_j, (const char *)animName_ch);
				#else
				const ev_wchar* animName_ch = (const ev_wchar*)__env->GetStringChars(animName_j,JNI_FALSE);
				const EVString animName = animName_ch;
				__env->ReleaseStringChars(animName_j, (const jchar *)animName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CAnimationState* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createAnimationState(animName);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getAnimationState_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring animName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* animName_ch = (const ev_char*)__env->GetStringUTFChars(animName_j,JNI_FALSE);
				const EVString animName = animName_ch;
				__env->ReleaseStringUTFChars(animName_j, (const char *)animName_ch);
				#else
				const ev_wchar* animName_ch = (const ev_wchar*)__env->GetStringChars(animName_j,JNI_FALSE);
				const EVString animName = animName_ch;
				__env->ReleaseStringChars(animName_j, (const jchar *)animName_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CAnimationState* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getAnimationState(animName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CAnimationState* __values1 = pObjectX->getAnimationState(animName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getAnimationState_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getAnimationState_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getAnimationState_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getAnimationState_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring animName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* animName_ch = (const ev_char*)__env->GetStringUTFChars(animName_j,JNI_FALSE);
				const EVString animName = animName_ch;
				__env->ReleaseStringUTFChars(animName_j, (const char *)animName_ch);
				#else
				const ev_wchar* animName_ch = (const ev_wchar*)__env->GetStringChars(animName_j,JNI_FALSE);
				const EVString animName = animName_ch;
				__env->ReleaseStringChars(animName_j, (const jchar *)animName_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CAnimationState* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getAnimationState(animName);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasAnimationState_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasAnimationState(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->hasAnimationState(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1hasAnimationState_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasAnimationState_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasAnimationState_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasAnimationState_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasAnimationState(name);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAnimationState_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyAnimationState(name);
				}
				else
				{
					pObjectX->destroyAnimationState(name);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyAnimationState_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAnimationState_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAnimationState_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAnimationState_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyAnimationState(name);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllAnimationStates_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllAnimationStates();
				}
				else
				{
					pObjectX->destroyAllAnimationStates();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyAllAnimationStates_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllAnimationStates_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllAnimationStates_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllAnimationStates_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllAnimationStates();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_manualRender_1CRenderOperation_1CPass_1CViewport_1CMatrix4_1CMatrix4_1CMatrix4_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong vp_j, jlong worldMatrix_j, jlong viewMatrix_j, jlong projMatrix_j, jboolean doBeginEndFrame_j)
			{
				EarthView::World::Graphic::CRenderOperation *rend = (EarthView::World::Graphic::CRenderOperation*) rend_j;
				EarthView::World::Graphic::CPass *pass = (EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Spatial::Math::CMatrix4 &worldMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) worldMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &viewMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) viewMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &projMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) projMatrix_j;
				ev_bool doBeginEndFrame = (ev_bool) doBeginEndFrame_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::manualRender(rend, pass, vp, worldMatrix, viewMatrix, projMatrix, doBeginEndFrame);
				}
				else
				{
					pObjectX->manualRender(rend, pass, vp, worldMatrix, viewMatrix, projMatrix, doBeginEndFrame);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1manualRender_1CRenderOperation_1CPass_1CViewport_1CMatrix4_1CMatrix4_1CMatrix4_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_callback", "(JJJJJJZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_manualRender_1CRenderOperation_1CPass_1CViewport_1CMatrix4_1CMatrix4_1CMatrix4_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong vp_j, jlong worldMatrix_j, jlong viewMatrix_j, jlong projMatrix_j, jboolean doBeginEndFrame_j)
			{
				EarthView::World::Graphic::CRenderOperation *rend = (EarthView::World::Graphic::CRenderOperation*) rend_j;
				EarthView::World::Graphic::CPass *pass = (EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Spatial::Math::CMatrix4 &worldMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) worldMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &viewMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) viewMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &projMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) projMatrix_j;
				ev_bool doBeginEndFrame = (ev_bool) doBeginEndFrame_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::manualRender(rend, pass, vp, worldMatrix, viewMatrix, projMatrix, doBeginEndFrame);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_manualRender_1CRenderOperation_1CPass_1CViewport_1CMatrix4_1CMatrix4_1CMatrix4(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong vp_j, jlong worldMatrix_j, jlong viewMatrix_j, jlong projMatrix_j)
			{
				EarthView::World::Graphic::CRenderOperation *rend = (EarthView::World::Graphic::CRenderOperation*) rend_j;
				EarthView::World::Graphic::CPass *pass = (EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Spatial::Math::CMatrix4 &worldMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) worldMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &viewMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) viewMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &projMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) projMatrix_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::manualRender(rend, pass, vp, worldMatrix, viewMatrix, projMatrix);
				}
				else
				{
					pObjectX->manualRender(rend, pass, vp, worldMatrix, viewMatrix, projMatrix);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1manualRender_1CRenderOperation_1CPass_1CViewport_1CMatrix4_1CMatrix4_1CMatrix4(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"manualRender_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_callback", "(JJJJJJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_manualRender_1CRenderOperation_1CPass_1CViewport_1CMatrix4_1CMatrix4_1CMatrix4_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong vp_j, jlong worldMatrix_j, jlong viewMatrix_j, jlong projMatrix_j)
			{
				EarthView::World::Graphic::CRenderOperation *rend = (EarthView::World::Graphic::CRenderOperation*) rend_j;
				EarthView::World::Graphic::CPass *pass = (EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Spatial::Math::CMatrix4 &worldMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) worldMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &viewMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) viewMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &projMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) projMatrix_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::manualRender(rend, pass, vp, worldMatrix, viewMatrix, projMatrix);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4_1ev_1bool_1ev_1bool_1ev_1bool_1LightList(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong vp_j, jlong viewMatrix_j, jlong projMatrix_j, jboolean doBeginEndFrame_j, jboolean lightScissoringClipping_j, jboolean doLightIteration_j, jlong manualLightList_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Spatial::Math::CMatrix4 &viewMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) viewMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &projMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) projMatrix_j;
				ev_bool doBeginEndFrame = (ev_bool) doBeginEndFrame_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				const EarthView::World::Graphic::LightList *manualLightList = (const EarthView::World::Graphic::LightList*) manualLightList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame, lightScissoringClipping, doLightIteration, manualLightList);
				}
				else
				{
					pObjectX->manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame, lightScissoringClipping, doLightIteration, manualLightList);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4_1ev_1bool_1ev_1bool_1ev_1bool_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_callback", "(JJJJJZZZJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4_1ev_1bool_1ev_1bool_1ev_1bool_1LightList_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong vp_j, jlong viewMatrix_j, jlong projMatrix_j, jboolean doBeginEndFrame_j, jboolean lightScissoringClipping_j, jboolean doLightIteration_j, jlong manualLightList_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Spatial::Math::CMatrix4 &viewMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) viewMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &projMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) projMatrix_j;
				ev_bool doBeginEndFrame = (ev_bool) doBeginEndFrame_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				const EarthView::World::Graphic::LightList *manualLightList = (const EarthView::World::Graphic::LightList*) manualLightList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame, lightScissoringClipping, doLightIteration, manualLightList);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4_1ev_1bool_1ev_1bool_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong vp_j, jlong viewMatrix_j, jlong projMatrix_j, jboolean doBeginEndFrame_j, jboolean lightScissoringClipping_j, jboolean doLightIteration_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Spatial::Math::CMatrix4 &viewMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) viewMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &projMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) projMatrix_j;
				ev_bool doBeginEndFrame = (ev_bool) doBeginEndFrame_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame, lightScissoringClipping, doLightIteration);
				}
				else
				{
					pObjectX->manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame, lightScissoringClipping, doLightIteration);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4_1ev_1bool_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_callback", "(JJJJJZZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4_1ev_1bool_1ev_1bool_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong vp_j, jlong viewMatrix_j, jlong projMatrix_j, jboolean doBeginEndFrame_j, jboolean lightScissoringClipping_j, jboolean doLightIteration_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Spatial::Math::CMatrix4 &viewMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) viewMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &projMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) projMatrix_j;
				ev_bool doBeginEndFrame = (ev_bool) doBeginEndFrame_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame, lightScissoringClipping, doLightIteration);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4_1ev_1bool_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong vp_j, jlong viewMatrix_j, jlong projMatrix_j, jboolean doBeginEndFrame_j, jboolean lightScissoringClipping_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Spatial::Math::CMatrix4 &viewMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) viewMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &projMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) projMatrix_j;
				ev_bool doBeginEndFrame = (ev_bool) doBeginEndFrame_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame, lightScissoringClipping);
				}
				else
				{
					pObjectX->manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame, lightScissoringClipping);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_callback", "(JJJJJZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4_1ev_1bool_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong vp_j, jlong viewMatrix_j, jlong projMatrix_j, jboolean doBeginEndFrame_j, jboolean lightScissoringClipping_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Spatial::Math::CMatrix4 &viewMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) viewMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &projMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) projMatrix_j;
				ev_bool doBeginEndFrame = (ev_bool) doBeginEndFrame_j;
				ev_bool lightScissoringClipping = (ev_bool) lightScissoringClipping_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame, lightScissoringClipping);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong vp_j, jlong viewMatrix_j, jlong projMatrix_j, jboolean doBeginEndFrame_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Spatial::Math::CMatrix4 &viewMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) viewMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &projMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) projMatrix_j;
				ev_bool doBeginEndFrame = (ev_bool) doBeginEndFrame_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame);
				}
				else
				{
					pObjectX->manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_callback", "(JJJJJZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong vp_j, jlong viewMatrix_j, jlong projMatrix_j, jboolean doBeginEndFrame_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Spatial::Math::CMatrix4 &viewMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) viewMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &projMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) projMatrix_j;
				ev_bool doBeginEndFrame = (ev_bool) doBeginEndFrame_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix, doBeginEndFrame);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong vp_j, jlong viewMatrix_j, jlong projMatrix_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Spatial::Math::CMatrix4 &viewMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) viewMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &projMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) projMatrix_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix);
				}
				else
				{
					pObjectX->manualRender(rend, pass, vp, viewMatrix, projMatrix);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"manualRender_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_callback", "(JJJJJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_manualRender_1CRenderable_1CPass_1CViewport_1CMatrix4_1CMatrix4_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong rend_j, jlong pass_j, jlong vp_j, jlong viewMatrix_j, jlong projMatrix_j)
			{
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CViewport *vp = (EarthView::World::Graphic::CViewport*) vp_j;
				const EarthView::World::Spatial::Math::CMatrix4 &viewMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) viewMatrix_j;
				const EarthView::World::Spatial::Math::CMatrix4 &projMatrix = *(EarthView::World::Spatial::Math::CMatrix4*) projMatrix_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::manualRender(rend, pass, vp, viewMatrix, projMatrix);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getRenderQueue_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CRenderQueue* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getRenderQueue();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CRenderQueue* __values1 = pObjectX->getRenderQueue();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getRenderQueue_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getRenderQueue_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getRenderQueue_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getRenderQueue_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CRenderQueue* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getRenderQueue();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_addRenderQueueListener_1CRenderQueueListener(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ref_newListener_j)
			{
				EarthView::World::Graphic::CRenderQueueListener *ref_newListener = (EarthView::World::Graphic::CRenderQueueListener*) ref_newListener_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::addRenderQueueListener(ref_newListener);
				}
				else
				{
					pObjectX->addRenderQueueListener(ref_newListener);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1addRenderQueueListener_1CRenderQueueListener(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_addRenderQueueListener_CRenderQueueListener_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"addRenderQueueListener_CRenderQueueListener_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_addRenderQueueListener_1CRenderQueueListener_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ref_newListener_j)
			{
				EarthView::World::Graphic::CRenderQueueListener *ref_newListener = (EarthView::World::Graphic::CRenderQueueListener*) ref_newListener_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::addRenderQueueListener(ref_newListener);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_removeRenderQueueListener_1CRenderQueueListener(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong delListener_j)
			{
				EarthView::World::Graphic::CRenderQueueListener *delListener = (EarthView::World::Graphic::CRenderQueueListener*) delListener_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::removeRenderQueueListener(delListener);
				}
				else
				{
					pObjectX->removeRenderQueueListener(delListener);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1removeRenderQueueListener_1CRenderQueueListener(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_removeRenderQueueListener_CRenderQueueListener_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"removeRenderQueueListener_CRenderQueueListener_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_removeRenderQueueListener_1CRenderQueueListener_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong delListener_j)
			{
				EarthView::World::Graphic::CRenderQueueListener *delListener = (EarthView::World::Graphic::CRenderQueueListener*) delListener_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::removeRenderQueueListener(delListener);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_addRenderObjectListener_1CRenderObjectListener(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ref_newListener_j)
			{
				EarthView::World::Graphic::CRenderObjectListener *ref_newListener = (EarthView::World::Graphic::CRenderObjectListener*) ref_newListener_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::addRenderObjectListener(ref_newListener);
				}
				else
				{
					pObjectX->addRenderObjectListener(ref_newListener);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1addRenderObjectListener_1CRenderObjectListener(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_addRenderObjectListener_CRenderObjectListener_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"addRenderObjectListener_CRenderObjectListener_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_addRenderObjectListener_1CRenderObjectListener_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ref_newListener_j)
			{
				EarthView::World::Graphic::CRenderObjectListener *ref_newListener = (EarthView::World::Graphic::CRenderObjectListener*) ref_newListener_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::addRenderObjectListener(ref_newListener);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_removeRenderObjectListener_1CRenderObjectListener(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong delListener_j)
			{
				EarthView::World::Graphic::CRenderObjectListener *delListener = (EarthView::World::Graphic::CRenderObjectListener*) delListener_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::removeRenderObjectListener(delListener);
				}
				else
				{
					pObjectX->removeRenderObjectListener(delListener);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1removeRenderObjectListener_1CRenderObjectListener(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_removeRenderObjectListener_CRenderObjectListener_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"removeRenderObjectListener_CRenderObjectListener_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_removeRenderObjectListener_1CRenderObjectListener_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong delListener_j)
			{
				EarthView::World::Graphic::CRenderObjectListener *delListener = (EarthView::World::Graphic::CRenderObjectListener*) delListener_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::removeRenderObjectListener(delListener);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_addSpecialCaseRenderQueue_1ev_1uint8(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort qid_j)
			{
				ev_uint8 qid = (ev_uint8) qid_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::addSpecialCaseRenderQueue(qid);
				}
				else
				{
					pObjectX->addSpecialCaseRenderQueue(qid);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1addSpecialCaseRenderQueue_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_addSpecialCaseRenderQueue_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"addSpecialCaseRenderQueue_ev_uint8_callback", "(S)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_addSpecialCaseRenderQueue_1ev_1uint8_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort qid_j)
			{
				ev_uint8 qid = (ev_uint8) qid_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::addSpecialCaseRenderQueue(qid);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_removeSpecialCaseRenderQueue_1ev_1uint8(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort qid_j)
			{
				ev_uint8 qid = (ev_uint8) qid_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::removeSpecialCaseRenderQueue(qid);
				}
				else
				{
					pObjectX->removeSpecialCaseRenderQueue(qid);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1removeSpecialCaseRenderQueue_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_removeSpecialCaseRenderQueue_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"removeSpecialCaseRenderQueue_ev_uint8_callback", "(S)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_removeSpecialCaseRenderQueue_1ev_1uint8_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort qid_j)
			{
				ev_uint8 qid = (ev_uint8) qid_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::removeSpecialCaseRenderQueue(qid);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_clearSpecialCaseRenderQueues_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::clearSpecialCaseRenderQueues();
				}
				else
				{
					pObjectX->clearSpecialCaseRenderQueues();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1clearSpecialCaseRenderQueues_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_clearSpecialCaseRenderQueues_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"clearSpecialCaseRenderQueues_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_clearSpecialCaseRenderQueues_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::clearSpecialCaseRenderQueues();
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSpecialCaseRenderQueueMode_1SpecialCaseRenderQueueMode(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint mode_j)
			{
				EarthView::World::Graphic::CSceneManager::SpecialCaseRenderQueueMode mode = (EarthView::World::Graphic::CSceneManager::SpecialCaseRenderQueueMode) mode_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setSpecialCaseRenderQueueMode(mode);
				}
				else
				{
					pObjectX->setSpecialCaseRenderQueueMode(mode);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setSpecialCaseRenderQueueMode_1SpecialCaseRenderQueueMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_callback", "(I)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setSpecialCaseRenderQueueMode_1SpecialCaseRenderQueueMode_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint mode_j)
			{
				EarthView::World::Graphic::CSceneManager::SpecialCaseRenderQueueMode mode = (EarthView::World::Graphic::CSceneManager::SpecialCaseRenderQueueMode) mode_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setSpecialCaseRenderQueueMode(mode);
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_getSpecialCaseRenderQueueMode_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CSceneManager::SpecialCaseRenderQueueMode __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSpecialCaseRenderQueueMode();
					jint __values1_j = (jint) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CSceneManager::SpecialCaseRenderQueueMode __values1 = pObjectX->getSpecialCaseRenderQueueMode();
					jint __values1_j = (jint) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getSpecialCaseRenderQueueMode_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getSpecialCaseRenderQueueMode_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getSpecialCaseRenderQueueMode_void_callback", "()I");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_getSpecialCaseRenderQueueMode_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CSceneManager::SpecialCaseRenderQueueMode __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getSpecialCaseRenderQueueMode();
				jint __values1_j = (jint) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isRenderQueueToBeProcessed_1ev_1uint8(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort qid_j)
			{
				ev_uint8 qid = (ev_uint8) qid_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isRenderQueueToBeProcessed(qid);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->isRenderQueueToBeProcessed(qid);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1isRenderQueueToBeProcessed_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isRenderQueueToBeProcessed_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isRenderQueueToBeProcessed_ev_uint8_callback", "(S)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isRenderQueueToBeProcessed_1ev_1uint8_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort qid_j)
			{
				ev_uint8 qid = (ev_uint8) qid_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isRenderQueueToBeProcessed(qid);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setWorldGeometryRenderQueue_1ev_1uint8(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort qid_j)
			{
				ev_uint8 qid = (ev_uint8) qid_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setWorldGeometryRenderQueue(qid);
				}
				else
				{
					pObjectX->setWorldGeometryRenderQueue(qid);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setWorldGeometryRenderQueue_1ev_1uint8(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setWorldGeometryRenderQueue_ev_uint8_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setWorldGeometryRenderQueue_ev_uint8_callback", "(S)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setWorldGeometryRenderQueue_1ev_1uint8_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jshort qid_j)
			{
				ev_uint8 qid = (ev_uint8) qid_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setWorldGeometryRenderQueue(qid);
			}
			extern "C" JNIEXPORT jshort JNICALL Java_com_earthview_world_graphic_SceneManager_getWorldGeometryRenderQueue_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_uint8 __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getWorldGeometryRenderQueue();
					jshort __values1_j = (jshort) __values1;
					return __values1_j;
				}
				else
				{
					ev_uint8 __values1 = pObjectX->getWorldGeometryRenderQueue();
					jshort __values1_j = (jshort) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getWorldGeometryRenderQueue_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getWorldGeometryRenderQueue_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getWorldGeometryRenderQueue_void_callback", "()S");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jshort JNICALL Java_com_earthview_world_graphic_SceneManager_getWorldGeometryRenderQueue_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_uint8 __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getWorldGeometryRenderQueue();
				jshort __values1_j = (jshort) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_showBoundingBoxes_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean bShow_j)
			{
				ev_bool bShow = (ev_bool) bShow_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::showBoundingBoxes(bShow);
				}
				else
				{
					pObjectX->showBoundingBoxes(bShow);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1showBoundingBoxes_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_showBoundingBoxes_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"showBoundingBoxes_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_showBoundingBoxes_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean bShow_j)
			{
				ev_bool bShow = (ev_bool) bShow_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::showBoundingBoxes(bShow);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getShowBoundingBoxes_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShowBoundingBoxes();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getShowBoundingBoxes();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShowBoundingBoxes_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShowBoundingBoxes_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShowBoundingBoxes_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getShowBoundingBoxes_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShowBoundingBoxes();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1notifyAutotrackingSceneNode_1CSceneNode_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong node_j, jboolean autoTrack_j)
			{
				EarthView::World::Graphic::CSceneNode *node = (EarthView::World::Graphic::CSceneNode*) node_j;
				ev_bool autoTrack = (ev_bool) autoTrack_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_notifyAutotrackingSceneNode(node, autoTrack);
				}
				else
				{
					pObjectX->_notifyAutotrackingSceneNode(node, autoTrack);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1notifyAutotrackingSceneNode_1CSceneNode_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__notifyAutotrackingSceneNode_CSceneNode_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_notifyAutotrackingSceneNode_CSceneNode_ev_bool_callback", "(JZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1notifyAutotrackingSceneNode_1CSceneNode_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong node_j, jboolean autoTrack_j)
			{
				EarthView::World::Graphic::CSceneNode *node = (EarthView::World::Graphic::CSceneNode*) node_j;
				ev_bool autoTrack = (ev_bool) autoTrack_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_notifyAutotrackingSceneNode(node, autoTrack);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createAABBQuery_1CAxisAlignedBox_1ev_1uint32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong box_j, jlong mask_j)
			{
				const EarthView::World::Spatial::Math::CAxisAlignedBox &box = *(EarthView::World::Spatial::Math::CAxisAlignedBox*) box_j;
				ev_uint32 mask = (ev_uint32) mask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CAxisAlignedBoxSceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createAABBQuery(box, mask);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CAxisAlignedBoxSceneQuery* __values1 = pObjectX->createAABBQuery(box, mask);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createAABBQuery_1CAxisAlignedBox_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createAABBQuery_CAxisAlignedBox_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createAABBQuery_CAxisAlignedBox_ev_uint32_callback", "(JJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createAABBQuery_1CAxisAlignedBox_1ev_1uint32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong box_j, jlong mask_j)
			{
				const EarthView::World::Spatial::Math::CAxisAlignedBox &box = *(EarthView::World::Spatial::Math::CAxisAlignedBox*) box_j;
				ev_uint32 mask = (ev_uint32) mask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CAxisAlignedBoxSceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createAABBQuery(box, mask);
				if(__values1 != NULL) {					((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
				}				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createAABBQuery_1CAxisAlignedBox(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong box_j)
			{
				const EarthView::World::Spatial::Math::CAxisAlignedBox &box = *(EarthView::World::Spatial::Math::CAxisAlignedBox*) box_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CAxisAlignedBoxSceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createAABBQuery(box);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CAxisAlignedBoxSceneQuery* __values1 = pObjectX->createAABBQuery(box);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createAABBQuery_1CAxisAlignedBox(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createAABBQuery_CAxisAlignedBox_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createAABBQuery_CAxisAlignedBox_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createAABBQuery_1CAxisAlignedBox_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong box_j)
			{
				const EarthView::World::Spatial::Math::CAxisAlignedBox &box = *(EarthView::World::Spatial::Math::CAxisAlignedBox*) box_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CAxisAlignedBoxSceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createAABBQuery(box);
				if(__values1 != NULL) {					((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
				}				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createSphereQuery_1CSphere_1ev_1uint32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong sphere_j, jlong mask_j)
			{
				const EarthView::World::Spatial::Math::CSphere &sphere = *(EarthView::World::Spatial::Math::CSphere*) sphere_j;
				ev_uint32 mask = (ev_uint32) mask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CSphereSceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createSphereQuery(sphere, mask);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CSphereSceneQuery* __values1 = pObjectX->createSphereQuery(sphere, mask);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createSphereQuery_1CSphere_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createSphereQuery_CSphere_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createSphereQuery_CSphere_ev_uint32_callback", "(JJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createSphereQuery_1CSphere_1ev_1uint32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong sphere_j, jlong mask_j)
			{
				const EarthView::World::Spatial::Math::CSphere &sphere = *(EarthView::World::Spatial::Math::CSphere*) sphere_j;
				ev_uint32 mask = (ev_uint32) mask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CSphereSceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createSphereQuery(sphere, mask);
				if(__values1 != NULL) {					((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
				}				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createSphereQuery_1CSphere(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong sphere_j)
			{
				const EarthView::World::Spatial::Math::CSphere &sphere = *(EarthView::World::Spatial::Math::CSphere*) sphere_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CSphereSceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createSphereQuery(sphere);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CSphereSceneQuery* __values1 = pObjectX->createSphereQuery(sphere);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createSphereQuery_1CSphere(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createSphereQuery_CSphere_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createSphereQuery_CSphere_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createSphereQuery_1CSphere_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong sphere_j)
			{
				const EarthView::World::Spatial::Math::CSphere &sphere = *(EarthView::World::Spatial::Math::CSphere*) sphere_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CSphereSceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createSphereQuery(sphere);
				if(__values1 != NULL) {					((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
				}				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createPlaneBoundedVolumeQuery_1PlaneBoundedVolumeList_1ev_1uint32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong volumes_j, jlong mask_j)
			{
				const EarthView::World::Spatial::Math::PlaneBoundedVolumeList &volumes = *(EarthView::World::Spatial::Math::PlaneBoundedVolumeList*) volumes_j;
				ev_uint32 mask = (ev_uint32) mask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CPlaneBoundedVolumeListSceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createPlaneBoundedVolumeQuery(volumes, mask);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CPlaneBoundedVolumeListSceneQuery* __values1 = pObjectX->createPlaneBoundedVolumeQuery(volumes, mask);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createPlaneBoundedVolumeQuery_1PlaneBoundedVolumeList_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_ev_uint32_callback", "(JJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createPlaneBoundedVolumeQuery_1PlaneBoundedVolumeList_1ev_1uint32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong volumes_j, jlong mask_j)
			{
				const EarthView::World::Spatial::Math::PlaneBoundedVolumeList &volumes = *(EarthView::World::Spatial::Math::PlaneBoundedVolumeList*) volumes_j;
				ev_uint32 mask = (ev_uint32) mask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CPlaneBoundedVolumeListSceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createPlaneBoundedVolumeQuery(volumes, mask);
				if(__values1 != NULL) {					((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
				}				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createPlaneBoundedVolumeQuery_1PlaneBoundedVolumeList(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong volumes_j)
			{
				const EarthView::World::Spatial::Math::PlaneBoundedVolumeList &volumes = *(EarthView::World::Spatial::Math::PlaneBoundedVolumeList*) volumes_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CPlaneBoundedVolumeListSceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createPlaneBoundedVolumeQuery(volumes);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CPlaneBoundedVolumeListSceneQuery* __values1 = pObjectX->createPlaneBoundedVolumeQuery(volumes);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createPlaneBoundedVolumeQuery_1PlaneBoundedVolumeList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createPlaneBoundedVolumeQuery_PlaneBoundedVolumeList_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createPlaneBoundedVolumeQuery_1PlaneBoundedVolumeList_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong volumes_j)
			{
				const EarthView::World::Spatial::Math::PlaneBoundedVolumeList &volumes = *(EarthView::World::Spatial::Math::PlaneBoundedVolumeList*) volumes_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CPlaneBoundedVolumeListSceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createPlaneBoundedVolumeQuery(volumes);
				if(__values1 != NULL) {					((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
				}				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createRayQuery_1CRay_1ev_1uint32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ray_j, jlong mask_j)
			{
				const EarthView::World::Spatial::Math::CRay &ray = *(EarthView::World::Spatial::Math::CRay*) ray_j;
				ev_uint32 mask = (ev_uint32) mask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CRaySceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createRayQuery(ray, mask);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CRaySceneQuery* __values1 = pObjectX->createRayQuery(ray, mask);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createRayQuery_1CRay_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createRayQuery_CRay_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createRayQuery_CRay_ev_uint32_callback", "(JJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createRayQuery_1CRay_1ev_1uint32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ray_j, jlong mask_j)
			{
				const EarthView::World::Spatial::Math::CRay &ray = *(EarthView::World::Spatial::Math::CRay*) ray_j;
				ev_uint32 mask = (ev_uint32) mask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CRaySceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createRayQuery(ray, mask);
				if(__values1 != NULL) {					((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
				}				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createRayQuery_1CRay(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ray_j)
			{
				const EarthView::World::Spatial::Math::CRay &ray = *(EarthView::World::Spatial::Math::CRay*) ray_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CRaySceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createRayQuery(ray);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CRaySceneQuery* __values1 = pObjectX->createRayQuery(ray);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createRayQuery_1CRay(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createRayQuery_CRay_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createRayQuery_CRay_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createRayQuery_1CRay_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ray_j)
			{
				const EarthView::World::Spatial::Math::CRay &ray = *(EarthView::World::Spatial::Math::CRay*) ray_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CRaySceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createRayQuery(ray);
				if(__values1 != NULL) {					((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
				}				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createIntersectionQuery_1ev_1uint32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong mask_j)
			{
				ev_uint32 mask = (ev_uint32) mask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CIntersectionSceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createIntersectionQuery(mask);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CIntersectionSceneQuery* __values1 = pObjectX->createIntersectionQuery(mask);
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createIntersectionQuery_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createIntersectionQuery_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createIntersectionQuery_ev_uint32_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createIntersectionQuery_1ev_1uint32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong mask_j)
			{
				ev_uint32 mask = (ev_uint32) mask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CIntersectionSceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createIntersectionQuery(mask);
				if(__values1 != NULL) {					((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
				}				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createIntersectionQuery_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CIntersectionSceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createIntersectionQuery();
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CIntersectionSceneQuery* __values1 = pObjectX->createIntersectionQuery();
					if(__values1 != NULL) {						((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
					}					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createIntersectionQuery_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createIntersectionQuery_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createIntersectionQuery_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createIntersectionQuery_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CIntersectionSceneQuery* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createIntersectionQuery();
				if(__values1 != NULL) {					((EarthView::World::Core::CBaseObject*)__values1)->setExternFree(true);
				}				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyQuery_1CSceneQuery(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong query_j)
			{
				EarthView::World::Graphic::CSceneQuery *query = (EarthView::World::Graphic::CSceneQuery*) query_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyQuery(query);
				}
				else
				{
					pObjectX->destroyQuery(query);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyQuery_1CSceneQuery(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyQuery_CSceneQuery_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyQuery_CSceneQuery_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyQuery_1CSceneQuery_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong query_j)
			{
				EarthView::World::Graphic::CSceneQuery *query = (EarthView::World::Graphic::CSceneQuery*) query_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyQuery(query);
			}
			extern "C" JNIEXPORT jstring JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraIteratorPair_get_1first_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::CameraIteratorPair *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraIteratorPair*)pObjXXXX;
				EarthView::World::Core::ev_wstring __values1_ch = pObjectX->first;
				jstring __values1_j = __env->NewString((const jchar*)__values1_ch.getString(), __values1_ch.size());
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraIteratorPair_set_1first_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::CameraIteratorPair *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraIteratorPair*)pObjXXXX;
				const ev_wchar* __values1_ch = (const ev_wchar*)__env->GetStringChars(__values1_j,JNI_FALSE);
				pObjectX->first = __values1_ch;
				__env->ReleaseStringChars(__values1_j,(const jchar*)__values1_ch);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraIteratorPair_get_1second_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::CameraIteratorPair *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraIteratorPair*)pObjXXXX;
				jlong __values1_j = (jlong)(pObjectX->second);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraIteratorPair_set_1second_1CCamera(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::CameraIteratorPair *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraIteratorPair*)pObjXXXX;
				pObjectX->second = (EarthView::World::Graphic::CCamera*) __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraIterator_hasMoreElements_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager::CameraIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraIterator*) pObjXXXX;
				ev_bool __values1 = pObjectX->hasMoreElements();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraIterator_moveNext_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::CameraIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraIterator*) pObjXXXX;
				pObjectX->moveNext();
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraIterator_nextKey_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager::CameraIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraIterator*) pObjXXXX;
				ev_uint16 __values1 = pObjectX->nextKey();
				jint __values1_j = (jint) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraIterator_nextValue_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager::CameraIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraIterator*) pObjXXXX;
				EarthView::World::Graphic::CCamera* __values1 = pObjectX->nextValue();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraIterator_nextValuePtr_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::CameraIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraIterator*) pObjXXXX;
				EarthView::World::Graphic::CCamera** __values1 = pObjectX->nextValuePtr();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraIterator_next_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::CameraIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraIterator*) pObjXXXX;
				EarthView::World::Graphic::CCamera* __values1 = pObjectX->next();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraIterator_getBegin_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::CameraIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraIterator*) pObjXXXX;
				const EarthView::World::Graphic::CSceneManager::CameraIteratorPair& __values1 = pObjectX->getBegin();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraIterator_getEnd_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::CameraIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraIterator*) pObjXXXX;
				const EarthView::World::Graphic::CSceneManager::CameraIteratorPair& __values1 = pObjectX->getEnd();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024CameraIterator_getCurrent_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::CameraIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::CameraIterator*) pObjXXXX;
				const EarthView::World::Graphic::CSceneManager::CameraIteratorPair& __values1 = pObjectX->getCurrent();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jstring JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationIteratorPair_get_1first_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::AnimationIteratorPair *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationIteratorPair*)pObjXXXX;
				EarthView::World::Core::ev_wstring __values1_ch = pObjectX->first;
				jstring __values1_j = __env->NewString((const jchar*)__values1_ch.getString(), __values1_ch.size());
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationIteratorPair_set_1first_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::AnimationIteratorPair *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationIteratorPair*)pObjXXXX;
				const ev_wchar* __values1_ch = (const ev_wchar*)__env->GetStringChars(__values1_j,JNI_FALSE);
				pObjectX->first = __values1_ch;
				__env->ReleaseStringChars(__values1_j,(const jchar*)__values1_ch);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationIteratorPair_get_1second_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::AnimationIteratorPair *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationIteratorPair*)pObjXXXX;
				jlong __values1_j = (jlong)(pObjectX->second);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationIteratorPair_set_1second_1CAnimation(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::AnimationIteratorPair *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationIteratorPair*)pObjXXXX;
				pObjectX->second = (EarthView::World::Graphic::CAnimation*) __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationIterator_hasMoreElements_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager::AnimationIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationIterator*) pObjXXXX;
				ev_bool __values1 = pObjectX->hasMoreElements();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationIterator_moveNext_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::AnimationIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationIterator*) pObjXXXX;
				pObjectX->moveNext();
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationIterator_nextKey_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager::AnimationIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationIterator*) pObjXXXX;
				ev_uint16 __values1 = pObjectX->nextKey();
				jint __values1_j = (jint) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationIterator_nextValue_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager::AnimationIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationIterator*) pObjXXXX;
				EarthView::World::Graphic::CAnimation* __values1 = pObjectX->nextValue();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationIterator_nextValuePtr_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::AnimationIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationIterator*) pObjXXXX;
				EarthView::World::Graphic::CAnimation** __values1 = pObjectX->nextValuePtr();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationIterator_next_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::AnimationIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationIterator*) pObjXXXX;
				EarthView::World::Graphic::CAnimation* __values1 = pObjectX->next();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationIterator_getBegin_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::AnimationIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationIterator*) pObjXXXX;
				const EarthView::World::Graphic::CSceneManager::AnimationIteratorPair& __values1 = pObjectX->getBegin();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationIterator_getEnd_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::AnimationIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationIterator*) pObjXXXX;
				const EarthView::World::Graphic::CSceneManager::AnimationIteratorPair& __values1 = pObjectX->getEnd();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024AnimationIterator_getCurrent_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::AnimationIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::AnimationIterator*) pObjXXXX;
				const EarthView::World::Graphic::CSceneManager::AnimationIteratorPair& __values1 = pObjectX->getCurrent();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getCameraIterator_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CSceneManager::CameraIterator __values1 = pObjectX->getCameraIterator();
				EarthView::World::Graphic::CSceneManager::CameraIterator *returnvalues = new EarthView::World::Graphic::CSceneManager::CameraIterator(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getCameras_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::CSceneManager::CameraList& __values1 = pObjectX->getCameras();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getAnimationIterator_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CSceneManager::AnimationIterator __values1 = pObjectX->getAnimationIterator();
				EarthView::World::Graphic::CSceneManager::AnimationIterator *returnvalues = new EarthView::World::Graphic::CSceneManager::AnimationIterator(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getAnimations_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::CSceneManager::AnimationList& __values1 = pObjectX->getAnimations();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getAnimationStateIterator_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::AnimationStateMapIterator __values1 = pObjectX->getAnimationStateIterator();
				EarthView::World::Graphic::AnimationStateMapIterator *returnvalues = new EarthView::World::Graphic::AnimationStateMapIterator(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTechnique_1ShadowTechnique(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint technique_j)
			{
				EarthView::World::Graphic::ShadowTechnique technique = (EarthView::World::Graphic::ShadowTechnique) technique_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTechnique(technique);
				}
				else
				{
					pObjectX->setShadowTechnique(technique);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTechnique_1ShadowTechnique(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTechnique_ShadowTechnique_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTechnique_ShadowTechnique_callback", "(I)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTechnique_1ShadowTechnique_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint technique_j)
			{
				EarthView::World::Graphic::ShadowTechnique technique = (EarthView::World::Graphic::ShadowTechnique) technique_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTechnique(technique);
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowTechnique_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::ShadowTechnique __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowTechnique();
					jint __values1_j = (jint) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::ShadowTechnique __values1 = pObjectX->getShadowTechnique();
					jint __values1_j = (jint) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShadowTechnique_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowTechnique_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowTechnique_void_callback", "()I");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowTechnique_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::ShadowTechnique __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowTechnique();
				jint __values1_j = (jint) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShowDebugShadows_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean debug_j)
			{
				ev_bool debug = (ev_bool) debug_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShowDebugShadows(debug);
				}
				else
				{
					pObjectX->setShowDebugShadows(debug);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShowDebugShadows_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShowDebugShadows_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShowDebugShadows_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShowDebugShadows_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean debug_j)
			{
				ev_bool debug = (ev_bool) debug_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShowDebugShadows(debug);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getShowDebugShadows_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShowDebugShadows();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getShowDebugShadows();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShowDebugShadows_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShowDebugShadows_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShowDebugShadows_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getShowDebugShadows_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShowDebugShadows();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowColour_1CColourValue(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong colour_j)
			{
				const EarthView::World::Graphic::CColourValue &colour = *(EarthView::World::Graphic::CColourValue*) colour_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowColour(colour);
				}
				else
				{
					pObjectX->setShadowColour(colour);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowColour_1CColourValue(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowColour_CColourValue_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowColour_CColourValue_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowColour_1CColourValue_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong colour_j)
			{
				const EarthView::World::Graphic::CColourValue &colour = *(EarthView::World::Graphic::CColourValue*) colour_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowColour(colour);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowColour_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					const EarthView::World::Graphic::CColourValue& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowColour();
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
				else
				{
					const EarthView::World::Graphic::CColourValue& __values1 = pObjectX->getShadowColour();
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShadowColour_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowColour_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowColour_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowColour_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::CColourValue& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowColour();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowDirectionalLightExtrusionDistance_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble dist_j)
			{
				Real dist = (Real) dist_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowDirectionalLightExtrusionDistance(dist);
				}
				else
				{
					pObjectX->setShadowDirectionalLightExtrusionDistance(dist);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowDirectionalLightExtrusionDistance_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowDirectionalLightExtrusionDistance_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowDirectionalLightExtrusionDistance_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowDirectionalLightExtrusionDistance_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble dist_j)
			{
				Real dist = (Real) dist_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowDirectionalLightExtrusionDistance(dist);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowDirectionalLightExtrusionDistance_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowDirectionalLightExtrusionDistance();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getShadowDirectionalLightExtrusionDistance();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShadowDirectionalLightExtrusionDistance_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowDirectionalLightExtrusionDistance_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowDirectionalLightExtrusionDistance_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowDirectionalLightExtrusionDistance_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowDirectionalLightExtrusionDistance();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowColorRRatio_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble rRatio_j)
			{
				Real rRatio = (Real) rRatio_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowColorRRatio(rRatio);
				}
				else
				{
					pObjectX->setShadowColorRRatio(rRatio);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowColorRRatio_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowColorRRatio_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowColorRRatio_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowColorRRatio_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble rRatio_j)
			{
				Real rRatio = (Real) rRatio_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowColorRRatio(rRatio);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowColorGRatio_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble gRatio_j)
			{
				Real gRatio = (Real) gRatio_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowColorGRatio(gRatio);
				}
				else
				{
					pObjectX->setShadowColorGRatio(gRatio);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowColorGRatio_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowColorGRatio_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowColorGRatio_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowColorGRatio_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble gRatio_j)
			{
				Real gRatio = (Real) gRatio_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowColorGRatio(gRatio);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowColorBRatio_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble bRatio_j)
			{
				Real bRatio = (Real) bRatio_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowColorBRatio(bRatio);
				}
				else
				{
					pObjectX->setShadowColorBRatio(bRatio);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowColorBRatio_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowColorBRatio_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowColorBRatio_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowColorBRatio_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble bRatio_j)
			{
				Real bRatio = (Real) bRatio_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowColorBRatio(bRatio);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowColorRRatio_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowColorRRatio();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getShadowColorRRatio();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShadowColorRRatio_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowColorRRatio_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowColorRRatio_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowColorRRatio_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowColorRRatio();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowColorGRatio_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowColorGRatio();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getShadowColorGRatio();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShadowColorGRatio_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowColorGRatio_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowColorGRatio_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowColorGRatio_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowColorGRatio();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowColorBRatio_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowColorBRatio();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getShadowColorBRatio();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShadowColorBRatio_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowColorBRatio_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowColorBRatio_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowColorBRatio_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowColorBRatio();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowFarDistance_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble distance_j)
			{
				Real distance = (Real) distance_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowFarDistance(distance);
				}
				else
				{
					pObjectX->setShadowFarDistance(distance);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowFarDistance_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowFarDistance_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowFarDistance_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowFarDistance_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble distance_j)
			{
				Real distance = (Real) distance_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowFarDistance(distance);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowFarDistance_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowFarDistance();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getShadowFarDistance();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShadowFarDistance_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowFarDistance_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowFarDistance_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowFarDistance_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowFarDistance();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowFarDistanceSquared_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowFarDistanceSquared();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getShadowFarDistanceSquared();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShadowFarDistanceSquared_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowFarDistanceSquared_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowFarDistanceSquared_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowFarDistanceSquared_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowFarDistanceSquared();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowIndexBufferSize_1ev_1size_1t(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong size_j)
			{
				ev_size_t size = (ev_size_t) size_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowIndexBufferSize(size);
				}
				else
				{
					pObjectX->setShadowIndexBufferSize(size);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowIndexBufferSize_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowIndexBufferSize_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowIndexBufferSize_ev_size_t_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowIndexBufferSize_1ev_1size_1t_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong size_j)
			{
				ev_size_t size = (ev_size_t) size_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowIndexBufferSize(size);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowIndexBufferSize_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_size_t __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowIndexBufferSize();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					ev_size_t __values1 = pObjectX->getShadowIndexBufferSize();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShadowIndexBufferSize_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowIndexBufferSize_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowIndexBufferSize_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowIndexBufferSize_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_size_t __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowIndexBufferSize();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureSize_1ev_1uint16(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint size_j)
			{
				ev_uint16 size = (ev_uint16) size_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureSize(size);
				}
				else
				{
					pObjectX->setShadowTextureSize(size);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTextureSize_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureSize_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureSize_ev_uint16_callback", "(I)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureSize_1ev_1uint16_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint size_j)
			{
				ev_uint16 size = (ev_uint16) size_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureSize(size);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureConfig_1ev_1size_1t_1ev_1uint16_1ev_1uint16_1PixelFormat(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong shadowIndex_j, jint width_j, jint height_j, jint format_j)
			{
				ev_size_t shadowIndex = (ev_size_t) shadowIndex_j;
				ev_uint16 width = (ev_uint16) width_j;
				ev_uint16 height = (ev_uint16) height_j;
				EarthView::World::Graphic::PixelFormat format = (EarthView::World::Graphic::PixelFormat) format_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureConfig(shadowIndex, width, height, format);
				}
				else
				{
					pObjectX->setShadowTextureConfig(shadowIndex, width, height, format);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTextureConfig_1ev_1size_1t_1ev_1uint16_1ev_1uint16_1PixelFormat(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_callback", "(JIII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureConfig_1ev_1size_1t_1ev_1uint16_1ev_1uint16_1PixelFormat_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong shadowIndex_j, jint width_j, jint height_j, jint format_j)
			{
				ev_size_t shadowIndex = (ev_size_t) shadowIndex_j;
				ev_uint16 width = (ev_uint16) width_j;
				ev_uint16 height = (ev_uint16) height_j;
				EarthView::World::Graphic::PixelFormat format = (EarthView::World::Graphic::PixelFormat) format_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureConfig(shadowIndex, width, height, format);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureConfig_1ev_1size_1t_1ev_1uint16_1ev_1uint16_1PixelFormat_1ev_1uint16(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong shadowIndex_j, jint width_j, jint height_j, jint format_j, jint fsaa_j)
			{
				ev_size_t shadowIndex = (ev_size_t) shadowIndex_j;
				ev_uint16 width = (ev_uint16) width_j;
				ev_uint16 height = (ev_uint16) height_j;
				EarthView::World::Graphic::PixelFormat format = (EarthView::World::Graphic::PixelFormat) format_j;
				ev_uint16 fsaa = (ev_uint16) fsaa_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureConfig(shadowIndex, width, height, format, fsaa);
				}
				else
				{
					pObjectX->setShadowTextureConfig(shadowIndex, width, height, format, fsaa);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTextureConfig_1ev_1size_1t_1ev_1uint16_1ev_1uint16_1PixelFormat_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback", "(JIIII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureConfig_1ev_1size_1t_1ev_1uint16_1ev_1uint16_1PixelFormat_1ev_1uint16_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong shadowIndex_j, jint width_j, jint height_j, jint format_j, jint fsaa_j)
			{
				ev_size_t shadowIndex = (ev_size_t) shadowIndex_j;
				ev_uint16 width = (ev_uint16) width_j;
				ev_uint16 height = (ev_uint16) height_j;
				EarthView::World::Graphic::PixelFormat format = (EarthView::World::Graphic::PixelFormat) format_j;
				ev_uint16 fsaa = (ev_uint16) fsaa_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureConfig(shadowIndex, width, height, format, fsaa);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureConfig_1ev_1size_1t_1ev_1uint16_1ev_1uint16_1PixelFormat_1ev_1uint16_1ev_1uint16(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong shadowIndex_j, jint width_j, jint height_j, jint format_j, jint fsaa_j, jint depthBufferPoolId_j)
			{
				ev_size_t shadowIndex = (ev_size_t) shadowIndex_j;
				ev_uint16 width = (ev_uint16) width_j;
				ev_uint16 height = (ev_uint16) height_j;
				EarthView::World::Graphic::PixelFormat format = (EarthView::World::Graphic::PixelFormat) format_j;
				ev_uint16 fsaa = (ev_uint16) fsaa_j;
				ev_uint16 depthBufferPoolId = (ev_uint16) depthBufferPoolId_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureConfig(shadowIndex, width, height, format, fsaa, depthBufferPoolId);
				}
				else
				{
					pObjectX->setShadowTextureConfig(shadowIndex, width, height, format, fsaa, depthBufferPoolId);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTextureConfig_1ev_1size_1t_1ev_1uint16_1ev_1uint16_1PixelFormat_1ev_1uint16_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureConfig_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback", "(JIIIII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureConfig_1ev_1size_1t_1ev_1uint16_1ev_1uint16_1PixelFormat_1ev_1uint16_1ev_1uint16_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong shadowIndex_j, jint width_j, jint height_j, jint format_j, jint fsaa_j, jint depthBufferPoolId_j)
			{
				ev_size_t shadowIndex = (ev_size_t) shadowIndex_j;
				ev_uint16 width = (ev_uint16) width_j;
				ev_uint16 height = (ev_uint16) height_j;
				EarthView::World::Graphic::PixelFormat format = (EarthView::World::Graphic::PixelFormat) format_j;
				ev_uint16 fsaa = (ev_uint16) fsaa_j;
				ev_uint16 depthBufferPoolId = (ev_uint16) depthBufferPoolId_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureConfig(shadowIndex, width, height, format, fsaa, depthBufferPoolId);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureConfig_1ev_1size_1t_1ShadowTextureConfig(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong shadowIndex_j, jlong config_j)
			{
				ev_size_t shadowIndex = (ev_size_t) shadowIndex_j;
				const EarthView::World::Graphic::ShadowTextureConfig &config = *(EarthView::World::Graphic::ShadowTextureConfig*) config_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureConfig(shadowIndex, config);
				}
				else
				{
					pObjectX->setShadowTextureConfig(shadowIndex, config);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTextureConfig_1ev_1size_1t_1ShadowTextureConfig(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureConfig_ev_size_t_ShadowTextureConfig_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureConfig_ev_size_t_ShadowTextureConfig_callback", "(JJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureConfig_1ev_1size_1t_1ShadowTextureConfig_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong shadowIndex_j, jlong config_j)
			{
				ev_size_t shadowIndex = (ev_size_t) shadowIndex_j;
				const EarthView::World::Graphic::ShadowTextureConfig &config = *(EarthView::World::Graphic::ShadowTextureConfig*) config_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureConfig(shadowIndex, config);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowTextureConfigIterator_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::ConstShadowTextureConfigIterator __values1 = pObjectX->getShadowTextureConfigIterator();
				EarthView::World::Graphic::ConstShadowTextureConfigIterator *returnvalues = new EarthView::World::Graphic::ConstShadowTextureConfigIterator(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTexturePixelFormat_1PixelFormat(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint fmt_j)
			{
				EarthView::World::Graphic::PixelFormat fmt = (EarthView::World::Graphic::PixelFormat) fmt_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTexturePixelFormat(fmt);
				}
				else
				{
					pObjectX->setShadowTexturePixelFormat(fmt);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTexturePixelFormat_1PixelFormat(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTexturePixelFormat_PixelFormat_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTexturePixelFormat_PixelFormat_callback", "(I)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTexturePixelFormat_1PixelFormat_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint fmt_j)
			{
				EarthView::World::Graphic::PixelFormat fmt = (EarthView::World::Graphic::PixelFormat) fmt_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTexturePixelFormat(fmt);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureFSAA_1ev_1uint16(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint fsaa_j)
			{
				ev_uint16 fsaa = (ev_uint16) fsaa_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureFSAA(fsaa);
				}
				else
				{
					pObjectX->setShadowTextureFSAA(fsaa);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTextureFSAA_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureFSAA_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureFSAA_ev_uint16_callback", "(I)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureFSAA_1ev_1uint16_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint fsaa_j)
			{
				ev_uint16 fsaa = (ev_uint16) fsaa_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureFSAA(fsaa);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureCount_1ev_1size_1t(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong count_j)
			{
				ev_size_t count = (ev_size_t) count_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureCount(count);
				}
				else
				{
					pObjectX->setShadowTextureCount(count);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTextureCount_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureCount_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureCount_ev_size_t_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureCount_1ev_1size_1t_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong count_j)
			{
				ev_size_t count = (ev_size_t) count_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureCount(count);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowTextureCount_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_size_t __values1 = pObjectX->getShadowTextureCount();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureCountPerLightType_1LightTypes_1ev_1size_1t(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint type_j, jlong count_j)
			{
				EarthView::World::Graphic::CLight::LightTypes type = (EarthView::World::Graphic::CLight::LightTypes) type_j;
				ev_size_t count = (ev_size_t) count_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->setShadowTextureCountPerLightType(type, count);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowTextureCountPerLightType_1LightTypes(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint type_j)
			{
				EarthView::World::Graphic::CLight::LightTypes type = (EarthView::World::Graphic::CLight::LightTypes) type_j;
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_size_t __values1 = pObjectX->getShadowTextureCountPerLightType(type);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureSettings_1ev_1uint16_1ev_1uint16(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint size_j, jint count_j)
			{
				ev_uint16 size = (ev_uint16) size_j;
				ev_uint16 count = (ev_uint16) count_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureSettings(size, count);
				}
				else
				{
					pObjectX->setShadowTextureSettings(size, count);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTextureSettings_1ev_1uint16_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureSettings_ev_uint16_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureSettings_ev_uint16_ev_uint16_callback", "(II)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureSettings_1ev_1uint16_1ev_1uint16_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint size_j, jint count_j)
			{
				ev_uint16 size = (ev_uint16) size_j;
				ev_uint16 count = (ev_uint16) count_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureSettings(size, count);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureSettings_1ev_1uint16_1ev_1uint16_1PixelFormat(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint size_j, jint count_j, jint fmt_j)
			{
				ev_uint16 size = (ev_uint16) size_j;
				ev_uint16 count = (ev_uint16) count_j;
				EarthView::World::Graphic::PixelFormat fmt = (EarthView::World::Graphic::PixelFormat) fmt_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureSettings(size, count, fmt);
				}
				else
				{
					pObjectX->setShadowTextureSettings(size, count, fmt);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTextureSettings_1ev_1uint16_1ev_1uint16_1PixelFormat(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_callback", "(III)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureSettings_1ev_1uint16_1ev_1uint16_1PixelFormat_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint size_j, jint count_j, jint fmt_j)
			{
				ev_uint16 size = (ev_uint16) size_j;
				ev_uint16 count = (ev_uint16) count_j;
				EarthView::World::Graphic::PixelFormat fmt = (EarthView::World::Graphic::PixelFormat) fmt_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureSettings(size, count, fmt);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureSettings_1ev_1uint16_1ev_1uint16_1PixelFormat_1ev_1uint16(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint size_j, jint count_j, jint fmt_j, jint fsaa_j)
			{
				ev_uint16 size = (ev_uint16) size_j;
				ev_uint16 count = (ev_uint16) count_j;
				EarthView::World::Graphic::PixelFormat fmt = (EarthView::World::Graphic::PixelFormat) fmt_j;
				ev_uint16 fsaa = (ev_uint16) fsaa_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureSettings(size, count, fmt, fsaa);
				}
				else
				{
					pObjectX->setShadowTextureSettings(size, count, fmt, fsaa);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTextureSettings_1ev_1uint16_1ev_1uint16_1PixelFormat_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_callback", "(IIII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureSettings_1ev_1uint16_1ev_1uint16_1PixelFormat_1ev_1uint16_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint size_j, jint count_j, jint fmt_j, jint fsaa_j)
			{
				ev_uint16 size = (ev_uint16) size_j;
				ev_uint16 count = (ev_uint16) count_j;
				EarthView::World::Graphic::PixelFormat fmt = (EarthView::World::Graphic::PixelFormat) fmt_j;
				ev_uint16 fsaa = (ev_uint16) fsaa_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureSettings(size, count, fmt, fsaa);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureSettings_1ev_1uint16_1ev_1uint16_1PixelFormat_1ev_1uint16_1ev_1uint16(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint size_j, jint count_j, jint fmt_j, jint fsaa_j, jint depthBufferPoolId_j)
			{
				ev_uint16 size = (ev_uint16) size_j;
				ev_uint16 count = (ev_uint16) count_j;
				EarthView::World::Graphic::PixelFormat fmt = (EarthView::World::Graphic::PixelFormat) fmt_j;
				ev_uint16 fsaa = (ev_uint16) fsaa_j;
				ev_uint16 depthBufferPoolId = (ev_uint16) depthBufferPoolId_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureSettings(size, count, fmt, fsaa, depthBufferPoolId);
				}
				else
				{
					pObjectX->setShadowTextureSettings(size, count, fmt, fsaa, depthBufferPoolId);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTextureSettings_1ev_1uint16_1ev_1uint16_1PixelFormat_1ev_1uint16_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureSettings_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_callback", "(IIIII)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureSettings_1ev_1uint16_1ev_1uint16_1PixelFormat_1ev_1uint16_1ev_1uint16_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint size_j, jint count_j, jint fmt_j, jint fsaa_j, jint depthBufferPoolId_j)
			{
				ev_uint16 size = (ev_uint16) size_j;
				ev_uint16 count = (ev_uint16) count_j;
				EarthView::World::Graphic::PixelFormat fmt = (EarthView::World::Graphic::PixelFormat) fmt_j;
				ev_uint16 fsaa = (ev_uint16) fsaa_j;
				ev_uint16 depthBufferPoolId = (ev_uint16) depthBufferPoolId_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureSettings(size, count, fmt, fsaa, depthBufferPoolId);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowTexture_1ev_1size_1t(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong shadowIndex_j)
			{
				ev_size_t shadowIndex = (ev_size_t) shadowIndex_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					const EarthView::World::Graphic::CTexturePtr& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowTexture(shadowIndex);
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
				else
				{
					const EarthView::World::Graphic::CTexturePtr& __values1 = pObjectX->getShadowTexture(shadowIndex);
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShadowTexture_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowTexture_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowTexture_ev_size_t_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowTexture_1ev_1size_1t_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong shadowIndex_j)
			{
				ev_size_t shadowIndex = (ev_size_t) shadowIndex_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::CTexturePtr& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowTexture(shadowIndex);
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowDirLightTextureOffset_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble offset_j)
			{
				Real offset = (Real) offset_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowDirLightTextureOffset(offset);
				}
				else
				{
					pObjectX->setShadowDirLightTextureOffset(offset);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowDirLightTextureOffset_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowDirLightTextureOffset_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowDirLightTextureOffset_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowDirLightTextureOffset_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble offset_j)
			{
				Real offset = (Real) offset_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowDirLightTextureOffset(offset);
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowDirLightTextureOffset_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowDirLightTextureOffset();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getShadowDirLightTextureOffset();
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShadowDirLightTextureOffset_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowDirLightTextureOffset_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowDirLightTextureOffset_void_callback", "()D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowDirLightTextureOffset_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowDirLightTextureOffset();
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureFadeStart_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble fadeStart_j)
			{
				Real fadeStart = (Real) fadeStart_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureFadeStart(fadeStart);
				}
				else
				{
					pObjectX->setShadowTextureFadeStart(fadeStart);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTextureFadeStart_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureFadeStart_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureFadeStart_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureFadeStart_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble fadeStart_j)
			{
				Real fadeStart = (Real) fadeStart_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureFadeStart(fadeStart);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureFadeEnd_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble fadeEnd_j)
			{
				Real fadeEnd = (Real) fadeEnd_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureFadeEnd(fadeEnd);
				}
				else
				{
					pObjectX->setShadowTextureFadeEnd(fadeEnd);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTextureFadeEnd_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureFadeEnd_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureFadeEnd_Real_callback", "(D)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureFadeEnd_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble fadeEnd_j)
			{
				Real fadeEnd = (Real) fadeEnd_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureFadeEnd(fadeEnd);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureSelfShadow_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean selfShadow_j)
			{
				ev_bool selfShadow = (ev_bool) selfShadow_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureSelfShadow(selfShadow);
				}
				else
				{
					pObjectX->setShadowTextureSelfShadow(selfShadow);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTextureSelfShadow_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureSelfShadow_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureSelfShadow_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureSelfShadow_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean selfShadow_j)
			{
				ev_bool selfShadow = (ev_bool) selfShadow_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureSelfShadow(selfShadow);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowTextureSelfShadow_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowTextureSelfShadow();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getShadowTextureSelfShadow();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShadowTextureSelfShadow_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowTextureSelfShadow_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowTextureSelfShadow_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowTextureSelfShadow_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowTextureSelfShadow();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureCasterMaterial_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureCasterMaterial(name);
				}
				else
				{
					pObjectX->setShadowTextureCasterMaterial(name);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTextureCasterMaterial_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureCasterMaterial_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureCasterMaterial_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureCasterMaterial_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureCasterMaterial(name);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureReceiverMaterial_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureReceiverMaterial(name);
				}
				else
				{
					pObjectX->setShadowTextureReceiverMaterial(name);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowTextureReceiverMaterial_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowTextureReceiverMaterial_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowTextureReceiverMaterial_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowTextureReceiverMaterial_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowTextureReceiverMaterial(name);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowCasterRenderBackFaces_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean bf_j)
			{
				ev_bool bf = (ev_bool) bf_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowCasterRenderBackFaces(bf);
				}
				else
				{
					pObjectX->setShadowCasterRenderBackFaces(bf);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowCasterRenderBackFaces_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowCasterRenderBackFaces_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowCasterRenderBackFaces_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowCasterRenderBackFaces_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean bf_j)
			{
				ev_bool bf = (ev_bool) bf_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowCasterRenderBackFaces(bf);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowCasterRenderBackFaces_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowCasterRenderBackFaces();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getShadowCasterRenderBackFaces();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShadowCasterRenderBackFaces_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowCasterRenderBackFaces_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowCasterRenderBackFaces_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowCasterRenderBackFaces_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowCasterRenderBackFaces();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowCameraSetup_1ShadowCameraSetupPtr(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong shadowSetup_j)
			{
				const EarthView::World::Graphic::ShadowCameraSetupPtr &shadowSetup = *(EarthView::World::Graphic::ShadowCameraSetupPtr*) shadowSetup_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowCameraSetup(shadowSetup);
				}
				else
				{
					pObjectX->setShadowCameraSetup(shadowSetup);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowCameraSetup_1ShadowCameraSetupPtr(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowCameraSetup_ShadowCameraSetupPtr_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowCameraSetup_ShadowCameraSetupPtr_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowCameraSetup_1ShadowCameraSetupPtr_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong shadowSetup_j)
			{
				const EarthView::World::Graphic::ShadowCameraSetupPtr &shadowSetup = *(EarthView::World::Graphic::ShadowCameraSetupPtr*) shadowSetup_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowCameraSetup(shadowSetup);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowCameraSetup_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					const EarthView::World::Graphic::ShadowCameraSetupPtr& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowCameraSetup();
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
				else
				{
					const EarthView::World::Graphic::ShadowCameraSetupPtr& __values1 = pObjectX->getShadowCameraSetup();
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShadowCameraSetup_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowCameraSetup_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowCameraSetup_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowCameraSetup_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::ShadowCameraSetupPtr& __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowCameraSetup();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowUseInfiniteFarPlane_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowUseInfiniteFarPlane(enable);
				}
				else
				{
					pObjectX->setShadowUseInfiniteFarPlane(enable);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowUseInfiniteFarPlane_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowUseInfiniteFarPlane_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowUseInfiniteFarPlane_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowUseInfiniteFarPlane_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowUseInfiniteFarPlane(enable);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isShadowTechniqueStencilBased_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isShadowTechniqueStencilBased();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->isShadowTechniqueStencilBased();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1isShadowTechniqueStencilBased_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isShadowTechniqueStencilBased_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isShadowTechniqueStencilBased_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isShadowTechniqueStencilBased_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isShadowTechniqueStencilBased();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isShadowTechniqueTextureBased_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isShadowTechniqueTextureBased();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->isShadowTechniqueTextureBased();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1isShadowTechniqueTextureBased_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isShadowTechniqueTextureBased_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isShadowTechniqueTextureBased_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isShadowTechniqueTextureBased_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isShadowTechniqueTextureBased();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isShadowTechniqueModulative_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isShadowTechniqueModulative();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->isShadowTechniqueModulative();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1isShadowTechniqueModulative_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isShadowTechniqueModulative_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isShadowTechniqueModulative_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isShadowTechniqueModulative_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isShadowTechniqueModulative();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isShadowTechniqueAdditive_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isShadowTechniqueAdditive();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->isShadowTechniqueAdditive();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1isShadowTechniqueAdditive_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isShadowTechniqueAdditive_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isShadowTechniqueAdditive_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isShadowTechniqueAdditive_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isShadowTechniqueAdditive();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isShadowTechniqueIntegrated_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isShadowTechniqueIntegrated();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->isShadowTechniqueIntegrated();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1isShadowTechniqueIntegrated_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isShadowTechniqueIntegrated_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isShadowTechniqueIntegrated_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isShadowTechniqueIntegrated_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isShadowTechniqueIntegrated();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isShadowTechniqueInUse_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isShadowTechniqueInUse();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->isShadowTechniqueInUse();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1isShadowTechniqueInUse_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isShadowTechniqueInUse_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isShadowTechniqueInUse_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isShadowTechniqueInUse_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isShadowTechniqueInUse();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowUseLightClipPlanes_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enabled_j)
			{
				ev_bool enabled = (ev_bool) enabled_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setShadowUseLightClipPlanes(enabled);
				}
				else
				{
					pObjectX->setShadowUseLightClipPlanes(enabled);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setShadowUseLightClipPlanes_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setShadowUseLightClipPlanes_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setShadowUseLightClipPlanes_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setShadowUseLightClipPlanes_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enabled_j)
			{
				ev_bool enabled = (ev_bool) enabled_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setShadowUseLightClipPlanes(enabled);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowUseLightClipPlanes_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowUseLightClipPlanes();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getShadowUseLightClipPlanes();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getShadowUseLightClipPlanes_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getShadowUseLightClipPlanes_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getShadowUseLightClipPlanes_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowUseLightClipPlanes_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getShadowUseLightClipPlanes();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setActiveCompositorChain_1CCompositorChain(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong chain_j)
			{
				EarthView::World::Graphic::CCompositorChain *chain = (EarthView::World::Graphic::CCompositorChain*) chain_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_setActiveCompositorChain(chain);
				}
				else
				{
					pObjectX->_setActiveCompositorChain(chain);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setActiveCompositorChain_1CCompositorChain(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setActiveCompositorChain_CCompositorChain_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setActiveCompositorChain_CCompositorChain_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1setActiveCompositorChain_1CCompositorChain_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong chain_j)
			{
				EarthView::World::Graphic::CCompositorChain *chain = (EarthView::World::Graphic::CCompositorChain*) chain_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_setActiveCompositorChain(chain);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setLateMaterialResolving_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean isLate_j)
			{
				ev_bool isLate = (ev_bool) isLate_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setLateMaterialResolving(isLate);
				}
				else
				{
					pObjectX->setLateMaterialResolving(isLate);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setLateMaterialResolving_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setLateMaterialResolving_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setLateMaterialResolving_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setLateMaterialResolving_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean isLate_j)
			{
				ev_bool isLate = (ev_bool) isLate_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setLateMaterialResolving(isLate);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isLateMaterialResolving_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isLateMaterialResolving();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->isLateMaterialResolving();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1isLateMaterialResolving_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_isLateMaterialResolving_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"isLateMaterialResolving_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_isLateMaterialResolving_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::isLateMaterialResolving();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager__1getActiveCompositorChain_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CCompositorChain* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::_getActiveCompositorChain();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CCompositorChain* __values1 = pObjectX->_getActiveCompositorChain();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1getActiveCompositorChain_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__getActiveCompositorChain_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_getActiveCompositorChain_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager__1getActiveCompositorChain_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CCompositorChain* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::_getActiveCompositorChain();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_addListener_1CSceneManagerListener(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ref_s_j)
			{
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *ref_s = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) ref_s_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::addListener(ref_s);
				}
				else
				{
					pObjectX->addListener(ref_s);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1addListener_1CSceneManagerListener(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_addListener_CSceneManagerListener_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"addListener_CSceneManagerListener_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_addListener_1CSceneManagerListener_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ref_s_j)
			{
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *ref_s = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) ref_s_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::addListener(ref_s);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_removeListener_1CSceneManagerListener(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong s_j)
			{
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *s = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) s_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::removeListener(s);
				}
				else
				{
					pObjectX->removeListener(s);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1removeListener_1CSceneManagerListener(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_removeListener_CSceneManagerListener_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"removeListener_CSceneManagerListener_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_removeListener_1CSceneManagerListener_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong s_j)
			{
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *s = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) s_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::removeListener(s);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_existListener_1CSceneManagerListener(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong s_j)
			{
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *s = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) s_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::existListener(s);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->existListener(s);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1existListener_1CSceneManagerListener(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_existListener_CSceneManagerListener_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"existListener_CSceneManagerListener_callback", "(J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_existListener_1CSceneManagerListener_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong s_j)
			{
				EarthView::World::Graphic::CSceneManager::CSceneManagerListener *s = (EarthView::World::Graphic::CSceneManager::CSceneManagerListener*) s_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::existListener(s);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createStaticGeometry_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CStaticGeometry* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createStaticGeometry(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CStaticGeometry* __values1 = pObjectX->createStaticGeometry(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createStaticGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createStaticGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createStaticGeometry_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createStaticGeometry_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CStaticGeometry* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createStaticGeometry(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getStaticGeometry_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CStaticGeometry* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getStaticGeometry(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CStaticGeometry* __values1 = pObjectX->getStaticGeometry(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getStaticGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getStaticGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getStaticGeometry_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getStaticGeometry_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CStaticGeometry* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getStaticGeometry(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasStaticGeometry_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasStaticGeometry(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->hasStaticGeometry(name);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1hasStaticGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasStaticGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasStaticGeometry_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasStaticGeometry_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasStaticGeometry(name);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyStaticGeometry_1CStaticGeometry(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong geom_j)
			{
				EarthView::World::Graphic::CStaticGeometry *geom = (EarthView::World::Graphic::CStaticGeometry*) geom_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyStaticGeometry(geom);
				}
				else
				{
					pObjectX->destroyStaticGeometry(geom);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyStaticGeometry_1CStaticGeometry(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyStaticGeometry_CStaticGeometry_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyStaticGeometry_CStaticGeometry_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyStaticGeometry_1CStaticGeometry_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong geom_j)
			{
				EarthView::World::Graphic::CStaticGeometry *geom = (EarthView::World::Graphic::CStaticGeometry*) geom_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyStaticGeometry(geom);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyStaticGeometry_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyStaticGeometry(name);
				}
				else
				{
					pObjectX->destroyStaticGeometry(name);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyStaticGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyStaticGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyStaticGeometry_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyStaticGeometry_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyStaticGeometry(name);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllStaticGeometry_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllStaticGeometry();
				}
				else
				{
					pObjectX->destroyAllStaticGeometry();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyAllStaticGeometry_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllStaticGeometry_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllStaticGeometry_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllStaticGeometry_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllStaticGeometry();
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createInstancedGeometry_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CInstancedGeometry* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createInstancedGeometry(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CInstancedGeometry* __values1 = pObjectX->createInstancedGeometry(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createInstancedGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createInstancedGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createInstancedGeometry_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createInstancedGeometry_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CInstancedGeometry* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createInstancedGeometry(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getInstancedGeometry_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CInstancedGeometry* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getInstancedGeometry(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CInstancedGeometry* __values1 = pObjectX->getInstancedGeometry(name);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getInstancedGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getInstancedGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getInstancedGeometry_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getInstancedGeometry_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CInstancedGeometry* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getInstancedGeometry(name);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyInstancedGeometry_1CInstancedGeometry(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong geom_j)
			{
				EarthView::World::Graphic::CInstancedGeometry *geom = (EarthView::World::Graphic::CInstancedGeometry*) geom_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyInstancedGeometry(geom);
				}
				else
				{
					pObjectX->destroyInstancedGeometry(geom);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyInstancedGeometry_1CInstancedGeometry(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyInstancedGeometry_CInstancedGeometry_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyInstancedGeometry_CInstancedGeometry_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyInstancedGeometry_1CInstancedGeometry_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong geom_j)
			{
				EarthView::World::Graphic::CInstancedGeometry *geom = (EarthView::World::Graphic::CInstancedGeometry*) geom_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyInstancedGeometry(geom);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyInstancedGeometry_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyInstancedGeometry(name);
				}
				else
				{
					pObjectX->destroyInstancedGeometry(name);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyInstancedGeometry_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyInstancedGeometry_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyInstancedGeometry_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyInstancedGeometry_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyInstancedGeometry(name);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllInstancedGeometry_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllInstancedGeometry();
				}
				else
				{
					pObjectX->destroyAllInstancedGeometry();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyAllInstancedGeometry_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllInstancedGeometry_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllInstancedGeometry_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllInstancedGeometry_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllInstancedGeometry();
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createInstanceManager_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1ev_1uint16_1ev_1uint16(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring customName_j, jstring meshName_j, jstring groupName_j, jint technique_j, jlong numInstancesPerBatch_j, jint flags_j, jint subMeshIdx_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* customName_ch = (const ev_char*)__env->GetStringUTFChars(customName_j,JNI_FALSE);
				const EVString customName = customName_ch;
				__env->ReleaseStringUTFChars(customName_j, (const char *)customName_ch);
				#else
				const ev_wchar* customName_ch = (const ev_wchar*)__env->GetStringChars(customName_j,JNI_FALSE);
				const EVString customName = customName_ch;
				__env->ReleaseStringChars(customName_j, (const jchar *)customName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique = (EarthView::World::Graphic::CInstanceManager::InstancingTechnique) technique_j;
				ev_size_t numInstancesPerBatch = (ev_size_t) numInstancesPerBatch_j;
				ev_uint16 flags = (ev_uint16) flags_j;
				ev_uint16 subMeshIdx = (ev_uint16) subMeshIdx_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CInstanceManager* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createInstanceManager(customName, meshName, groupName, technique, numInstancesPerBatch, flags, subMeshIdx);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CInstanceManager* __values1 = pObjectX->createInstanceManager(customName, meshName, groupName, technique, numInstancesPerBatch, flags, subMeshIdx);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createInstanceManager_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1ev_1uint16_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJII)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createInstanceManager_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1ev_1uint16_1ev_1uint16_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring customName_j, jstring meshName_j, jstring groupName_j, jint technique_j, jlong numInstancesPerBatch_j, jint flags_j, jint subMeshIdx_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* customName_ch = (const ev_char*)__env->GetStringUTFChars(customName_j,JNI_FALSE);
				const EVString customName = customName_ch;
				__env->ReleaseStringUTFChars(customName_j, (const char *)customName_ch);
				#else
				const ev_wchar* customName_ch = (const ev_wchar*)__env->GetStringChars(customName_j,JNI_FALSE);
				const EVString customName = customName_ch;
				__env->ReleaseStringChars(customName_j, (const jchar *)customName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique = (EarthView::World::Graphic::CInstanceManager::InstancingTechnique) technique_j;
				ev_size_t numInstancesPerBatch = (ev_size_t) numInstancesPerBatch_j;
				ev_uint16 flags = (ev_uint16) flags_j;
				ev_uint16 subMeshIdx = (ev_uint16) subMeshIdx_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CInstanceManager* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createInstanceManager(customName, meshName, groupName, technique, numInstancesPerBatch, flags, subMeshIdx);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createInstanceManager_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1ev_1uint16(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring customName_j, jstring meshName_j, jstring groupName_j, jint technique_j, jlong numInstancesPerBatch_j, jint flags_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* customName_ch = (const ev_char*)__env->GetStringUTFChars(customName_j,JNI_FALSE);
				const EVString customName = customName_ch;
				__env->ReleaseStringUTFChars(customName_j, (const char *)customName_ch);
				#else
				const ev_wchar* customName_ch = (const ev_wchar*)__env->GetStringChars(customName_j,JNI_FALSE);
				const EVString customName = customName_ch;
				__env->ReleaseStringChars(customName_j, (const jchar *)customName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique = (EarthView::World::Graphic::CInstanceManager::InstancingTechnique) technique_j;
				ev_size_t numInstancesPerBatch = (ev_size_t) numInstancesPerBatch_j;
				ev_uint16 flags = (ev_uint16) flags_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CInstanceManager* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createInstanceManager(customName, meshName, groupName, technique, numInstancesPerBatch, flags);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CInstanceManager* __values1 = pObjectX->createInstanceManager(customName, meshName, groupName, technique, numInstancesPerBatch, flags);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createInstanceManager_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJI)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createInstanceManager_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1ev_1uint16_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring customName_j, jstring meshName_j, jstring groupName_j, jint technique_j, jlong numInstancesPerBatch_j, jint flags_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* customName_ch = (const ev_char*)__env->GetStringUTFChars(customName_j,JNI_FALSE);
				const EVString customName = customName_ch;
				__env->ReleaseStringUTFChars(customName_j, (const char *)customName_ch);
				#else
				const ev_wchar* customName_ch = (const ev_wchar*)__env->GetStringChars(customName_j,JNI_FALSE);
				const EVString customName = customName_ch;
				__env->ReleaseStringChars(customName_j, (const jchar *)customName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique = (EarthView::World::Graphic::CInstanceManager::InstancingTechnique) technique_j;
				ev_size_t numInstancesPerBatch = (ev_size_t) numInstancesPerBatch_j;
				ev_uint16 flags = (ev_uint16) flags_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CInstanceManager* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createInstanceManager(customName, meshName, groupName, technique, numInstancesPerBatch, flags);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createInstanceManager_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring customName_j, jstring meshName_j, jstring groupName_j, jint technique_j, jlong numInstancesPerBatch_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* customName_ch = (const ev_char*)__env->GetStringUTFChars(customName_j,JNI_FALSE);
				const EVString customName = customName_ch;
				__env->ReleaseStringUTFChars(customName_j, (const char *)customName_ch);
				#else
				const ev_wchar* customName_ch = (const ev_wchar*)__env->GetStringChars(customName_j,JNI_FALSE);
				const EVString customName = customName_ch;
				__env->ReleaseStringChars(customName_j, (const jchar *)customName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique = (EarthView::World::Graphic::CInstanceManager::InstancingTechnique) technique_j;
				ev_size_t numInstancesPerBatch = (ev_size_t) numInstancesPerBatch_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CInstanceManager* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createInstanceManager(customName, meshName, groupName, technique, numInstancesPerBatch);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CInstanceManager* __values1 = pObjectX->createInstanceManager(customName, meshName, groupName, technique, numInstancesPerBatch);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createInstanceManager_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createInstanceManager_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring customName_j, jstring meshName_j, jstring groupName_j, jint technique_j, jlong numInstancesPerBatch_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* customName_ch = (const ev_char*)__env->GetStringUTFChars(customName_j,JNI_FALSE);
				const EVString customName = customName_ch;
				__env->ReleaseStringUTFChars(customName_j, (const char *)customName_ch);
				#else
				const ev_wchar* customName_ch = (const ev_wchar*)__env->GetStringChars(customName_j,JNI_FALSE);
				const EVString customName = customName_ch;
				__env->ReleaseStringChars(customName_j, (const jchar *)customName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique = (EarthView::World::Graphic::CInstanceManager::InstancingTechnique) technique_j;
				ev_size_t numInstancesPerBatch = (ev_size_t) numInstancesPerBatch_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CInstanceManager* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createInstanceManager(customName, meshName, groupName, technique, numInstancesPerBatch);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_addInstanceManager_1CInstanceManager(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pInstMnger_j)
			{
				EarthView::World::Graphic::CInstanceManager *pInstMnger = (EarthView::World::Graphic::CInstanceManager*) pInstMnger_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->addInstanceManager(pInstMnger);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getInstanceManager_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring managerName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* managerName_ch = (const ev_char*)__env->GetStringUTFChars(managerName_j,JNI_FALSE);
				const EVString managerName = managerName_ch;
				__env->ReleaseStringUTFChars(managerName_j, (const char *)managerName_ch);
				#else
				const ev_wchar* managerName_ch = (const ev_wchar*)__env->GetStringChars(managerName_j,JNI_FALSE);
				const EVString managerName = managerName_ch;
				__env->ReleaseStringChars(managerName_j, (const jchar *)managerName_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CInstanceManager* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getInstanceManager(managerName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CInstanceManager* __values1 = pObjectX->getInstanceManager(managerName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getInstanceManager_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getInstanceManager_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getInstanceManager_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getInstanceManager_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring managerName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* managerName_ch = (const ev_char*)__env->GetStringUTFChars(managerName_j,JNI_FALSE);
				const EVString managerName = managerName_ch;
				__env->ReleaseStringUTFChars(managerName_j, (const char *)managerName_ch);
				#else
				const ev_wchar* managerName_ch = (const ev_wchar*)__env->GetStringChars(managerName_j,JNI_FALSE);
				const EVString managerName = managerName_ch;
				__env->ReleaseStringChars(managerName_j, (const jchar *)managerName_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CInstanceManager* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getInstanceManager(managerName);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasInstanceManager_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring managerName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* managerName_ch = (const ev_char*)__env->GetStringUTFChars(managerName_j,JNI_FALSE);
				const EVString managerName = managerName_ch;
				__env->ReleaseStringUTFChars(managerName_j, (const char *)managerName_ch);
				#else
				const ev_wchar* managerName_ch = (const ev_wchar*)__env->GetStringChars(managerName_j,JNI_FALSE);
				const EVString managerName = managerName_ch;
				__env->ReleaseStringChars(managerName_j, (const jchar *)managerName_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasInstanceManager(managerName);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->hasInstanceManager(managerName);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1hasInstanceManager_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasInstanceManager_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasInstanceManager_EVString_callback", "(Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasInstanceManager_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring managerName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* managerName_ch = (const ev_char*)__env->GetStringUTFChars(managerName_j,JNI_FALSE);
				const EVString managerName = managerName_ch;
				__env->ReleaseStringUTFChars(managerName_j, (const char *)managerName_ch);
				#else
				const ev_wchar* managerName_ch = (const ev_wchar*)__env->GetStringChars(managerName_j,JNI_FALSE);
				const EVString managerName = managerName_ch;
				__env->ReleaseStringChars(managerName_j, (const jchar *)managerName_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasInstanceManager(managerName);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyInstanceManager_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyInstanceManager(name);
				}
				else
				{
					pObjectX->destroyInstanceManager(name);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyInstanceManager_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyInstanceManager_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyInstanceManager_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyInstanceManager_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyInstanceManager(name);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyInstanceManager_1CInstanceManager(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong instanceManager_j)
			{
				EarthView::World::Graphic::CInstanceManager *instanceManager = (EarthView::World::Graphic::CInstanceManager*) instanceManager_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyInstanceManager(instanceManager);
				}
				else
				{
					pObjectX->destroyInstanceManager(instanceManager);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyInstanceManager_1CInstanceManager(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyInstanceManager_CInstanceManager_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyInstanceManager_CInstanceManager_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyInstanceManager_1CInstanceManager_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong instanceManager_j)
			{
				EarthView::World::Graphic::CInstanceManager *instanceManager = (EarthView::World::Graphic::CInstanceManager*) instanceManager_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyInstanceManager(instanceManager);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyInstanceManagerWithThreadSafe_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyInstanceManagerWithThreadSafe(name);
				}
				else
				{
					pObjectX->destroyInstanceManagerWithThreadSafe(name);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyInstanceManagerWithThreadSafe_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyInstanceManagerWithThreadSafe_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyInstanceManagerWithThreadSafe_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyInstanceManagerWithThreadSafe_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyInstanceManagerWithThreadSafe(name);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyInstanceManagerWithThreadSafe_1CInstanceManager(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong instanceManager_j)
			{
				EarthView::World::Graphic::CInstanceManager *instanceManager = (EarthView::World::Graphic::CInstanceManager*) instanceManager_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyInstanceManagerWithThreadSafe(instanceManager);
				}
				else
				{
					pObjectX->destroyInstanceManagerWithThreadSafe(instanceManager);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyInstanceManagerWithThreadSafe_1CInstanceManager(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyInstanceManagerWithThreadSafe_CInstanceManager_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyInstanceManagerWithThreadSafe_CInstanceManager_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyInstanceManagerWithThreadSafe_1CInstanceManager_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong instanceManager_j)
			{
				EarthView::World::Graphic::CInstanceManager *instanceManager = (EarthView::World::Graphic::CInstanceManager*) instanceManager_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyInstanceManagerWithThreadSafe(instanceManager);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllInstanceManagers_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllInstanceManagers();
				}
				else
				{
					pObjectX->destroyAllInstanceManagers();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyAllInstanceManagers_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllInstanceManagers_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllInstanceManagers_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllInstanceManagers_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllInstanceManagers();
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getNumInstancesPerBatch_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring meshName_j, jstring groupName_j, jstring materialName_j, jint technique_j, jlong numInstancesPerBatch_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique = (EarthView::World::Graphic::CInstanceManager::InstancingTechnique) technique_j;
				ev_size_t numInstancesPerBatch = (ev_size_t) numInstancesPerBatch_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_size_t __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getNumInstancesPerBatch(meshName, groupName, materialName, technique, numInstancesPerBatch);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					ev_size_t __values1 = pObjectX->getNumInstancesPerBatch(meshName, groupName, materialName, technique, numInstancesPerBatch);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getNumInstancesPerBatch_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_callback", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getNumInstancesPerBatch_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring meshName_j, jstring groupName_j, jstring materialName_j, jint technique_j, jlong numInstancesPerBatch_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique = (EarthView::World::Graphic::CInstanceManager::InstancingTechnique) technique_j;
				ev_size_t numInstancesPerBatch = (ev_size_t) numInstancesPerBatch_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_size_t __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getNumInstancesPerBatch(meshName, groupName, materialName, technique, numInstancesPerBatch);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getNumInstancesPerBatch_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1ev_1uint16(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring meshName_j, jstring groupName_j, jstring materialName_j, jint technique_j, jlong numInstancesPerBatch_j, jint flags_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique = (EarthView::World::Graphic::CInstanceManager::InstancingTechnique) technique_j;
				ev_size_t numInstancesPerBatch = (ev_size_t) numInstancesPerBatch_j;
				ev_uint16 flags = (ev_uint16) flags_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_size_t __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getNumInstancesPerBatch(meshName, groupName, materialName, technique, numInstancesPerBatch, flags);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					ev_size_t __values1 = pObjectX->getNumInstancesPerBatch(meshName, groupName, materialName, technique, numInstancesPerBatch, flags);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getNumInstancesPerBatch_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_callback", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJI)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getNumInstancesPerBatch_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1ev_1uint16_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring meshName_j, jstring groupName_j, jstring materialName_j, jint technique_j, jlong numInstancesPerBatch_j, jint flags_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique = (EarthView::World::Graphic::CInstanceManager::InstancingTechnique) technique_j;
				ev_size_t numInstancesPerBatch = (ev_size_t) numInstancesPerBatch_j;
				ev_uint16 flags = (ev_uint16) flags_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_size_t __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getNumInstancesPerBatch(meshName, groupName, materialName, technique, numInstancesPerBatch, flags);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getNumInstancesPerBatch_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1ev_1uint16_1ev_1uint16(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring meshName_j, jstring groupName_j, jstring materialName_j, jint technique_j, jlong numInstancesPerBatch_j, jint flags_j, jint subMeshIdx_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique = (EarthView::World::Graphic::CInstanceManager::InstancingTechnique) technique_j;
				ev_size_t numInstancesPerBatch = (ev_size_t) numInstancesPerBatch_j;
				ev_uint16 flags = (ev_uint16) flags_j;
				ev_uint16 subMeshIdx = (ev_uint16) subMeshIdx_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_size_t __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getNumInstancesPerBatch(meshName, groupName, materialName, technique, numInstancesPerBatch, flags, subMeshIdx);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					ev_size_t __values1 = pObjectX->getNumInstancesPerBatch(meshName, groupName, materialName, technique, numInstancesPerBatch, flags, subMeshIdx);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getNumInstancesPerBatch_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1ev_1uint16_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getNumInstancesPerBatch_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_callback", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJII)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getNumInstancesPerBatch_1EVString_1EVString_1EVString_1InstancingTechnique_1ev_1size_1t_1ev_1uint16_1ev_1uint16_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring meshName_j, jstring groupName_j, jstring materialName_j, jint technique_j, jlong numInstancesPerBatch_j, jint flags_j, jint subMeshIdx_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* meshName_ch = (const ev_char*)__env->GetStringUTFChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringUTFChars(meshName_j, (const char *)meshName_ch);
				#else
				const ev_wchar* meshName_ch = (const ev_wchar*)__env->GetStringChars(meshName_j,JNI_FALSE);
				const EVString meshName = meshName_ch;
				__env->ReleaseStringChars(meshName_j, (const jchar *)meshName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* groupName_ch = (const ev_char*)__env->GetStringUTFChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringUTFChars(groupName_j, (const char *)groupName_ch);
				#else
				const ev_wchar* groupName_ch = (const ev_wchar*)__env->GetStringChars(groupName_j,JNI_FALSE);
				const EVString groupName = groupName_ch;
				__env->ReleaseStringChars(groupName_j, (const jchar *)groupName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				EarthView::World::Graphic::CInstanceManager::InstancingTechnique technique = (EarthView::World::Graphic::CInstanceManager::InstancingTechnique) technique_j;
				ev_size_t numInstancesPerBatch = (ev_size_t) numInstancesPerBatch_j;
				ev_uint16 flags = (ev_uint16) flags_j;
				ev_uint16 subMeshIdx = (ev_uint16) subMeshIdx_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_size_t __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getNumInstancesPerBatch(meshName, groupName, materialName, technique, numInstancesPerBatch, flags, subMeshIdx);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createInstancedEntity_1EVString_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring materialName_j, jstring managerName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* managerName_ch = (const ev_char*)__env->GetStringUTFChars(managerName_j,JNI_FALSE);
				const EVString managerName = managerName_ch;
				__env->ReleaseStringUTFChars(managerName_j, (const char *)managerName_ch);
				#else
				const ev_wchar* managerName_ch = (const ev_wchar*)__env->GetStringChars(managerName_j,JNI_FALSE);
				const EVString managerName = managerName_ch;
				__env->ReleaseStringChars(managerName_j, (const jchar *)managerName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CInstancedEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createInstancedEntity(materialName, managerName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CInstancedEntity* __values1 = pObjectX->createInstancedEntity(materialName, managerName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createInstancedEntity_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createInstancedEntity_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createInstancedEntity_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createInstancedEntity_1EVString_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring materialName_j, jstring managerName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* materialName_ch = (const ev_char*)__env->GetStringUTFChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringUTFChars(materialName_j, (const char *)materialName_ch);
				#else
				const ev_wchar* materialName_ch = (const ev_wchar*)__env->GetStringChars(materialName_j,JNI_FALSE);
				const EVString materialName = materialName_ch;
				__env->ReleaseStringChars(materialName_j, (const jchar *)materialName_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* managerName_ch = (const ev_char*)__env->GetStringUTFChars(managerName_j,JNI_FALSE);
				const EVString managerName = managerName_ch;
				__env->ReleaseStringUTFChars(managerName_j, (const char *)managerName_ch);
				#else
				const ev_wchar* managerName_ch = (const ev_wchar*)__env->GetStringChars(managerName_j,JNI_FALSE);
				const EVString managerName = managerName_ch;
				__env->ReleaseStringChars(managerName_j, (const jchar *)managerName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CInstancedEntity* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createInstancedEntity(materialName, managerName);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyInstancedEntity_1CInstancedEntity(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong instancedEntity_j)
			{
				EarthView::World::Graphic::CInstancedEntity *instancedEntity = (EarthView::World::Graphic::CInstancedEntity*) instancedEntity_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyInstancedEntity(instancedEntity);
				}
				else
				{
					pObjectX->destroyInstancedEntity(instancedEntity);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyInstancedEntity_1CInstancedEntity(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyInstancedEntity_CInstancedEntity_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyInstancedEntity_CInstancedEntity_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyInstancedEntity_1CInstancedEntity_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong instancedEntity_j)
			{
				EarthView::World::Graphic::CInstancedEntity *instancedEntity = (EarthView::World::Graphic::CInstancedEntity*) instancedEntity_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyInstancedEntity(instancedEntity);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1addDirtyInstanceManager_1CInstanceManager(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ref_dirtyManager_j)
			{
				EarthView::World::Graphic::CInstanceManager *ref_dirtyManager = (EarthView::World::Graphic::CInstanceManager*) ref_dirtyManager_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->_addDirtyInstanceManager(ref_dirtyManager);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createMovableObject_1EVString_1EVString_1CommonStringPairList(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jstring typeName_j, jlong params_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				const EarthView::World::Core::CommonStringPairList *params = (const EarthView::World::Core::CommonStringPairList*) params_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CMovableObject* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createMovableObject(name, typeName, params);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CMovableObject* __values1 = pObjectX->createMovableObject(name, typeName, params);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createMovableObject_1EVString_1EVString_1CommonStringPairList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createMovableObject_EVString_EVString_CommonStringPairList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createMovableObject_EVString_EVString_CommonStringPairList_callback", "(Ljava/lang/String;Ljava/lang/String;J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createMovableObject_1EVString_1EVString_1CommonStringPairList_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jstring typeName_j, jlong params_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				const EarthView::World::Core::CommonStringPairList *params = (const EarthView::World::Core::CommonStringPairList*) params_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CMovableObject* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createMovableObject(name, typeName, params);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createMovableObject_1EVString_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CMovableObject* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createMovableObject(name, typeName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CMovableObject* __values1 = pObjectX->createMovableObject(name, typeName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createMovableObject_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createMovableObject_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createMovableObject_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createMovableObject_1EVString_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CMovableObject* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createMovableObject(name, typeName);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createMovableObject_1EVString_1CommonStringPairList(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring typeName_j, jlong params_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				const EarthView::World::Core::CommonStringPairList *params = (const EarthView::World::Core::CommonStringPairList*) params_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CMovableObject* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createMovableObject(typeName, params);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CMovableObject* __values1 = pObjectX->createMovableObject(typeName, params);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createMovableObject_1EVString_1CommonStringPairList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createMovableObject_EVString_CommonStringPairList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createMovableObject_EVString_CommonStringPairList_callback", "(Ljava/lang/String;J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createMovableObject_1EVString_1CommonStringPairList_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring typeName_j, jlong params_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				const EarthView::World::Core::CommonStringPairList *params = (const EarthView::World::Core::CommonStringPairList*) params_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CMovableObject* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createMovableObject(typeName, params);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createMovableObject_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CMovableObject* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createMovableObject(typeName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CMovableObject* __values1 = pObjectX->createMovableObject(typeName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1createMovableObject_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createMovableObject_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createMovableObject_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_createMovableObject_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CMovableObject* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::createMovableObject(typeName);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyMovableObject_1EVString_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyMovableObject(name, typeName);
				}
				else
				{
					pObjectX->destroyMovableObject(name, typeName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyMovableObject_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyMovableObject_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyMovableObject_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyMovableObject_1EVString_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyMovableObject(name, typeName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyMovableObject_1CMovableObject(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong m_j)
			{
				EarthView::World::Graphic::CMovableObject *m = (EarthView::World::Graphic::CMovableObject*) m_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyMovableObject(m);
				}
				else
				{
					pObjectX->destroyMovableObject(m);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyMovableObject_1CMovableObject(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyMovableObject_CMovableObject_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyMovableObject_CMovableObject_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyMovableObject_1CMovableObject_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong m_j)
			{
				EarthView::World::Graphic::CMovableObject *m = (EarthView::World::Graphic::CMovableObject*) m_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyMovableObject(m);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllMovableObjectsByType_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllMovableObjectsByType(typeName);
				}
				else
				{
					pObjectX->destroyAllMovableObjectsByType(typeName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyAllMovableObjectsByType_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllMovableObjectsByType_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllMovableObjectsByType_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllMovableObjectsByType_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllMovableObjectsByType(typeName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllMovableObjects_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllMovableObjects();
				}
				else
				{
					pObjectX->destroyAllMovableObjects();
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1destroyAllMovableObjects_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyAllMovableObjects_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyAllMovableObjects_void_callback", "()V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_destroyAllMovableObjects_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::destroyAllMovableObjects();
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getMovableObject_1EVString_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CMovableObject* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getMovableObject(name, typeName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CMovableObject* __values1 = pObjectX->getMovableObject(name, typeName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getMovableObject_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getMovableObject_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getMovableObject_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getMovableObject_1EVString_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CMovableObject* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getMovableObject(name, typeName);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasMovableObject_1EVString_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasMovableObject(name, typeName);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->hasMovableObject(name, typeName);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1hasMovableObject_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_hasMovableObject_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"hasMovableObject_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_hasMovableObject_1EVString_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::hasMovableObject(name, typeName);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jstring JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectIteratorPair_get_1first_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::MovableObjectIteratorPair *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectIteratorPair*)pObjXXXX;
				EarthView::World::Core::ev_wstring __values1_ch = pObjectX->first;
				jstring __values1_j = __env->NewString((const jchar*)__values1_ch.getString(), __values1_ch.size());
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectIteratorPair_set_1first_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::MovableObjectIteratorPair *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectIteratorPair*)pObjXXXX;
				const ev_wchar* __values1_ch = (const ev_wchar*)__env->GetStringChars(__values1_j,JNI_FALSE);
				pObjectX->first = __values1_ch;
				__env->ReleaseStringChars(__values1_j,(const jchar*)__values1_ch);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectIteratorPair_get_1second_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::MovableObjectIteratorPair *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectIteratorPair*)pObjXXXX;
				jlong __values1_j = (jlong)(pObjectX->second);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectIteratorPair_set_1second_1CMovableObject(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jlong __values1_j)
			{
				EarthView::World::Graphic::CSceneManager::MovableObjectIteratorPair *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectIteratorPair*)pObjXXXX;
				pObjectX->second = (EarthView::World::Graphic::CMovableObject*) __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectIterator_hasMoreElements_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager::MovableObjectIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectIterator*) pObjXXXX;
				ev_bool __values1 = pObjectX->hasMoreElements();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectIterator_moveNext_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::MovableObjectIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectIterator*) pObjXXXX;
				pObjectX->moveNext();
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectIterator_nextKey_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager::MovableObjectIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectIterator*) pObjXXXX;
				ev_uint16 __values1 = pObjectX->nextKey();
				jint __values1_j = (jint) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectIterator_nextValue_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager::MovableObjectIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectIterator*) pObjXXXX;
				EarthView::World::Graphic::CMovableObject* __values1 = pObjectX->nextValue();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectIterator_nextValuePtr_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::MovableObjectIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectIterator*) pObjXXXX;
				EarthView::World::Graphic::CMovableObject** __values1 = pObjectX->nextValuePtr();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectIterator_next_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::MovableObjectIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectIterator*) pObjXXXX;
				EarthView::World::Graphic::CMovableObject* __values1 = pObjectX->next();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectIterator_getBegin_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::MovableObjectIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectIterator*) pObjXXXX;
				const EarthView::World::Graphic::CSceneManager::MovableObjectIteratorPair& __values1 = pObjectX->getBegin();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectIterator_getEnd_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::MovableObjectIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectIterator*) pObjXXXX;
				const EarthView::World::Graphic::CSceneManager::MovableObjectIteratorPair& __values1 = pObjectX->getEnd();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_00024MovableObjectIterator_getCurrent_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager::MovableObjectIterator *pObjectX = (EarthView::World::Graphic::CSceneManager::MovableObjectIterator*) pObjXXXX;
				const EarthView::World::Graphic::CSceneManager::MovableObjectIteratorPair& __values1 = pObjectX->getCurrent();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getMovableObjectIterator_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					EarthView::World::Graphic::CSceneManager::MovableObjectIterator __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getMovableObjectIterator(typeName);
					EarthView::World::Graphic::CSceneManager::MovableObjectIterator *returnvalues = new EarthView::World::Graphic::CSceneManager::MovableObjectIterator(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CSceneManager::MovableObjectIterator __values1 = pObjectX->getMovableObjectIterator(typeName);
					EarthView::World::Graphic::CSceneManager::MovableObjectIterator *returnvalues = new EarthView::World::Graphic::CSceneManager::MovableObjectIterator(__values1);
					((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
					jlong __values1_j = (jlong) returnvalues;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getMovableObjectIterator_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getMovableObjectIterator_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getMovableObjectIterator_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getMovableObjectIterator_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CSceneManager::MovableObjectIterator __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getMovableObjectIterator(typeName);
				EarthView::World::Graphic::CSceneManager::MovableObjectIterator *returnvalues = new EarthView::World::Graphic::CSceneManager::MovableObjectIterator(__values1);
				((EarthView::World::Core::CBaseObject*)returnvalues)->setExternFree(true);
				jlong __values1_j = (jlong) returnvalues;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_injectMovableObject_1CMovableObject(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong m_j)
			{
				EarthView::World::Graphic::CMovableObject *m = (EarthView::World::Graphic::CMovableObject*) m_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::injectMovableObject(m);
				}
				else
				{
					pObjectX->injectMovableObject(m);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1injectMovableObject_1CMovableObject(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_injectMovableObject_CMovableObject_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"injectMovableObject_CMovableObject_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_injectMovableObject_1CMovableObject_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong m_j)
			{
				EarthView::World::Graphic::CMovableObject *m = (EarthView::World::Graphic::CMovableObject*) m_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::injectMovableObject(m);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_extractMovableObject_1EVString_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::extractMovableObject(name, typeName);
				}
				else
				{
					pObjectX->extractMovableObject(name, typeName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1extractMovableObject_1EVString_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_extractMovableObject_EVString_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"extractMovableObject_EVString_EVString_callback", "(Ljava/lang/String;Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_extractMovableObject_1EVString_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring name_j, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* name_ch = (const ev_char*)__env->GetStringUTFChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringUTFChars(name_j, (const char *)name_ch);
				#else
				const ev_wchar* name_ch = (const ev_wchar*)__env->GetStringChars(name_j,JNI_FALSE);
				const EVString name = name_ch;
				__env->ReleaseStringChars(name_j, (const jchar *)name_ch);
				#endif
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::extractMovableObject(name, typeName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_extractMovableObject_1CMovableObject(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong m_j)
			{
				EarthView::World::Graphic::CMovableObject *m = (EarthView::World::Graphic::CMovableObject*) m_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::extractMovableObject(m);
				}
				else
				{
					pObjectX->extractMovableObject(m);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1extractMovableObject_1CMovableObject(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_extractMovableObject_CMovableObject_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"extractMovableObject_CMovableObject_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_extractMovableObject_1CMovableObject_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong m_j)
			{
				EarthView::World::Graphic::CMovableObject *m = (EarthView::World::Graphic::CMovableObject*) m_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::extractMovableObject(m);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_extractAllMovableObjectsByType_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::extractAllMovableObjectsByType(typeName);
				}
				else
				{
					pObjectX->extractAllMovableObjectsByType(typeName);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1extractAllMovableObjectsByType_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_extractAllMovableObjectsByType_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"extractAllMovableObjectsByType_EVString_callback", "(Ljava/lang/String;)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_extractAllMovableObjectsByType_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring typeName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* typeName_ch = (const ev_char*)__env->GetStringUTFChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringUTFChars(typeName_j, (const char *)typeName_ch);
				#else
				const ev_wchar* typeName_ch = (const ev_wchar*)__env->GetStringChars(typeName_j,JNI_FALSE);
				const EVString typeName = typeName_ch;
				__env->ReleaseStringChars(typeName_j, (const jchar *)typeName_ch);
				#endif
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::extractAllMovableObjectsByType(typeName);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setVisibilityMask_1ev_1uint32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong vmask_j)
			{
				ev_uint32 vmask = (ev_uint32) vmask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setVisibilityMask(vmask);
				}
				else
				{
					pObjectX->setVisibilityMask(vmask);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setVisibilityMask_1ev_1uint32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setVisibilityMask_ev_uint32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setVisibilityMask_ev_uint32_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setVisibilityMask_1ev_1uint32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong vmask_j)
			{
				ev_uint32 vmask = (ev_uint32) vmask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setVisibilityMask(vmask);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getVisibilityMask_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_uint32 __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getVisibilityMask();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					ev_uint32 __values1 = pObjectX->getVisibilityMask();
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getVisibilityMask_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getVisibilityMask_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getVisibilityMask_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getVisibilityMask_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_uint32 __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getVisibilityMask();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager__1getCombinedVisibilityMask_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_uint32 __values1 = pObjectX->_getCombinedVisibilityMask();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setFindVisibleObjects_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean find_j)
			{
				ev_bool find = (ev_bool) find_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setFindVisibleObjects(find);
				}
				else
				{
					pObjectX->setFindVisibleObjects(find);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setFindVisibleObjects_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setFindVisibleObjects_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setFindVisibleObjects_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setFindVisibleObjects_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean find_j)
			{
				ev_bool find = (ev_bool) find_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setFindVisibleObjects(find);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getFindVisibleObjects_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getFindVisibleObjects();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getFindVisibleObjects();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getFindVisibleObjects_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getFindVisibleObjects_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getFindVisibleObjects_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getFindVisibleObjects_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getFindVisibleObjects();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setNormaliseNormalsOnScale_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean n_j)
			{
				ev_bool n = (ev_bool) n_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setNormaliseNormalsOnScale(n);
				}
				else
				{
					pObjectX->setNormaliseNormalsOnScale(n);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setNormaliseNormalsOnScale_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setNormaliseNormalsOnScale_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setNormaliseNormalsOnScale_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setNormaliseNormalsOnScale_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean n_j)
			{
				ev_bool n = (ev_bool) n_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setNormaliseNormalsOnScale(n);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getNormaliseNormalsOnScale_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getNormaliseNormalsOnScale();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getNormaliseNormalsOnScale();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getNormaliseNormalsOnScale_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getNormaliseNormalsOnScale_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getNormaliseNormalsOnScale_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getNormaliseNormalsOnScale_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getNormaliseNormalsOnScale();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setFlipCullingOnNegativeScale_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean n_j)
			{
				ev_bool n = (ev_bool) n_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setFlipCullingOnNegativeScale(n);
				}
				else
				{
					pObjectX->setFlipCullingOnNegativeScale(n);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setFlipCullingOnNegativeScale_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setFlipCullingOnNegativeScale_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setFlipCullingOnNegativeScale_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setFlipCullingOnNegativeScale_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean n_j)
			{
				ev_bool n = (ev_bool) n_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setFlipCullingOnNegativeScale(n);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getFlipCullingOnNegativeScale_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getFlipCullingOnNegativeScale();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getFlipCullingOnNegativeScale();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getFlipCullingOnNegativeScale_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getFlipCullingOnNegativeScale_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getFlipCullingOnNegativeScale_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getFlipCullingOnNegativeScale_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getFlipCullingOnNegativeScale();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1injectRenderWithPass_1CPass_1CRenderable_1ev_1bool_1ev_1bool_1LightList(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j, jlong rend_j, jboolean shadowDerivation_j, jboolean doLightIteration_j, jlong manualLightList_j)
			{
				EarthView::World::Graphic::CPass *pass = (EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				ev_bool shadowDerivation = (ev_bool) shadowDerivation_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				const EarthView::World::Graphic::LightList *manualLightList = (const EarthView::World::Graphic::LightList*) manualLightList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_injectRenderWithPass(pass, rend, shadowDerivation, doLightIteration, manualLightList);
				}
				else
				{
					pObjectX->_injectRenderWithPass(pass, rend, shadowDerivation, doLightIteration, manualLightList);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1injectRenderWithPass_1CPass_1CRenderable_1ev_1bool_1ev_1bool_1LightList(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_LightList_callback", "(JJZZJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1injectRenderWithPass_1CPass_1CRenderable_1ev_1bool_1ev_1bool_1LightList_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j, jlong rend_j, jboolean shadowDerivation_j, jboolean doLightIteration_j, jlong manualLightList_j)
			{
				EarthView::World::Graphic::CPass *pass = (EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				ev_bool shadowDerivation = (ev_bool) shadowDerivation_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				const EarthView::World::Graphic::LightList *manualLightList = (const EarthView::World::Graphic::LightList*) manualLightList_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_injectRenderWithPass(pass, rend, shadowDerivation, doLightIteration, manualLightList);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1injectRenderWithPass_1CPass_1CRenderable_1ev_1bool_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j, jlong rend_j, jboolean shadowDerivation_j, jboolean doLightIteration_j)
			{
				EarthView::World::Graphic::CPass *pass = (EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				ev_bool shadowDerivation = (ev_bool) shadowDerivation_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_injectRenderWithPass(pass, rend, shadowDerivation, doLightIteration);
				}
				else
				{
					pObjectX->_injectRenderWithPass(pass, rend, shadowDerivation, doLightIteration);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1injectRenderWithPass_1CPass_1CRenderable_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_injectRenderWithPass_CPass_CRenderable_ev_bool_ev_bool_callback", "(JJZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1injectRenderWithPass_1CPass_1CRenderable_1ev_1bool_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j, jlong rend_j, jboolean shadowDerivation_j, jboolean doLightIteration_j)
			{
				EarthView::World::Graphic::CPass *pass = (EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				ev_bool shadowDerivation = (ev_bool) shadowDerivation_j;
				ev_bool doLightIteration = (ev_bool) doLightIteration_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_injectRenderWithPass(pass, rend, shadowDerivation, doLightIteration);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1injectRenderWithPass_1CPass_1CRenderable_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j, jlong rend_j, jboolean shadowDerivation_j)
			{
				EarthView::World::Graphic::CPass *pass = (EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				ev_bool shadowDerivation = (ev_bool) shadowDerivation_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_injectRenderWithPass(pass, rend, shadowDerivation);
				}
				else
				{
					pObjectX->_injectRenderWithPass(pass, rend, shadowDerivation);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1injectRenderWithPass_1CPass_1CRenderable_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__injectRenderWithPass_CPass_CRenderable_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_injectRenderWithPass_CPass_CRenderable_ev_bool_callback", "(JJZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1injectRenderWithPass_1CPass_1CRenderable_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j, jlong rend_j, jboolean shadowDerivation_j)
			{
				EarthView::World::Graphic::CPass *pass = (EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				ev_bool shadowDerivation = (ev_bool) shadowDerivation_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_injectRenderWithPass(pass, rend, shadowDerivation);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1injectRenderWithPass_1CPass_1CRenderable(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j, jlong rend_j)
			{
				EarthView::World::Graphic::CPass *pass = (EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_injectRenderWithPass(pass, rend);
				}
				else
				{
					pObjectX->_injectRenderWithPass(pass, rend);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1injectRenderWithPass_1CPass_1CRenderable(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__injectRenderWithPass_CPass_CRenderable_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_injectRenderWithPass_CPass_CRenderable_callback", "(JJ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1injectRenderWithPass_1CPass_1CRenderable_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j, jlong rend_j)
			{
				EarthView::World::Graphic::CPass *pass = (EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CRenderable *rend = (EarthView::World::Graphic::CRenderable*) rend_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_injectRenderWithPass(pass, rend);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1suppressRenderStateChanges_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean suppress_j)
			{
				ev_bool suppress = (ev_bool) suppress_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_suppressRenderStateChanges(suppress);
				}
				else
				{
					pObjectX->_suppressRenderStateChanges(suppress);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1suppressRenderStateChanges_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__suppressRenderStateChanges_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_suppressRenderStateChanges_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1suppressRenderStateChanges_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean suppress_j)
			{
				ev_bool suppress = (ev_bool) suppress_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_suppressRenderStateChanges(suppress);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager__1areRenderStateChangesSuppressed_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::_areRenderStateChangesSuppressed();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->_areRenderStateChangesSuppressed();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1areRenderStateChangesSuppressed_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__areRenderStateChangesSuppressed_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_areRenderStateChangesSuppressed_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager__1areRenderStateChangesSuppressed_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::_areRenderStateChangesSuppressed();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager__1setPass_1CPass_1ev_1bool_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j, jboolean evenIfSuppressed_j, jboolean shadowDerivation_j)
			{
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				ev_bool evenIfSuppressed = (ev_bool) evenIfSuppressed_j;
				ev_bool shadowDerivation = (ev_bool) shadowDerivation_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					const EarthView::World::Graphic::CPass* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::_setPass(pass, evenIfSuppressed, shadowDerivation);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					const EarthView::World::Graphic::CPass* __values1 = pObjectX->_setPass(pass, evenIfSuppressed, shadowDerivation);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setPass_1CPass_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setPass_CPass_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setPass_CPass_ev_bool_ev_bool_callback", "(JZZ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager__1setPass_1CPass_1ev_1bool_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j, jboolean evenIfSuppressed_j, jboolean shadowDerivation_j)
			{
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				ev_bool evenIfSuppressed = (ev_bool) evenIfSuppressed_j;
				ev_bool shadowDerivation = (ev_bool) shadowDerivation_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::CPass* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::_setPass(pass, evenIfSuppressed, shadowDerivation);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager__1setPass_1CPass_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j, jboolean evenIfSuppressed_j)
			{
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				ev_bool evenIfSuppressed = (ev_bool) evenIfSuppressed_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					const EarthView::World::Graphic::CPass* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::_setPass(pass, evenIfSuppressed);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					const EarthView::World::Graphic::CPass* __values1 = pObjectX->_setPass(pass, evenIfSuppressed);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setPass_1CPass_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setPass_CPass_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setPass_CPass_ev_bool_callback", "(JZ)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager__1setPass_1CPass_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j, jboolean evenIfSuppressed_j)
			{
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				ev_bool evenIfSuppressed = (ev_bool) evenIfSuppressed_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::CPass* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::_setPass(pass, evenIfSuppressed);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager__1setPass_1CPass(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j)
			{
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					const EarthView::World::Graphic::CPass* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::_setPass(pass);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					const EarthView::World::Graphic::CPass* __values1 = pObjectX->_setPass(pass);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1setPass_1CPass(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__setPass_CPass_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_setPass_CPass_callback", "(J)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager__1setPass_1CPass_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong pass_j)
			{
				const EarthView::World::Graphic::CPass *pass = (const EarthView::World::Graphic::CPass*) pass_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::CPass* __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::_setPass(pass);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1markGpuParamsDirty_1ev_1uint16(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint mask_j)
			{
				ev_uint16 mask = (ev_uint16) mask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_markGpuParamsDirty(mask);
				}
				else
				{
					pObjectX->_markGpuParamsDirty(mask);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1markGpuParamsDirty_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__markGpuParamsDirty_ev_uint16_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_markGpuParamsDirty_ev_uint16_callback", "(I)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1markGpuParamsDirty_1ev_1uint16_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint mask_j)
			{
				ev_uint16 mask = (ev_uint16) mask_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_markGpuParamsDirty(mask);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1suppressShadows_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean suppress_j)
			{
				ev_bool suppress = (ev_bool) suppress_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_suppressShadows(suppress);
				}
				else
				{
					pObjectX->_suppressShadows(suppress);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1suppressShadows_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__suppressShadows_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_suppressShadows_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1suppressShadows_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean suppress_j)
			{
				ev_bool suppress = (ev_bool) suppress_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_suppressShadows(suppress);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager__1areShadowsSuppressed_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::_areShadowsSuppressed();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->_areShadowsSuppressed();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1areShadowsSuppressed_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__areShadowsSuppressed_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_areShadowsSuppressed_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager__1areShadowsSuppressed_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::_areShadowsSuppressed();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1renderQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong group_j, jint om_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *group = (EarthView::World::Graphic::CRenderQueueGroup*) group_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::_renderQueueGroupObjects(group, om);
				}
				else
				{
					pObjectX->_renderQueueGroupObjects(group, om);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1_1renderQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register__renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"_renderQueueGroupObjects_CRenderQueueGroup_OrganisationMode_callback", "(JI)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1renderQueueGroupObjects_1CRenderQueueGroup_1OrganisationMode_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong group_j, jint om_j)
			{
				EarthView::World::Graphic::CRenderQueueGroup *group = (EarthView::World::Graphic::CRenderQueueGroup*) group_j;
				EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode om = (EarthView::World::Graphic::CQueuedRenderableCollection::OrganisationMode) om_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::_renderQueueGroupObjects(group, om);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setQueuedRenderableVisitor_1CSceneMgrQueuedRenderableVisitor(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong visitor_j)
			{
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor *visitor = (EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor*) visitor_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->setQueuedRenderableVisitor(visitor);
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getQueuedRenderableVisitor_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor* __values1 = pObjectX->getQueuedRenderableVisitor();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getDestinationRenderSystem_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CRenderSystem* __values1 = pObjectX->getDestinationRenderSystem();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getCurrentViewport_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CViewport* __values1 = pObjectX->getCurrentViewport();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getCameraInProgress_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				EarthView::World::Graphic::CCamera* __values1 = pObjectX->getCameraInProgress();
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getVisibleObjectsBoundsInfo_1CCamera(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong cam_j)
			{
				const EarthView::World::Graphic::CCamera *cam = (const EarthView::World::Graphic::CCamera*) cam_j;
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::VisibleObjectsBoundsInfo& __values1 = pObjectX->getVisibleObjectsBoundsInfo(cam);
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowCasterBoundsInfo_1CLight_1ev_1size_1t(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong light_j, jlong iteration_j)
			{
				const EarthView::World::Graphic::CLight *light = (const EarthView::World::Graphic::CLight*) light_j;
				ev_size_t iteration = (ev_size_t) iteration_j;
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::VisibleObjectsBoundsInfo& __values1 = pObjectX->getShadowCasterBoundsInfo(light, iteration);
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManager_getShadowCasterBoundsInfo_1CLight(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong light_j)
			{
				const EarthView::World::Graphic::CLight *light = (const EarthView::World::Graphic::CLight*) light_j;
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				const EarthView::World::Graphic::VisibleObjectsBoundsInfo& __values1 = pObjectX->getShadowCasterBoundsInfo(light);
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setCameraRelativeRendering_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean rel_j)
			{
				ev_bool rel = (ev_bool) rel_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setCameraRelativeRendering(rel);
				}
				else
				{
					pObjectX->setCameraRelativeRendering(rel);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setCameraRelativeRendering_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setCameraRelativeRendering_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setCameraRelativeRendering_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setCameraRelativeRendering_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean rel_j)
			{
				ev_bool rel = (ev_bool) rel_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setCameraRelativeRendering(rel);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getCameraRelativeRendering_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getCameraRelativeRendering();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getCameraRelativeRendering();
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getCameraRelativeRendering_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getCameraRelativeRendering_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getCameraRelativeRendering_void_callback", "()Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getCameraRelativeRendering_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getCameraRelativeRendering();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_addLodListener_1CLodListener(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong ref_listener_j)
			{
				EarthView::World::Graphic::CLodListener *ref_listener = (EarthView::World::Graphic::CLodListener*) ref_listener_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->addLodListener(ref_listener);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_removeLodListener_1CLodListener(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong listener_j)
			{
				EarthView::World::Graphic::CLodListener *listener = (EarthView::World::Graphic::CLodListener*) listener_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->removeLodListener(listener);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1notifyMovableObjectLodChanged_1MovableObjectLodChangedEvent(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong evt_j)
			{
				EarthView::World::Graphic::MovableObjectLodChangedEvent &evt = *(EarthView::World::Graphic::MovableObjectLodChangedEvent*) evt_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->_notifyMovableObjectLodChanged(evt);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1notifyEntityMeshLodChanged_1EntityMeshLodChangedEvent(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong evt_j)
			{
				EarthView::World::Graphic::EntityMeshLodChangedEvent &evt = *(EarthView::World::Graphic::EntityMeshLodChangedEvent*) evt_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->_notifyEntityMeshLodChanged(evt);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1notifyEntityMaterialLodChanged_1EntityMaterialLodChangedEvent(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong evt_j)
			{
				EarthView::World::Graphic::EntityMaterialLodChangedEvent &evt = *(EarthView::World::Graphic::EntityMaterialLodChangedEvent*) evt_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->_notifyEntityMaterialLodChanged(evt);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager__1handleLodEvents_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->_handleLodEvents();
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getHeightAt_1Real_1Real_1ev_1real32(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble latitude_j, jdouble lontitude_j, jfloat targetSamplesPerDegrees_j)
			{
				Real latitude = (Real) latitude_j;
				Real lontitude = (Real) lontitude_j;
				ev_real32 targetSamplesPerDegrees = (ev_real32) targetSamplesPerDegrees_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getHeightAt(latitude, lontitude, targetSamplesPerDegrees);
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getHeightAt(latitude, lontitude, targetSamplesPerDegrees);
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getHeightAt_1Real_1Real_1ev_1real32(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getHeightAt_Real_Real_ev_real32_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getHeightAt_Real_Real_ev_real32_callback", "(DDF)D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getHeightAt_1Real_1Real_1ev_1real32_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble latitude_j, jdouble lontitude_j, jfloat targetSamplesPerDegrees_j)
			{
				Real latitude = (Real) latitude_j;
				Real lontitude = (Real) lontitude_j;
				ev_real32 targetSamplesPerDegrees = (ev_real32) targetSamplesPerDegrees_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getHeightAt(latitude, lontitude, targetSamplesPerDegrees);
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getBestHeightAt_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble latitude_j, jdouble lontitude_j)
			{
				Real latitude = (Real) latitude_j;
				Real lontitude = (Real) lontitude_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getBestHeightAt(latitude, lontitude);
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getBestHeightAt(latitude, lontitude);
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getBestHeightAt_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getBestHeightAt_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getBestHeightAt_Real_Real_callback", "(DD)D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getBestHeightAt_1Real_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble latitude_j, jdouble lontitude_j)
			{
				Real latitude = (Real) latitude_j;
				Real lontitude = (Real) lontitude_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getBestHeightAt(latitude, lontitude);
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getHeightAtTile_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble latitude_j, jdouble lontitude_j)
			{
				Real latitude = (Real) latitude_j;
				Real lontitude = (Real) lontitude_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getHeightAtTile(latitude, lontitude);
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
				else
				{
					Real __values1 = pObjectX->getHeightAtTile(latitude, lontitude);
					jdouble __values1_j = (jdouble)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getHeightAtTile_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getHeightAtTile_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getHeightAtTile_Real_Real_callback", "(DD)D");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jdouble JNICALL Java_com_earthview_world_graphic_SceneManager_getHeightAtTile_1Real_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jdouble latitude_j, jdouble lontitude_j)
			{
				Real latitude = (Real) latitude_j;
				Real lontitude = (Real) lontitude_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				Real __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getHeightAtTile(latitude, lontitude);
				jdouble __values1_j = (jdouble)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getTileEnvelope_1ev_1int32_1ev_1uint32_1ev_1uint32_1Real_1Real_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint level_j, jlong row_j, jlong col_j, jlong minX_j, jlong maxX_j, jlong minY_j, jlong maxY_j)
			{
				ev_int32 level = (ev_int32) level_j;
				ev_uint32 row = (ev_uint32) row_j;
				ev_uint32 col = (ev_uint32) col_j;
				Real &minX = *(Real*) minX_j;
				Real &maxX = *(Real*) maxX_j;
				Real &minY = *(Real*) minY_j;
				Real &maxY = *(Real*) maxY_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getTileEnvelope(level, row, col, minX, maxX, minY, maxY);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->getTileEnvelope(level, row, col, minX, maxX, minY, maxY);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1getTileEnvelope_1ev_1int32_1ev_1uint32_1ev_1uint32_1Real_1Real_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getTileEnvelope_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_callback", "(IJJJJJJ)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getTileEnvelope_1ev_1int32_1ev_1uint32_1ev_1uint32_1Real_1Real_1Real_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jint level_j, jlong row_j, jlong col_j, jlong minX_j, jlong maxX_j, jlong minY_j, jlong maxY_j)
			{
				ev_int32 level = (ev_int32) level_j;
				ev_uint32 row = (ev_uint32) row_j;
				ev_uint32 col = (ev_uint32) col_j;
				Real &minX = *(Real*) minX_j;
				Real &maxX = *(Real*) maxX_j;
				Real &minY = *(Real*) minY_j;
				Real &maxY = *(Real*) maxY_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::getTileEnvelope(level, row, col, minX, maxX, minY, maxY);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_addTempLayer_1ILayer(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong layer_j)
			{
				EarthView::World::Spatial::Atlas::ILayer *layer = (EarthView::World::Spatial::Atlas::ILayer*) layer_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::addTempLayer(layer);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->addTempLayer(layer);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1addTempLayer_1ILayer(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_addTempLayer_ILayer_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"addTempLayer_ILayer_callback", "(J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_addTempLayer_1ILayer_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong layer_j)
			{
				EarthView::World::Spatial::Atlas::ILayer *layer = (EarthView::World::Spatial::Atlas::ILayer*) layer_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::addTempLayer(layer);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_removeTempLayer_1ILayer(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong layer_j)
			{
				EarthView::World::Spatial::Atlas::ILayer *layer = (EarthView::World::Spatial::Atlas::ILayer*) layer_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::removeTempLayer(layer);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
				else
				{
					ev_bool __values1 = pObjectX->removeTempLayer(layer);
					jboolean __values1_j = (jboolean)__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1removeTempLayer_1ILayer(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_removeTempLayer_ILayer_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"removeTempLayer_ILayer_callback", "(J)Z");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_removeTempLayer_1ILayer_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong layer_j)
			{
				EarthView::World::Spatial::Atlas::ILayer *layer = (EarthView::World::Spatial::Atlas::ILayer*) layer_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->EarthView::World::Graphic::CSceneManager::removeTempLayer(layer);
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_updateQuadImage_1bool_1bool_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean updateImageGroup_j, jboolean updateFeatureGroup_j, jboolean updateKmlGroup_j)
			{
				bool updateImageGroup = (bool) updateImageGroup_j;
				bool updateFeatureGroup = (bool) updateFeatureGroup_j;
				bool updateKmlGroup = (bool) updateKmlGroup_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::updateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup);
				}
				else
				{
					pObjectX->updateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1updateQuadImage_1bool_1bool_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_updateQuadImage_bool_bool_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"updateQuadImage_bool_bool_bool_callback", "(ZZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_updateQuadImage_1bool_1bool_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean updateImageGroup_j, jboolean updateFeatureGroup_j, jboolean updateKmlGroup_j)
			{
				bool updateImageGroup = (bool) updateImageGroup_j;
				bool updateFeatureGroup = (bool) updateFeatureGroup_j;
				bool updateKmlGroup = (bool) updateKmlGroup_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::updateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_updateQuadImage_1bool_1bool_1bool_1Real_1Real_1Real_1Real(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean updateImageGroup_j, jboolean updateFeatureGroup_j, jboolean updateKmlGroup_j, jdouble minX_j, jdouble maxX_j, jdouble minY_j, jdouble maxY_j)
			{
				bool updateImageGroup = (bool) updateImageGroup_j;
				bool updateFeatureGroup = (bool) updateFeatureGroup_j;
				bool updateKmlGroup = (bool) updateKmlGroup_j;
				Real minX = (Real) minX_j;
				Real maxX = (Real) maxX_j;
				Real minY = (Real) minY_j;
				Real maxY = (Real) maxY_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::updateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup, minX, maxX, minY, maxY);
				}
				else
				{
					pObjectX->updateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup, minX, maxX, minY, maxY);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1updateQuadImage_1bool_1bool_1bool_1Real_1Real_1Real_1Real(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_updateQuadImage_bool_bool_bool_Real_Real_Real_Real_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"updateQuadImage_bool_bool_bool_Real_Real_Real_Real_callback", "(ZZZDDDD)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_updateQuadImage_1bool_1bool_1bool_1Real_1Real_1Real_1Real_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean updateImageGroup_j, jboolean updateFeatureGroup_j, jboolean updateKmlGroup_j, jdouble minX_j, jdouble maxX_j, jdouble minY_j, jdouble maxY_j)
			{
				bool updateImageGroup = (bool) updateImageGroup_j;
				bool updateFeatureGroup = (bool) updateFeatureGroup_j;
				bool updateKmlGroup = (bool) updateKmlGroup_j;
				Real minX = (Real) minX_j;
				Real maxX = (Real) maxX_j;
				Real minY = (Real) minY_j;
				Real maxY = (Real) maxY_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::updateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup, minX, maxX, minY, maxY);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_updateOBQ_1ev_1bool_1ev_1bool_1ev_1bool_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean bUpdateVectorTexture_j, jboolean bUpdateKmlTexture_j, jboolean bUpdateTemporaryTexture_j, jboolean bUpdateTerrain_j)
			{
				ev_bool bUpdateVectorTexture = (ev_bool) bUpdateVectorTexture_j;
				ev_bool bUpdateKmlTexture = (ev_bool) bUpdateKmlTexture_j;
				ev_bool bUpdateTemporaryTexture = (ev_bool) bUpdateTemporaryTexture_j;
				ev_bool bUpdateTerrain = (ev_bool) bUpdateTerrain_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::updateOBQ(bUpdateVectorTexture, bUpdateKmlTexture, bUpdateTemporaryTexture, bUpdateTerrain);
				}
				else
				{
					pObjectX->updateOBQ(bUpdateVectorTexture, bUpdateKmlTexture, bUpdateTemporaryTexture, bUpdateTerrain);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1updateOBQ_1ev_1bool_1ev_1bool_1ev_1bool_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"updateOBQ_ev_bool_ev_bool_ev_bool_ev_bool_callback", "(ZZZZ)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_updateOBQ_1ev_1bool_1ev_1bool_1ev_1bool_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean bUpdateVectorTexture_j, jboolean bUpdateKmlTexture_j, jboolean bUpdateTemporaryTexture_j, jboolean bUpdateTerrain_j)
			{
				ev_bool bUpdateVectorTexture = (ev_bool) bUpdateVectorTexture_j;
				ev_bool bUpdateKmlTexture = (ev_bool) bUpdateKmlTexture_j;
				ev_bool bUpdateTemporaryTexture = (ev_bool) bUpdateTemporaryTexture_j;
				ev_bool bUpdateTerrain = (ev_bool) bUpdateTerrain_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::updateOBQ(bUpdateVectorTexture, bUpdateKmlTexture, bUpdateTemporaryTexture, bUpdateTerrain);
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setCollisionDetectionEnable_1ev_1bool(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManager::setCollisionDetectionEnable(enable);
				}
				else
				{
					pObjectX->setCollisionDetectionEnable(enable);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_register_1setCollisionDetectionEnable_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerProxy *pObjectX = (JCSceneManagerProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_setCollisionDetectionEnable_ev_bool_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"setCollisionDetectionEnable_ev_bool_callback", "(Z)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManager_setCollisionDetectionEnable_1ev_1bool_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jboolean enable_j)
			{
				ev_bool enable = (ev_bool) enable_j;
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManager::setCollisionDetectionEnable(enable);
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManager_getCollisionDetectionEnable_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::CSceneManager *pObjectX = (EarthView::World::Graphic::CSceneManager*) pObjXXXX;
				ev_bool __values1 = pObjectX->getCollisionDetectionEnable();
				jboolean __values1_j = (jboolean)__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jintArray JNICALL Java_com_earthview_world_graphic_SceneTypeHelper_getEnumValues (JNIEnv *__env, jclass __clazz)
			{
				jint enum_values[] = {
					ST_GENERIC,
					ST_EXTERIOR_CLOSE,
					ST_EXTERIOR_FAR,
					ST_EXTERIOR_REAL_FAR,
					ST_INTERIOR,
					ST_OCTREE,
					ST_TERRAIN,
					ST_GEO,
					ST_COMMON
				};
				jintArray array = __env->NewIntArray(9);
				__env->SetIntArrayRegion(array, 0, 9, enum_values);
				return array;
			}
			extern "C" JNIEXPORT jstring JNICALL Java_com_earthview_world_graphic_SceneManagerMetaData_get_1typeName_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::SceneManagerMetaData *pObjectX = (EarthView::World::Graphic::SceneManagerMetaData*)pObjXXXX;
				EarthView::World::Core::ev_wstring __values1_ch = pObjectX->typeName;
				jstring __values1_j = __env->NewString((const jchar*)__values1_ch.getString(), __values1_ch.size());
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManagerMetaData_set_1typeName_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __values1_j)
			{
				EarthView::World::Graphic::SceneManagerMetaData *pObjectX = (EarthView::World::Graphic::SceneManagerMetaData*)pObjXXXX;
				const ev_wchar* __values1_ch = (const ev_wchar*)__env->GetStringChars(__values1_j,JNI_FALSE);
				pObjectX->typeName = __values1_ch;
				__env->ReleaseStringChars(__values1_j,(const jchar*)__values1_ch);
			}
			extern "C" JNIEXPORT jstring JNICALL Java_com_earthview_world_graphic_SceneManagerMetaData_get_1description_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::SceneManagerMetaData *pObjectX = (EarthView::World::Graphic::SceneManagerMetaData*)pObjXXXX;
				EarthView::World::Core::ev_wstring __values1_ch = pObjectX->description;
				jstring __values1_j = __env->NewString((const jchar*)__values1_ch.getString(), __values1_ch.size());
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManagerMetaData_set_1description_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __values1_j)
			{
				EarthView::World::Graphic::SceneManagerMetaData *pObjectX = (EarthView::World::Graphic::SceneManagerMetaData*)pObjXXXX;
				const ev_wchar* __values1_ch = (const ev_wchar*)__env->GetStringChars(__values1_j,JNI_FALSE);
				pObjectX->description = __values1_ch;
				__env->ReleaseStringChars(__values1_j,(const jchar*)__values1_ch);
			}
			extern "C" JNIEXPORT jint JNICALL Java_com_earthview_world_graphic_SceneManagerMetaData_get_1sceneTypeMask_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::SceneManagerMetaData *pObjectX = (EarthView::World::Graphic::SceneManagerMetaData*)pObjXXXX;
				jint __values1_j = (jint) (pObjectX->sceneTypeMask);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManagerMetaData_set_1sceneTypeMask_1ev_1uint16(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jint __values1_j)
			{
				EarthView::World::Graphic::SceneManagerMetaData *pObjectX = (EarthView::World::Graphic::SceneManagerMetaData*)pObjXXXX;
				pObjectX->sceneTypeMask = (ev_uint16)__values1_j;
			}
			extern "C" JNIEXPORT jboolean JNICALL Java_com_earthview_world_graphic_SceneManagerMetaData_get_1worldGeometrySupported_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX)
			{
				EarthView::World::Graphic::SceneManagerMetaData *pObjectX = (EarthView::World::Graphic::SceneManagerMetaData*)pObjXXXX;
				jboolean __values1_j = (jboolean)(pObjectX->worldGeometrySupported);
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManagerMetaData_set_1worldGeometrySupported_1ev_1bool(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jboolean __values1_j)
			{
				EarthView::World::Graphic::SceneManagerMetaData *pObjectX = (EarthView::World::Graphic::SceneManagerMetaData*)pObjXXXX;
				pObjectX->worldGeometrySupported = (ev_bool)__values1_j;
			}
			class JCSceneManagerFactoryProxy : public EarthView::World::Graphic::CSceneManagerFactory
			{
			 private:
				EarthView::World::Core::ev_string m_getMetaData_void_callback;
				EarthView::World::Core::ev_string m_createInstance_EVString_callback;
				EarthView::World::Core::ev_string m_destroyInstance_CSceneManager_callback;
			public:
				JCSceneManagerFactoryProxy(EarthView::World::Core::CNameValuePairList *pList) : CSceneManagerFactory(pList)
				{
				}
				ev_void unRegisterJavaReference()
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
					if(__gr != NULL)
					{
						delete __gr;
						this->registerJavaReference(NULL);
					}
				}
			public:
				void register_getMetaData_void_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_getMetaData_void_callback = __method;
				}
				void register_createInstance_EVString_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_createInstance_EVString_callback = __method;
				}
				void register_destroyInstance_CSceneManager_callback(EarthView::World::Core::ev_string __method)
				{
					this->m_destroyInstance_CSceneManager_callback = __method;
				}
				virtual const EarthView::World::Graphic::SceneManagerMetaData& getMetaData() const
				{
					if (this->_gRef != NULL && this->m_getMetaData_void_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jmethodID __method = __gr->getMethod("getMetaData_void_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method );
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						const EarthView::World::Graphic::SceneManagerMetaData &__values1 = *(const EarthView::World::Graphic::SceneManagerMetaData*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManagerFactory::getMetaData();
					}
				}
				virtual EarthView::World::Graphic::CSceneManager* createInstance(const EVString& instanceName)
				{
					if (this->_gRef != NULL && this->m_createInstance_EVString_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						EarthView::World::Core::ev_wstring instanceName_wch = instanceName;
						jstring instanceName_j = __env->NewString((const jchar*)instanceName_wch.getString(), instanceName_wch.size());
						jmethodID __method = __gr->getMethod("createInstance_EVString_callback");
						jlong __values1_j = (jlong)__env->CallLongMethod(__obj, __method , instanceName_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
						EarthView::World::Graphic::CSceneManager *__values1 = (EarthView::World::Graphic::CSceneManager*) __values1_j;
						return __values1;
					}
					else
					{
						return this->CSceneManagerFactory::createInstance(instanceName);
					}
				}
				virtual void destroyInstance(EarthView::World::Graphic::CSceneManager* instance)
				{
					if (this->_gRef != NULL && this->m_destroyInstance_CSceneManager_callback != "" && this->isCustomExtend())
					{
						EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)this->getJavaReference();
						JNIEnv * __env;
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						bool __jniAttachable = false;
						if(EarthView::World::Core::JNILoad::getCachedJVM()->GetEnv((void **)&__env, JNI_VERSION_1_6) != JNI_OK)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
							__jniAttachable = true;
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->AttachCurrentThread((void **)&__env, NULL);
						#endif
						jobject __obj = __gr->getJObject();
						jclass __clazz = __gr->getClass();
						jlong instance_j = (jlong) instance;
						jmethodID __method = __gr->getMethod("destroyInstance_CSceneManager_callback");
						__env->CallVoidMethod(__obj, __method , instance_j);
						#if EV_PLATFORM == EV_PLATFORM_ANDROID
						if(__jniAttachable)
						{
							EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						}
						#else
						EarthView::World::Core::JNILoad::getCachedJVM()->DetachCurrentThread();
						#endif
					}
					else
					{
						return this->CSceneManagerFactory::destroyInstance(instance);
					}
				}
			};
			REGISTER_FACTORY_CLASS(JCSceneManagerFactoryProxy);
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManagerFactory_getMetaData_1void(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManagerFactory *pObjectX = (EarthView::World::Graphic::CSceneManagerFactory*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerFactoryProxy))
				{
					const EarthView::World::Graphic::SceneManagerMetaData& __values1 = pObjectX->EarthView::World::Graphic::CSceneManagerFactory::getMetaData();
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
				else
				{
					const EarthView::World::Graphic::SceneManagerMetaData& __values1 = pObjectX->getMetaData();
					jlong __values1_j = (jlong) &__values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManagerFactory_register_1getMetaData_1void(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerFactoryProxy *pObjectX = (JCSceneManagerFactoryProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_getMetaData_void_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"getMetaData_void_callback", "()J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManagerFactory_getMetaData_1void_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX)
			{
				const 				EarthView::World::Graphic::CSceneManagerFactory *pObjectX = (EarthView::World::Graphic::CSceneManagerFactory*) pObjXXXX;
				const EarthView::World::Graphic::SceneManagerMetaData& __values1 = pObjectX->EarthView::World::Graphic::CSceneManagerFactory::getMetaData();
				jlong __values1_j = (jlong) &__values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManagerFactory_createInstance_1EVString(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring instanceName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* instanceName_ch = (const ev_char*)__env->GetStringUTFChars(instanceName_j,JNI_FALSE);
				const EVString instanceName = instanceName_ch;
				__env->ReleaseStringUTFChars(instanceName_j, (const char *)instanceName_ch);
				#else
				const ev_wchar* instanceName_ch = (const ev_wchar*)__env->GetStringChars(instanceName_j,JNI_FALSE);
				const EVString instanceName = instanceName_ch;
				__env->ReleaseStringChars(instanceName_j, (const jchar *)instanceName_ch);
				#endif
				EarthView::World::Graphic::CSceneManagerFactory *pObjectX = (EarthView::World::Graphic::CSceneManagerFactory*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerFactoryProxy))
				{
					EarthView::World::Graphic::CSceneManager* __values1 = pObjectX->EarthView::World::Graphic::CSceneManagerFactory::createInstance(instanceName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
				else
				{
					EarthView::World::Graphic::CSceneManager* __values1 = pObjectX->createInstance(instanceName);
					jlong __values1_j = (jlong) __values1;
					return __values1_j;
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManagerFactory_register_1createInstance_1EVString(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerFactoryProxy *pObjectX = (JCSceneManagerFactoryProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_createInstance_EVString_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"createInstance_EVString_callback", "(Ljava/lang/String;)J");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT jlong JNICALL Java_com_earthview_world_graphic_SceneManagerFactory_createInstance_1EVString_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jstring instanceName_j)
			{
				#if EV_PLATFORM == EV_PLATFORM_ANDROID
				const ev_char* instanceName_ch = (const ev_char*)__env->GetStringUTFChars(instanceName_j,JNI_FALSE);
				const EVString instanceName = instanceName_ch;
				__env->ReleaseStringUTFChars(instanceName_j, (const char *)instanceName_ch);
				#else
				const ev_wchar* instanceName_ch = (const ev_wchar*)__env->GetStringChars(instanceName_j,JNI_FALSE);
				const EVString instanceName = instanceName_ch;
				__env->ReleaseStringChars(instanceName_j, (const jchar *)instanceName_ch);
				#endif
				EarthView::World::Graphic::CSceneManagerFactory *pObjectX = (EarthView::World::Graphic::CSceneManagerFactory*) pObjXXXX;
				EarthView::World::Graphic::CSceneManager* __values1 = pObjectX->EarthView::World::Graphic::CSceneManagerFactory::createInstance(instanceName);
				jlong __values1_j = (jlong) __values1;
				return __values1_j;
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManagerFactory_destroyInstance_1CSceneManager(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong instance_j)
			{
				EarthView::World::Graphic::CSceneManager *instance = (EarthView::World::Graphic::CSceneManager*) instance_j;
				EarthView::World::Graphic::CSceneManagerFactory *pObjectX = (EarthView::World::Graphic::CSceneManagerFactory*) pObjXXXX;
				if (typeid(*pObjectX) == typeid(JCSceneManagerFactoryProxy))
				{
					pObjectX->EarthView::World::Graphic::CSceneManagerFactory::destroyInstance(instance);
				}
				else
				{
					pObjectX->destroyInstance(instance);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManagerFactory_register_1destroyInstance_1CSceneManager(JNIEnv *__env, jobject __thiz, jlong pObjXXXX, jstring __method)
			{
				JCSceneManagerFactoryProxy *pObjectX = (JCSceneManagerFactoryProxy*) pObjXXXX;
				const char *pMethod = __env->GetStringUTFChars(__method, NULL);
				EarthView::World::Core::ev_string sMethod = pMethod;
				__env->ReleaseStringUTFChars(__method, pMethod);
				pObjectX->register_destroyInstance_CSceneManager_callback(sMethod);
				if (pObjectX->getJavaReference() != NULL && sMethod != "")
				{
					EarthView::World::Core::GlobalReference *__gr = (EarthView::World::Core::GlobalReference *)pObjectX->getJavaReference();
					jobject __obj1 = __gr->getJObject();
					jclass __clazz1 = __env->GetObjectClass(__obj1);
					jmethodID __method = __env->GetMethodID(__clazz1,"destroyInstance_CSceneManager_callback", "(J)V");
					__gr->setMethod(sMethod, __method);
				}
			}
			extern "C" JNIEXPORT void JNICALL Java_com_earthview_world_graphic_SceneManagerFactory_destroyInstance_1CSceneManager_1NoVirtual(JNIEnv *__env , jobject __thiz, jlong pObjXXXX, jlong instance_j)
			{
				EarthView::World::Graphic::CSceneManager *instance = (EarthView::World::Graphic::CSceneManager*) instance_j;
				EarthView::World::Graphic::CSceneManagerFactory *pObjectX = (EarthView::World::Graphic::CSceneManagerFactory*) pObjXXXX;
				pObjectX->EarthView::World::Graphic::CSceneManagerFactory::destroyInstance(instance);
			}
		}
	}
}
