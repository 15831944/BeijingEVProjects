/********* This file is produced by the P/Invoke AutoWrapper Utility 
 Copyright (c) 2012 by EarthView Image Inc *********/
using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;
using EarthView.World.Core;

namespace EarthView
{
	namespace World
	{
		namespace Graphic
		{
			public class DepthBufferVec : EarthView.World.Core.BaseObject
			{
				public DepthBufferVec() : base(CreatedWhenConstruct.CWC_NotToCreate)
				{
					Create("DepthBufferVec",  null);
					RegisterCallBack();
					this.needDispose = true;
					GlobalTraceInfoMap.Put(this);
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_DepthBufferVec_push_back_void_CDepthBuffer(IntPtr pNativeObject, ref IntPtr ref_t);

				public void Push_back(EarthView.World.Graphic.DepthBuffer ref_t)
				{
					EarthView_World_Graphic_DepthBufferVec_push_back_void_CDepthBuffer(this.NativeObject, ref ref_t.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_DepthBufferVec_pop_back_void(IntPtr pNativeObject);

				public void Pop_back()
				{
					EarthView_World_Graphic_DepthBufferVec_pop_back_void(this.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_DepthBufferVec_front_CDepthBuffer(IntPtr pNativeObject);

				public EarthView.World.Graphic.DepthBuffer Front()
				{
					IntPtr __ptr = EarthView_World_Graphic_DepthBufferVec_front_CDepthBuffer(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.DepthBuffer csObj = new EarthView.World.Graphic.DepthBuffer(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CDepthBuffer");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.DepthBuffer;
						csObj.BindNativeObject(__ptr, "CDepthBuffer");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_DepthBufferVec_back_CDepthBuffer(IntPtr pNativeObject);

				public EarthView.World.Graphic.DepthBuffer Back()
				{
					IntPtr __ptr = EarthView_World_Graphic_DepthBufferVec_back_CDepthBuffer(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.DepthBuffer csObj = new EarthView.World.Graphic.DepthBuffer(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CDepthBuffer");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.DepthBuffer;
						csObj.BindNativeObject(__ptr, "CDepthBuffer");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_DepthBufferVec_insert_void_ev_uint32_CDepthBuffer(IntPtr pNativeObject, uint pos, ref IntPtr ref_t);

				public void Insert(uint pos, EarthView.World.Graphic.DepthBuffer ref_t)
				{
					EarthView_World_Graphic_DepthBufferVec_insert_void_ev_uint32_CDepthBuffer(this.NativeObject, pos, ref ref_t.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_DepthBufferVec_remove_void_ev_size_t(IntPtr pNativeObject, ulong pos);

				public void Remove(ulong pos)
				{
					EarthView_World_Graphic_DepthBufferVec_remove_void_ev_size_t(this.NativeObject, pos);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_DepthBufferVec_empty_ev_bool(IntPtr pNativeObject);

				public bool Empty()
				{
					byte ret=EarthView_World_Graphic_DepthBufferVec_empty_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_DepthBufferVec_at_CDepthBuffer_ev_size_t(IntPtr pNativeObject, ulong n);

				public EarthView.World.Graphic.DepthBuffer At(ulong n)
				{
					IntPtr __ptr = EarthView_World_Graphic_DepthBufferVec_at_CDepthBuffer_ev_size_t(this.NativeObject, n);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.DepthBuffer csObj = new EarthView.World.Graphic.DepthBuffer(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CDepthBuffer");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.DepthBuffer;
						csObj.BindNativeObject(__ptr, "CDepthBuffer");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_DepthBufferVec_size_ev_size_t(IntPtr pNativeObject);

				public ulong Size()
				{
					ulong ret=EarthView_World_Graphic_DepthBufferVec_size_ev_size_t(this.NativeObject);
					
					return ret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_DepthBufferVec_resize_void_ev_size_t(IntPtr pNativeObject, ulong newSize);

				public void Resize(ulong newSize)
				{
					EarthView_World_Graphic_DepthBufferVec_resize_void_ev_size_t(this.NativeObject, newSize);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_DepthBufferVec_reserve_void_ev_size_t(IntPtr pNativeObject, ulong count);

				public void Reserve(ulong count)
				{
					EarthView_World_Graphic_DepthBufferVec_reserve_void_ev_size_t(this.NativeObject, count);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_DepthBufferVec_clear_void(IntPtr pNativeObject);

				public void Clear()
				{
					EarthView_World_Graphic_DepthBufferVec_clear_void(this.NativeObject);
					
				}

				#if DEBUG 
					#if Windows 
						private static bool bLoadDepthBufferVec = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadDepthBufferVec = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#elif Linux 
						private static bool bLoadDepthBufferVec = LoadDll.Load("EV_Graphic_d.so");
						private static bool csbLoadDepthBufferVec = LoadDll.Load("EV_Graphic_CSharp_d.so");

					#else 
						private static bool bLoadDepthBufferVec = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadDepthBufferVec = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#endif 
				#else 
					#if Windows 
						private static bool bLoadDepthBufferVec = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadDepthBufferVec = LoadDll.Load("EV_Graphic_CSharp.dll");

					#elif Linux 
						private static bool bLoadDepthBufferVec = LoadDll.Load("EV_Graphic.so");
						private static bool csbLoadDepthBufferVec = LoadDll.Load("EV_Graphic_CSharp.so");

					#else 
						private static bool bLoadDepthBufferVec = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadDepthBufferVec = LoadDll.Load("EV_Graphic_CSharp.dll");

					#endif 
				#endif 

				private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::DepthBufferVec", new DepthBufferVecClassFactory());

				public DepthBufferVec(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
				{
				}

				public override void RegisterCallBack()
				{
					if (this.NativeObject != IntPtr.Zero)
					{
					}
				}
				public static DepthBufferVec FromBaseObject(BaseObject baseObj)
				{
					if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
						return null;
					DepthBufferVec obj = baseObj as  DepthBufferVec;
					if (object.Equals(obj, null))
					{
						obj = new DepthBufferVec(CreatedWhenConstruct.CWC_NotToCreate);
						obj.BindNativeObject(baseObj.NativeObject, "DepthBufferVec");
						obj.IncreaseCast();
					}

					return obj;
				}
			}

			public class DepthBufferVecClassFactory : IClassFactory
			{
				public BaseObject Create()
				{
					DepthBufferVec emptyInstance = new DepthBufferVec(CreatedWhenConstruct.CWC_NotToCreate);
					return emptyInstance;
				}
			}

			public class DepthBufferMap : EarthView.World.Core.BaseObject
			{

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_DepthBufferMap_push_ev_bool_ev_uint16_DepthBufferVec(IntPtr pNativeObject, ref ushort key, IntPtr val);

				public bool Push(ushort key, EarthView.World.Graphic.DepthBufferVec val)
				{
					byte ret=EarthView_World_Graphic_DepthBufferMap_push_ev_bool_ev_uint16_DepthBufferVec(this.NativeObject, ref key, object.Equals(val, null) ? IntPtr.Zero : val.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_DepthBufferMap_exist_ev_bool_ev_uint16(IntPtr pNativeObject, ref ushort key);

				public bool Exist(ushort key)
				{
					byte ret=EarthView_World_Graphic_DepthBufferMap_exist_ev_bool_ev_uint16(this.NativeObject, ref key);
					
					return Convert.ToBoolean(ret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_DepthBufferMap_get_DepthBufferVec_ev_uint16(IntPtr pNativeObject, ref ushort key);

				public EarthView.World.Graphic.DepthBufferVec Get(ushort key)
				{
					IntPtr __ptr = EarthView_World_Graphic_DepthBufferMap_get_DepthBufferVec_ev_uint16(this.NativeObject, ref key);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.DepthBufferVec csObj = new EarthView.World.Graphic.DepthBufferVec(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "DepthBufferVec");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.DepthBufferVec;
						csObj.BindNativeObject(__ptr, "DepthBufferVec");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_DepthBufferMap_erase_void_ev_uint16(IntPtr pNativeObject, ref ushort key);

				public void Erase(ushort key)
				{
					EarthView_World_Graphic_DepthBufferMap_erase_void_ev_uint16(this.NativeObject, ref key);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_DepthBufferMap_size_ev_size_t(IntPtr pNativeObject);

				public ulong Size()
				{
					ulong ret=EarthView_World_Graphic_DepthBufferMap_size_ev_size_t(this.NativeObject);
					
					return ret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_DepthBufferMap_clear_void(IntPtr pNativeObject);

				public void Clear()
				{
					EarthView_World_Graphic_DepthBufferMap_clear_void(this.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_DepthBufferMap_empty_ev_bool(IntPtr pNativeObject);

				public bool Empty()
				{
					byte ret=EarthView_World_Graphic_DepthBufferMap_empty_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				public DepthBufferMap() : base(CreatedWhenConstruct.CWC_NotToCreate)
				{
					Create("DepthBufferMap",  null);
					RegisterCallBack();
					this.needDispose = true;
					GlobalTraceInfoMap.Put(this);
				}
				#if DEBUG 
					#if Windows 
						private static bool bLoadDepthBufferMap = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadDepthBufferMap = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#elif Linux 
						private static bool bLoadDepthBufferMap = LoadDll.Load("EV_Graphic_d.so");
						private static bool csbLoadDepthBufferMap = LoadDll.Load("EV_Graphic_CSharp_d.so");

					#else 
						private static bool bLoadDepthBufferMap = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadDepthBufferMap = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#endif 
				#else 
					#if Windows 
						private static bool bLoadDepthBufferMap = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadDepthBufferMap = LoadDll.Load("EV_Graphic_CSharp.dll");

					#elif Linux 
						private static bool bLoadDepthBufferMap = LoadDll.Load("EV_Graphic.so");
						private static bool csbLoadDepthBufferMap = LoadDll.Load("EV_Graphic_CSharp.so");

					#else 
						private static bool bLoadDepthBufferMap = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadDepthBufferMap = LoadDll.Load("EV_Graphic_CSharp.dll");

					#endif 
				#endif 

				private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::DepthBufferMap", new DepthBufferMapClassFactory());

				public DepthBufferMap(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
				{
				}

				public override void RegisterCallBack()
				{
					if (this.NativeObject != IntPtr.Zero)
					{
					}
				}
				public static DepthBufferMap FromBaseObject(BaseObject baseObj)
				{
					if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
						return null;
					DepthBufferMap obj = baseObj as  DepthBufferMap;
					if (object.Equals(obj, null))
					{
						obj = new DepthBufferMap(CreatedWhenConstruct.CWC_NotToCreate);
						obj.BindNativeObject(baseObj.NativeObject, "DepthBufferMap");
						obj.IncreaseCast();
					}

					return obj;
				}
			}

			public class DepthBufferMapClassFactory : IClassFactory
			{
				public BaseObject Create()
				{
					DepthBufferMap emptyInstance = new DepthBufferMap(CreatedWhenConstruct.CWC_NotToCreate);
					return emptyInstance;
				}
			}

			public class RenderTargetMap : EarthView.World.Core.BaseObject
			{
				/// <summary>
				/// 默认构造函数
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public RenderTargetMap() : base(CreatedWhenConstruct.CWC_NotToCreate)
				{
					Create("RenderTargetMap",  null);
					RegisterCallBack();
					this.needDispose = true;
					GlobalTraceInfoMap.Put(this);
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_RenderTargetMap_push_ev_bool_EVString_CRenderTarget(IntPtr pNativeObject, string key, ref IntPtr ref_val);

				/// <summary>
				/// 在map容器中添加元素
				/// </summary>
				/// <param name="key">键</param>
				/// <param name="val">值</param>
				/// <returns>成功增加true，否则false</returns>
				public bool Push(string key, EarthView.World.Graphic.RenderTarget ref_val)
				{
					byte ret=EarthView_World_Graphic_RenderTargetMap_push_ev_bool_EVString_CRenderTarget(this.NativeObject, key, ref ref_val.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_RenderTargetMap_exist_ev_bool_EVString(IntPtr pNativeObject, string key);

				/// <summary>
				/// 判断元素是否存在
				/// </summary>
				/// <param name="key">键</param>
				/// <returns>存在true，否则false</returns>
				public bool Exist(string key)
				{
					byte ret=EarthView_World_Graphic_RenderTargetMap_exist_ev_bool_EVString(this.NativeObject, key);
					
					return Convert.ToBoolean(ret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_RenderTargetMap_get_CRenderTarget_EVString(IntPtr pNativeObject, string key);

				/// <summary>
				/// 获得键对应的值
				/// </summary>
				/// <param name="key">键</param>
				/// <returns>返回键对应的值</returns>
				public EarthView.World.Graphic.RenderTarget Get(string key)
				{
					IntPtr __ptr = EarthView_World_Graphic_RenderTargetMap_get_CRenderTarget_EVString(this.NativeObject, key);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderTarget csObj = new EarthView.World.Graphic.RenderTarget(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderTarget");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderTarget;
						csObj.BindNativeObject(__ptr, "CRenderTarget");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_RenderTargetMap_erase_void_EVString(IntPtr pNativeObject, string key);

				/// <summary>
				/// 删除键对应的值
				/// </summary>
				/// <param name="key">键</param>
				/// <returns></returns>
				public void Erase(string key)
				{
					EarthView_World_Graphic_RenderTargetMap_erase_void_EVString(this.NativeObject, key);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_RenderTargetMap_size_ev_size_t(IntPtr pNativeObject);

				/// <summary>
				/// 返回集合的大小
				/// </summary>
				/// <param name=""></param>
				/// <returns>集合的大小</returns>
				public ulong Size()
				{
					ulong ret=EarthView_World_Graphic_RenderTargetMap_size_ev_size_t(this.NativeObject);
					
					return ret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_RenderTargetMap_clear_void(IntPtr pNativeObject);

				/// <summary>
				/// 清空集合
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public void Clear()
				{
					EarthView_World_Graphic_RenderTargetMap_clear_void(this.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_RenderTargetMap_empty_ev_bool(IntPtr pNativeObject);

				/// <summary>
				/// 判断集合是否为空
				/// </summary>
				/// <param name=""></param>
				/// <returns>集合为空返回true，否则false</returns>
				public bool Empty()
				{
					byte ret=EarthView_World_Graphic_RenderTargetMap_empty_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				#if DEBUG 
					#if Windows 
						private static bool bLoadRenderTargetMap = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadRenderTargetMap = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#elif Linux 
						private static bool bLoadRenderTargetMap = LoadDll.Load("EV_Graphic_d.so");
						private static bool csbLoadRenderTargetMap = LoadDll.Load("EV_Graphic_CSharp_d.so");

					#else 
						private static bool bLoadRenderTargetMap = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadRenderTargetMap = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#endif 
				#else 
					#if Windows 
						private static bool bLoadRenderTargetMap = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadRenderTargetMap = LoadDll.Load("EV_Graphic_CSharp.dll");

					#elif Linux 
						private static bool bLoadRenderTargetMap = LoadDll.Load("EV_Graphic.so");
						private static bool csbLoadRenderTargetMap = LoadDll.Load("EV_Graphic_CSharp.so");

					#else 
						private static bool bLoadRenderTargetMap = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadRenderTargetMap = LoadDll.Load("EV_Graphic_CSharp.dll");

					#endif 
				#endif 

				private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::RenderTargetMap", new RenderTargetMapClassFactory());

				public RenderTargetMap(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
				{
				}

				public override void RegisterCallBack()
				{
					if (this.NativeObject != IntPtr.Zero)
					{
					}
				}
				public static RenderTargetMap FromBaseObject(BaseObject baseObj)
				{
					if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
						return null;
					RenderTargetMap obj = baseObj as  RenderTargetMap;
					if (object.Equals(obj, null))
					{
						obj = new RenderTargetMap(CreatedWhenConstruct.CWC_NotToCreate);
						obj.BindNativeObject(baseObj.NativeObject, "RenderTargetMap");
						obj.IncreaseCast();
					}

					return obj;
				}
			}

			public class RenderTargetMapClassFactory : IClassFactory
			{
				public BaseObject Create()
				{
					RenderTargetMap emptyInstance = new RenderTargetMap(CreatedWhenConstruct.CWC_NotToCreate);
					return emptyInstance;
				}
			}

			public class RenderTargetPriorityMap : EarthView.World.Core.BaseObject
			{
				/// <summary>
				/// 默认构造函数
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public RenderTargetPriorityMap() : base(CreatedWhenConstruct.CWC_NotToCreate)
				{
					Create("RenderTargetPriorityMap",  null);
					RegisterCallBack();
					this.needDispose = true;
					GlobalTraceInfoMap.Put(this);
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_RenderTargetPriorityMap_push_void_ev_uchar_CRenderTarget(IntPtr pNativeObject, ref byte key, ref IntPtr ref_val);

				/// <summary>
				/// 在map容器中添加元素
				/// </summary>
				/// <param name="key">键</param>
				/// <param name="val">值</param>
				/// <returns>成功增加true，否则false</returns>
				public void Push(byte key, EarthView.World.Graphic.RenderTarget ref_val)
				{
					EarthView_World_Graphic_RenderTargetPriorityMap_push_void_ev_uchar_CRenderTarget(this.NativeObject, ref key, ref ref_val.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_RenderTargetPriorityMap_exist_ev_bool_ev_uchar(IntPtr pNativeObject, ref byte key);

				/// <summary>
				/// 判断元素是否存在
				/// </summary>
				/// <param name="key">键</param>
				/// <returns>存在true，否则false</returns>
				public bool Exist(byte key)
				{
					byte ret=EarthView_World_Graphic_RenderTargetPriorityMap_exist_ev_bool_ev_uchar(this.NativeObject, ref key);
					
					return Convert.ToBoolean(ret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_RenderTargetPriorityMap_erase_void_ev_uchar(IntPtr pNativeObject, ref byte key);

				/// <summary>
				/// 删除键对应的值
				/// </summary>
				/// <param name="key">键</param>
				/// <returns></returns>
				public void Erase(byte key)
				{
					EarthView_World_Graphic_RenderTargetPriorityMap_erase_void_ev_uchar(this.NativeObject, ref key);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_RenderTargetPriorityMap_size_ev_size_t(IntPtr pNativeObject);

				/// <summary>
				/// 返回容器的大小
				/// </summary>
				/// <param name=""></param>
				/// <returns>容器的大小</returns>
				public ulong Size()
				{
					ulong ret=EarthView_World_Graphic_RenderTargetPriorityMap_size_ev_size_t(this.NativeObject);
					
					return ret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_RenderTargetPriorityMap_count_ev_size_t_ev_uchar(IntPtr pNativeObject, ref byte key);

				/// <summary>
				/// 返回容器中键出现的次数
				/// </summary>
				/// <param name=""></param>
				/// <returns>次数</returns>
				public ulong Count(byte key)
				{
					ulong ret=EarthView_World_Graphic_RenderTargetPriorityMap_count_ev_size_t_ev_uchar(this.NativeObject, ref key);
					
					return ret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_RenderTargetPriorityMap_get_CRenderTarget_ev_uchar_ev_size_t(IntPtr pNativeObject, ref byte key, ulong index);

				public EarthView.World.Graphic.RenderTarget Get(byte key, ulong index)
				{
					IntPtr __ptr = EarthView_World_Graphic_RenderTargetPriorityMap_get_CRenderTarget_ev_uchar_ev_size_t(this.NativeObject, ref key, index);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderTarget csObj = new EarthView.World.Graphic.RenderTarget(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderTarget");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderTarget;
						csObj.BindNativeObject(__ptr, "CRenderTarget");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_RenderTargetPriorityMap_erase_void_ev_uchar_ev_size_t(IntPtr pNativeObject, ref byte key, ulong index);

				public void Erase(byte key, ulong index)
				{
					EarthView_World_Graphic_RenderTargetPriorityMap_erase_void_ev_uchar_ev_size_t(this.NativeObject, ref key, index);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_RenderTargetPriorityMap_clear_void(IntPtr pNativeObject);

				public void Clear()
				{
					EarthView_World_Graphic_RenderTargetPriorityMap_clear_void(this.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_RenderTargetPriorityMap_empty_ev_bool(IntPtr pNativeObject);

				public bool Empty()
				{
					byte ret=EarthView_World_Graphic_RenderTargetPriorityMap_empty_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				#if DEBUG 
					#if Windows 
						private static bool bLoadRenderTargetPriorityMap = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadRenderTargetPriorityMap = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#elif Linux 
						private static bool bLoadRenderTargetPriorityMap = LoadDll.Load("EV_Graphic_d.so");
						private static bool csbLoadRenderTargetPriorityMap = LoadDll.Load("EV_Graphic_CSharp_d.so");

					#else 
						private static bool bLoadRenderTargetPriorityMap = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadRenderTargetPriorityMap = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#endif 
				#else 
					#if Windows 
						private static bool bLoadRenderTargetPriorityMap = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadRenderTargetPriorityMap = LoadDll.Load("EV_Graphic_CSharp.dll");

					#elif Linux 
						private static bool bLoadRenderTargetPriorityMap = LoadDll.Load("EV_Graphic.so");
						private static bool csbLoadRenderTargetPriorityMap = LoadDll.Load("EV_Graphic_CSharp.so");

					#else 
						private static bool bLoadRenderTargetPriorityMap = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadRenderTargetPriorityMap = LoadDll.Load("EV_Graphic_CSharp.dll");

					#endif 
				#endif 

				private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::RenderTargetPriorityMap", new RenderTargetPriorityMapClassFactory());

				public RenderTargetPriorityMap(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
				{
				}

				public override void RegisterCallBack()
				{
					if (this.NativeObject != IntPtr.Zero)
					{
					}
				}
				public static RenderTargetPriorityMap FromBaseObject(BaseObject baseObj)
				{
					if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
						return null;
					RenderTargetPriorityMap obj = baseObj as  RenderTargetPriorityMap;
					if (object.Equals(obj, null))
					{
						obj = new RenderTargetPriorityMap(CreatedWhenConstruct.CWC_NotToCreate);
						obj.BindNativeObject(baseObj.NativeObject, "RenderTargetPriorityMap");
						obj.IncreaseCast();
					}

					return obj;
				}
			}

			public class RenderTargetPriorityMapClassFactory : IClassFactory
			{
				public BaseObject Create()
				{
					RenderTargetPriorityMap emptyInstance = new RenderTargetPriorityMap(CreatedWhenConstruct.CWC_NotToCreate);
					return emptyInstance;
				}
			}

			/// <summary>
			/// 定义了3D应用程序接口的功能性
			/// </summary>
			public class RenderSystem : EarthView.World.Core.AllocatedObject
			{
				/// <summary>
				/// 默认构造函数
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public RenderSystem() : base(CreatedWhenConstruct.CWC_NotToCreate)
				{
					Create("CRenderSystemProxy", null);
					if (!"EarthView.World.Graphic.RenderSystem".Equals(((Object)this).GetType().ToString()))
					{
						this.SetCustomExtend(true);
					}
					RegisterCallBack();
					this.needDispose = true;
					GlobalTraceInfoMap.Put(this);
				}
				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate string getName_CallBack_EVString();

				protected getName_CallBack_EVString m_getName_CallBack_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getName_EVString_NoVirtual(IntPtr pNativeObject);

				///EarthView::World::Graphic::CHardwareVertexBufferSharedPtr getGlobalInstanceVertexBuffer() const;
				///void setGlobalInstanceVertexBuffer( const EarthView::World::Graphic::CHardwareVertexBufferSharedPtr val );
				///size_t getGlobalNumberOfInstances() const;
				///void setGlobalNumberOfInstances( const size_t val );
				///EarthView::World::Graphic::CVertexDeclaration* getGlobalInstanceVertexBufferVertexDeclaration() const;
				///void setGlobalInstanceVertexBufferVertexDeclaration( EarthView::World::Graphic::CVertexDeclaration* val );
				/// <summary>
				/// 返回渲染系统的名字
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual string GetName_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getName_EVString_NoVirtual(this.NativeObject);
					
					string ret = Marshal.PtrToStringAnsi(__ptr);
					ClassFactory.FreeString(ref __ptr);
					return ret;
					
				}

				protected  string EarthView_World_Graphic_CRenderSystem_getName_EVString_Function()
				{
					string csret=GetName();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getName_EVString(IntPtr pNativeObject);

				///EarthView::World::Graphic::CHardwareVertexBufferSharedPtr getGlobalInstanceVertexBuffer() const;
				///void setGlobalInstanceVertexBuffer( const EarthView::World::Graphic::CHardwareVertexBufferSharedPtr val );
				///size_t getGlobalNumberOfInstances() const;
				///void setGlobalNumberOfInstances( const size_t val );
				///EarthView::World::Graphic::CVertexDeclaration* getGlobalInstanceVertexBufferVertexDeclaration() const;
				///void setGlobalInstanceVertexBufferVertexDeclaration( EarthView::World::Graphic::CVertexDeclaration* val );
				/// <summary>
				/// 返回渲染系统的名字
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual string GetName()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getName_EVString(this.NativeObject);
					
					string ret = Marshal.PtrToStringAnsi(__ptr);
					ClassFactory.FreeString(ref __ptr);
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getConfigOptions_CallBack_ConfigOptionMap();

				protected getConfigOptions_CallBack_ConfigOptionMap m_getConfigOptions_CallBack_ConfigOptionMap;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getConfigOptions_ConfigOptionMap_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 返回配置项
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.ConfigOptionMap GetConfigOptions_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getConfigOptions_ConfigOptionMap_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ConfigOptionMap csObj = new EarthView.World.Graphic.ConfigOptionMap(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "ConfigOptionMap");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ConfigOptionMap;
						csObj.BindNativeObject(__ptr, "ConfigOptionMap");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem_getConfigOptions_ConfigOptionMap_Function()
				{
					EarthView.World.Graphic.ConfigOptionMap csret=GetConfigOptions();
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getConfigOptions_ConfigOptionMap(IntPtr pNativeObject);

				/// <summary>
				/// 返回配置项
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.ConfigOptionMap GetConfigOptions()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getConfigOptions_ConfigOptionMap(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ConfigOptionMap csObj = new EarthView.World.Graphic.ConfigOptionMap(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "ConfigOptionMap");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ConfigOptionMap;
						csObj.BindNativeObject(__ptr, "ConfigOptionMap");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setConfigOption_CallBack_void_EVString_EVString(ref IntPtr name, ref IntPtr value);

				protected setConfigOption_CallBack_void_EVString_EVString m_setConfigOption_CallBack_void_EVString_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setConfigOption_void_EVString_EVString_NoVirtual(IntPtr pNativeObject, string name, string value);

				/// <summary>
				/// 设置配置项
				/// </summary>
				/// <param name="name">改变选项的名字</param>
				/// <param name="value">设置选项的值</param>
				/// <returns></returns>
				public virtual void SetConfigOption_NoVirtual(string name, string value)
				{
					EarthView_World_Graphic_CRenderSystem_setConfigOption_void_EVString_EVString_NoVirtual(this.NativeObject, name, value);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setConfigOption_void_EVString_EVString_Function(ref IntPtr name, ref IntPtr value)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					string strvalue= Marshal.PtrToStringAnsi(value);
					ClassFactory.FreeString(ref value);
					
					SetConfigOption(strname,strvalue);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setConfigOption_void_EVString_EVString(IntPtr pNativeObject, string name, string value);

				/// <summary>
				/// 设置配置项
				/// </summary>
				/// <param name="name">改变选项的名字</param>
				/// <param name="value">设置选项的值</param>
				/// <returns></returns>
				public virtual void SetConfigOption(string name, string value)
				{
					EarthView_World_Graphic_CRenderSystem_setConfigOption_void_EVString_EVString(this.NativeObject, name, value);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createHardwareOcclusionQuery_CallBack_CHardwareOcclusionQuery();

				protected createHardwareOcclusionQuery_CallBack_CHardwareOcclusionQuery m_createHardwareOcclusionQuery_CallBack_CHardwareOcclusionQuery;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_createHardwareOcclusionQuery_CHardwareOcclusionQuery_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 创建一个硬件阻塞查询对象
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.HardwareOcclusionQuery CreateHardwareOcclusionQuery_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_createHardwareOcclusionQuery_CHardwareOcclusionQuery_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.HardwareOcclusionQuery csObj = new EarthView.World.Graphic.HardwareOcclusionQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CHardwareOcclusionQuery");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.HardwareOcclusionQuery;
						csObj.BindNativeObject(__ptr, "CHardwareOcclusionQuery");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem_createHardwareOcclusionQuery_CHardwareOcclusionQuery_Function()
				{
					EarthView.World.Graphic.HardwareOcclusionQuery csret=CreateHardwareOcclusionQuery();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_createHardwareOcclusionQuery_CHardwareOcclusionQuery(IntPtr pNativeObject);

				/// <summary>
				/// 创建一个硬件阻塞查询对象
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.HardwareOcclusionQuery CreateHardwareOcclusionQuery()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_createHardwareOcclusionQuery_CHardwareOcclusionQuery(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.HardwareOcclusionQuery csObj = new EarthView.World.Graphic.HardwareOcclusionQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CHardwareOcclusionQuery");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.HardwareOcclusionQuery;
						csObj.BindNativeObject(__ptr, "CHardwareOcclusionQuery");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyHardwareOcclusionQuery_CallBack_void_CHardwareOcclusionQuery(IntPtr hq);

				protected destroyHardwareOcclusionQuery_CallBack_void_CHardwareOcclusionQuery m_destroyHardwareOcclusionQuery_CallBack_void_CHardwareOcclusionQuery;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_destroyHardwareOcclusionQuery_void_CHardwareOcclusionQuery_NoVirtual(IntPtr pNativeObject, IntPtr hq);

				/// <summary>
				/// 销毁硬件阻塞查询对象
				/// </summary>
				/// <param name="hp"></param>
				/// <returns></returns>
				public virtual void DestroyHardwareOcclusionQuery_NoVirtual(EarthView.World.Graphic.HardwareOcclusionQuery hq)
				{
					EarthView_World_Graphic_CRenderSystem_destroyHardwareOcclusionQuery_void_CHardwareOcclusionQuery_NoVirtual(this.NativeObject, object.Equals(hq, null) ? IntPtr.Zero : hq.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_destroyHardwareOcclusionQuery_void_CHardwareOcclusionQuery_Function(IntPtr hq)
				{
					EarthView.World.Graphic.HardwareOcclusionQuery csobj_hq = new EarthView.World.Graphic.HardwareOcclusionQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_hq.BindNativeObject(hq,"CHardwareOcclusionQuery");
					csobj_hq.Delegate = true;
					IClassFactory csobj_hqClassFactory = GlobalClassFactoryMap.Get(csobj_hq.GetCppInstanceTypeName());
					if (csobj_hqClassFactory != null)
					{
						csobj_hq.Delegate = true;
						csobj_hq = csobj_hqClassFactory.Create() as EarthView.World.Graphic.HardwareOcclusionQuery;
						csobj_hq.BindNativeObject(hq, "CHardwareOcclusionQuery");
						csobj_hq.Delegate = true;
					}
					
					DestroyHardwareOcclusionQuery(csobj_hq);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_destroyHardwareOcclusionQuery_void_CHardwareOcclusionQuery(IntPtr pNativeObject, IntPtr hq);

				/// <summary>
				/// 销毁硬件阻塞查询对象
				/// </summary>
				/// <param name="hp"></param>
				/// <returns></returns>
				public virtual void DestroyHardwareOcclusionQuery(EarthView.World.Graphic.HardwareOcclusionQuery hq)
				{
					EarthView_World_Graphic_CRenderSystem_destroyHardwareOcclusionQuery_void_CHardwareOcclusionQuery(this.NativeObject, object.Equals(hq, null) ? IntPtr.Zero : hq.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate string validateConfigOptions_CallBack_EVString();

				protected validateConfigOptions_CallBack_EVString m_validateConfigOptions_CallBack_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_validateConfigOptions_EVString_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 使配置项生效
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual string ValidateConfigOptions_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_validateConfigOptions_EVString_NoVirtual(this.NativeObject);
					
					string ret = Marshal.PtrToStringAnsi(__ptr);
					ClassFactory.FreeString(ref __ptr);
					return ret;
					
				}

				protected  string EarthView_World_Graphic_CRenderSystem_validateConfigOptions_EVString_Function()
				{
					string csret=ValidateConfigOptions();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_validateConfigOptions_EVString(IntPtr pNativeObject);

				/// <summary>
				/// 使配置项生效
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual string ValidateConfigOptions()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_validateConfigOptions_EVString(this.NativeObject);
					
					string ret = Marshal.PtrToStringAnsi(__ptr);
					ClassFactory.FreeString(ref __ptr);
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr _initialise_CallBack_CRenderWindow_ev_bool_EVString(bool autoCreateWindow, ref IntPtr windowTitle);

				protected _initialise_CallBack_CRenderWindow_ev_bool_EVString m__initialise_CallBack_CRenderWindow_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__initialise_CRenderWindow_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, byte autoCreateWindow, string windowTitle);

				/// <summary>
				/// 使用配置项进行初始化
				/// </summary>
				/// <param name="autoCreateWindow"></param>
				/// <param name="windowTitle "></param>
				/// <returns>如果需要自动创建一个渲染窗体，否则null</returns>
				public virtual EarthView.World.Graphic.RenderWindow _initialise_NoVirtual(bool autoCreateWindow, string windowTitle)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__initialise_CRenderWindow_ev_bool_EVString_NoVirtual(this.NativeObject, Convert.ToByte(autoCreateWindow), windowTitle);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderWindow csObj = new EarthView.World.Graphic.RenderWindow(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderWindow");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderWindow;
						csObj.BindNativeObject(__ptr, "CRenderWindow");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem__initialise_CRenderWindow_ev_bool_EVString_Function(bool autoCreateWindow, ref IntPtr windowTitle)
				{
					string strwindowTitle= Marshal.PtrToStringAnsi(windowTitle);
					ClassFactory.FreeString(ref windowTitle);
					
					EarthView.World.Graphic.RenderWindow csret=_initialise(autoCreateWindow, strwindowTitle);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__initialise_CRenderWindow_ev_bool_EVString(IntPtr pNativeObject, byte autoCreateWindow, string windowTitle);

				/// <summary>
				/// 使用配置项进行初始化
				/// </summary>
				/// <param name="autoCreateWindow"></param>
				/// <param name="windowTitle "></param>
				/// <returns>如果需要自动创建一个渲染窗体，否则null</returns>
				public virtual EarthView.World.Graphic.RenderWindow _initialise(bool autoCreateWindow, string windowTitle)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__initialise_CRenderWindow_ev_bool_EVString(this.NativeObject, Convert.ToByte(autoCreateWindow), windowTitle);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderWindow csObj = new EarthView.World.Graphic.RenderWindow(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderWindow");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderWindow;
						csObj.BindNativeObject(__ptr, "CRenderWindow");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr _initialise_CallBack_CRenderWindow_ev_bool(bool autoCreateWindow);

				protected _initialise_CallBack_CRenderWindow_ev_bool m__initialise_CallBack_CRenderWindow_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__initialise_CRenderWindow_ev_bool_NoVirtual(IntPtr pNativeObject, byte autoCreateWindow);

				/// <summary>
				/// 使用配置项进行初始化
				/// </summary>
				/// <param name="autoCreateWindow"></param>
				/// <returns>如果需要自动创建一个渲染窗体，否则null</returns>
				public virtual EarthView.World.Graphic.RenderWindow _initialise_NoVirtual(bool autoCreateWindow)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__initialise_CRenderWindow_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(autoCreateWindow));
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderWindow csObj = new EarthView.World.Graphic.RenderWindow(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderWindow");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderWindow;
						csObj.BindNativeObject(__ptr, "CRenderWindow");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem__initialise_CRenderWindow_ev_bool_Function(bool autoCreateWindow)
				{
					EarthView.World.Graphic.RenderWindow csret=_initialise(autoCreateWindow);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__initialise_CRenderWindow_ev_bool(IntPtr pNativeObject, byte autoCreateWindow);

				/// <summary>
				/// 使用配置项进行初始化
				/// </summary>
				/// <param name="autoCreateWindow"></param>
				/// <returns>如果需要自动创建一个渲染窗体，否则null</returns>
				public virtual EarthView.World.Graphic.RenderWindow _initialise(bool autoCreateWindow)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__initialise_CRenderWindow_ev_bool(this.NativeObject, Convert.ToByte(autoCreateWindow));
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderWindow csObj = new EarthView.World.Graphic.RenderWindow(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderWindow");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderWindow;
						csObj.BindNativeObject(__ptr, "CRenderWindow");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createRenderSystemCapabilities_CallBack_CRenderSystemCapabilities();

				protected createRenderSystemCapabilities_CallBack_CRenderSystemCapabilities m_createRenderSystemCapabilities_CallBack_CRenderSystemCapabilities;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_createRenderSystemCapabilities_CRenderSystemCapabilities_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 创建渲染系统能力
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RenderSystemCapabilities CreateRenderSystemCapabilities_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_createRenderSystemCapabilities_CRenderSystemCapabilities_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderSystemCapabilities csObj = new EarthView.World.Graphic.RenderSystemCapabilities(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderSystemCapabilities");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderSystemCapabilities;
						csObj.BindNativeObject(__ptr, "CRenderSystemCapabilities");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem_createRenderSystemCapabilities_CRenderSystemCapabilities_Function()
				{
					EarthView.World.Graphic.RenderSystemCapabilities csret=CreateRenderSystemCapabilities();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_createRenderSystemCapabilities_CRenderSystemCapabilities(IntPtr pNativeObject);

				/// <summary>
				/// 创建渲染系统能力
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RenderSystemCapabilities CreateRenderSystemCapabilities()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_createRenderSystemCapabilities_CRenderSystemCapabilities(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderSystemCapabilities csObj = new EarthView.World.Graphic.RenderSystemCapabilities(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderSystemCapabilities");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderSystemCapabilities;
						csObj.BindNativeObject(__ptr, "CRenderSystemCapabilities");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getMutableCapabilities_CRenderSystemCapabilities(IntPtr pNativeObject);

				public EarthView.World.Graphic.RenderSystemCapabilities GetMutableCapabilities()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getMutableCapabilities_CRenderSystemCapabilities(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderSystemCapabilities csObj = new EarthView.World.Graphic.RenderSystemCapabilities(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderSystemCapabilities");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderSystemCapabilities;
						csObj.BindNativeObject(__ptr, "CRenderSystemCapabilities");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void useCustomRenderSystemCapabilities_CallBack_void_CRenderSystemCapabilities(IntPtr ref_capabilities);

				protected useCustomRenderSystemCapabilities_CallBack_void_CRenderSystemCapabilities m_useCustomRenderSystemCapabilities_CallBack_void_CRenderSystemCapabilities;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_useCustomRenderSystemCapabilities_void_CRenderSystemCapabilities_NoVirtual(IntPtr pNativeObject, IntPtr ref_capabilities);

				/// <summary>
				/// 强制渲染系统使用指定的能力
				/// </summary>
				/// <param name="capabilities"></param>
				/// <returns></returns>
				public virtual void UseCustomRenderSystemCapabilities_NoVirtual(EarthView.World.Graphic.RenderSystemCapabilities ref_capabilities)
				{
					EarthView_World_Graphic_CRenderSystem_useCustomRenderSystemCapabilities_void_CRenderSystemCapabilities_NoVirtual(this.NativeObject, object.Equals(ref_capabilities, null) ? IntPtr.Zero : ref_capabilities.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_useCustomRenderSystemCapabilities_void_CRenderSystemCapabilities_Function(IntPtr ref_capabilities)
				{
					EarthView.World.Graphic.RenderSystemCapabilities csobj_ref_capabilities = new EarthView.World.Graphic.RenderSystemCapabilities(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_ref_capabilities.BindNativeObject(ref_capabilities,"CRenderSystemCapabilities");
					csobj_ref_capabilities.Delegate = true;
					IClassFactory csobj_ref_capabilitiesClassFactory = GlobalClassFactoryMap.Get(csobj_ref_capabilities.GetCppInstanceTypeName());
					if (csobj_ref_capabilitiesClassFactory != null)
					{
						csobj_ref_capabilities.Delegate = true;
						csobj_ref_capabilities = csobj_ref_capabilitiesClassFactory.Create() as EarthView.World.Graphic.RenderSystemCapabilities;
						csobj_ref_capabilities.BindNativeObject(ref_capabilities, "CRenderSystemCapabilities");
						csobj_ref_capabilities.Delegate = true;
					}
					
					UseCustomRenderSystemCapabilities(csobj_ref_capabilities);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_useCustomRenderSystemCapabilities_void_CRenderSystemCapabilities(IntPtr pNativeObject, IntPtr ref_capabilities);

				/// <summary>
				/// 强制渲染系统使用指定的能力
				/// </summary>
				/// <param name="capabilities"></param>
				/// <returns></returns>
				public virtual void UseCustomRenderSystemCapabilities(EarthView.World.Graphic.RenderSystemCapabilities ref_capabilities)
				{
					EarthView_World_Graphic_CRenderSystem_useCustomRenderSystemCapabilities_void_CRenderSystemCapabilities(this.NativeObject, object.Equals(ref_capabilities, null) ? IntPtr.Zero : ref_capabilities.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void reinitialise_CallBack_void();

				protected reinitialise_CallBack_void m_reinitialise_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_reinitialise_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 重新开始渲染
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void Reinitialise_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem_reinitialise_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_reinitialise_void_Function()
				{
					Reinitialise();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_reinitialise_void(IntPtr pNativeObject);

				/// <summary>
				/// 重新开始渲染
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void Reinitialise()
				{
					EarthView_World_Graphic_CRenderSystem_reinitialise_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void shutdown_CallBack_void();

				protected shutdown_CallBack_void m_shutdown_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_shutdown_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 停止渲染，清空资源
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void Shutdown_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem_shutdown_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_shutdown_void_Function()
				{
					Shutdown();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_shutdown_void(IntPtr pNativeObject);

				/// <summary>
				/// 停止渲染，清空资源
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void Shutdown()
				{
					EarthView_World_Graphic_CRenderSystem_shutdown_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setAmbientLight_CallBack_void_ev_real32_ev_real32_ev_real32(float r, float g, float b);

				protected setAmbientLight_CallBack_void_ev_real32_ev_real32_ev_real32 m_setAmbientLight_CallBack_void_ev_real32_ev_real32_ev_real32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setAmbientLight_void_ev_real32_ev_real32_ev_real32_NoVirtual(IntPtr pNativeObject, float r, float g, float b);

				/// <summary>
				/// 设置环境光的颜色
				/// </summary>
				/// <param name="r">红色</param>
				/// <param name="g">绿色</param>
				/// <param name="b">蓝色</param>
				/// <returns></returns>
				public virtual void SetAmbientLight_NoVirtual(float r, float g, float b)
				{
					EarthView_World_Graphic_CRenderSystem_setAmbientLight_void_ev_real32_ev_real32_ev_real32_NoVirtual(this.NativeObject, r, g, b);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setAmbientLight_void_ev_real32_ev_real32_ev_real32_Function(float r, float g, float b)
				{
					SetAmbientLight(r, g, b);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setAmbientLight_void_ev_real32_ev_real32_ev_real32(IntPtr pNativeObject, float r, float g, float b);

				/// <summary>
				/// 设置环境光的颜色
				/// </summary>
				/// <param name="r">红色</param>
				/// <param name="g">绿色</param>
				/// <param name="b">蓝色</param>
				/// <returns></returns>
				public virtual void SetAmbientLight(float r, float g, float b)
				{
					EarthView_World_Graphic_CRenderSystem_setAmbientLight_void_ev_real32_ev_real32_ev_real32(this.NativeObject, r, g, b);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadingType_CallBack_void_ShadeOptions(EarthView.World.Graphic.SHADEOPTIONS so);

				protected setShadingType_CallBack_void_ShadeOptions m_setShadingType_CallBack_void_ShadeOptions;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setShadingType_void_ShadeOptions_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.SHADEOPTIONS so);

				/// <summary>
				/// 设置光照的类型
				/// </summary>
				/// <param name="so"></param>
				/// <returns></returns>
				public virtual void SetShadingType_NoVirtual(EarthView.World.Graphic.SHADEOPTIONS so)
				{
					EarthView_World_Graphic_CRenderSystem_setShadingType_void_ShadeOptions_NoVirtual(this.NativeObject, so);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setShadingType_void_ShadeOptions_Function(EarthView.World.Graphic.SHADEOPTIONS so)
				{
					SetShadingType(so);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setShadingType_void_ShadeOptions(IntPtr pNativeObject, EarthView.World.Graphic.SHADEOPTIONS so);

				/// <summary>
				/// 设置光照的类型
				/// </summary>
				/// <param name="so"></param>
				/// <returns></returns>
				public virtual void SetShadingType(EarthView.World.Graphic.SHADEOPTIONS so)
				{
					EarthView_World_Graphic_CRenderSystem_setShadingType_void_ShadeOptions(this.NativeObject, so);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setLightingEnabled_CallBack_void_ev_bool(bool enabled);

				protected setLightingEnabled_CallBack_void_ev_bool m_setLightingEnabled_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setLightingEnabled_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte enabled);

				/// <summary>
				/// 设置动态灯光是否可用
				/// </summary>
				/// <param name="enabled"></param>
				/// <returns></returns>
				public virtual void SetLightingEnabled_NoVirtual(bool enabled)
				{
					EarthView_World_Graphic_CRenderSystem_setLightingEnabled_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(enabled));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setLightingEnabled_void_ev_bool_Function(bool enabled)
				{
					SetLightingEnabled(enabled);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setLightingEnabled_void_ev_bool(IntPtr pNativeObject, byte enabled);

				/// <summary>
				/// 设置动态灯光是否可用
				/// </summary>
				/// <param name="enabled"></param>
				/// <returns></returns>
				public virtual void SetLightingEnabled(bool enabled)
				{
					EarthView_World_Graphic_CRenderSystem_setLightingEnabled_void_ev_bool(this.NativeObject, Convert.ToByte(enabled));
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setWBufferEnabled_void_ev_bool(IntPtr pNativeObject, byte enabled);

				/// <summary>
				/// 设置W-buffers是否可用
				/// </summary>
				/// <param name="enabled"></param>
				/// <returns></returns>
				public void SetWBufferEnabled(bool enabled)
				{
					EarthView_World_Graphic_CRenderSystem_setWBufferEnabled_void_ev_bool(this.NativeObject, Convert.ToByte(enabled));
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CRenderSystem_getWBufferEnabled_ev_bool(IntPtr pNativeObject);

				/// <summary>
				/// 返回W-buffers是否可用
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public bool GetWBufferEnabled()
				{
					byte ret=EarthView_World_Graphic_CRenderSystem_getWBufferEnabled_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr _createRenderWindow_CallBack_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_CommonStringPairList(ref IntPtr name, uint width, uint height, bool fullScreen, IntPtr miscParams);

				protected _createRenderWindow_CallBack_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_CommonStringPairList m__createRenderWindow_CallBack_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_CommonStringPairList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__createRenderWindow_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_CommonStringPairList_NoVirtual(IntPtr pNativeObject, string name, uint width, uint height, byte fullScreen, IntPtr miscParams);

				/// <summary>
				/// 创建一个新的渲染窗体
				/// </summary>
				/// <param name="name">窗体的名字</param>
				/// <param name="width">窗体的宽度</param>
				/// <param name="height">窗体的高度</param>
				/// <param name="fullScreen">全屏</param>
				/// <param name="miscParams">新渲染窗体的其它参数</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RenderWindow _createRenderWindow_NoVirtual(string name, uint width, uint height, bool fullScreen, EarthView.World.Core.CommonStringPairList miscParams)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__createRenderWindow_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_CommonStringPairList_NoVirtual(this.NativeObject, name, width, height, Convert.ToByte(fullScreen), object.Equals(miscParams, null) ? IntPtr.Zero : miscParams.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderWindow csObj = new EarthView.World.Graphic.RenderWindow(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderWindow");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderWindow;
						csObj.BindNativeObject(__ptr, "CRenderWindow");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem__createRenderWindow_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_CommonStringPairList_Function(ref IntPtr name, uint width, uint height, bool fullScreen, IntPtr miscParams)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					EarthView.World.Core.CommonStringPairList csobj_miscParams = new EarthView.World.Core.CommonStringPairList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_miscParams.BindNativeObject(miscParams,"CommonStringPairList");
					csobj_miscParams.Delegate = true;
					IClassFactory csobj_miscParamsClassFactory = GlobalClassFactoryMap.Get(csobj_miscParams.GetCppInstanceTypeName());
					if (csobj_miscParamsClassFactory != null)
					{
						csobj_miscParams.Delegate = true;
						csobj_miscParams = csobj_miscParamsClassFactory.Create() as EarthView.World.Core.CommonStringPairList;
						csobj_miscParams.BindNativeObject(miscParams, "CommonStringPairList");
						csobj_miscParams.Delegate = true;
					}
					
					EarthView.World.Graphic.RenderWindow csret=_createRenderWindow(strname,width, height, fullScreen, csobj_miscParams);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__createRenderWindow_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_CommonStringPairList(IntPtr pNativeObject, string name, uint width, uint height, byte fullScreen, IntPtr miscParams);

				/// <summary>
				/// 创建一个新的渲染窗体
				/// </summary>
				/// <param name="name">窗体的名字</param>
				/// <param name="width">窗体的宽度</param>
				/// <param name="height">窗体的高度</param>
				/// <param name="fullScreen">全屏</param>
				/// <param name="miscParams">新渲染窗体的其它参数</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RenderWindow _createRenderWindow(string name, uint width, uint height, bool fullScreen, EarthView.World.Core.CommonStringPairList miscParams)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__createRenderWindow_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_CommonStringPairList(this.NativeObject, name, width, height, Convert.ToByte(fullScreen), object.Equals(miscParams, null) ? IntPtr.Zero : miscParams.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderWindow csObj = new EarthView.World.Graphic.RenderWindow(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderWindow");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderWindow;
						csObj.BindNativeObject(__ptr, "CRenderWindow");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr _createRenderWindow_CallBack_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool(ref IntPtr name, uint width, uint height, bool fullScreen);

				protected _createRenderWindow_CallBack_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool m__createRenderWindow_CallBack_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__createRenderWindow_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_NoVirtual(IntPtr pNativeObject, string name, uint width, uint height, byte fullScreen);

				/// <summary>
				/// 创建一个新的渲染窗体
				/// </summary>
				/// <param name="name">窗体的名字</param>
				/// <param name="width">窗体的宽度</param>
				/// <param name="height">窗体的高度</param>
				/// <param name="fullScreen">全屏</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RenderWindow _createRenderWindow_NoVirtual(string name, uint width, uint height, bool fullScreen)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__createRenderWindow_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_NoVirtual(this.NativeObject, name, width, height, Convert.ToByte(fullScreen));
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderWindow csObj = new EarthView.World.Graphic.RenderWindow(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderWindow");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderWindow;
						csObj.BindNativeObject(__ptr, "CRenderWindow");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem__createRenderWindow_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_Function(ref IntPtr name, uint width, uint height, bool fullScreen)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.RenderWindow csret=_createRenderWindow(strname,width, height, fullScreen);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__createRenderWindow_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool(IntPtr pNativeObject, string name, uint width, uint height, byte fullScreen);

				/// <summary>
				/// 创建一个新的渲染窗体
				/// </summary>
				/// <param name="name">窗体的名字</param>
				/// <param name="width">窗体的宽度</param>
				/// <param name="height">窗体的高度</param>
				/// <param name="fullScreen">全屏</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RenderWindow _createRenderWindow(string name, uint width, uint height, bool fullScreen)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__createRenderWindow_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool(this.NativeObject, name, width, height, Convert.ToByte(fullScreen));
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderWindow csObj = new EarthView.World.Graphic.RenderWindow(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderWindow");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderWindow;
						csObj.BindNativeObject(__ptr, "CRenderWindow");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte _createRenderWindows_CallBack_ev_bool_RenderWindowDescriptionList_RenderWindowList(IntPtr renderWindowDescriptions, IntPtr createdWindows);

				protected _createRenderWindows_CallBack_ev_bool_RenderWindowDescriptionList_RenderWindowList m__createRenderWindows_CallBack_ev_bool_RenderWindowDescriptionList_RenderWindowList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CRenderSystem__createRenderWindows_ev_bool_RenderWindowDescriptionList_RenderWindowList_NoVirtual(IntPtr pNativeObject, IntPtr renderWindowDescriptions, IntPtr createdWindows);

				/// <summary>
				/// 创建多渲染窗体
				/// </summary>
				/// <param name="renderWindowDescriptions">结构数组包含每一个渲染窗体的描述</param>
				/// <param name="createdWindows">创建渲染窗体</param>
				/// <returns></returns>
				public virtual bool _createRenderWindows_NoVirtual(EarthView.World.Graphic.RenderWindowDescriptionList renderWindowDescriptions, ref  EarthView.World.Graphic.RenderWindowList createdWindows)
				{
					byte ret=EarthView_World_Graphic_CRenderSystem__createRenderWindows_ev_bool_RenderWindowDescriptionList_RenderWindowList_NoVirtual(this.NativeObject, object.Equals(renderWindowDescriptions, null) ? IntPtr.Zero : renderWindowDescriptions.NativeObject, object.Equals(createdWindows, null) ? IntPtr.Zero : createdWindows.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CRenderSystem__createRenderWindows_ev_bool_RenderWindowDescriptionList_RenderWindowList_Function(IntPtr renderWindowDescriptions, IntPtr createdWindows)
				{
					EarthView.World.Graphic.RenderWindowDescriptionList csobj_renderWindowDescriptions = new EarthView.World.Graphic.RenderWindowDescriptionList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_renderWindowDescriptions.BindNativeObject(renderWindowDescriptions,"RenderWindowDescriptionList");
					csobj_renderWindowDescriptions.Delegate = true;
					IClassFactory csobj_renderWindowDescriptionsClassFactory = GlobalClassFactoryMap.Get(csobj_renderWindowDescriptions.GetCppInstanceTypeName());
					if (csobj_renderWindowDescriptionsClassFactory != null)
					{
						csobj_renderWindowDescriptions.Delegate = true;
						csobj_renderWindowDescriptions = csobj_renderWindowDescriptionsClassFactory.Create() as EarthView.World.Graphic.RenderWindowDescriptionList;
						csobj_renderWindowDescriptions.BindNativeObject(renderWindowDescriptions, "RenderWindowDescriptionList");
						csobj_renderWindowDescriptions.Delegate = true;
					}
					EarthView.World.Graphic.RenderWindowList csobj_createdWindows = new EarthView.World.Graphic.RenderWindowList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_createdWindows.BindNativeObject(createdWindows,"RenderWindowList");
					csobj_createdWindows.Delegate = true;
					IClassFactory csobj_createdWindowsClassFactory = GlobalClassFactoryMap.Get(csobj_createdWindows.GetCppInstanceTypeName());
					if (csobj_createdWindowsClassFactory != null)
					{
						csobj_createdWindows.Delegate = true;
						csobj_createdWindows = csobj_createdWindowsClassFactory.Create() as EarthView.World.Graphic.RenderWindowList;
						csobj_createdWindows.BindNativeObject(createdWindows, "RenderWindowList");
						csobj_createdWindows.Delegate = true;
					}
					
					bool csret=_createRenderWindows(csobj_renderWindowDescriptions, ref csobj_createdWindows);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CRenderSystem__createRenderWindows_ev_bool_RenderWindowDescriptionList_RenderWindowList(IntPtr pNativeObject, IntPtr renderWindowDescriptions, IntPtr createdWindows);

				/// <summary>
				/// 创建多渲染窗体
				/// </summary>
				/// <param name="renderWindowDescriptions">结构数组包含每一个渲染窗体的描述</param>
				/// <param name="createdWindows">创建渲染窗体</param>
				/// <returns></returns>
				public virtual bool _createRenderWindows(EarthView.World.Graphic.RenderWindowDescriptionList renderWindowDescriptions, ref  EarthView.World.Graphic.RenderWindowList createdWindows)
				{
					byte ret=EarthView_World_Graphic_CRenderSystem__createRenderWindows_ev_bool_RenderWindowDescriptionList_RenderWindowList(this.NativeObject, object.Equals(renderWindowDescriptions, null) ? IntPtr.Zero : renderWindowDescriptions.NativeObject, object.Equals(createdWindows, null) ? IntPtr.Zero : createdWindows.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createMultiRenderTarget_CallBack_CMultiRenderTarget_EVString(ref IntPtr name);

				protected createMultiRenderTarget_CallBack_CMultiRenderTarget_EVString m_createMultiRenderTarget_CallBack_CMultiRenderTarget_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_createMultiRenderTarget_CMultiRenderTarget_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 创建一个多重渲染目标
				/// </summary>
				/// <param name="name"></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.MultiRenderTarget CreateMultiRenderTarget_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_createMultiRenderTarget_CMultiRenderTarget_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.MultiRenderTarget csObj = new EarthView.World.Graphic.MultiRenderTarget(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMultiRenderTarget");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MultiRenderTarget;
						csObj.BindNativeObject(__ptr, "CMultiRenderTarget");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem_createMultiRenderTarget_CMultiRenderTarget_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.MultiRenderTarget csret=CreateMultiRenderTarget(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_createMultiRenderTarget_CMultiRenderTarget_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 创建一个多重渲染目标
				/// </summary>
				/// <param name="name"></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.MultiRenderTarget CreateMultiRenderTarget(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_createMultiRenderTarget_CMultiRenderTarget_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.MultiRenderTarget csObj = new EarthView.World.Graphic.MultiRenderTarget(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMultiRenderTarget");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MultiRenderTarget;
						csObj.BindNativeObject(__ptr, "CMultiRenderTarget");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyRenderWindow_CallBack_void_EVString(ref IntPtr name);

				protected destroyRenderWindow_CallBack_void_EVString m_destroyRenderWindow_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_destroyRenderWindow_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 销毁渲染窗体
				/// </summary>
				/// <param name="name"></param>
				/// <returns></returns>
				public virtual void DestroyRenderWindow_NoVirtual(string name)
				{
					EarthView_World_Graphic_CRenderSystem_destroyRenderWindow_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_destroyRenderWindow_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroyRenderWindow(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_destroyRenderWindow_void_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 销毁渲染窗体
				/// </summary>
				/// <param name="name"></param>
				/// <returns></returns>
				public virtual void DestroyRenderWindow(string name)
				{
					EarthView_World_Graphic_CRenderSystem_destroyRenderWindow_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyRenderTexture_CallBack_void_EVString(ref IntPtr name);

				protected destroyRenderTexture_CallBack_void_EVString m_destroyRenderTexture_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_destroyRenderTexture_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 销毁渲染纹理
				/// </summary>
				/// <param name="name"></param>
				/// <returns></returns>
				public virtual void DestroyRenderTexture_NoVirtual(string name)
				{
					EarthView_World_Graphic_CRenderSystem_destroyRenderTexture_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_destroyRenderTexture_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroyRenderTexture(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_destroyRenderTexture_void_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 销毁渲染纹理
				/// </summary>
				/// <param name="name"></param>
				/// <returns></returns>
				public virtual void DestroyRenderTexture(string name)
				{
					EarthView_World_Graphic_CRenderSystem_destroyRenderTexture_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyRenderTarget_CallBack_void_EVString(ref IntPtr name);

				protected destroyRenderTarget_CallBack_void_EVString m_destroyRenderTarget_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_destroyRenderTarget_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 销毁渲染目标
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void DestroyRenderTarget_NoVirtual(string name)
				{
					EarthView_World_Graphic_CRenderSystem_destroyRenderTarget_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_destroyRenderTarget_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroyRenderTarget(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_destroyRenderTarget_void_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 销毁渲染目标
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void DestroyRenderTarget(string name)
				{
					EarthView_World_Graphic_CRenderSystem_destroyRenderTarget_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void attachRenderTarget_CallBack_void_CRenderTarget(IntPtr target);

				protected attachRenderTarget_CallBack_void_CRenderTarget m_attachRenderTarget_CallBack_void_CRenderTarget;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_attachRenderTarget_void_CRenderTarget_NoVirtual(IntPtr pNativeObject, IntPtr target);

				/// <summary>
				/// 通过通路名连接渲染目标和渲染系统
				/// </summary>
				/// <param name="target"></param>
				/// <returns></returns>
				public virtual void AttachRenderTarget_NoVirtual(ref EarthView.World.Graphic.RenderTarget target)
				{
					EarthView_World_Graphic_CRenderSystem_attachRenderTarget_void_CRenderTarget_NoVirtual(this.NativeObject, object.Equals(target, null) ? IntPtr.Zero : target.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_attachRenderTarget_void_CRenderTarget_Function(IntPtr target)
				{
					EarthView.World.Graphic.RenderTarget csobj_target = new EarthView.World.Graphic.RenderTarget(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_target.BindNativeObject(target,"CRenderTarget");
					csobj_target.Delegate = true;
					IClassFactory csobj_targetClassFactory = GlobalClassFactoryMap.Get(csobj_target.GetCppInstanceTypeName());
					if (csobj_targetClassFactory != null)
					{
						csobj_target.Delegate = true;
						csobj_target = csobj_targetClassFactory.Create() as EarthView.World.Graphic.RenderTarget;
						csobj_target.BindNativeObject(target, "CRenderTarget");
						csobj_target.Delegate = true;
					}
					
					AttachRenderTarget(ref csobj_target);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_attachRenderTarget_void_CRenderTarget(IntPtr pNativeObject, IntPtr target);

				/// <summary>
				/// 通过通路名连接渲染目标和渲染系统
				/// </summary>
				/// <param name="target"></param>
				/// <returns></returns>
				public virtual void AttachRenderTarget(ref EarthView.World.Graphic.RenderTarget target)
				{
					EarthView_World_Graphic_CRenderSystem_attachRenderTarget_void_CRenderTarget(this.NativeObject, object.Equals(target, null) ? IntPtr.Zero : target.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getRenderTarget_CallBack_CRenderTarget_EVString(ref IntPtr name);

				protected getRenderTarget_CallBack_CRenderTarget_EVString m_getRenderTarget_CallBack_CRenderTarget_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getRenderTarget_CRenderTarget_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 获得渲染目标
				/// 如果渲染目标没有找到，返回NULL
				/// </summary>
				/// <param name="name"></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RenderTarget GetRenderTarget_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getRenderTarget_CRenderTarget_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderTarget csObj = new EarthView.World.Graphic.RenderTarget(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderTarget");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderTarget;
						csObj.BindNativeObject(__ptr, "CRenderTarget");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem_getRenderTarget_CRenderTarget_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.RenderTarget csret=GetRenderTarget(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getRenderTarget_CRenderTarget_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 获得渲染目标
				/// 如果渲染目标没有找到，返回NULL
				/// </summary>
				/// <param name="name"></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RenderTarget GetRenderTarget(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getRenderTarget_CRenderTarget_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderTarget csObj = new EarthView.World.Graphic.RenderTarget(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderTarget");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderTarget;
						csObj.BindNativeObject(__ptr, "CRenderTarget");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr detachRenderTarget_CallBack_CRenderTarget_EVString(ref IntPtr name);

				protected detachRenderTarget_CallBack_CRenderTarget_EVString m_detachRenderTarget_CallBack_CRenderTarget_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_detachRenderTarget_CRenderTarget_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 从渲染系统中用通道名分开渲染目标，并返回一个指针
				/// 如果渲染目标没有找到，返回NULL
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RenderTarget DetachRenderTarget_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_detachRenderTarget_CRenderTarget_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderTarget csObj = new EarthView.World.Graphic.RenderTarget(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderTarget");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderTarget;
						csObj.BindNativeObject(__ptr, "CRenderTarget");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem_detachRenderTarget_CRenderTarget_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.RenderTarget csret=DetachRenderTarget(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_detachRenderTarget_CRenderTarget_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 从渲染系统中用通道名分开渲染目标，并返回一个指针
				/// 如果渲染目标没有找到，返回NULL
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RenderTarget DetachRenderTarget(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_detachRenderTarget_CRenderTarget_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderTarget csObj = new EarthView.World.Graphic.RenderTarget(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderTarget");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderTarget;
						csObj.BindNativeObject(__ptr, "CRenderTarget");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				public class StringRenderTargetMapPair : EarthView.World.Core.BaseObject
				{
					/// <summary>
					/// 默认构造函数
					/// </summary>
					/// <param name=""></param>
					/// <returns></returns>
					public StringRenderTargetMapPair() : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						Create("StringRenderTargetMapPair",  null);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}
					private string firstField;
					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr Get_EarthView_World_Graphic_CRenderSystem_StringRenderTargetMapPair_first(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CRenderSystem_StringRenderTargetMapPair_first( IntPtr pObject, string value );

					public 					string First
					{
						get
						{
							IntPtr __ptr = Get_EarthView_World_Graphic_CRenderSystem_StringRenderTargetMapPair_first(this.NativeObject);
							
							string ret = Marshal.PtrToStringAnsi(__ptr);
							ClassFactory.FreeString(ref __ptr);
							return ret;
							
						}

						set
						{
							firstField = value;
							Set_EarthView_World_Graphic_CRenderSystem_StringRenderTargetMapPair_first( this.NativeObject,value );
						}
					}

					private EarthView.World.Graphic.RenderTarget secondField;
					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr Get_EarthView_World_Graphic_CRenderSystem_StringRenderTargetMapPair_second(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CRenderSystem_StringRenderTargetMapPair_second( IntPtr pObject, IntPtr value );

					public 					EarthView.World.Graphic.RenderTarget Second
					{
						get
						{
							IntPtr __ptr = Get_EarthView_World_Graphic_CRenderSystem_StringRenderTargetMapPair_second(this.NativeObject);
							
							if(__ptr==IntPtr.Zero)
							{
							return null;
							}
							if(!object.Equals(secondField, null)){
								secondField.NativeObject = __ptr;
								return secondField;
							}
							EarthView.World.Graphic.RenderTarget csObj = new EarthView.World.Graphic.RenderTarget(CreatedWhenConstruct.CWC_NotToCreate);
							csObj.BindNativeObject(__ptr, "CRenderTarget");
							csObj.Delegate = true;
							IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
							if (csObjClassFactory != null)
							{
								csObj.Delegate = true;
								csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderTarget;
								csObj.BindNativeObject(__ptr, "CRenderTarget");
								csObj.Delegate = true;
							}
							return csObj;
							
						}

						set
						{
							secondField = value;
							Set_EarthView_World_Graphic_CRenderSystem_StringRenderTargetMapPair_second( this.NativeObject,object.Equals(value, null) ? IntPtr.Zero : value.NativeObject );
						}
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadStringRenderTargetMapPair = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadStringRenderTargetMapPair = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadStringRenderTargetMapPair = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadStringRenderTargetMapPair = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadStringRenderTargetMapPair = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadStringRenderTargetMapPair = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadStringRenderTargetMapPair = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadStringRenderTargetMapPair = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadStringRenderTargetMapPair = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadStringRenderTargetMapPair = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadStringRenderTargetMapPair = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadStringRenderTargetMapPair = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CRenderSystem::StringRenderTargetMapPair", new StringRenderTargetMapPairClassFactory());

					public StringRenderTargetMapPair(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
						}
					}
					public static StringRenderTargetMapPair FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						StringRenderTargetMapPair obj = baseObj as  StringRenderTargetMapPair;
						if (object.Equals(obj, null))
						{
							obj = new StringRenderTargetMapPair(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "StringRenderTargetMapPair");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class StringRenderTargetMapPairClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						StringRenderTargetMapPair emptyInstance = new StringRenderTargetMapPair(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				public class RenderTargetIterator : EarthView.World.Core.BaseObject
				{
					/// <summary>
					/// 构造函数
					/// </summary>
					/// <param name="lst">迭代器对应集合</param>
					/// <returns></returns>
					public RenderTargetIterator(ref EarthView.World.Graphic.RenderTargetMap lst) : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						NameValuePairList list = new NameValuePairList();
						BasePtr valuelst = new BasePtr(lst);
						list.Add("lst", valuelst.PtrVal);
						Create("RenderTargetIterator", list);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}
					/// <summary>
					/// 复制构造函数
					/// </summary>
					/// <param name="other">其它迭代器</param>
					/// <returns></returns>
					public RenderTargetIterator(EarthView.World.Graphic.RenderSystem.RenderTargetIterator other) : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						NameValuePairList list = new NameValuePairList();
						BasePtr valueother = new BasePtr(other);
						list.Add("other", valueother.PtrVal);
						Create("RenderTargetIterator", list);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_hasMoreElements_ev_bool(IntPtr pNativeObject);

					/// <summary>
					/// 判断迭代器是否到达容器末尾
					/// </summary>
					/// <param name=""></param>
					/// <returns>是返回true，否则false</returns>
					public bool HasMoreElements()
					{
						byte ret=EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_hasMoreElements_ev_bool(this.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_moveNext_void(IntPtr pNativeObject);

					/// <summary>
					/// 迭代器位置后移
					/// </summary>
					/// <param name=""></param>
					/// <returns></returns>
					public void MoveNext()
					{
						EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_moveNext_void(this.NativeObject);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern ushort EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_nextKey_ev_uint16(IntPtr pNativeObject);

					/// <summary>
					/// 返回容器当前的键
					/// </summary>
					/// <param name=""></param>
					/// <returns>键</returns>
					public ushort NextKey()
					{
						ushort ret=EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_nextKey_ev_uint16(this.NativeObject);
						
						return ret;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_nextValue_CRenderTarget(IntPtr pNativeObject);

					/// <summary>
					/// 返回容器当前的值
					/// </summary>
					/// <param name=""></param>
					/// <returns>值</returns>
					public EarthView.World.Graphic.RenderTarget NextValue()
					{
						IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_nextValue_CRenderTarget(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.RenderTarget csObj = new EarthView.World.Graphic.RenderTarget(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CRenderTarget");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderTarget;
							csObj.BindNativeObject(__ptr, "CRenderTarget");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr[] EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_nextValuePtr_CRenderTarget(IntPtr pNativeObject);

					/// <summary>
					/// 返回容器当前的值指针
					/// </summary>
					/// <param name=""></param>
					/// <returns>值地址</returns>
					public EarthView.World.Graphic.RenderTarget[] NextValuePtr()
					{
						IntPtr[] ret=EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_nextValuePtr_CRenderTarget(this.NativeObject);
						
						EarthView.World.Graphic.RenderTarget[] csObjs=new EarthView.World.Graphic.RenderTarget[ret.Length];
						for (int i = 0; i < ret.Length; i++)
						{
						EarthView.World.Graphic.RenderTarget csObj = new EarthView.World.Graphic.RenderTarget(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(ret[i], "CRenderTarget");
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderTarget;
							csObj.BindNativeObject(ret[i], "CRenderTarget");
						}
						csObjs[i]=csObj;
						}
						return csObjs;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_next_CRenderTarget(IntPtr pNativeObject);

					/// <summary>
					/// 返回容器当前的值
					/// </summary>
					/// <param name=""></param>
					/// <returns>值</returns>
					public EarthView.World.Graphic.RenderTarget Next()
					{
						IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_next_CRenderTarget(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.RenderTarget csObj = new EarthView.World.Graphic.RenderTarget(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CRenderTarget");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderTarget;
							csObj.BindNativeObject(__ptr, "CRenderTarget");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_getBegin_StringRenderTargetMapPair(IntPtr pNativeObject);

					/// <summary>
					/// 返回容器首键值对
					/// </summary>
					/// <param name=""></param>
					/// <returns>首键值对</returns>
					public EarthView.World.Graphic.RenderSystem.StringRenderTargetMapPair GetBegin()
					{
						IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_getBegin_StringRenderTargetMapPair(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.RenderSystem.StringRenderTargetMapPair csObj = new EarthView.World.Graphic.RenderSystem.StringRenderTargetMapPair(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "StringRenderTargetMapPair");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderSystem.StringRenderTargetMapPair;
							csObj.BindNativeObject(__ptr, "StringRenderTargetMapPair");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_getEnd_StringRenderTargetMapPair(IntPtr pNativeObject);

					/// <summary>
					/// 返回容器尾键值对
					/// </summary>
					/// <param name=""></param>
					/// <returns>尾键值对</returns>
					public EarthView.World.Graphic.RenderSystem.StringRenderTargetMapPair GetEnd()
					{
						IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_getEnd_StringRenderTargetMapPair(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.RenderSystem.StringRenderTargetMapPair csObj = new EarthView.World.Graphic.RenderSystem.StringRenderTargetMapPair(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "StringRenderTargetMapPair");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderSystem.StringRenderTargetMapPair;
							csObj.BindNativeObject(__ptr, "StringRenderTargetMapPair");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_getCurrent_StringRenderTargetMapPair(IntPtr pNativeObject);

					/// <summary>
					/// 返回容器当前键值对
					/// </summary>
					/// <param name=""></param>
					/// <returns>当前键值对</returns>
					public EarthView.World.Graphic.RenderSystem.StringRenderTargetMapPair GetCurrent()
					{
						IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_RenderTargetIterator_getCurrent_StringRenderTargetMapPair(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.RenderSystem.StringRenderTargetMapPair csObj = new EarthView.World.Graphic.RenderSystem.StringRenderTargetMapPair(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "StringRenderTargetMapPair");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderSystem.StringRenderTargetMapPair;
							csObj.BindNativeObject(__ptr, "StringRenderTargetMapPair");
							csObj.Delegate = true;
						}
						return csObj;
						
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadRenderTargetIterator = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadRenderTargetIterator = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadRenderTargetIterator = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadRenderTargetIterator = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadRenderTargetIterator = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadRenderTargetIterator = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadRenderTargetIterator = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadRenderTargetIterator = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadRenderTargetIterator = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadRenderTargetIterator = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadRenderTargetIterator = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadRenderTargetIterator = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CRenderSystem::RenderTargetIterator", new RenderTargetIteratorClassFactory());

					public RenderTargetIterator(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
						}
					}
					public static RenderTargetIterator FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						RenderTargetIterator obj = baseObj as  RenderTargetIterator;
						if (object.Equals(obj, null))
						{
							obj = new RenderTargetIterator(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "RenderTargetIterator");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class RenderTargetIteratorClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						RenderTargetIterator emptyInstance = new RenderTargetIterator(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getRenderTargetIterator_CallBack_RenderTargetIterator();

				protected getRenderTargetIterator_CallBack_RenderTargetIterator m_getRenderTargetIterator_CallBack_RenderTargetIterator;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getRenderTargetIterator_RenderTargetIterator_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 返回一个渲染目标的迭代器
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RenderSystem.RenderTargetIterator GetRenderTargetIterator_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getRenderTargetIterator_RenderTargetIterator_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderSystem.RenderTargetIterator csObj = new EarthView.World.Graphic.RenderSystem.RenderTargetIterator(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "RenderTargetIterator");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderSystem.RenderTargetIterator;
						csObj.BindNativeObject(__ptr, "RenderTargetIterator");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem_getRenderTargetIterator_RenderTargetIterator_Function()
				{
					EarthView.World.Graphic.RenderSystem.RenderTargetIterator csret=GetRenderTargetIterator();
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getRenderTargetIterator_RenderTargetIterator(IntPtr pNativeObject);

				/// <summary>
				/// 返回一个渲染目标的迭代器
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RenderSystem.RenderTargetIterator GetRenderTargetIterator()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getRenderTargetIterator_RenderTargetIterator(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderSystem.RenderTargetIterator csObj = new EarthView.World.Graphic.RenderSystem.RenderTargetIterator(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "RenderTargetIterator");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderSystem.RenderTargetIterator;
						csObj.BindNativeObject(__ptr, "RenderTargetIterator");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate string getErrorDescription_CallBack_EVString_ev_int32(int errorNumber);

				protected getErrorDescription_CallBack_EVString_ev_int32 m_getErrorDescription_CallBack_EVString_ev_int32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getErrorDescription_EVString_ev_int32_NoVirtual(IntPtr pNativeObject, int errorNumber);

				/// <summary>
				/// 返回一个错误代码的描述
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual string GetErrorDescription_NoVirtual(int errorNumber)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getErrorDescription_EVString_ev_int32_NoVirtual(this.NativeObject, errorNumber);
					
					string ret = Marshal.PtrToStringAnsi(__ptr);
					ClassFactory.FreeString(ref __ptr);
					return ret;
					
				}

				protected  string EarthView_World_Graphic_CRenderSystem_getErrorDescription_EVString_ev_int32_Function(int errorNumber)
				{
					string csret=GetErrorDescription(errorNumber);
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getErrorDescription_EVString_ev_int32(IntPtr pNativeObject, int errorNumber);

				/// <summary>
				/// 返回一个错误代码的描述
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual string GetErrorDescription(int errorNumber)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getErrorDescription_EVString_ev_int32(this.NativeObject, errorNumber);
					
					string ret = Marshal.PtrToStringAnsi(__ptr);
					ClassFactory.FreeString(ref __ptr);
					return ret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setWaitForVerticalBlank_void_ev_bool(IntPtr pNativeObject, byte enabled);

				/// <summary>
				/// 在flipping缓冲之前设置是否渲染窗体等待垂直消隐
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public void SetWaitForVerticalBlank(bool enabled)
				{
					EarthView_World_Graphic_CRenderSystem_setWaitForVerticalBlank_void_ev_bool(this.NativeObject, Convert.ToByte(enabled));
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CRenderSystem_getWaitForVerticalBlank_ev_bool(IntPtr pNativeObject);

				/// <summary>
				/// 如果垂直消隐监控和帧是同步的返回true
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public bool GetWaitForVerticalBlank()
				{
					byte ret=EarthView_World_Graphic_CRenderSystem_getWaitForVerticalBlank_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getGlobalInstanceVertexBuffer_CHardwareVertexBufferSharedPtr(IntPtr pNativeObject);

				public EarthView.World.Graphic.HardwareVertexBufferSharedPtr GetGlobalInstanceVertexBuffer()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getGlobalInstanceVertexBuffer_CHardwareVertexBufferSharedPtr(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.HardwareVertexBufferSharedPtr csObj = new EarthView.World.Graphic.HardwareVertexBufferSharedPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CHardwareVertexBufferSharedPtr");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.HardwareVertexBufferSharedPtr;
						csObj.BindNativeObject(__ptr, "CHardwareVertexBufferSharedPtr");
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setGlobalInstanceVertexBuffer_void_CHardwareVertexBufferSharedPtr(IntPtr pNativeObject, IntPtr val);

				public void SetGlobalInstanceVertexBuffer(EarthView.World.Graphic.HardwareVertexBufferSharedPtr val)
				{
					EarthView_World_Graphic_CRenderSystem_setGlobalInstanceVertexBuffer_void_CHardwareVertexBufferSharedPtr(this.NativeObject, object.Equals(val, null) ? IntPtr.Zero : val.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getGlobalInstanceVertexBufferVertexDeclaration_CVertexDeclaration(IntPtr pNativeObject);

				public EarthView.World.Graphic.VertexDeclaration GetGlobalInstanceVertexBufferVertexDeclaration()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getGlobalInstanceVertexBufferVertexDeclaration_CVertexDeclaration(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.VertexDeclaration csObj = new EarthView.World.Graphic.VertexDeclaration(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CVertexDeclaration");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.VertexDeclaration;
						csObj.BindNativeObject(__ptr, "CVertexDeclaration");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setGlobalInstanceVertexBufferVertexDeclaration_void_CVertexDeclaration(IntPtr pNativeObject, IntPtr ref_val);

				public void SetGlobalInstanceVertexBufferVertexDeclaration(EarthView.World.Graphic.VertexDeclaration ref_val)
				{
					EarthView_World_Graphic_CRenderSystem_setGlobalInstanceVertexBufferVertexDeclaration_void_CVertexDeclaration(this.NativeObject, object.Equals(ref_val, null) ? IntPtr.Zero : ref_val.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_CRenderSystem_getGlobalNumberOfInstances_ev_size_t(IntPtr pNativeObject);

				public ulong GetGlobalNumberOfInstances()
				{
					ulong ret=EarthView_World_Graphic_CRenderSystem_getGlobalNumberOfInstances_ev_size_t(this.NativeObject);
					
					return ret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setGlobalNumberOfInstances_void_ev_size_t(IntPtr pNativeObject, ulong val);

				public void SetGlobalNumberOfInstances(ulong val)
				{
					EarthView_World_Graphic_CRenderSystem_setGlobalNumberOfInstances_void_ev_size_t(this.NativeObject, val);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setFixedPipelineEnabled_void_ev_bool(IntPtr pNativeObject, byte enabled);

				public void SetFixedPipelineEnabled(bool enabled)
				{
					EarthView_World_Graphic_CRenderSystem_setFixedPipelineEnabled_void_ev_bool(this.NativeObject, Convert.ToByte(enabled));
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CRenderSystem_getFixedPipelineEnabled_ev_bool(IntPtr pNativeObject);

				public bool GetFixedPipelineEnabled()
				{
					byte ret=EarthView_World_Graphic_CRenderSystem_getFixedPipelineEnabled_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setDepthBufferFor_CallBack_void_CRenderTarget(IntPtr renderTarget);

				protected setDepthBufferFor_CallBack_void_CRenderTarget m_setDepthBufferFor_CallBack_void_CRenderTarget;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setDepthBufferFor_void_CRenderTarget_NoVirtual(IntPtr pNativeObject, IntPtr renderTarget);

				public virtual void SetDepthBufferFor_NoVirtual(EarthView.World.Graphic.RenderTarget renderTarget)
				{
					EarthView_World_Graphic_CRenderSystem_setDepthBufferFor_void_CRenderTarget_NoVirtual(this.NativeObject, object.Equals(renderTarget, null) ? IntPtr.Zero : renderTarget.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setDepthBufferFor_void_CRenderTarget_Function(IntPtr renderTarget)
				{
					EarthView.World.Graphic.RenderTarget csobj_renderTarget = new EarthView.World.Graphic.RenderTarget(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_renderTarget.BindNativeObject(renderTarget,"CRenderTarget");
					csobj_renderTarget.Delegate = true;
					IClassFactory csobj_renderTargetClassFactory = GlobalClassFactoryMap.Get(csobj_renderTarget.GetCppInstanceTypeName());
					if (csobj_renderTargetClassFactory != null)
					{
						csobj_renderTarget.Delegate = true;
						csobj_renderTarget = csobj_renderTargetClassFactory.Create() as EarthView.World.Graphic.RenderTarget;
						csobj_renderTarget.BindNativeObject(renderTarget, "CRenderTarget");
						csobj_renderTarget.Delegate = true;
					}
					
					SetDepthBufferFor(csobj_renderTarget);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setDepthBufferFor_void_CRenderTarget(IntPtr pNativeObject, IntPtr renderTarget);

				public virtual void SetDepthBufferFor(EarthView.World.Graphic.RenderTarget renderTarget)
				{
					EarthView_World_Graphic_CRenderSystem_setDepthBufferFor_void_CRenderTarget(this.NativeObject, object.Equals(renderTarget, null) ? IntPtr.Zero : renderTarget.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _useLights_CallBack_void_LightList_ev_uint16(IntPtr lights, ushort limit);

				protected _useLights_CallBack_void_LightList_ev_uint16 m__useLights_CallBack_void_LightList_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__useLights_void_LightList_ev_uint16_NoVirtual(IntPtr pNativeObject, IntPtr lights, ushort limit);

				/// <summary>
				/// 使用光照
				/// </summary>
				/// <param name="lights">光源列表</param>
				/// <param name="limit"></param>
				/// <returns></returns>
				public virtual void _useLights_NoVirtual(EarthView.World.Graphic.LightList lights, ushort limit)
				{
					EarthView_World_Graphic_CRenderSystem__useLights_void_LightList_ev_uint16_NoVirtual(this.NativeObject, object.Equals(lights, null) ? IntPtr.Zero : lights.NativeObject, limit);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__useLights_void_LightList_ev_uint16_Function(IntPtr lights, ushort limit)
				{
					EarthView.World.Graphic.LightList csobj_lights = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_lights.BindNativeObject(lights,"LightList");
					csobj_lights.Delegate = true;
					IClassFactory csobj_lightsClassFactory = GlobalClassFactoryMap.Get(csobj_lights.GetCppInstanceTypeName());
					if (csobj_lightsClassFactory != null)
					{
						csobj_lights.Delegate = true;
						csobj_lights = csobj_lightsClassFactory.Create() as EarthView.World.Graphic.LightList;
						csobj_lights.BindNativeObject(lights, "LightList");
						csobj_lights.Delegate = true;
					}
					
					_useLights(csobj_lights, limit);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__useLights_void_LightList_ev_uint16(IntPtr pNativeObject, IntPtr lights, ushort limit);

				/// <summary>
				/// 使用光照
				/// </summary>
				/// <param name="lights">光源列表</param>
				/// <param name="limit"></param>
				/// <returns></returns>
				public virtual void _useLights(EarthView.World.Graphic.LightList lights, ushort limit)
				{
					EarthView_World_Graphic_CRenderSystem__useLights_void_LightList_ev_uint16(this.NativeObject, object.Equals(lights, null) ? IntPtr.Zero : lights.NativeObject, limit);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte areFixedFunctionLightsInViewSpace_CallBack_ev_bool();

				protected areFixedFunctionLightsInViewSpace_CallBack_ev_bool m_areFixedFunctionLightsInViewSpace_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CRenderSystem_areFixedFunctionLightsInViewSpace_ev_bool_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 判断是否在视口空间里提供固定功能的光照
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual bool AreFixedFunctionLightsInViewSpace_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CRenderSystem_areFixedFunctionLightsInViewSpace_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CRenderSystem_areFixedFunctionLightsInViewSpace_ev_bool_Function()
				{
					bool csret=AreFixedFunctionLightsInViewSpace();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CRenderSystem_areFixedFunctionLightsInViewSpace_ev_bool(IntPtr pNativeObject);

				/// <summary>
				/// 判断是否在视口空间里提供固定功能的光照
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual bool AreFixedFunctionLightsInViewSpace()
				{
					byte ret=EarthView_World_Graphic_CRenderSystem_areFixedFunctionLightsInViewSpace_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setWorldMatrix_CallBack_void_CMatrix4(IntPtr m);

				protected _setWorldMatrix_CallBack_void_CMatrix4 m__setWorldMatrix_CallBack_void_CMatrix4;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setWorldMatrix_void_CMatrix4_NoVirtual(IntPtr pNativeObject, IntPtr m);

				/// <summary>
				/// 设置世界转换矩阵
				/// </summary>
				/// <param name="m"></param>
				/// <returns></returns>
				public virtual void _setWorldMatrix_NoVirtual(EarthView.World.Spatial.Math.Matrix4 m)
				{
					EarthView_World_Graphic_CRenderSystem__setWorldMatrix_void_CMatrix4_NoVirtual(this.NativeObject, object.Equals(m, null) ? IntPtr.Zero : m.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setWorldMatrix_void_CMatrix4_Function(IntPtr m)
				{
					EarthView.World.Spatial.Math.Matrix4 csobj_m = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_m.BindNativeObject(m,"CMatrix4");
					csobj_m.Delegate = true;
					IClassFactory csobj_mClassFactory = GlobalClassFactoryMap.Get(csobj_m.GetCppInstanceTypeName());
					if (csobj_mClassFactory != null)
					{
						csobj_m.Delegate = true;
						csobj_m = csobj_mClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_m.BindNativeObject(m, "CMatrix4");
						csobj_m.Delegate = true;
					}
					
					_setWorldMatrix(csobj_m);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setWorldMatrix_void_CMatrix4(IntPtr pNativeObject, IntPtr m);

				/// <summary>
				/// 设置世界转换矩阵
				/// </summary>
				/// <param name="m"></param>
				/// <returns></returns>
				public virtual void _setWorldMatrix(EarthView.World.Spatial.Math.Matrix4 m)
				{
					EarthView_World_Graphic_CRenderSystem__setWorldMatrix_void_CMatrix4(this.NativeObject, object.Equals(m, null) ? IntPtr.Zero : m.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setWorldMatrices_CallBack_void_CMatrix4_ev_uint16(IntPtr m, ushort count);

				protected _setWorldMatrices_CallBack_void_CMatrix4_ev_uint16 m__setWorldMatrices_CallBack_void_CMatrix4_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setWorldMatrices_void_CMatrix4_ev_uint16_NoVirtual(IntPtr pNativeObject, IntPtr m, ushort count);

				/// <summary>
				/// 设置多世界矩阵
				/// </summary>
				/// <param name="m"></param>
				/// <param name="count"></param>
				/// <returns></returns>
				public virtual void _setWorldMatrices_NoVirtual(EarthView.World.Spatial.Math.Matrix4 m, ushort count)
				{
					EarthView_World_Graphic_CRenderSystem__setWorldMatrices_void_CMatrix4_ev_uint16_NoVirtual(this.NativeObject, object.Equals(m, null) ? IntPtr.Zero : m.NativeObject, count);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setWorldMatrices_void_CMatrix4_ev_uint16_Function(IntPtr m, ushort count)
				{
					EarthView.World.Spatial.Math.Matrix4 csobj_m = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_m.BindNativeObject(m,"CMatrix4");
					csobj_m.Delegate = true;
					IClassFactory csobj_mClassFactory = GlobalClassFactoryMap.Get(csobj_m.GetCppInstanceTypeName());
					if (csobj_mClassFactory != null)
					{
						csobj_m.Delegate = true;
						csobj_m = csobj_mClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_m.BindNativeObject(m, "CMatrix4");
						csobj_m.Delegate = true;
					}
					
					_setWorldMatrices(csobj_m, count);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setWorldMatrices_void_CMatrix4_ev_uint16(IntPtr pNativeObject, IntPtr m, ushort count);

				/// <summary>
				/// 设置多世界矩阵
				/// </summary>
				/// <param name="m"></param>
				/// <param name="count"></param>
				/// <returns></returns>
				public virtual void _setWorldMatrices(EarthView.World.Spatial.Math.Matrix4 m, ushort count)
				{
					EarthView_World_Graphic_CRenderSystem__setWorldMatrices_void_CMatrix4_ev_uint16(this.NativeObject, object.Equals(m, null) ? IntPtr.Zero : m.NativeObject, count);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setViewMatrix_CallBack_void_CMatrix4(IntPtr m);

				protected _setViewMatrix_CallBack_void_CMatrix4 m__setViewMatrix_CallBack_void_CMatrix4;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setViewMatrix_void_CMatrix4_NoVirtual(IntPtr pNativeObject, IntPtr m);

				/// <summary>
				/// 设置观察矩阵
				/// </summary>
				/// <param name="m"></param>
				/// <returns></returns>
				public virtual void _setViewMatrix_NoVirtual(EarthView.World.Spatial.Math.Matrix4 m)
				{
					EarthView_World_Graphic_CRenderSystem__setViewMatrix_void_CMatrix4_NoVirtual(this.NativeObject, object.Equals(m, null) ? IntPtr.Zero : m.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setViewMatrix_void_CMatrix4_Function(IntPtr m)
				{
					EarthView.World.Spatial.Math.Matrix4 csobj_m = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_m.BindNativeObject(m,"CMatrix4");
					csobj_m.Delegate = true;
					IClassFactory csobj_mClassFactory = GlobalClassFactoryMap.Get(csobj_m.GetCppInstanceTypeName());
					if (csobj_mClassFactory != null)
					{
						csobj_m.Delegate = true;
						csobj_m = csobj_mClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_m.BindNativeObject(m, "CMatrix4");
						csobj_m.Delegate = true;
					}
					
					_setViewMatrix(csobj_m);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setViewMatrix_void_CMatrix4(IntPtr pNativeObject, IntPtr m);

				/// <summary>
				/// 设置观察矩阵
				/// </summary>
				/// <param name="m"></param>
				/// <returns></returns>
				public virtual void _setViewMatrix(EarthView.World.Spatial.Math.Matrix4 m)
				{
					EarthView_World_Graphic_CRenderSystem__setViewMatrix_void_CMatrix4(this.NativeObject, object.Equals(m, null) ? IntPtr.Zero : m.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr _getViewMatrix_CallBack_CMatrix4();

				protected _getViewMatrix_CallBack_CMatrix4 m__getViewMatrix_CallBack_CMatrix4;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__getViewMatrix_CMatrix4_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Spatial.Math.Matrix4 _getViewMatrix_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__getViewMatrix_CMatrix4_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Spatial.Math.Matrix4 csObj = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMatrix4");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csObj.BindNativeObject(__ptr, "CMatrix4");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem__getViewMatrix_CMatrix4_Function()
				{
					EarthView.World.Spatial.Math.Matrix4 csret=_getViewMatrix();
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__getViewMatrix_CMatrix4(IntPtr pNativeObject);

				public virtual EarthView.World.Spatial.Math.Matrix4 _getViewMatrix()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__getViewMatrix_CMatrix4(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Spatial.Math.Matrix4 csObj = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMatrix4");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csObj.BindNativeObject(__ptr, "CMatrix4");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setProjectionMatrix_CallBack_void_CMatrix4(IntPtr m);

				protected _setProjectionMatrix_CallBack_void_CMatrix4 m__setProjectionMatrix_CallBack_void_CMatrix4;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setProjectionMatrix_void_CMatrix4_NoVirtual(IntPtr pNativeObject, IntPtr m);

				/// <summary>
				/// 设置投影矩阵
				/// </summary>
				/// <param name="m"></param>
				/// <returns></returns>
				public virtual void _setProjectionMatrix_NoVirtual(EarthView.World.Spatial.Math.Matrix4 m)
				{
					EarthView_World_Graphic_CRenderSystem__setProjectionMatrix_void_CMatrix4_NoVirtual(this.NativeObject, object.Equals(m, null) ? IntPtr.Zero : m.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setProjectionMatrix_void_CMatrix4_Function(IntPtr m)
				{
					EarthView.World.Spatial.Math.Matrix4 csobj_m = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_m.BindNativeObject(m,"CMatrix4");
					csobj_m.Delegate = true;
					IClassFactory csobj_mClassFactory = GlobalClassFactoryMap.Get(csobj_m.GetCppInstanceTypeName());
					if (csobj_mClassFactory != null)
					{
						csobj_m.Delegate = true;
						csobj_m = csobj_mClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_m.BindNativeObject(m, "CMatrix4");
						csobj_m.Delegate = true;
					}
					
					_setProjectionMatrix(csobj_m);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setProjectionMatrix_void_CMatrix4(IntPtr pNativeObject, IntPtr m);

				/// <summary>
				/// 设置投影矩阵
				/// </summary>
				/// <param name="m"></param>
				/// <returns></returns>
				public virtual void _setProjectionMatrix(EarthView.World.Spatial.Math.Matrix4 m)
				{
					EarthView_World_Graphic_CRenderSystem__setProjectionMatrix_void_CMatrix4(this.NativeObject, object.Equals(m, null) ? IntPtr.Zero : m.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr _getProjectMatrix_CallBack_CMatrix4();

				protected _getProjectMatrix_CallBack_CMatrix4 m__getProjectMatrix_CallBack_CMatrix4;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__getProjectMatrix_CMatrix4_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Spatial.Math.Matrix4 _getProjectMatrix_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__getProjectMatrix_CMatrix4_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Spatial.Math.Matrix4 csObj = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMatrix4");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csObj.BindNativeObject(__ptr, "CMatrix4");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem__getProjectMatrix_CMatrix4_Function()
				{
					EarthView.World.Spatial.Math.Matrix4 csret=_getProjectMatrix();
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__getProjectMatrix_CMatrix4(IntPtr pNativeObject);

				public virtual EarthView.World.Spatial.Math.Matrix4 _getProjectMatrix()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__getProjectMatrix_CMatrix4(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Spatial.Math.Matrix4 csObj = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMatrix4");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csObj.BindNativeObject(__ptr, "CMatrix4");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr _getProjectMatrixDepth_CallBack_CMatrix4();

				protected _getProjectMatrixDepth_CallBack_CMatrix4 m__getProjectMatrixDepth_CallBack_CMatrix4;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__getProjectMatrixDepth_CMatrix4_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Spatial.Math.Matrix4 _getProjectMatrixDepth_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__getProjectMatrixDepth_CMatrix4_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Spatial.Math.Matrix4 csObj = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMatrix4");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csObj.BindNativeObject(__ptr, "CMatrix4");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem__getProjectMatrixDepth_CMatrix4_Function()
				{
					EarthView.World.Spatial.Math.Matrix4 csret=_getProjectMatrixDepth();
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__getProjectMatrixDepth_CMatrix4(IntPtr pNativeObject);

				public virtual EarthView.World.Spatial.Math.Matrix4 _getProjectMatrixDepth()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__getProjectMatrixDepth_CMatrix4(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Spatial.Math.Matrix4 csObj = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMatrix4");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csObj.BindNativeObject(__ptr, "CMatrix4");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setTextureUnitSettings_CallBack_void_ev_size_t_CTextureUnitState(ulong texUnit, IntPtr tl);

				protected _setTextureUnitSettings_CallBack_void_ev_size_t_CTextureUnitState m__setTextureUnitSettings_CallBack_void_ev_size_t_CTextureUnitState;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureUnitSettings_void_ev_size_t_CTextureUnitState_NoVirtual(IntPtr pNativeObject, ulong texUnit, IntPtr tl);

				/// <summary>
				/// 一次性设置纹理单元的特性
				/// </summary>
				/// <param name="texUnit"></param>
				/// <param name="tl"></param>
				/// <returns></returns>
				public virtual void _setTextureUnitSettings_NoVirtual(ulong texUnit, ref EarthView.World.Graphic.TextureUnitState tl)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureUnitSettings_void_ev_size_t_CTextureUnitState_NoVirtual(this.NativeObject, texUnit, object.Equals(tl, null) ? IntPtr.Zero : tl.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setTextureUnitSettings_void_ev_size_t_CTextureUnitState_Function(ulong texUnit, IntPtr tl)
				{
					EarthView.World.Graphic.TextureUnitState csobj_tl = new EarthView.World.Graphic.TextureUnitState(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_tl.BindNativeObject(tl,"CTextureUnitState");
					csobj_tl.Delegate = true;
					IClassFactory csobj_tlClassFactory = GlobalClassFactoryMap.Get(csobj_tl.GetCppInstanceTypeName());
					if (csobj_tlClassFactory != null)
					{
						csobj_tl.Delegate = true;
						csobj_tl = csobj_tlClassFactory.Create() as EarthView.World.Graphic.TextureUnitState;
						csobj_tl.BindNativeObject(tl, "CTextureUnitState");
						csobj_tl.Delegate = true;
					}
					
					_setTextureUnitSettings(texUnit, ref csobj_tl);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureUnitSettings_void_ev_size_t_CTextureUnitState(IntPtr pNativeObject, ulong texUnit, IntPtr tl);

				/// <summary>
				/// 一次性设置纹理单元的特性
				/// </summary>
				/// <param name="texUnit"></param>
				/// <param name="tl"></param>
				/// <returns></returns>
				public virtual void _setTextureUnitSettings(ulong texUnit, ref EarthView.World.Graphic.TextureUnitState tl)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureUnitSettings_void_ev_size_t_CTextureUnitState(this.NativeObject, texUnit, object.Equals(tl, null) ? IntPtr.Zero : tl.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _disableTextureUnit_CallBack_void_ev_size_t(ulong texUnit);

				protected _disableTextureUnit_CallBack_void_ev_size_t m__disableTextureUnit_CallBack_void_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__disableTextureUnit_void_ev_size_t_NoVirtual(IntPtr pNativeObject, ulong texUnit);

				/// <summary>
				/// 使纹理单元失效
				/// </summary>
				/// <param name="texUnit"></param>
				/// <returns></returns>
				public virtual void _disableTextureUnit_NoVirtual(ulong texUnit)
				{
					EarthView_World_Graphic_CRenderSystem__disableTextureUnit_void_ev_size_t_NoVirtual(this.NativeObject, texUnit);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__disableTextureUnit_void_ev_size_t_Function(ulong texUnit)
				{
					_disableTextureUnit(texUnit);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__disableTextureUnit_void_ev_size_t(IntPtr pNativeObject, ulong texUnit);

				/// <summary>
				/// 使纹理单元失效
				/// </summary>
				/// <param name="texUnit"></param>
				/// <returns></returns>
				public virtual void _disableTextureUnit(ulong texUnit)
				{
					EarthView_World_Graphic_CRenderSystem__disableTextureUnit_void_ev_size_t(this.NativeObject, texUnit);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _disableTextureUnitsFrom_CallBack_void_ev_size_t(ulong texUnit);

				protected _disableTextureUnitsFrom_CallBack_void_ev_size_t m__disableTextureUnitsFrom_CallBack_void_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__disableTextureUnitsFrom_void_ev_size_t_NoVirtual(IntPtr pNativeObject, ulong texUnit);

				/// <summary>
				/// 使从指定序号开始的所有纹理单元失效
				/// </summary>
				/// <param name="texUnit"></param>
				/// <returns></returns>
				public virtual void _disableTextureUnitsFrom_NoVirtual(ulong texUnit)
				{
					EarthView_World_Graphic_CRenderSystem__disableTextureUnitsFrom_void_ev_size_t_NoVirtual(this.NativeObject, texUnit);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__disableTextureUnitsFrom_void_ev_size_t_Function(ulong texUnit)
				{
					_disableTextureUnitsFrom(texUnit);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__disableTextureUnitsFrom_void_ev_size_t(IntPtr pNativeObject, ulong texUnit);

				/// <summary>
				/// 使从指定序号开始的所有纹理单元失效
				/// </summary>
				/// <param name="texUnit"></param>
				/// <returns></returns>
				public virtual void _disableTextureUnitsFrom(ulong texUnit)
				{
					EarthView_World_Graphic_CRenderSystem__disableTextureUnitsFrom_void_ev_size_t(this.NativeObject, texUnit);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSurfaceParams_CallBack_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_ev_int32(IntPtr ambient, IntPtr diffuse, IntPtr specular, IntPtr emissive, double shininess, int tracking);

				protected _setSurfaceParams_CallBack_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_ev_int32 m__setSurfaceParams_CallBack_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_ev_int32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setSurfaceParams_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_ev_int32_NoVirtual(IntPtr pNativeObject, IntPtr ambient, IntPtr diffuse, IntPtr specular, IntPtr emissive, double shininess, int tracking);

				/// <summary>
				/// 设置物体表面的参数
				/// </summary>
				/// <param name="ambient">环境光的反射系数</param>
				/// <param name="diffuse">漫射光的反射系数</param>
				/// <param name="specular">镜面光的反射系数</param>
				/// <param name="emissive">自发光的反射系数</param>
				/// <param name="shininess">镜面反射光的亮度值</param>
				/// <param name="tracking">顶点颜色跟踪类型</param>
				/// <returns></returns>
				public virtual void _setSurfaceParams_NoVirtual(EarthView.World.Graphic.ColourValue ambient, EarthView.World.Graphic.ColourValue diffuse, EarthView.World.Graphic.ColourValue specular, EarthView.World.Graphic.ColourValue emissive, double shininess, int tracking)
				{
					EarthView_World_Graphic_CRenderSystem__setSurfaceParams_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_ev_int32_NoVirtual(this.NativeObject, object.Equals(ambient, null) ? IntPtr.Zero : ambient.NativeObject, object.Equals(diffuse, null) ? IntPtr.Zero : diffuse.NativeObject, object.Equals(specular, null) ? IntPtr.Zero : specular.NativeObject, object.Equals(emissive, null) ? IntPtr.Zero : emissive.NativeObject, shininess, tracking);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setSurfaceParams_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_ev_int32_Function(IntPtr ambient, IntPtr diffuse, IntPtr specular, IntPtr emissive, double shininess, int tracking)
				{
					EarthView.World.Graphic.ColourValue csobj_ambient = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_ambient.BindNativeObject(ambient,"CColourValue");
					csobj_ambient.Delegate = true;
					IClassFactory csobj_ambientClassFactory = GlobalClassFactoryMap.Get(csobj_ambient.GetCppInstanceTypeName());
					if (csobj_ambientClassFactory != null)
					{
						csobj_ambient.Delegate = true;
						csobj_ambient = csobj_ambientClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_ambient.BindNativeObject(ambient, "CColourValue");
						csobj_ambient.Delegate = true;
					}
					EarthView.World.Graphic.ColourValue csobj_diffuse = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_diffuse.BindNativeObject(diffuse,"CColourValue");
					csobj_diffuse.Delegate = true;
					IClassFactory csobj_diffuseClassFactory = GlobalClassFactoryMap.Get(csobj_diffuse.GetCppInstanceTypeName());
					if (csobj_diffuseClassFactory != null)
					{
						csobj_diffuse.Delegate = true;
						csobj_diffuse = csobj_diffuseClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_diffuse.BindNativeObject(diffuse, "CColourValue");
						csobj_diffuse.Delegate = true;
					}
					EarthView.World.Graphic.ColourValue csobj_specular = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_specular.BindNativeObject(specular,"CColourValue");
					csobj_specular.Delegate = true;
					IClassFactory csobj_specularClassFactory = GlobalClassFactoryMap.Get(csobj_specular.GetCppInstanceTypeName());
					if (csobj_specularClassFactory != null)
					{
						csobj_specular.Delegate = true;
						csobj_specular = csobj_specularClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_specular.BindNativeObject(specular, "CColourValue");
						csobj_specular.Delegate = true;
					}
					EarthView.World.Graphic.ColourValue csobj_emissive = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_emissive.BindNativeObject(emissive,"CColourValue");
					csobj_emissive.Delegate = true;
					IClassFactory csobj_emissiveClassFactory = GlobalClassFactoryMap.Get(csobj_emissive.GetCppInstanceTypeName());
					if (csobj_emissiveClassFactory != null)
					{
						csobj_emissive.Delegate = true;
						csobj_emissive = csobj_emissiveClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_emissive.BindNativeObject(emissive, "CColourValue");
						csobj_emissive.Delegate = true;
					}
					
					_setSurfaceParams(csobj_ambient, csobj_diffuse, csobj_specular, csobj_emissive, shininess, tracking);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setSurfaceParams_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_ev_int32(IntPtr pNativeObject, IntPtr ambient, IntPtr diffuse, IntPtr specular, IntPtr emissive, double shininess, int tracking);

				/// <summary>
				/// 设置物体表面的参数
				/// </summary>
				/// <param name="ambient">环境光的反射系数</param>
				/// <param name="diffuse">漫射光的反射系数</param>
				/// <param name="specular">镜面光的反射系数</param>
				/// <param name="emissive">自发光的反射系数</param>
				/// <param name="shininess">镜面反射光的亮度值</param>
				/// <param name="tracking">顶点颜色跟踪类型</param>
				/// <returns></returns>
				public virtual void _setSurfaceParams(EarthView.World.Graphic.ColourValue ambient, EarthView.World.Graphic.ColourValue diffuse, EarthView.World.Graphic.ColourValue specular, EarthView.World.Graphic.ColourValue emissive, double shininess, int tracking)
				{
					EarthView_World_Graphic_CRenderSystem__setSurfaceParams_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_ev_int32(this.NativeObject, object.Equals(ambient, null) ? IntPtr.Zero : ambient.NativeObject, object.Equals(diffuse, null) ? IntPtr.Zero : diffuse.NativeObject, object.Equals(specular, null) ? IntPtr.Zero : specular.NativeObject, object.Equals(emissive, null) ? IntPtr.Zero : emissive.NativeObject, shininess, tracking);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSurfaceParams_CallBack_void_CColourValue_CColourValue_CColourValue_CColourValue_Real(IntPtr ambient, IntPtr diffuse, IntPtr specular, IntPtr emissive, double shininess);

				protected _setSurfaceParams_CallBack_void_CColourValue_CColourValue_CColourValue_CColourValue_Real m__setSurfaceParams_CallBack_void_CColourValue_CColourValue_CColourValue_CColourValue_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setSurfaceParams_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_NoVirtual(IntPtr pNativeObject, IntPtr ambient, IntPtr diffuse, IntPtr specular, IntPtr emissive, double shininess);

				public virtual void _setSurfaceParams_NoVirtual(EarthView.World.Graphic.ColourValue ambient, EarthView.World.Graphic.ColourValue diffuse, EarthView.World.Graphic.ColourValue specular, EarthView.World.Graphic.ColourValue emissive, double shininess)
				{
					EarthView_World_Graphic_CRenderSystem__setSurfaceParams_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_NoVirtual(this.NativeObject, object.Equals(ambient, null) ? IntPtr.Zero : ambient.NativeObject, object.Equals(diffuse, null) ? IntPtr.Zero : diffuse.NativeObject, object.Equals(specular, null) ? IntPtr.Zero : specular.NativeObject, object.Equals(emissive, null) ? IntPtr.Zero : emissive.NativeObject, shininess);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setSurfaceParams_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_Function(IntPtr ambient, IntPtr diffuse, IntPtr specular, IntPtr emissive, double shininess)
				{
					EarthView.World.Graphic.ColourValue csobj_ambient = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_ambient.BindNativeObject(ambient,"CColourValue");
					csobj_ambient.Delegate = true;
					IClassFactory csobj_ambientClassFactory = GlobalClassFactoryMap.Get(csobj_ambient.GetCppInstanceTypeName());
					if (csobj_ambientClassFactory != null)
					{
						csobj_ambient.Delegate = true;
						csobj_ambient = csobj_ambientClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_ambient.BindNativeObject(ambient, "CColourValue");
						csobj_ambient.Delegate = true;
					}
					EarthView.World.Graphic.ColourValue csobj_diffuse = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_diffuse.BindNativeObject(diffuse,"CColourValue");
					csobj_diffuse.Delegate = true;
					IClassFactory csobj_diffuseClassFactory = GlobalClassFactoryMap.Get(csobj_diffuse.GetCppInstanceTypeName());
					if (csobj_diffuseClassFactory != null)
					{
						csobj_diffuse.Delegate = true;
						csobj_diffuse = csobj_diffuseClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_diffuse.BindNativeObject(diffuse, "CColourValue");
						csobj_diffuse.Delegate = true;
					}
					EarthView.World.Graphic.ColourValue csobj_specular = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_specular.BindNativeObject(specular,"CColourValue");
					csobj_specular.Delegate = true;
					IClassFactory csobj_specularClassFactory = GlobalClassFactoryMap.Get(csobj_specular.GetCppInstanceTypeName());
					if (csobj_specularClassFactory != null)
					{
						csobj_specular.Delegate = true;
						csobj_specular = csobj_specularClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_specular.BindNativeObject(specular, "CColourValue");
						csobj_specular.Delegate = true;
					}
					EarthView.World.Graphic.ColourValue csobj_emissive = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_emissive.BindNativeObject(emissive,"CColourValue");
					csobj_emissive.Delegate = true;
					IClassFactory csobj_emissiveClassFactory = GlobalClassFactoryMap.Get(csobj_emissive.GetCppInstanceTypeName());
					if (csobj_emissiveClassFactory != null)
					{
						csobj_emissive.Delegate = true;
						csobj_emissive = csobj_emissiveClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_emissive.BindNativeObject(emissive, "CColourValue");
						csobj_emissive.Delegate = true;
					}
					
					_setSurfaceParams(csobj_ambient, csobj_diffuse, csobj_specular, csobj_emissive, shininess);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setSurfaceParams_void_CColourValue_CColourValue_CColourValue_CColourValue_Real(IntPtr pNativeObject, IntPtr ambient, IntPtr diffuse, IntPtr specular, IntPtr emissive, double shininess);

				public virtual void _setSurfaceParams(EarthView.World.Graphic.ColourValue ambient, EarthView.World.Graphic.ColourValue diffuse, EarthView.World.Graphic.ColourValue specular, EarthView.World.Graphic.ColourValue emissive, double shininess)
				{
					EarthView_World_Graphic_CRenderSystem__setSurfaceParams_void_CColourValue_CColourValue_CColourValue_CColourValue_Real(this.NativeObject, object.Equals(ambient, null) ? IntPtr.Zero : ambient.NativeObject, object.Equals(diffuse, null) ? IntPtr.Zero : diffuse.NativeObject, object.Equals(specular, null) ? IntPtr.Zero : specular.NativeObject, object.Equals(emissive, null) ? IntPtr.Zero : emissive.NativeObject, shininess);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setPointSpritesEnabled_CallBack_void_ev_bool(bool enabled);

				protected _setPointSpritesEnabled_CallBack_void_ev_bool m__setPointSpritesEnabled_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setPointSpritesEnabled_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte enabled);

				/// <summary>
				/// 设置是否启用点精灵
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _setPointSpritesEnabled_NoVirtual(bool enabled)
				{
					EarthView_World_Graphic_CRenderSystem__setPointSpritesEnabled_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(enabled));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setPointSpritesEnabled_void_ev_bool_Function(bool enabled)
				{
					_setPointSpritesEnabled(enabled);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setPointSpritesEnabled_void_ev_bool(IntPtr pNativeObject, byte enabled);

				/// <summary>
				/// 设置是否启用点精灵
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _setPointSpritesEnabled(bool enabled)
				{
					EarthView_World_Graphic_CRenderSystem__setPointSpritesEnabled_void_ev_bool(this.NativeObject, Convert.ToByte(enabled));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setPointParameters_CallBack_void_Real_ev_bool_Real_Real_Real_Real_Real(double size, bool attenuationEnabled, double constant, double linear, double quadratic, double minSize, double maxSize);

				protected _setPointParameters_CallBack_void_Real_ev_bool_Real_Real_Real_Real_Real m__setPointParameters_CallBack_void_Real_ev_bool_Real_Real_Real_Real_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setPointParameters_void_Real_ev_bool_Real_Real_Real_Real_Real_NoVirtual(IntPtr pNativeObject, double size, byte attenuationEnabled, double constant, double linear, double quadratic, double minSize, double maxSize);

				/// <summary>
				/// 设置点精灵参数
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _setPointParameters_NoVirtual(double size, bool attenuationEnabled, double constant, double linear, double quadratic, double minSize, double maxSize)
				{
					EarthView_World_Graphic_CRenderSystem__setPointParameters_void_Real_ev_bool_Real_Real_Real_Real_Real_NoVirtual(this.NativeObject, size, Convert.ToByte(attenuationEnabled), constant, linear, quadratic, minSize, maxSize);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setPointParameters_void_Real_ev_bool_Real_Real_Real_Real_Real_Function(double size, bool attenuationEnabled, double constant, double linear, double quadratic, double minSize, double maxSize)
				{
					_setPointParameters(size, attenuationEnabled, constant, linear, quadratic, minSize, maxSize);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setPointParameters_void_Real_ev_bool_Real_Real_Real_Real_Real(IntPtr pNativeObject, double size, byte attenuationEnabled, double constant, double linear, double quadratic, double minSize, double maxSize);

				/// <summary>
				/// 设置点精灵参数
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _setPointParameters(double size, bool attenuationEnabled, double constant, double linear, double quadratic, double minSize, double maxSize)
				{
					EarthView_World_Graphic_CRenderSystem__setPointParameters_void_Real_ev_bool_Real_Real_Real_Real_Real(this.NativeObject, size, Convert.ToByte(attenuationEnabled), constant, linear, quadratic, minSize, maxSize);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setTexture_CallBack_void_ev_size_t_ev_bool_CTexturePtr(ulong unit, bool enabled, IntPtr texPtr);

				protected _setTexture_CallBack_void_ev_size_t_ev_bool_CTexturePtr m__setTexture_CallBack_void_ev_size_t_ev_bool_CTexturePtr;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTexture_void_ev_size_t_ev_bool_CTexturePtr_NoVirtual(IntPtr pNativeObject, ulong unit, byte enabled, IntPtr texPtr);

				/// <summary>
				/// 设置纹理
				/// </summary>
				/// <param name="unit">纹理单元的索引</param>
				/// <param name="enabled"></param>
				/// <param name="texPtr"></param>
				/// <returns></returns>
				public virtual void _setTexture_NoVirtual(ulong unit, bool enabled, EarthView.World.Graphic.TexturePtr texPtr)
				{
					EarthView_World_Graphic_CRenderSystem__setTexture_void_ev_size_t_ev_bool_CTexturePtr_NoVirtual(this.NativeObject, unit, Convert.ToByte(enabled), object.Equals(texPtr, null) ? IntPtr.Zero : texPtr.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setTexture_void_ev_size_t_ev_bool_CTexturePtr_Function(ulong unit, bool enabled, IntPtr texPtr)
				{
					EarthView.World.Graphic.TexturePtr csobj_texPtr = new EarthView.World.Graphic.TexturePtr(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_texPtr.BindNativeObject(texPtr,"CTexturePtr");
					csobj_texPtr.Delegate = true;
					IClassFactory csobj_texPtrClassFactory = GlobalClassFactoryMap.Get(csobj_texPtr.GetCppInstanceTypeName());
					if (csobj_texPtrClassFactory != null)
					{
						csobj_texPtr.Delegate = true;
						csobj_texPtr = csobj_texPtrClassFactory.Create() as EarthView.World.Graphic.TexturePtr;
						csobj_texPtr.BindNativeObject(texPtr, "CTexturePtr");
						csobj_texPtr.Delegate = true;
					}
					
					_setTexture(unit, enabled, csobj_texPtr);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTexture_void_ev_size_t_ev_bool_CTexturePtr(IntPtr pNativeObject, ulong unit, byte enabled, IntPtr texPtr);

				/// <summary>
				/// 设置纹理
				/// </summary>
				/// <param name="unit">纹理单元的索引</param>
				/// <param name="enabled"></param>
				/// <param name="texPtr"></param>
				/// <returns></returns>
				public virtual void _setTexture(ulong unit, bool enabled, EarthView.World.Graphic.TexturePtr texPtr)
				{
					EarthView_World_Graphic_CRenderSystem__setTexture_void_ev_size_t_ev_bool_CTexturePtr(this.NativeObject, unit, Convert.ToByte(enabled), object.Equals(texPtr, null) ? IntPtr.Zero : texPtr.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setTexture_CallBack_void_ev_size_t_ev_bool_EVString(ulong unit, bool enabled, ref IntPtr texname);

				protected _setTexture_CallBack_void_ev_size_t_ev_bool_EVString m__setTexture_CallBack_void_ev_size_t_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTexture_void_ev_size_t_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, ulong unit, byte enabled, string texname);

				/// <summary>
				/// 设置纹理
				/// </summary>
				/// <param name="unit">将要修改的纹理单元的索引</param>
				/// <param name="enabled"></param>
				/// <param name="texname">纹理的名字</param>
				/// <returns></returns>
				public virtual void _setTexture_NoVirtual(ulong unit, bool enabled, string texname)
				{
					EarthView_World_Graphic_CRenderSystem__setTexture_void_ev_size_t_ev_bool_EVString_NoVirtual(this.NativeObject, unit, Convert.ToByte(enabled), texname);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setTexture_void_ev_size_t_ev_bool_EVString_Function(ulong unit, bool enabled, ref IntPtr texname)
				{
					string strtexname= Marshal.PtrToStringAnsi(texname);
					ClassFactory.FreeString(ref texname);
					
					_setTexture(unit, enabled, strtexname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTexture_void_ev_size_t_ev_bool_EVString(IntPtr pNativeObject, ulong unit, byte enabled, string texname);

				/// <summary>
				/// 设置纹理
				/// </summary>
				/// <param name="unit">将要修改的纹理单元的索引</param>
				/// <param name="enabled"></param>
				/// <param name="texname">纹理的名字</param>
				/// <returns></returns>
				public virtual void _setTexture(ulong unit, bool enabled, string texname)
				{
					EarthView_World_Graphic_CRenderSystem__setTexture_void_ev_size_t_ev_bool_EVString(this.NativeObject, unit, Convert.ToByte(enabled), texname);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setVertexTexture_CallBack_void_ev_size_t_CTexturePtr(ulong unit, IntPtr tex);

				protected _setVertexTexture_CallBack_void_ev_size_t_CTexturePtr m__setVertexTexture_CallBack_void_ev_size_t_CTexturePtr;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setVertexTexture_void_ev_size_t_CTexturePtr_NoVirtual(IntPtr pNativeObject, ulong unit, IntPtr tex);

				/// <summary>
				/// 绑定纹理到顶点
				/// </summary>
				/// <param name="unit"></param>
				/// <param name="tex"></param>
				/// <returns></returns>
				public virtual void _setVertexTexture_NoVirtual(ulong unit, EarthView.World.Graphic.TexturePtr tex)
				{
					EarthView_World_Graphic_CRenderSystem__setVertexTexture_void_ev_size_t_CTexturePtr_NoVirtual(this.NativeObject, unit, object.Equals(tex, null) ? IntPtr.Zero : tex.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setVertexTexture_void_ev_size_t_CTexturePtr_Function(ulong unit, IntPtr tex)
				{
					EarthView.World.Graphic.TexturePtr csobj_tex = new EarthView.World.Graphic.TexturePtr(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_tex.BindNativeObject(tex,"CTexturePtr");
					csobj_tex.Delegate = true;
					IClassFactory csobj_texClassFactory = GlobalClassFactoryMap.Get(csobj_tex.GetCppInstanceTypeName());
					if (csobj_texClassFactory != null)
					{
						csobj_tex.Delegate = true;
						csobj_tex = csobj_texClassFactory.Create() as EarthView.World.Graphic.TexturePtr;
						csobj_tex.BindNativeObject(tex, "CTexturePtr");
						csobj_tex.Delegate = true;
					}
					
					_setVertexTexture(unit, csobj_tex);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setVertexTexture_void_ev_size_t_CTexturePtr(IntPtr pNativeObject, ulong unit, IntPtr tex);

				/// <summary>
				/// 绑定纹理到顶点
				/// </summary>
				/// <param name="unit"></param>
				/// <param name="tex"></param>
				/// <returns></returns>
				public virtual void _setVertexTexture(ulong unit, EarthView.World.Graphic.TexturePtr tex)
				{
					EarthView_World_Graphic_CRenderSystem__setVertexTexture_void_ev_size_t_CTexturePtr(this.NativeObject, unit, object.Equals(tex, null) ? IntPtr.Zero : tex.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setTextureCoordSet_CallBack_void_ev_size_t_ev_size_t(ulong unit, ulong index);

				protected _setTextureCoordSet_CallBack_void_ev_size_t_ev_size_t m__setTextureCoordSet_CallBack_void_ev_size_t_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureCoordSet_void_ev_size_t_ev_size_t_NoVirtual(IntPtr pNativeObject, ulong unit, ulong index);

				/// <summary>
				/// 设置纹理坐标索引
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="index">纹理坐标的索引</param>
				/// <returns></returns>
				public virtual void _setTextureCoordSet_NoVirtual(ulong unit, ulong index)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureCoordSet_void_ev_size_t_ev_size_t_NoVirtual(this.NativeObject, unit, index);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setTextureCoordSet_void_ev_size_t_ev_size_t_Function(ulong unit, ulong index)
				{
					_setTextureCoordSet(unit, index);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureCoordSet_void_ev_size_t_ev_size_t(IntPtr pNativeObject, ulong unit, ulong index);

				/// <summary>
				/// 设置纹理坐标索引
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="index">纹理坐标的索引</param>
				/// <returns></returns>
				public virtual void _setTextureCoordSet(ulong unit, ulong index)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureCoordSet_void_ev_size_t_ev_size_t(this.NativeObject, unit, index);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setTextureCoordCalculation_CallBack_void_ev_size_t_TexCoordCalcMethod_CFrustum(ulong unit, TEXCOORDCALCMETHOD m, IntPtr ref_frustum);

				protected _setTextureCoordCalculation_CallBack_void_ev_size_t_TexCoordCalcMethod_CFrustum m__setTextureCoordCalculation_CallBack_void_ev_size_t_TexCoordCalcMethod_CFrustum;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureCoordCalculation_void_ev_size_t_TexCoordCalcMethod_CFrustum_NoVirtual(IntPtr pNativeObject, ulong unit, TEXCOORDCALCMETHOD m, IntPtr ref_frustum);

				/// <summary>
				/// 设置一种自动计算纹理坐标的方法
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="m">计算方法</param>
				/// <param name="frustum">平截头体选项</param>
				/// <returns></returns>
				public virtual void _setTextureCoordCalculation_NoVirtual(ulong unit, TEXCOORDCALCMETHOD m, EarthView.World.Graphic.Frustum ref_frustum)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureCoordCalculation_void_ev_size_t_TexCoordCalcMethod_CFrustum_NoVirtual(this.NativeObject, unit, m, object.Equals(ref_frustum, null) ? IntPtr.Zero : ref_frustum.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setTextureCoordCalculation_void_ev_size_t_TexCoordCalcMethod_CFrustum_Function(ulong unit, TEXCOORDCALCMETHOD m, IntPtr ref_frustum)
				{
					EarthView.World.Graphic.Frustum csobj_ref_frustum = new EarthView.World.Graphic.Frustum(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_ref_frustum.BindNativeObject(ref_frustum,"CFrustum");
					csobj_ref_frustum.Delegate = true;
					IClassFactory csobj_ref_frustumClassFactory = GlobalClassFactoryMap.Get(csobj_ref_frustum.GetCppInstanceTypeName());
					if (csobj_ref_frustumClassFactory != null)
					{
						csobj_ref_frustum.Delegate = true;
						csobj_ref_frustum = csobj_ref_frustumClassFactory.Create() as EarthView.World.Graphic.Frustum;
						csobj_ref_frustum.BindNativeObject(ref_frustum, "CFrustum");
						csobj_ref_frustum.Delegate = true;
					}
					
					_setTextureCoordCalculation(unit, m, csobj_ref_frustum);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureCoordCalculation_void_ev_size_t_TexCoordCalcMethod_CFrustum(IntPtr pNativeObject, ulong unit, TEXCOORDCALCMETHOD m, IntPtr ref_frustum);

				/// <summary>
				/// 设置一种自动计算纹理坐标的方法
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="m">计算方法</param>
				/// <param name="frustum">平截头体选项</param>
				/// <returns></returns>
				public virtual void _setTextureCoordCalculation(ulong unit, TEXCOORDCALCMETHOD m, EarthView.World.Graphic.Frustum ref_frustum)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureCoordCalculation_void_ev_size_t_TexCoordCalcMethod_CFrustum(this.NativeObject, unit, m, object.Equals(ref_frustum, null) ? IntPtr.Zero : ref_frustum.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setTextureCoordCalculation_CallBack_void_ev_size_t_TexCoordCalcMethod(ulong unit, TEXCOORDCALCMETHOD m);

				protected _setTextureCoordCalculation_CallBack_void_ev_size_t_TexCoordCalcMethod m__setTextureCoordCalculation_CallBack_void_ev_size_t_TexCoordCalcMethod;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureCoordCalculation_void_ev_size_t_TexCoordCalcMethod_NoVirtual(IntPtr pNativeObject, ulong unit, TEXCOORDCALCMETHOD m);

				/// <summary>
				/// 设置一种自动计算纹理坐标的方法
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="m">计算方法</param>
				/// <param name="frustum">平截头体选项</param>
				/// <returns></returns>
				public virtual void _setTextureCoordCalculation_NoVirtual(ulong unit, TEXCOORDCALCMETHOD m)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureCoordCalculation_void_ev_size_t_TexCoordCalcMethod_NoVirtual(this.NativeObject, unit, m);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setTextureCoordCalculation_void_ev_size_t_TexCoordCalcMethod_Function(ulong unit, TEXCOORDCALCMETHOD m)
				{
					_setTextureCoordCalculation(unit, m);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureCoordCalculation_void_ev_size_t_TexCoordCalcMethod(IntPtr pNativeObject, ulong unit, TEXCOORDCALCMETHOD m);

				/// <summary>
				/// 设置一种自动计算纹理坐标的方法
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="m">计算方法</param>
				/// <param name="frustum">平截头体选项</param>
				/// <returns></returns>
				public virtual void _setTextureCoordCalculation(ulong unit, TEXCOORDCALCMETHOD m)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureCoordCalculation_void_ev_size_t_TexCoordCalcMethod(this.NativeObject, unit, m);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setTextureBlendMode_CallBack_void_ev_size_t_CLayerBlendModeEx(ulong unit, IntPtr bm);

				protected _setTextureBlendMode_CallBack_void_ev_size_t_CLayerBlendModeEx m__setTextureBlendMode_CallBack_void_ev_size_t_CLayerBlendModeEx;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureBlendMode_void_ev_size_t_CLayerBlendModeEx_NoVirtual(IntPtr pNativeObject, ulong unit, IntPtr bm);

				/// <summary>
				/// 设置纹理混合方式
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="bm">混合模型的细节</param>
				/// <returns></returns>
				public virtual void _setTextureBlendMode_NoVirtual(ulong unit, EarthView.World.Graphic.LayerBlendModeEx bm)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureBlendMode_void_ev_size_t_CLayerBlendModeEx_NoVirtual(this.NativeObject, unit, object.Equals(bm, null) ? IntPtr.Zero : bm.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setTextureBlendMode_void_ev_size_t_CLayerBlendModeEx_Function(ulong unit, IntPtr bm)
				{
					EarthView.World.Graphic.LayerBlendModeEx csobj_bm = new EarthView.World.Graphic.LayerBlendModeEx(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_bm.BindNativeObject(bm,"CLayerBlendModeEx");
					csobj_bm.Delegate = true;
					IClassFactory csobj_bmClassFactory = GlobalClassFactoryMap.Get(csobj_bm.GetCppInstanceTypeName());
					if (csobj_bmClassFactory != null)
					{
						csobj_bm.Delegate = true;
						csobj_bm = csobj_bmClassFactory.Create() as EarthView.World.Graphic.LayerBlendModeEx;
						csobj_bm.BindNativeObject(bm, "CLayerBlendModeEx");
						csobj_bm.Delegate = true;
					}
					
					_setTextureBlendMode(unit, csobj_bm);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureBlendMode_void_ev_size_t_CLayerBlendModeEx(IntPtr pNativeObject, ulong unit, IntPtr bm);

				/// <summary>
				/// 设置纹理混合方式
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="bm">混合模型的细节</param>
				/// <returns></returns>
				public virtual void _setTextureBlendMode(ulong unit, EarthView.World.Graphic.LayerBlendModeEx bm)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureBlendMode_void_ev_size_t_CLayerBlendModeEx(this.NativeObject, unit, object.Equals(bm, null) ? IntPtr.Zero : bm.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setTextureUnitFiltering_CallBack_void_ev_size_t_FilterOptions_FilterOptions_FilterOptions(ulong unit, EarthView.World.Graphic.FILTEROPTIONS minFilter, EarthView.World.Graphic.FILTEROPTIONS magFilter, EarthView.World.Graphic.FILTEROPTIONS mipFilter);

				protected _setTextureUnitFiltering_CallBack_void_ev_size_t_FilterOptions_FilterOptions_FilterOptions m__setTextureUnitFiltering_CallBack_void_ev_size_t_FilterOptions_FilterOptions_FilterOptions;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureUnitFiltering_void_ev_size_t_FilterOptions_FilterOptions_FilterOptions_NoVirtual(IntPtr pNativeObject, ulong unit, EarthView.World.Graphic.FILTEROPTIONS minFilter, EarthView.World.Graphic.FILTEROPTIONS magFilter, EarthView.World.Graphic.FILTEROPTIONS mipFilter);

				/// <summary>
				/// 设置纹理过滤方式
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="minFilter"></param>
				/// <param name="magFilter"></param>
				/// <param name="mipFilter"></param>
				/// <returns></returns>
				public virtual void _setTextureUnitFiltering_NoVirtual(ulong unit, EarthView.World.Graphic.FILTEROPTIONS minFilter, EarthView.World.Graphic.FILTEROPTIONS magFilter, EarthView.World.Graphic.FILTEROPTIONS mipFilter)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureUnitFiltering_void_ev_size_t_FilterOptions_FilterOptions_FilterOptions_NoVirtual(this.NativeObject, unit, minFilter, magFilter, mipFilter);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setTextureUnitFiltering_void_ev_size_t_FilterOptions_FilterOptions_FilterOptions_Function(ulong unit, EarthView.World.Graphic.FILTEROPTIONS minFilter, EarthView.World.Graphic.FILTEROPTIONS magFilter, EarthView.World.Graphic.FILTEROPTIONS mipFilter)
				{
					_setTextureUnitFiltering(unit, minFilter, magFilter, mipFilter);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureUnitFiltering_void_ev_size_t_FilterOptions_FilterOptions_FilterOptions(IntPtr pNativeObject, ulong unit, EarthView.World.Graphic.FILTEROPTIONS minFilter, EarthView.World.Graphic.FILTEROPTIONS magFilter, EarthView.World.Graphic.FILTEROPTIONS mipFilter);

				/// <summary>
				/// 设置纹理过滤方式
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="minFilter"></param>
				/// <param name="magFilter"></param>
				/// <param name="mipFilter"></param>
				/// <returns></returns>
				public virtual void _setTextureUnitFiltering(ulong unit, EarthView.World.Graphic.FILTEROPTIONS minFilter, EarthView.World.Graphic.FILTEROPTIONS magFilter, EarthView.World.Graphic.FILTEROPTIONS mipFilter)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureUnitFiltering_void_ev_size_t_FilterOptions_FilterOptions_FilterOptions(this.NativeObject, unit, minFilter, magFilter, mipFilter);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setTextureUnitFiltering_CallBack_void_ev_size_t_FilterType_FilterOptions(ulong unit, EarthView.World.Graphic.FILTERTYPE ftype, EarthView.World.Graphic.FILTEROPTIONS filter);

				protected _setTextureUnitFiltering_CallBack_void_ev_size_t_FilterType_FilterOptions m__setTextureUnitFiltering_CallBack_void_ev_size_t_FilterType_FilterOptions;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureUnitFiltering_void_ev_size_t_FilterType_FilterOptions_NoVirtual(IntPtr pNativeObject, ulong unit, EarthView.World.Graphic.FILTERTYPE ftype, EarthView.World.Graphic.FILTEROPTIONS filter);

				/// <summary>
				/// 设置纹理过滤方式
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="ftype">过滤器的类型</param>
				/// <param name="filter">使用的过滤器</param>
				/// <returns></returns>
				public virtual void _setTextureUnitFiltering_NoVirtual(ulong unit, EarthView.World.Graphic.FILTERTYPE ftype, EarthView.World.Graphic.FILTEROPTIONS filter)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureUnitFiltering_void_ev_size_t_FilterType_FilterOptions_NoVirtual(this.NativeObject, unit, ftype, filter);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setTextureUnitFiltering_void_ev_size_t_FilterType_FilterOptions_Function(ulong unit, EarthView.World.Graphic.FILTERTYPE ftype, EarthView.World.Graphic.FILTEROPTIONS filter)
				{
					_setTextureUnitFiltering(unit, ftype, filter);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureUnitFiltering_void_ev_size_t_FilterType_FilterOptions(IntPtr pNativeObject, ulong unit, EarthView.World.Graphic.FILTERTYPE ftype, EarthView.World.Graphic.FILTEROPTIONS filter);

				/// <summary>
				/// 设置纹理过滤方式
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="ftype">过滤器的类型</param>
				/// <param name="filter">使用的过滤器</param>
				/// <returns></returns>
				public virtual void _setTextureUnitFiltering(ulong unit, EarthView.World.Graphic.FILTERTYPE ftype, EarthView.World.Graphic.FILTEROPTIONS filter)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureUnitFiltering_void_ev_size_t_FilterType_FilterOptions(this.NativeObject, unit, ftype, filter);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setTextureLayerAnisotropy_CallBack_void_ev_size_t_ev_uint32(ulong unit, uint maxAnisotropy);

				protected _setTextureLayerAnisotropy_CallBack_void_ev_size_t_ev_uint32 m__setTextureLayerAnisotropy_CallBack_void_ev_size_t_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureLayerAnisotropy_void_ev_size_t_ev_uint32_NoVirtual(IntPtr pNativeObject, ulong unit, uint maxAnisotropy);

				/// <summary>
				/// 设置纹理的各向异性值
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="maxAnisotropy"></param>
				/// <returns></returns>
				public virtual void _setTextureLayerAnisotropy_NoVirtual(ulong unit, uint maxAnisotropy)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureLayerAnisotropy_void_ev_size_t_ev_uint32_NoVirtual(this.NativeObject, unit, maxAnisotropy);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setTextureLayerAnisotropy_void_ev_size_t_ev_uint32_Function(ulong unit, uint maxAnisotropy)
				{
					_setTextureLayerAnisotropy(unit, maxAnisotropy);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureLayerAnisotropy_void_ev_size_t_ev_uint32(IntPtr pNativeObject, ulong unit, uint maxAnisotropy);

				/// <summary>
				/// 设置纹理的各向异性值
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="maxAnisotropy"></param>
				/// <returns></returns>
				public virtual void _setTextureLayerAnisotropy(ulong unit, uint maxAnisotropy)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureLayerAnisotropy_void_ev_size_t_ev_uint32(this.NativeObject, unit, maxAnisotropy);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setTextureAddressingMode_CallBack_void_ev_size_t_UVWAddressingMode(ulong unit, ref EarthView.World.Graphic.TextureUnitState.UVWADDRESSINGMODE uvw);

				protected _setTextureAddressingMode_CallBack_void_ev_size_t_UVWAddressingMode m__setTextureAddressingMode_CallBack_void_ev_size_t_UVWAddressingMode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureAddressingMode_void_ev_size_t_UVWAddressingMode_NoVirtual(IntPtr pNativeObject, ulong unit, ref EarthView.World.Graphic.TextureUnitState.UVWADDRESSINGMODE uvw);

				/// <summary>
				/// 设置纹理单元的寻址模式
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="uvw"></param>
				/// <returns></returns>
				public virtual void _setTextureAddressingMode_NoVirtual(ulong unit, ref EarthView.World.Graphic.TextureUnitState.UVWADDRESSINGMODE uvw)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureAddressingMode_void_ev_size_t_UVWAddressingMode_NoVirtual(this.NativeObject, unit, ref uvw);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setTextureAddressingMode_void_ev_size_t_UVWAddressingMode_Function(ulong unit, ref EarthView.World.Graphic.TextureUnitState.UVWADDRESSINGMODE uvw)
				{
					_setTextureAddressingMode(unit, ref uvw);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureAddressingMode_void_ev_size_t_UVWAddressingMode(IntPtr pNativeObject, ulong unit, ref EarthView.World.Graphic.TextureUnitState.UVWADDRESSINGMODE uvw);

				/// <summary>
				/// 设置纹理单元的寻址模式
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="uvw"></param>
				/// <returns></returns>
				public virtual void _setTextureAddressingMode(ulong unit, ref EarthView.World.Graphic.TextureUnitState.UVWADDRESSINGMODE uvw)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureAddressingMode_void_ev_size_t_UVWAddressingMode(this.NativeObject, unit, ref uvw);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setTextureBorderColour_CallBack_void_ev_size_t_CColourValue(ulong unit, IntPtr colour);

				protected _setTextureBorderColour_CallBack_void_ev_size_t_CColourValue m__setTextureBorderColour_CallBack_void_ev_size_t_CColourValue;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureBorderColour_void_ev_size_t_CColourValue_NoVirtual(IntPtr pNativeObject, ulong unit, IntPtr colour);

				/// <summary>
				/// 设置纹理单元的纹理边界颜色
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="colour"></param>
				/// <returns></returns>
				public virtual void _setTextureBorderColour_NoVirtual(ulong unit, EarthView.World.Graphic.ColourValue colour)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureBorderColour_void_ev_size_t_CColourValue_NoVirtual(this.NativeObject, unit, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setTextureBorderColour_void_ev_size_t_CColourValue_Function(ulong unit, IntPtr colour)
				{
					EarthView.World.Graphic.ColourValue csobj_colour = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_colour.BindNativeObject(colour,"CColourValue");
					csobj_colour.Delegate = true;
					IClassFactory csobj_colourClassFactory = GlobalClassFactoryMap.Get(csobj_colour.GetCppInstanceTypeName());
					if (csobj_colourClassFactory != null)
					{
						csobj_colour.Delegate = true;
						csobj_colour = csobj_colourClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_colour.BindNativeObject(colour, "CColourValue");
						csobj_colour.Delegate = true;
					}
					
					_setTextureBorderColour(unit, csobj_colour);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureBorderColour_void_ev_size_t_CColourValue(IntPtr pNativeObject, ulong unit, IntPtr colour);

				/// <summary>
				/// 设置纹理单元的纹理边界颜色
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="colour"></param>
				/// <returns></returns>
				public virtual void _setTextureBorderColour(ulong unit, EarthView.World.Graphic.ColourValue colour)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureBorderColour_void_ev_size_t_CColourValue(this.NativeObject, unit, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setTextureMipmapBias_CallBack_void_ev_size_t_ev_real32(ulong unit, float bias);

				protected _setTextureMipmapBias_CallBack_void_ev_size_t_ev_real32 m__setTextureMipmapBias_CallBack_void_ev_size_t_ev_real32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureMipmapBias_void_ev_size_t_ev_real32_NoVirtual(IntPtr pNativeObject, ulong unit, float bias);

				/// <summary>
				/// 设置纹理单元的mipmap偏移值
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="bias"></param>
				/// <returns></returns>
				public virtual void _setTextureMipmapBias_NoVirtual(ulong unit, float bias)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureMipmapBias_void_ev_size_t_ev_real32_NoVirtual(this.NativeObject, unit, bias);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setTextureMipmapBias_void_ev_size_t_ev_real32_Function(ulong unit, float bias)
				{
					_setTextureMipmapBias(unit, bias);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureMipmapBias_void_ev_size_t_ev_real32(IntPtr pNativeObject, ulong unit, float bias);

				/// <summary>
				/// 设置纹理单元的mipmap偏移值
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="bias"></param>
				/// <returns></returns>
				public virtual void _setTextureMipmapBias(ulong unit, float bias)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureMipmapBias_void_ev_size_t_ev_real32(this.NativeObject, unit, bias);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setTextureMatrix_CallBack_void_ev_size_t_CMatrix4(ulong unit, IntPtr xform);

				protected _setTextureMatrix_CallBack_void_ev_size_t_CMatrix4 m__setTextureMatrix_CallBack_void_ev_size_t_CMatrix4;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureMatrix_void_ev_size_t_CMatrix4_NoVirtual(IntPtr pNativeObject, ulong unit, IntPtr xform);

				/// <summary>
				/// 设置纹理坐标变换矩阵
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="xform">4*4的矩阵</param>
				/// <returns></returns>
				public virtual void _setTextureMatrix_NoVirtual(ulong unit, EarthView.World.Spatial.Math.Matrix4 xform)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureMatrix_void_ev_size_t_CMatrix4_NoVirtual(this.NativeObject, unit, object.Equals(xform, null) ? IntPtr.Zero : xform.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setTextureMatrix_void_ev_size_t_CMatrix4_Function(ulong unit, IntPtr xform)
				{
					EarthView.World.Spatial.Math.Matrix4 csobj_xform = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_xform.BindNativeObject(xform,"CMatrix4");
					csobj_xform.Delegate = true;
					IClassFactory csobj_xformClassFactory = GlobalClassFactoryMap.Get(csobj_xform.GetCppInstanceTypeName());
					if (csobj_xformClassFactory != null)
					{
						csobj_xform.Delegate = true;
						csobj_xform = csobj_xformClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_xform.BindNativeObject(xform, "CMatrix4");
						csobj_xform.Delegate = true;
					}
					
					_setTextureMatrix(unit, csobj_xform);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureMatrix_void_ev_size_t_CMatrix4(IntPtr pNativeObject, ulong unit, IntPtr xform);

				/// <summary>
				/// 设置纹理坐标变换矩阵
				/// </summary>
				/// <param name="unit">纹理单元</param>
				/// <param name="xform">4*4的矩阵</param>
				/// <returns></returns>
				public virtual void _setTextureMatrix(ulong unit, EarthView.World.Spatial.Math.Matrix4 xform)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureMatrix_void_ev_size_t_CMatrix4(this.NativeObject, unit, object.Equals(xform, null) ? IntPtr.Zero : xform.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDOPERATION op);

				protected _setSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation m__setSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDOPERATION op);

				/// <summary>
				/// 设置场景混合模式
				/// </summary>
				/// <param name="sourceFactor">源因数</param>
				/// <param name="destFactor">目标因数</param>
				/// <param name="op">联合像元的混合模型</param>
				/// <returns></returns>
				public virtual void _setSceneBlending_NoVirtual(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDOPERATION op)
				{
					EarthView_World_Graphic_CRenderSystem__setSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_NoVirtual(this.NativeObject, sourceFactor, destFactor, op);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_Function(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDOPERATION op)
				{
					_setSceneBlending(sourceFactor, destFactor, op);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation(IntPtr pNativeObject, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDOPERATION op);

				/// <summary>
				/// 设置场景混合模式
				/// </summary>
				/// <param name="sourceFactor">源因数</param>
				/// <param name="destFactor">目标因数</param>
				/// <param name="op">联合像元的混合模型</param>
				/// <returns></returns>
				public virtual void _setSceneBlending(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDOPERATION op)
				{
					EarthView_World_Graphic_CRenderSystem__setSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation(this.NativeObject, sourceFactor, destFactor, op);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor);

				protected _setSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor m__setSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setSceneBlending_void_SceneBlendFactor_SceneBlendFactor_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor);

				/// <summary>
				/// 设置场景混合模式
				/// </summary>
				/// <param name="sourceFactor">计算的源因数</param>
				/// <param name="destFactor">计算的目标因数</param>
				/// <returns></returns>
				public virtual void _setSceneBlending_NoVirtual(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor)
				{
					EarthView_World_Graphic_CRenderSystem__setSceneBlending_void_SceneBlendFactor_SceneBlendFactor_NoVirtual(this.NativeObject, sourceFactor, destFactor);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setSceneBlending_void_SceneBlendFactor_SceneBlendFactor_Function(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor)
				{
					_setSceneBlending(sourceFactor, destFactor);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setSceneBlending_void_SceneBlendFactor_SceneBlendFactor(IntPtr pNativeObject, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor);

				/// <summary>
				/// 设置场景混合模式
				/// </summary>
				/// <param name="sourceFactor">计算的源因数</param>
				/// <param name="destFactor">计算的目标因数</param>
				/// <returns></returns>
				public virtual void _setSceneBlending(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor)
				{
					EarthView_World_Graphic_CRenderSystem__setSceneBlending_void_SceneBlendFactor_SceneBlendFactor(this.NativeObject, sourceFactor, destFactor);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_SceneBlendOperation(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha, EarthView.World.Graphic.SCENEBLENDOPERATION op, EarthView.World.Graphic.SCENEBLENDOPERATION alphaOp);

				protected _setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_SceneBlendOperation m__setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_SceneBlendOperation;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_SceneBlendOperation_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha, EarthView.World.Graphic.SCENEBLENDOPERATION op, EarthView.World.Graphic.SCENEBLENDOPERATION alphaOp);

				/// <summary>
				/// 为RGB通道和Alpha通道分别设置场景混合模式
				/// </summary>
				/// <param name="sourceFactor">计算的源因数</param>
				/// <param name="destFactor">计算的目标因数</param>
				/// <param name="sourceFactorAlpha">alpha通路的计算的源因数</param>
				/// <param name="destFactorAlpha">alpha通路的计算的目标因数</param>
				/// <param name="op">联合像元的混合模型</param>
				/// <param name="alphaOp">结合像素和alpha值的混合模型</param>
				/// <returns></returns>
				public virtual void _setSeparateSceneBlending_NoVirtual(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha, EarthView.World.Graphic.SCENEBLENDOPERATION op, EarthView.World.Graphic.SCENEBLENDOPERATION alphaOp)
				{
					EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_SceneBlendOperation_NoVirtual(this.NativeObject, sourceFactor, destFactor, sourceFactorAlpha, destFactorAlpha, op, alphaOp);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_SceneBlendOperation_Function(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha, EarthView.World.Graphic.SCENEBLENDOPERATION op, EarthView.World.Graphic.SCENEBLENDOPERATION alphaOp)
				{
					_setSeparateSceneBlending(sourceFactor, destFactor, sourceFactorAlpha, destFactorAlpha, op, alphaOp);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_SceneBlendOperation(IntPtr pNativeObject, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha, EarthView.World.Graphic.SCENEBLENDOPERATION op, EarthView.World.Graphic.SCENEBLENDOPERATION alphaOp);

				/// <summary>
				/// 为RGB通道和Alpha通道分别设置场景混合模式
				/// </summary>
				/// <param name="sourceFactor">计算的源因数</param>
				/// <param name="destFactor">计算的目标因数</param>
				/// <param name="sourceFactorAlpha">alpha通路的计算的源因数</param>
				/// <param name="destFactorAlpha">alpha通路的计算的目标因数</param>
				/// <param name="op">联合像元的混合模型</param>
				/// <param name="alphaOp">结合像素和alpha值的混合模型</param>
				/// <returns></returns>
				public virtual void _setSeparateSceneBlending(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha, EarthView.World.Graphic.SCENEBLENDOPERATION op, EarthView.World.Graphic.SCENEBLENDOPERATION alphaOp)
				{
					EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_SceneBlendOperation(this.NativeObject, sourceFactor, destFactor, sourceFactorAlpha, destFactorAlpha, op, alphaOp);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha, EarthView.World.Graphic.SCENEBLENDOPERATION op);

				protected _setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation m__setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha, EarthView.World.Graphic.SCENEBLENDOPERATION op);

				/// <summary>
				/// 为RGB通道和Alpha通道分别设置场景混合模式
				/// </summary>
				/// <param name="sourceFactor">计算的源因数</param>
				/// <param name="destFactor">计算的目标因数</param>
				/// <param name="sourceFactorAlpha">alpha通路的计算的源因数</param>
				/// <param name="destFactorAlpha">alpha通路的计算的目标因数</param>
				/// <param name="op">联合像元的混合模型</param>
				/// <returns></returns>
				public virtual void _setSeparateSceneBlending_NoVirtual(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha, EarthView.World.Graphic.SCENEBLENDOPERATION op)
				{
					EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_NoVirtual(this.NativeObject, sourceFactor, destFactor, sourceFactorAlpha, destFactorAlpha, op);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_Function(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha, EarthView.World.Graphic.SCENEBLENDOPERATION op)
				{
					_setSeparateSceneBlending(sourceFactor, destFactor, sourceFactorAlpha, destFactorAlpha, op);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation(IntPtr pNativeObject, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha, EarthView.World.Graphic.SCENEBLENDOPERATION op);

				/// <summary>
				/// 为RGB通道和Alpha通道分别设置场景混合模式
				/// </summary>
				/// <param name="sourceFactor">计算的源因数</param>
				/// <param name="destFactor">计算的目标因数</param>
				/// <param name="sourceFactorAlpha">alpha通路的计算的源因数</param>
				/// <param name="destFactorAlpha">alpha通路的计算的目标因数</param>
				/// <param name="op">联合像元的混合模型</param>
				/// <returns></returns>
				public virtual void _setSeparateSceneBlending(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha, EarthView.World.Graphic.SCENEBLENDOPERATION op)
				{
					EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation(this.NativeObject, sourceFactor, destFactor, sourceFactorAlpha, destFactorAlpha, op);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha);

				protected _setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor m__setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha);

				/// <summary>
				/// 为RGB通道和Alpha通道分别设置场景混合模式
				/// </summary>
				/// <param name="sourceFactor">计算的源因数</param>
				/// <param name="destFactor">计算的目标因数</param>
				/// <param name="sourceFactorAlpha">alpha通路的计算的源因数</param>
				/// <param name="destFactorAlpha">alpha通路的计算的目标因数</param>
				/// <returns></returns>
				public virtual void _setSeparateSceneBlending_NoVirtual(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha)
				{
					EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_NoVirtual(this.NativeObject, sourceFactor, destFactor, sourceFactorAlpha, destFactorAlpha);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_Function(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha)
				{
					_setSeparateSceneBlending(sourceFactor, destFactor, sourceFactorAlpha, destFactorAlpha);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor(IntPtr pNativeObject, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha);

				/// <summary>
				/// 为RGB通道和Alpha通道分别设置场景混合模式
				/// </summary>
				/// <param name="sourceFactor">计算的源因数</param>
				/// <param name="destFactor">计算的目标因数</param>
				/// <param name="sourceFactorAlpha">alpha通路的计算的源因数</param>
				/// <param name="destFactorAlpha">alpha通路的计算的目标因数</param>
				/// <returns></returns>
				public virtual void _setSeparateSceneBlending(EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactor, EarthView.World.Graphic.SCENEBLENDFACTOR destFactor, EarthView.World.Graphic.SCENEBLENDFACTOR sourceFactorAlpha, EarthView.World.Graphic.SCENEBLENDFACTOR destFactorAlpha)
				{
					EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor(this.NativeObject, sourceFactor, destFactor, sourceFactorAlpha, destFactorAlpha);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setAlphaRejectSettings_CallBack_void_CompareFunction_ev_uchar_ev_bool(EarthView.World.Graphic.COMPAREFUNCTION func, byte value, bool alphaToCoverage);

				protected _setAlphaRejectSettings_CallBack_void_CompareFunction_ev_uchar_ev_bool m__setAlphaRejectSettings_CallBack_void_CompareFunction_ev_uchar_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setAlphaRejectSettings_void_CompareFunction_ev_uchar_ev_bool_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func, byte value, byte alphaToCoverage);

				/// <summary>
				/// 设置alpha通道拒绝参数
				/// </summary>
				/// <param name="func">比较函数</param>
				/// <param name="value">每一个像素的alpha值</param>
				/// <param name="alphaToCoverage"></param>
				/// <returns></returns>
				public virtual void _setAlphaRejectSettings_NoVirtual(EarthView.World.Graphic.COMPAREFUNCTION func, byte value, bool alphaToCoverage)
				{
					EarthView_World_Graphic_CRenderSystem__setAlphaRejectSettings_void_CompareFunction_ev_uchar_ev_bool_NoVirtual(this.NativeObject, func, value, Convert.ToByte(alphaToCoverage));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setAlphaRejectSettings_void_CompareFunction_ev_uchar_ev_bool_Function(EarthView.World.Graphic.COMPAREFUNCTION func, byte value, bool alphaToCoverage)
				{
					_setAlphaRejectSettings(func, value, alphaToCoverage);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setAlphaRejectSettings_void_CompareFunction_ev_uchar_ev_bool(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func, byte value, byte alphaToCoverage);

				/// <summary>
				/// 设置alpha通道拒绝参数
				/// </summary>
				/// <param name="func">比较函数</param>
				/// <param name="value">每一个像素的alpha值</param>
				/// <param name="alphaToCoverage"></param>
				/// <returns></returns>
				public virtual void _setAlphaRejectSettings(EarthView.World.Graphic.COMPAREFUNCTION func, byte value, bool alphaToCoverage)
				{
					EarthView_World_Graphic_CRenderSystem__setAlphaRejectSettings_void_CompareFunction_ev_uchar_ev_bool(this.NativeObject, func, value, Convert.ToByte(alphaToCoverage));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setTextureProjectionRelativeTo_CallBack_void_ev_bool_CVector3(bool enabled, IntPtr pos);

				protected _setTextureProjectionRelativeTo_CallBack_void_ev_bool_CVector3 m__setTextureProjectionRelativeTo_CallBack_void_ev_bool_CVector3;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureProjectionRelativeTo_void_ev_bool_CVector3_NoVirtual(IntPtr pNativeObject, byte enabled, IntPtr pos);

				/// <summary>
				/// 设置纹理的相对投影
				/// </summary>
				/// <param name="enabled"></param>
				/// <param name="pos"></param>
				/// <returns></returns>
				public virtual void _setTextureProjectionRelativeTo_NoVirtual(bool enabled, EarthView.World.Spatial.Math.Vector3 pos)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureProjectionRelativeTo_void_ev_bool_CVector3_NoVirtual(this.NativeObject, Convert.ToByte(enabled), object.Equals(pos, null) ? IntPtr.Zero : pos.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setTextureProjectionRelativeTo_void_ev_bool_CVector3_Function(bool enabled, IntPtr pos)
				{
					EarthView.World.Spatial.Math.Vector3 csobj_pos = new EarthView.World.Spatial.Math.Vector3(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pos.BindNativeObject(pos,"CVector3");
					csobj_pos.Delegate = true;
					IClassFactory csobj_posClassFactory = GlobalClassFactoryMap.Get(csobj_pos.GetCppInstanceTypeName());
					if (csobj_posClassFactory != null)
					{
						csobj_pos.Delegate = true;
						csobj_pos = csobj_posClassFactory.Create() as EarthView.World.Spatial.Math.Vector3;
						csobj_pos.BindNativeObject(pos, "CVector3");
						csobj_pos.Delegate = true;
					}
					
					_setTextureProjectionRelativeTo(enabled, csobj_pos);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setTextureProjectionRelativeTo_void_ev_bool_CVector3(IntPtr pNativeObject, byte enabled, IntPtr pos);

				/// <summary>
				/// 设置纹理的相对投影
				/// </summary>
				/// <param name="enabled"></param>
				/// <param name="pos"></param>
				/// <returns></returns>
				public virtual void _setTextureProjectionRelativeTo(bool enabled, EarthView.World.Spatial.Math.Vector3 pos)
				{
					EarthView_World_Graphic_CRenderSystem__setTextureProjectionRelativeTo_void_ev_bool_CVector3(this.NativeObject, Convert.ToByte(enabled), object.Equals(pos, null) ? IntPtr.Zero : pos.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr _createDepthBufferFor_CallBack_CDepthBuffer_CRenderTarget(IntPtr renderTarget);

				protected _createDepthBufferFor_CallBack_CDepthBuffer_CRenderTarget m__createDepthBufferFor_CallBack_CDepthBuffer_CRenderTarget;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__createDepthBufferFor_CDepthBuffer_CRenderTarget_NoVirtual(IntPtr pNativeObject, IntPtr renderTarget);

				public virtual EarthView.World.Graphic.DepthBuffer _createDepthBufferFor_NoVirtual(EarthView.World.Graphic.RenderTarget renderTarget)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__createDepthBufferFor_CDepthBuffer_CRenderTarget_NoVirtual(this.NativeObject, object.Equals(renderTarget, null) ? IntPtr.Zero : renderTarget.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.DepthBuffer csObj = new EarthView.World.Graphic.DepthBuffer(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CDepthBuffer");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.DepthBuffer;
						csObj.BindNativeObject(__ptr, "CDepthBuffer");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem__createDepthBufferFor_CDepthBuffer_CRenderTarget_Function(IntPtr renderTarget)
				{
					EarthView.World.Graphic.RenderTarget csobj_renderTarget = new EarthView.World.Graphic.RenderTarget(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_renderTarget.BindNativeObject(renderTarget,"CRenderTarget");
					csobj_renderTarget.Delegate = true;
					IClassFactory csobj_renderTargetClassFactory = GlobalClassFactoryMap.Get(csobj_renderTarget.GetCppInstanceTypeName());
					if (csobj_renderTargetClassFactory != null)
					{
						csobj_renderTarget.Delegate = true;
						csobj_renderTarget = csobj_renderTargetClassFactory.Create() as EarthView.World.Graphic.RenderTarget;
						csobj_renderTarget.BindNativeObject(renderTarget, "CRenderTarget");
						csobj_renderTarget.Delegate = true;
					}
					
					EarthView.World.Graphic.DepthBuffer csret=_createDepthBufferFor(csobj_renderTarget);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__createDepthBufferFor_CDepthBuffer_CRenderTarget(IntPtr pNativeObject, IntPtr renderTarget);

				public virtual EarthView.World.Graphic.DepthBuffer _createDepthBufferFor(EarthView.World.Graphic.RenderTarget renderTarget)
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__createDepthBufferFor_CDepthBuffer_CRenderTarget(this.NativeObject, object.Equals(renderTarget, null) ? IntPtr.Zero : renderTarget.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.DepthBuffer csObj = new EarthView.World.Graphic.DepthBuffer(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CDepthBuffer");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.DepthBuffer;
						csObj.BindNativeObject(__ptr, "CDepthBuffer");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__cleanupDepthBuffers_void(IntPtr pNativeObject);

				public void _cleanupDepthBuffers()
				{
					EarthView_World_Graphic_CRenderSystem__cleanupDepthBuffers_void(this.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__cleanupDepthBuffers_void_bool(IntPtr pNativeObject, byte bCleanManualBuffers);

				public void _cleanupDepthBuffers(bool bCleanManualBuffers)
				{
					EarthView_World_Graphic_CRenderSystem__cleanupDepthBuffers_void_bool(this.NativeObject, Convert.ToByte(bCleanManualBuffers));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _beginFrame_CallBack_void();

				protected _beginFrame_CallBack_void m__beginFrame_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__beginFrame_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 开始一帧的渲染
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _beginFrame_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem__beginFrame_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__beginFrame_void_Function()
				{
					_beginFrame();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__beginFrame_void(IntPtr pNativeObject);

				/// <summary>
				/// 开始一帧的渲染
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _beginFrame()
				{
					EarthView_World_Graphic_CRenderSystem__beginFrame_void(this.NativeObject);
					
				}

				[StructLayout( LayoutKind.Sequential )]
				public struct RENDERSYSTEMCONTEXT
				{
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr _pauseFrame_CallBack_RenderSystemContext();

				protected _pauseFrame_CallBack_RenderSystemContext m__pauseFrame_CallBack_RenderSystemContext;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__pauseFrame_RenderSystemContext_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 暂停帧的渲染
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual IntPtr _pauseFrame_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__pauseFrame_RenderSystemContext_NoVirtual(this.NativeObject);
					
					return __ptr;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem__pauseFrame_RenderSystemContext_Function()
				{
					IntPtr csret=_pauseFrame();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__pauseFrame_RenderSystemContext(IntPtr pNativeObject);

				/// <summary>
				/// 暂停帧的渲染
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual IntPtr _pauseFrame()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__pauseFrame_RenderSystemContext(this.NativeObject);
					
					return __ptr;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _resumeFrame_CallBack_void_RenderSystemContext(IntPtr context);

				protected _resumeFrame_CallBack_void_RenderSystemContext m__resumeFrame_CallBack_void_RenderSystemContext;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__resumeFrame_void_RenderSystemContext_NoVirtual(IntPtr pNativeObject, IntPtr context);

				/// <summary>
				/// 恢复帧的渲染
				/// </summary>
				/// <param name="context"></param>
				/// <returns></returns>
				public virtual void _resumeFrame_NoVirtual(IntPtr context)
				{
					EarthView_World_Graphic_CRenderSystem__resumeFrame_void_RenderSystemContext_NoVirtual(this.NativeObject, context);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__resumeFrame_void_RenderSystemContext_Function(IntPtr context)
				{
					_resumeFrame(context);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__resumeFrame_void_RenderSystemContext(IntPtr pNativeObject, IntPtr context);

				/// <summary>
				/// 恢复帧的渲染
				/// </summary>
				/// <param name="context"></param>
				/// <returns></returns>
				public virtual void _resumeFrame(IntPtr context)
				{
					EarthView_World_Graphic_CRenderSystem__resumeFrame_void_RenderSystemContext(this.NativeObject, context);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _endFrame_CallBack_void();

				protected _endFrame_CallBack_void m__endFrame_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__endFrame_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 结束一帧的渲染
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _endFrame_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem__endFrame_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__endFrame_void_Function()
				{
					_endFrame();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__endFrame_void(IntPtr pNativeObject);

				/// <summary>
				/// 结束一帧的渲染
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _endFrame()
				{
					EarthView_World_Graphic_CRenderSystem__endFrame_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setViewport_CallBack_void_CViewport(IntPtr ref_vp);

				protected _setViewport_CallBack_void_CViewport m__setViewport_CallBack_void_CViewport;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setViewport_void_CViewport_NoVirtual(IntPtr pNativeObject, IntPtr ref_vp);

				/// <summary>
				/// 设置视口
				/// </summary>
				/// <param name="vp">指向适当视口的指针</param>
				/// <returns></returns>
				public virtual void _setViewport_NoVirtual(EarthView.World.Graphic.Viewport ref_vp)
				{
					EarthView_World_Graphic_CRenderSystem__setViewport_void_CViewport_NoVirtual(this.NativeObject, object.Equals(ref_vp, null) ? IntPtr.Zero : ref_vp.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setViewport_void_CViewport_Function(IntPtr ref_vp)
				{
					EarthView.World.Graphic.Viewport csobj_ref_vp = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_ref_vp.BindNativeObject(ref_vp,"CViewport");
					csobj_ref_vp.Delegate = true;
					IClassFactory csobj_ref_vpClassFactory = GlobalClassFactoryMap.Get(csobj_ref_vp.GetCppInstanceTypeName());
					if (csobj_ref_vpClassFactory != null)
					{
						csobj_ref_vp.Delegate = true;
						csobj_ref_vp = csobj_ref_vpClassFactory.Create() as EarthView.World.Graphic.Viewport;
						csobj_ref_vp.BindNativeObject(ref_vp, "CViewport");
						csobj_ref_vp.Delegate = true;
					}
					
					_setViewport(csobj_ref_vp);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setViewport_void_CViewport(IntPtr pNativeObject, IntPtr ref_vp);

				/// <summary>
				/// 设置视口
				/// </summary>
				/// <param name="vp">指向适当视口的指针</param>
				/// <returns></returns>
				public virtual void _setViewport(EarthView.World.Graphic.Viewport ref_vp)
				{
					EarthView_World_Graphic_CRenderSystem__setViewport_void_CViewport(this.NativeObject, object.Equals(ref_vp, null) ? IntPtr.Zero : ref_vp.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr _getViewport_CallBack_CViewport();

				protected _getViewport_CallBack_CViewport m__getViewport_CallBack_CViewport;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__getViewport_CViewport_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得视口
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Viewport _getViewport_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__getViewport_CViewport_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Viewport csObj = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CViewport");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Viewport;
						csObj.BindNativeObject(__ptr, "CViewport");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem__getViewport_CViewport_Function()
				{
					EarthView.World.Graphic.Viewport csret=_getViewport();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__getViewport_CViewport(IntPtr pNativeObject);

				/// <summary>
				/// 获得视口
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Viewport _getViewport()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__getViewport_CViewport(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Viewport csObj = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CViewport");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Viewport;
						csObj.BindNativeObject(__ptr, "CViewport");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setCullingMode_CallBack_void_CullingMode(EarthView.World.Graphic.CULLINGMODE mode);

				protected _setCullingMode_CallBack_void_CullingMode m__setCullingMode_CallBack_void_CullingMode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setCullingMode_void_CullingMode_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.CULLINGMODE mode);

				/// <summary>
				/// 设置剔除方式
				/// </summary>
				/// <param name="mode">精选模型</param>
				/// <returns></returns>
				public virtual void _setCullingMode_NoVirtual(EarthView.World.Graphic.CULLINGMODE mode)
				{
					EarthView_World_Graphic_CRenderSystem__setCullingMode_void_CullingMode_NoVirtual(this.NativeObject, mode);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setCullingMode_void_CullingMode_Function(EarthView.World.Graphic.CULLINGMODE mode)
				{
					_setCullingMode(mode);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setCullingMode_void_CullingMode(IntPtr pNativeObject, EarthView.World.Graphic.CULLINGMODE mode);

				/// <summary>
				/// 设置剔除方式
				/// </summary>
				/// <param name="mode">精选模型</param>
				/// <returns></returns>
				public virtual void _setCullingMode(EarthView.World.Graphic.CULLINGMODE mode)
				{
					EarthView_World_Graphic_CRenderSystem__setCullingMode_void_CullingMode(this.NativeObject, mode);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate int _getCullingMode_CallBack_CullingMode();

				protected _getCullingMode_CallBack_CullingMode m__getCullingMode_CallBack_CullingMode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CRenderSystem__getCullingMode_CullingMode_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得剔除方式
				/// </summary>
				/// <param name="mode">精选模型</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.CULLINGMODE _getCullingMode_NoVirtual()
				{
					int ret=EarthView_World_Graphic_CRenderSystem__getCullingMode_CullingMode_NoVirtual(this.NativeObject);
					
					return (EarthView.World.Graphic.CULLINGMODE)ret;
					
				}

				protected  int EarthView_World_Graphic_CRenderSystem__getCullingMode_CullingMode_Function()
				{
					EarthView.World.Graphic.CULLINGMODE csret=_getCullingMode();
					
					return (int)csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CRenderSystem__getCullingMode_CullingMode(IntPtr pNativeObject);

				/// <summary>
				/// 获得剔除方式
				/// </summary>
				/// <param name="mode">精选模型</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.CULLINGMODE _getCullingMode()
				{
					int ret=EarthView_World_Graphic_CRenderSystem__getCullingMode_CullingMode(this.NativeObject);
					
					return (EarthView.World.Graphic.CULLINGMODE)ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setDepthBufferParams_CallBack_void_ev_bool_ev_bool_CompareFunction(bool depthTest, bool depthWrite, EarthView.World.Graphic.COMPAREFUNCTION depthFunction);

				protected _setDepthBufferParams_CallBack_void_ev_bool_ev_bool_CompareFunction m__setDepthBufferParams_CallBack_void_ev_bool_ev_bool_CompareFunction;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_ev_bool_CompareFunction_NoVirtual(IntPtr pNativeObject, byte depthTest, byte depthWrite, EarthView.World.Graphic.COMPAREFUNCTION depthFunction);

				/// <summary>
				/// 设置深度缓存测试的参数
				/// </summary>
				/// <param name="depthTest"></param>
				/// <param name="depthWrite"></param>
				/// <param name="depthFunction">深度测试函数</param>
				/// <returns></returns>
				public virtual void _setDepthBufferParams_NoVirtual(bool depthTest, bool depthWrite, EarthView.World.Graphic.COMPAREFUNCTION depthFunction)
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_ev_bool_CompareFunction_NoVirtual(this.NativeObject, Convert.ToByte(depthTest), Convert.ToByte(depthWrite), depthFunction);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_ev_bool_CompareFunction_Function(bool depthTest, bool depthWrite, EarthView.World.Graphic.COMPAREFUNCTION depthFunction)
				{
					_setDepthBufferParams(depthTest, depthWrite, depthFunction);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_ev_bool_CompareFunction(IntPtr pNativeObject, byte depthTest, byte depthWrite, EarthView.World.Graphic.COMPAREFUNCTION depthFunction);

				/// <summary>
				/// 设置深度缓存测试的参数
				/// </summary>
				/// <param name="depthTest"></param>
				/// <param name="depthWrite"></param>
				/// <param name="depthFunction">深度测试函数</param>
				/// <returns></returns>
				public virtual void _setDepthBufferParams(bool depthTest, bool depthWrite, EarthView.World.Graphic.COMPAREFUNCTION depthFunction)
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_ev_bool_CompareFunction(this.NativeObject, Convert.ToByte(depthTest), Convert.ToByte(depthWrite), depthFunction);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setDepthBufferParams_CallBack_void_ev_bool_ev_bool(bool depthTest, bool depthWrite);

				protected _setDepthBufferParams_CallBack_void_ev_bool_ev_bool m__setDepthBufferParams_CallBack_void_ev_bool_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_ev_bool_NoVirtual(IntPtr pNativeObject, byte depthTest, byte depthWrite);

				/// <summary>
				/// 设置深度缓存测试的参数
				/// </summary>
				/// <param name="depthTest"></param>
				/// <param name="depthWrite"></param>
				/// <returns></returns>
				public virtual void _setDepthBufferParams_NoVirtual(bool depthTest, bool depthWrite)
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(depthTest), Convert.ToByte(depthWrite));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_ev_bool_Function(bool depthTest, bool depthWrite)
				{
					_setDepthBufferParams(depthTest, depthWrite);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_ev_bool(IntPtr pNativeObject, byte depthTest, byte depthWrite);

				/// <summary>
				/// 设置深度缓存测试的参数
				/// </summary>
				/// <param name="depthTest"></param>
				/// <param name="depthWrite"></param>
				/// <returns></returns>
				public virtual void _setDepthBufferParams(bool depthTest, bool depthWrite)
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_ev_bool(this.NativeObject, Convert.ToByte(depthTest), Convert.ToByte(depthWrite));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setDepthBufferParams_CallBack_void_ev_bool(bool depthTest);

				protected _setDepthBufferParams_CallBack_void_ev_bool m__setDepthBufferParams_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte depthTest);

				/// <summary>
				/// 设置深度缓存测试的参数
				/// </summary>
				/// <param name="depthTest"></param>
				/// <returns></returns>
				public virtual void _setDepthBufferParams_NoVirtual(bool depthTest)
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(depthTest));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_Function(bool depthTest)
				{
					_setDepthBufferParams(depthTest);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool(IntPtr pNativeObject, byte depthTest);

				/// <summary>
				/// 设置深度缓存测试的参数
				/// </summary>
				/// <param name="depthTest"></param>
				/// <returns></returns>
				public virtual void _setDepthBufferParams(bool depthTest)
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool(this.NativeObject, Convert.ToByte(depthTest));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setDepthBufferParams_CallBack_void();

				protected _setDepthBufferParams_CallBack_void m__setDepthBufferParams_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 设置深度缓存测试的参数
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _setDepthBufferParams_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_Function()
				{
					_setDepthBufferParams();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void(IntPtr pNativeObject);

				/// <summary>
				/// 设置深度缓存测试的参数
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _setDepthBufferParams()
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setDepthBufferCheckEnabled_CallBack_void_ev_bool(bool enabled);

				protected _setDepthBufferCheckEnabled_CallBack_void_ev_bool m__setDepthBufferCheckEnabled_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferCheckEnabled_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte enabled);

				/// <summary>
				/// 设置深度缓存测试是否启用
				/// </summary>
				/// <param name="enabled"></param>
				/// <returns></returns>
				public virtual void _setDepthBufferCheckEnabled_NoVirtual(bool enabled)
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferCheckEnabled_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(enabled));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setDepthBufferCheckEnabled_void_ev_bool_Function(bool enabled)
				{
					_setDepthBufferCheckEnabled(enabled);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferCheckEnabled_void_ev_bool(IntPtr pNativeObject, byte enabled);

				/// <summary>
				/// 设置深度缓存测试是否启用
				/// </summary>
				/// <param name="enabled"></param>
				/// <returns></returns>
				public virtual void _setDepthBufferCheckEnabled(bool enabled)
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferCheckEnabled_void_ev_bool(this.NativeObject, Convert.ToByte(enabled));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setDepthBufferCheckEnabled_CallBack_void();

				protected _setDepthBufferCheckEnabled_CallBack_void m__setDepthBufferCheckEnabled_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferCheckEnabled_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 设置深度缓存测试是否启用
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _setDepthBufferCheckEnabled_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferCheckEnabled_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setDepthBufferCheckEnabled_void_Function()
				{
					_setDepthBufferCheckEnabled();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferCheckEnabled_void(IntPtr pNativeObject);

				/// <summary>
				/// 设置深度缓存测试是否启用
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _setDepthBufferCheckEnabled()
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferCheckEnabled_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setDepthBufferWriteEnabled_CallBack_void_ev_bool(bool enabled);

				protected _setDepthBufferWriteEnabled_CallBack_void_ev_bool m__setDepthBufferWriteEnabled_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferWriteEnabled_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte enabled);

				/// <summary>
				/// 设置深度缓存写入是否启用
				/// </summary>
				/// <param name="enabled"></param>
				/// <returns></returns>
				public virtual void _setDepthBufferWriteEnabled_NoVirtual(bool enabled)
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferWriteEnabled_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(enabled));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setDepthBufferWriteEnabled_void_ev_bool_Function(bool enabled)
				{
					_setDepthBufferWriteEnabled(enabled);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferWriteEnabled_void_ev_bool(IntPtr pNativeObject, byte enabled);

				/// <summary>
				/// 设置深度缓存写入是否启用
				/// </summary>
				/// <param name="enabled"></param>
				/// <returns></returns>
				public virtual void _setDepthBufferWriteEnabled(bool enabled)
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferWriteEnabled_void_ev_bool(this.NativeObject, Convert.ToByte(enabled));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setDepthBufferWriteEnabled_CallBack_void();

				protected _setDepthBufferWriteEnabled_CallBack_void m__setDepthBufferWriteEnabled_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferWriteEnabled_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 设置深度缓存写入是否启用
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _setDepthBufferWriteEnabled_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferWriteEnabled_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setDepthBufferWriteEnabled_void_Function()
				{
					_setDepthBufferWriteEnabled();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferWriteEnabled_void(IntPtr pNativeObject);

				/// <summary>
				/// 设置深度缓存写入是否启用
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _setDepthBufferWriteEnabled()
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferWriteEnabled_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setDepthBufferFunction_CallBack_void_CompareFunction(EarthView.World.Graphic.COMPAREFUNCTION func);

				protected _setDepthBufferFunction_CallBack_void_CompareFunction m__setDepthBufferFunction_CallBack_void_CompareFunction;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferFunction_void_CompareFunction_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func);

				/// <summary>
				/// 设置深度缓存测试的比较函数
				/// </summary>
				/// <param name="func">新的深度和已存在深度的比较</param>
				/// <returns></returns>
				public virtual void _setDepthBufferFunction_NoVirtual(EarthView.World.Graphic.COMPAREFUNCTION func)
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferFunction_void_CompareFunction_NoVirtual(this.NativeObject, func);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setDepthBufferFunction_void_CompareFunction_Function(EarthView.World.Graphic.COMPAREFUNCTION func)
				{
					_setDepthBufferFunction(func);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferFunction_void_CompareFunction(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func);

				/// <summary>
				/// 设置深度缓存测试的比较函数
				/// </summary>
				/// <param name="func">新的深度和已存在深度的比较</param>
				/// <returns></returns>
				public virtual void _setDepthBufferFunction(EarthView.World.Graphic.COMPAREFUNCTION func)
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferFunction_void_CompareFunction(this.NativeObject, func);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setDepthBufferFunction_CallBack_void();

				protected _setDepthBufferFunction_CallBack_void m__setDepthBufferFunction_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferFunction_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 设置深度缓存测试的比较函数
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _setDepthBufferFunction_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferFunction_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setDepthBufferFunction_void_Function()
				{
					_setDepthBufferFunction();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBufferFunction_void(IntPtr pNativeObject);

				/// <summary>
				/// 设置深度缓存测试的比较函数
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _setDepthBufferFunction()
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBufferFunction_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setColourBufferWriteEnabled_CallBack_void_ev_bool_ev_bool_ev_bool_ev_bool(bool red, bool green, bool blue, bool alpha);

				protected _setColourBufferWriteEnabled_CallBack_void_ev_bool_ev_bool_ev_bool_ev_bool m__setColourBufferWriteEnabled_CallBack_void_ev_bool_ev_bool_ev_bool_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setColourBufferWriteEnabled_void_ev_bool_ev_bool_ev_bool_ev_bool_NoVirtual(IntPtr pNativeObject, byte red, byte green, byte blue, byte alpha);

				/// <summary>
				/// 设置颜色缓存写入是否可用
				/// </summary>
				/// <param name="red">红色</param>
				/// <param name="green">绿色</param>
				/// <param name="blue">蓝色</param>
				/// <param name="alpha"></param>
				/// <returns></returns>
				public virtual void _setColourBufferWriteEnabled_NoVirtual(bool red, bool green, bool blue, bool alpha)
				{
					EarthView_World_Graphic_CRenderSystem__setColourBufferWriteEnabled_void_ev_bool_ev_bool_ev_bool_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(red), Convert.ToByte(green), Convert.ToByte(blue), Convert.ToByte(alpha));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setColourBufferWriteEnabled_void_ev_bool_ev_bool_ev_bool_ev_bool_Function(bool red, bool green, bool blue, bool alpha)
				{
					_setColourBufferWriteEnabled(red, green, blue, alpha);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setColourBufferWriteEnabled_void_ev_bool_ev_bool_ev_bool_ev_bool(IntPtr pNativeObject, byte red, byte green, byte blue, byte alpha);

				/// <summary>
				/// 设置颜色缓存写入是否可用
				/// </summary>
				/// <param name="red">红色</param>
				/// <param name="green">绿色</param>
				/// <param name="blue">蓝色</param>
				/// <param name="alpha"></param>
				/// <returns></returns>
				public virtual void _setColourBufferWriteEnabled(bool red, bool green, bool blue, bool alpha)
				{
					EarthView_World_Graphic_CRenderSystem__setColourBufferWriteEnabled_void_ev_bool_ev_bool_ev_bool_ev_bool(this.NativeObject, Convert.ToByte(red), Convert.ToByte(green), Convert.ToByte(blue), Convert.ToByte(alpha));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setDepthBias_CallBack_void_ev_real32_ev_real32(float constantBias, float slopeScaleBias);

				protected _setDepthBias_CallBack_void_ev_real32_ev_real32 m__setDepthBias_CallBack_void_ev_real32_ev_real32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBias_void_ev_real32_ev_real32_NoVirtual(IntPtr pNativeObject, float constantBias, float slopeScaleBias);

				/// <summary>
				/// 设置深度偏移值
				/// </summary>
				/// <param name="constantBias">常量偏移值</param>
				/// <param name="slopeScaleBias">受多边形最大坡度影响的倾斜值</param>
				/// <returns></returns>
				public virtual void _setDepthBias_NoVirtual(float constantBias, float slopeScaleBias)
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBias_void_ev_real32_ev_real32_NoVirtual(this.NativeObject, constantBias, slopeScaleBias);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setDepthBias_void_ev_real32_ev_real32_Function(float constantBias, float slopeScaleBias)
				{
					_setDepthBias(constantBias, slopeScaleBias);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBias_void_ev_real32_ev_real32(IntPtr pNativeObject, float constantBias, float slopeScaleBias);

				/// <summary>
				/// 设置深度偏移值
				/// </summary>
				/// <param name="constantBias">常量偏移值</param>
				/// <param name="slopeScaleBias">受多边形最大坡度影响的倾斜值</param>
				/// <returns></returns>
				public virtual void _setDepthBias(float constantBias, float slopeScaleBias)
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBias_void_ev_real32_ev_real32(this.NativeObject, constantBias, slopeScaleBias);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setDepthBias_CallBack_void_ev_real32(float constantBias);

				protected _setDepthBias_CallBack_void_ev_real32 m__setDepthBias_CallBack_void_ev_real32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBias_void_ev_real32_NoVirtual(IntPtr pNativeObject, float constantBias);

				/// <summary>
				/// 设置深度偏移值
				/// </summary>
				/// <param name="constantBias">常量偏移值</param>
				/// <returns></returns>
				public virtual void _setDepthBias_NoVirtual(float constantBias)
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBias_void_ev_real32_NoVirtual(this.NativeObject, constantBias);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setDepthBias_void_ev_real32_Function(float constantBias)
				{
					_setDepthBias(constantBias);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setDepthBias_void_ev_real32(IntPtr pNativeObject, float constantBias);

				/// <summary>
				/// 设置深度偏移值
				/// </summary>
				/// <param name="constantBias">常量偏移值</param>
				/// <returns></returns>
				public virtual void _setDepthBias(float constantBias)
				{
					EarthView_World_Graphic_CRenderSystem__setDepthBias_void_ev_real32(this.NativeObject, constantBias);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setFog_CallBack_void_FogMode_CColourValue_Real_Real_Real(EarthView.World.Graphic.FOGMODE mode, IntPtr colour, double expDensity, double linearStart, double linearEnd);

				protected _setFog_CallBack_void_FogMode_CColourValue_Real_Real_Real m__setFog_CallBack_void_FogMode_CColourValue_Real_Real_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Real_Real_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.FOGMODE mode, IntPtr colour, double expDensity, double linearStart, double linearEnd);

				/// <summary>
				/// 设置雾模型
				/// </summary>
				/// <param name="mode">雾模型</param>
				/// <param name="colour">雾的颜色</param>
				/// <param name="expDensity">在FOG_EXP 或 FOG_EXP2模型中雾的密度</param>
				/// <param name="linearStart">距离线性雾开始变暗的距离</param>
				/// <param name="linearEnd">距离线性雾完全不透明的距离</param>
				/// <returns></returns>
				public virtual void _setFog_NoVirtual(EarthView.World.Graphic.FOGMODE mode, EarthView.World.Graphic.ColourValue colour, double expDensity, double linearStart, double linearEnd)
				{
					EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Real_Real_NoVirtual(this.NativeObject, mode, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject, expDensity, linearStart, linearEnd);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Real_Real_Function(EarthView.World.Graphic.FOGMODE mode, IntPtr colour, double expDensity, double linearStart, double linearEnd)
				{
					EarthView.World.Graphic.ColourValue csobj_colour = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_colour.BindNativeObject(colour,"CColourValue");
					csobj_colour.Delegate = true;
					IClassFactory csobj_colourClassFactory = GlobalClassFactoryMap.Get(csobj_colour.GetCppInstanceTypeName());
					if (csobj_colourClassFactory != null)
					{
						csobj_colour.Delegate = true;
						csobj_colour = csobj_colourClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_colour.BindNativeObject(colour, "CColourValue");
						csobj_colour.Delegate = true;
					}
					
					_setFog(mode, csobj_colour, expDensity, linearStart, linearEnd);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Real_Real(IntPtr pNativeObject, EarthView.World.Graphic.FOGMODE mode, IntPtr colour, double expDensity, double linearStart, double linearEnd);

				/// <summary>
				/// 设置雾模型
				/// </summary>
				/// <param name="mode">雾模型</param>
				/// <param name="colour">雾的颜色</param>
				/// <param name="expDensity">在FOG_EXP 或 FOG_EXP2模型中雾的密度</param>
				/// <param name="linearStart">距离线性雾开始变暗的距离</param>
				/// <param name="linearEnd">距离线性雾完全不透明的距离</param>
				/// <returns></returns>
				public virtual void _setFog(EarthView.World.Graphic.FOGMODE mode, EarthView.World.Graphic.ColourValue colour, double expDensity, double linearStart, double linearEnd)
				{
					EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Real_Real(this.NativeObject, mode, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject, expDensity, linearStart, linearEnd);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setFog_CallBack_void_FogMode_CColourValue_Real_Real(EarthView.World.Graphic.FOGMODE mode, IntPtr colour, double expDensity, double linearStart);

				protected _setFog_CallBack_void_FogMode_CColourValue_Real_Real m__setFog_CallBack_void_FogMode_CColourValue_Real_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Real_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.FOGMODE mode, IntPtr colour, double expDensity, double linearStart);

				/// <summary>
				/// 设置雾模型
				/// </summary>
				/// <param name="mode">雾模型</param>
				/// <param name="colour">雾的颜色</param>
				/// <param name="expDensity">在FOG_EXP 或 FOG_EXP2模型中雾的密度</param>
				/// <param name="linearStart">距离线性雾开始变暗的距离</param>
				/// <returns></returns>
				public virtual void _setFog_NoVirtual(EarthView.World.Graphic.FOGMODE mode, EarthView.World.Graphic.ColourValue colour, double expDensity, double linearStart)
				{
					EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Real_NoVirtual(this.NativeObject, mode, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject, expDensity, linearStart);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Real_Function(EarthView.World.Graphic.FOGMODE mode, IntPtr colour, double expDensity, double linearStart)
				{
					EarthView.World.Graphic.ColourValue csobj_colour = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_colour.BindNativeObject(colour,"CColourValue");
					csobj_colour.Delegate = true;
					IClassFactory csobj_colourClassFactory = GlobalClassFactoryMap.Get(csobj_colour.GetCppInstanceTypeName());
					if (csobj_colourClassFactory != null)
					{
						csobj_colour.Delegate = true;
						csobj_colour = csobj_colourClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_colour.BindNativeObject(colour, "CColourValue");
						csobj_colour.Delegate = true;
					}
					
					_setFog(mode, csobj_colour, expDensity, linearStart);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Real(IntPtr pNativeObject, EarthView.World.Graphic.FOGMODE mode, IntPtr colour, double expDensity, double linearStart);

				/// <summary>
				/// 设置雾模型
				/// </summary>
				/// <param name="mode">雾模型</param>
				/// <param name="colour">雾的颜色</param>
				/// <param name="expDensity">在FOG_EXP 或 FOG_EXP2模型中雾的密度</param>
				/// <param name="linearStart">距离线性雾开始变暗的距离</param>
				/// <returns></returns>
				public virtual void _setFog(EarthView.World.Graphic.FOGMODE mode, EarthView.World.Graphic.ColourValue colour, double expDensity, double linearStart)
				{
					EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Real(this.NativeObject, mode, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject, expDensity, linearStart);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setFog_CallBack_void_FogMode_CColourValue_Real(EarthView.World.Graphic.FOGMODE mode, IntPtr colour, double expDensity);

				protected _setFog_CallBack_void_FogMode_CColourValue_Real m__setFog_CallBack_void_FogMode_CColourValue_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.FOGMODE mode, IntPtr colour, double expDensity);

				/// <summary>
				/// 设置雾模型
				/// </summary>
				/// <param name="mode">雾模型</param>
				/// <param name="colour">雾的颜色</param>
				/// <param name="expDensity">在FOG_EXP 或 FOG_EXP2模型中雾的密度</param>
				/// <returns></returns>
				public virtual void _setFog_NoVirtual(EarthView.World.Graphic.FOGMODE mode, EarthView.World.Graphic.ColourValue colour, double expDensity)
				{
					EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_NoVirtual(this.NativeObject, mode, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject, expDensity);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Function(EarthView.World.Graphic.FOGMODE mode, IntPtr colour, double expDensity)
				{
					EarthView.World.Graphic.ColourValue csobj_colour = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_colour.BindNativeObject(colour,"CColourValue");
					csobj_colour.Delegate = true;
					IClassFactory csobj_colourClassFactory = GlobalClassFactoryMap.Get(csobj_colour.GetCppInstanceTypeName());
					if (csobj_colourClassFactory != null)
					{
						csobj_colour.Delegate = true;
						csobj_colour = csobj_colourClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_colour.BindNativeObject(colour, "CColourValue");
						csobj_colour.Delegate = true;
					}
					
					_setFog(mode, csobj_colour, expDensity);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real(IntPtr pNativeObject, EarthView.World.Graphic.FOGMODE mode, IntPtr colour, double expDensity);

				/// <summary>
				/// 设置雾模型
				/// </summary>
				/// <param name="mode">雾模型</param>
				/// <param name="colour">雾的颜色</param>
				/// <param name="expDensity">在FOG_EXP 或 FOG_EXP2模型中雾的密度</param>
				/// <returns></returns>
				public virtual void _setFog(EarthView.World.Graphic.FOGMODE mode, EarthView.World.Graphic.ColourValue colour, double expDensity)
				{
					EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real(this.NativeObject, mode, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject, expDensity);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setFog_CallBack_void_FogMode_CColourValue(EarthView.World.Graphic.FOGMODE mode, IntPtr colour);

				protected _setFog_CallBack_void_FogMode_CColourValue m__setFog_CallBack_void_FogMode_CColourValue;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.FOGMODE mode, IntPtr colour);

				/// <summary>
				/// 设置雾模型
				/// </summary>
				/// <param name="mode">雾模型</param>
				/// <param name="colour">雾的颜色</param>
				/// <returns></returns>
				public virtual void _setFog_NoVirtual(EarthView.World.Graphic.FOGMODE mode, EarthView.World.Graphic.ColourValue colour)
				{
					EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_NoVirtual(this.NativeObject, mode, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Function(EarthView.World.Graphic.FOGMODE mode, IntPtr colour)
				{
					EarthView.World.Graphic.ColourValue csobj_colour = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_colour.BindNativeObject(colour,"CColourValue");
					csobj_colour.Delegate = true;
					IClassFactory csobj_colourClassFactory = GlobalClassFactoryMap.Get(csobj_colour.GetCppInstanceTypeName());
					if (csobj_colourClassFactory != null)
					{
						csobj_colour.Delegate = true;
						csobj_colour = csobj_colourClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_colour.BindNativeObject(colour, "CColourValue");
						csobj_colour.Delegate = true;
					}
					
					_setFog(mode, csobj_colour);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue(IntPtr pNativeObject, EarthView.World.Graphic.FOGMODE mode, IntPtr colour);

				/// <summary>
				/// 设置雾模型
				/// </summary>
				/// <param name="mode">雾模型</param>
				/// <param name="colour">雾的颜色</param>
				/// <returns></returns>
				public virtual void _setFog(EarthView.World.Graphic.FOGMODE mode, EarthView.World.Graphic.ColourValue colour)
				{
					EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue(this.NativeObject, mode, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setFog_CallBack_void_FogMode(EarthView.World.Graphic.FOGMODE mode);

				protected _setFog_CallBack_void_FogMode m__setFog_CallBack_void_FogMode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.FOGMODE mode);

				/// <summary>
				/// 设置雾模型
				/// </summary>
				/// <param name="mode">雾模型</param>
				/// <returns></returns>
				public virtual void _setFog_NoVirtual(EarthView.World.Graphic.FOGMODE mode)
				{
					EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_NoVirtual(this.NativeObject, mode);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_Function(EarthView.World.Graphic.FOGMODE mode)
				{
					_setFog(mode);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode(IntPtr pNativeObject, EarthView.World.Graphic.FOGMODE mode);

				/// <summary>
				/// 设置雾模型
				/// </summary>
				/// <param name="mode">雾模型</param>
				/// <returns></returns>
				public virtual void _setFog(EarthView.World.Graphic.FOGMODE mode)
				{
					EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode(this.NativeObject, mode);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setFog_CallBack_void();

				protected _setFog_CallBack_void m__setFog_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setFog_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 设置雾模型
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _setFog_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem__setFog_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setFog_void_Function()
				{
					_setFog();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setFog_void(IntPtr pNativeObject);

				/// <summary>
				/// 设置雾模型
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _setFog()
				{
					EarthView_World_Graphic_CRenderSystem__setFog_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _beginGeometryCount_CallBack_void();

				protected _beginGeometryCount_CallBack_void m__beginGeometryCount_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__beginGeometryCount_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 重新渲染三角面、批次、顶点数量
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _beginGeometryCount_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem__beginGeometryCount_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__beginGeometryCount_void_Function()
				{
					_beginGeometryCount();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__beginGeometryCount_void(IntPtr pNativeObject);

				/// <summary>
				/// 重新渲染三角面、批次、顶点数量
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _beginGeometryCount()
				{
					EarthView_World_Graphic_CRenderSystem__beginGeometryCount_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate uint _getFaceCount_CallBack_ev_uint32();

				protected _getFaceCount_CallBack_ev_uint32 m__getFaceCount_CallBack_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint EarthView_World_Graphic_CRenderSystem__getFaceCount_ev_uint32_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得渲染的三角面总数
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual uint _getFaceCount_NoVirtual()
				{
					uint ret=EarthView_World_Graphic_CRenderSystem__getFaceCount_ev_uint32_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  uint EarthView_World_Graphic_CRenderSystem__getFaceCount_ev_uint32_Function()
				{
					uint csret=_getFaceCount();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint EarthView_World_Graphic_CRenderSystem__getFaceCount_ev_uint32(IntPtr pNativeObject);

				/// <summary>
				/// 获得渲染的三角面总数
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual uint _getFaceCount()
				{
					uint ret=EarthView_World_Graphic_CRenderSystem__getFaceCount_ev_uint32(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate uint _getBatchCount_CallBack_ev_uint32();

				protected _getBatchCount_CallBack_ev_uint32 m__getBatchCount_CallBack_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint EarthView_World_Graphic_CRenderSystem__getBatchCount_ev_uint32_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得渲染的批次
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual uint _getBatchCount_NoVirtual()
				{
					uint ret=EarthView_World_Graphic_CRenderSystem__getBatchCount_ev_uint32_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  uint EarthView_World_Graphic_CRenderSystem__getBatchCount_ev_uint32_Function()
				{
					uint csret=_getBatchCount();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint EarthView_World_Graphic_CRenderSystem__getBatchCount_ev_uint32(IntPtr pNativeObject);

				/// <summary>
				/// 获得渲染的批次
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual uint _getBatchCount()
				{
					uint ret=EarthView_World_Graphic_CRenderSystem__getBatchCount_ev_uint32(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate uint _getVertexCount_CallBack_ev_uint32();

				protected _getVertexCount_CallBack_ev_uint32 m__getVertexCount_CallBack_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint EarthView_World_Graphic_CRenderSystem__getVertexCount_ev_uint32_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得渲染的顶点总数
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual uint _getVertexCount_NoVirtual()
				{
					uint ret=EarthView_World_Graphic_CRenderSystem__getVertexCount_ev_uint32_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  uint EarthView_World_Graphic_CRenderSystem__getVertexCount_ev_uint32_Function()
				{
					uint csret=_getVertexCount();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint EarthView_World_Graphic_CRenderSystem__getVertexCount_ev_uint32(IntPtr pNativeObject);

				/// <summary>
				/// 获得渲染的顶点总数
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual uint _getVertexCount()
				{
					uint ret=EarthView_World_Graphic_CRenderSystem__getVertexCount_ev_uint32(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void convertColourValue_CallBack_void_CColourValue_ev_uint32(IntPtr colour, IntPtr pDest);

				protected convertColourValue_CallBack_void_CColourValue_ev_uint32 m_convertColourValue_CallBack_void_CColourValue_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_convertColourValue_void_CColourValue_ev_uint32_NoVirtual(IntPtr pNativeObject, IntPtr colour, IntPtr pDest);

				/// <summary>
				/// 将颜色转换并存入指定区域
				/// </summary>
				/// <param name="colour">转换的颜色</param>
				/// <param name="pDest">指向存放结果的位置</param>
				/// <returns></returns>
				public virtual void ConvertColourValue_NoVirtual(EarthView.World.Graphic.ColourValue colour, IntPtr pDest)
				{
					EarthView_World_Graphic_CRenderSystem_convertColourValue_void_CColourValue_ev_uint32_NoVirtual(this.NativeObject, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject, pDest);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_convertColourValue_void_CColourValue_ev_uint32_Function(IntPtr colour, IntPtr pDest)
				{
					EarthView.World.Graphic.ColourValue csobj_colour = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_colour.BindNativeObject(colour,"CColourValue");
					csobj_colour.Delegate = true;
					IClassFactory csobj_colourClassFactory = GlobalClassFactoryMap.Get(csobj_colour.GetCppInstanceTypeName());
					if (csobj_colourClassFactory != null)
					{
						csobj_colour.Delegate = true;
						csobj_colour = csobj_colourClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_colour.BindNativeObject(colour, "CColourValue");
						csobj_colour.Delegate = true;
					}
					
					ConvertColourValue(csobj_colour, pDest);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_convertColourValue_void_CColourValue_ev_uint32(IntPtr pNativeObject, IntPtr colour, IntPtr pDest);

				/// <summary>
				/// 将颜色转换并存入指定区域
				/// </summary>
				/// <param name="colour">转换的颜色</param>
				/// <param name="pDest">指向存放结果的位置</param>
				/// <returns></returns>
				public virtual void ConvertColourValue(EarthView.World.Graphic.ColourValue colour, IntPtr pDest)
				{
					EarthView_World_Graphic_CRenderSystem_convertColourValue_void_CColourValue_ev_uint32(this.NativeObject, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject, pDest);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void toColourValue_CallBack_void_ev_uint32_CColourValue(uint srcColor, IntPtr colour);

				protected toColourValue_CallBack_void_ev_uint32_CColourValue m_toColourValue_CallBack_void_ev_uint32_CColourValue;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_toColourValue_void_ev_uint32_CColourValue_NoVirtual(IntPtr pNativeObject, uint srcColor, IntPtr colour);

				/// <summary>
				/// 将32-bit颜色转换转换为colorvalue
				/// </summary>
				/// <param name="srcColor">32-bit颜色</param>
				/// <param name="colour">转换的结果颜色</param>				
				/// <returns></returns>
				public virtual void ToColourValue_NoVirtual(uint srcColor, ref EarthView.World.Graphic.ColourValue colour)
				{
					EarthView_World_Graphic_CRenderSystem_toColourValue_void_ev_uint32_CColourValue_NoVirtual(this.NativeObject, srcColor, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_toColourValue_void_ev_uint32_CColourValue_Function(uint srcColor, IntPtr colour)
				{
					EarthView.World.Graphic.ColourValue csobj_colour = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_colour.BindNativeObject(colour,"CColourValue");
					csobj_colour.Delegate = true;
					IClassFactory csobj_colourClassFactory = GlobalClassFactoryMap.Get(csobj_colour.GetCppInstanceTypeName());
					if (csobj_colourClassFactory != null)
					{
						csobj_colour.Delegate = true;
						csobj_colour = csobj_colourClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_colour.BindNativeObject(colour, "CColourValue");
						csobj_colour.Delegate = true;
					}
					
					ToColourValue(srcColor, ref csobj_colour);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_toColourValue_void_ev_uint32_CColourValue(IntPtr pNativeObject, uint srcColor, IntPtr colour);

				/// <summary>
				/// 将32-bit颜色转换转换为colorvalue
				/// </summary>
				/// <param name="srcColor">32-bit颜色</param>
				/// <param name="colour">转换的结果颜色</param>				
				/// <returns></returns>
				public virtual void ToColourValue(uint srcColor, ref EarthView.World.Graphic.ColourValue colour)
				{
					EarthView_World_Graphic_CRenderSystem_toColourValue_void_ev_uint32_CColourValue(this.NativeObject, srcColor, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate int getColourVertexElementType_CallBack_VertexElementType();

				protected getColourVertexElementType_CallBack_VertexElementType m_getColourVertexElementType_CallBack_VertexElementType;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CRenderSystem_getColourVertexElementType_VertexElementType_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得渲染系统中32位颜色值的顶点元素类型
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.VERTEXELEMENTTYPE GetColourVertexElementType_NoVirtual()
				{
					int ret=EarthView_World_Graphic_CRenderSystem_getColourVertexElementType_VertexElementType_NoVirtual(this.NativeObject);
					
					return (EarthView.World.Graphic.VERTEXELEMENTTYPE)ret;
					
				}

				protected  int EarthView_World_Graphic_CRenderSystem_getColourVertexElementType_VertexElementType_Function()
				{
					EarthView.World.Graphic.VERTEXELEMENTTYPE csret=GetColourVertexElementType();
					
					return (int)csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CRenderSystem_getColourVertexElementType_VertexElementType(IntPtr pNativeObject);

				/// <summary>
				/// 获得渲染系统中32位颜色值的顶点元素类型
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.VERTEXELEMENTTYPE GetColourVertexElementType()
				{
					int ret=EarthView_World_Graphic_CRenderSystem_getColourVertexElementType_VertexElementType(this.NativeObject);
					
					return (EarthView.World.Graphic.VERTEXELEMENTTYPE)ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _convertProjectionMatrix_CallBack_void_CMatrix4_CMatrix4_ev_bool(IntPtr matrix, IntPtr dest, bool forGpuProgram);

				protected _convertProjectionMatrix_CallBack_void_CMatrix4_CMatrix4_ev_bool m__convertProjectionMatrix_CallBack_void_CMatrix4_CMatrix4_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__convertProjectionMatrix_void_CMatrix4_CMatrix4_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr matrix, IntPtr dest, byte forGpuProgram);

				/// <summary>
				/// 转换适应渲染系统的统一的投影矩阵
				/// </summary>
				/// <param name="matrix"></param>
				/// <param name="dest"></param>
				/// <param name="forGpuProgram"></param>
				/// <returns></returns>
				public virtual void _convertProjectionMatrix_NoVirtual(EarthView.World.Spatial.Math.Matrix4 matrix, ref EarthView.World.Spatial.Math.Matrix4 dest, bool forGpuProgram)
				{
					EarthView_World_Graphic_CRenderSystem__convertProjectionMatrix_void_CMatrix4_CMatrix4_ev_bool_NoVirtual(this.NativeObject, object.Equals(matrix, null) ? IntPtr.Zero : matrix.NativeObject, object.Equals(dest, null) ? IntPtr.Zero : dest.NativeObject, Convert.ToByte(forGpuProgram));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__convertProjectionMatrix_void_CMatrix4_CMatrix4_ev_bool_Function(IntPtr matrix, IntPtr dest, bool forGpuProgram)
				{
					EarthView.World.Spatial.Math.Matrix4 csobj_matrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_matrix.BindNativeObject(matrix,"CMatrix4");
					csobj_matrix.Delegate = true;
					IClassFactory csobj_matrixClassFactory = GlobalClassFactoryMap.Get(csobj_matrix.GetCppInstanceTypeName());
					if (csobj_matrixClassFactory != null)
					{
						csobj_matrix.Delegate = true;
						csobj_matrix = csobj_matrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_matrix.BindNativeObject(matrix, "CMatrix4");
						csobj_matrix.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_dest = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_dest.BindNativeObject(dest,"CMatrix4");
					csobj_dest.Delegate = true;
					IClassFactory csobj_destClassFactory = GlobalClassFactoryMap.Get(csobj_dest.GetCppInstanceTypeName());
					if (csobj_destClassFactory != null)
					{
						csobj_dest.Delegate = true;
						csobj_dest = csobj_destClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_dest.BindNativeObject(dest, "CMatrix4");
						csobj_dest.Delegate = true;
					}
					
					_convertProjectionMatrix(csobj_matrix, ref csobj_dest, forGpuProgram);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__convertProjectionMatrix_void_CMatrix4_CMatrix4_ev_bool(IntPtr pNativeObject, IntPtr matrix, IntPtr dest, byte forGpuProgram);

				/// <summary>
				/// 转换适应渲染系统的统一的投影矩阵
				/// </summary>
				/// <param name="matrix"></param>
				/// <param name="dest"></param>
				/// <param name="forGpuProgram"></param>
				/// <returns></returns>
				public virtual void _convertProjectionMatrix(EarthView.World.Spatial.Math.Matrix4 matrix, ref EarthView.World.Spatial.Math.Matrix4 dest, bool forGpuProgram)
				{
					EarthView_World_Graphic_CRenderSystem__convertProjectionMatrix_void_CMatrix4_CMatrix4_ev_bool(this.NativeObject, object.Equals(matrix, null) ? IntPtr.Zero : matrix.NativeObject, object.Equals(dest, null) ? IntPtr.Zero : dest.NativeObject, Convert.ToByte(forGpuProgram));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _convertProjectionMatrix_CallBack_void_CMatrix4_CMatrix4(IntPtr matrix, IntPtr dest);

				protected _convertProjectionMatrix_CallBack_void_CMatrix4_CMatrix4 m__convertProjectionMatrix_CallBack_void_CMatrix4_CMatrix4;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__convertProjectionMatrix_void_CMatrix4_CMatrix4_NoVirtual(IntPtr pNativeObject, IntPtr matrix, IntPtr dest);

				/// <summary>
				/// 转换适应渲染系统的统一的投影矩阵
				/// </summary>
				/// <param name="matrix"></param>
				/// <param name="dest"></param>
				/// <returns></returns>
				public virtual void _convertProjectionMatrix_NoVirtual(EarthView.World.Spatial.Math.Matrix4 matrix, ref EarthView.World.Spatial.Math.Matrix4 dest)
				{
					EarthView_World_Graphic_CRenderSystem__convertProjectionMatrix_void_CMatrix4_CMatrix4_NoVirtual(this.NativeObject, object.Equals(matrix, null) ? IntPtr.Zero : matrix.NativeObject, object.Equals(dest, null) ? IntPtr.Zero : dest.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__convertProjectionMatrix_void_CMatrix4_CMatrix4_Function(IntPtr matrix, IntPtr dest)
				{
					EarthView.World.Spatial.Math.Matrix4 csobj_matrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_matrix.BindNativeObject(matrix,"CMatrix4");
					csobj_matrix.Delegate = true;
					IClassFactory csobj_matrixClassFactory = GlobalClassFactoryMap.Get(csobj_matrix.GetCppInstanceTypeName());
					if (csobj_matrixClassFactory != null)
					{
						csobj_matrix.Delegate = true;
						csobj_matrix = csobj_matrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_matrix.BindNativeObject(matrix, "CMatrix4");
						csobj_matrix.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_dest = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_dest.BindNativeObject(dest,"CMatrix4");
					csobj_dest.Delegate = true;
					IClassFactory csobj_destClassFactory = GlobalClassFactoryMap.Get(csobj_dest.GetCppInstanceTypeName());
					if (csobj_destClassFactory != null)
					{
						csobj_dest.Delegate = true;
						csobj_dest = csobj_destClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_dest.BindNativeObject(dest, "CMatrix4");
						csobj_dest.Delegate = true;
					}
					
					_convertProjectionMatrix(csobj_matrix, ref csobj_dest);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__convertProjectionMatrix_void_CMatrix4_CMatrix4(IntPtr pNativeObject, IntPtr matrix, IntPtr dest);

				/// <summary>
				/// 转换适应渲染系统的统一的投影矩阵
				/// </summary>
				/// <param name="matrix"></param>
				/// <param name="dest"></param>
				/// <returns></returns>
				public virtual void _convertProjectionMatrix(EarthView.World.Spatial.Math.Matrix4 matrix, ref EarthView.World.Spatial.Math.Matrix4 dest)
				{
					EarthView_World_Graphic_CRenderSystem__convertProjectionMatrix_void_CMatrix4_CMatrix4(this.NativeObject, object.Equals(matrix, null) ? IntPtr.Zero : matrix.NativeObject, object.Equals(dest, null) ? IntPtr.Zero : dest.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _makeProjectionMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4_ev_bool(IntPtr fovy, double aspect, double nearPlane, double farPlane, IntPtr dest, bool forGpuProgram);

				protected _makeProjectionMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4_ev_bool m__makeProjectionMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_CRadian_Real_Real_Real_CMatrix4_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr fovy, double aspect, double nearPlane, double farPlane, IntPtr dest, byte forGpuProgram);

				/// <summary>
				/// 生成一个适应渲染系统的透视投影矩阵
				/// </summary>
				/// <param name="fovy"></param>
				/// <param name="aspect"></param>
				/// <param name="nearPlane"></param>
				/// <param name="farPlane"></param>
				/// <param name="dest"></param>
				/// <param name="forGpuProgram"></param>
				/// <returns></returns>
				public virtual void _makeProjectionMatrix_NoVirtual(EarthView.World.Spatial.Math.Radian fovy, double aspect, double nearPlane, double farPlane, ref EarthView.World.Spatial.Math.Matrix4 dest, bool forGpuProgram)
				{
					EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_CRadian_Real_Real_Real_CMatrix4_ev_bool_NoVirtual(this.NativeObject, object.Equals(fovy, null) ? IntPtr.Zero : fovy.NativeObject, aspect, nearPlane, farPlane, object.Equals(dest, null) ? IntPtr.Zero : dest.NativeObject, Convert.ToByte(forGpuProgram));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_CRadian_Real_Real_Real_CMatrix4_ev_bool_Function(IntPtr fovy, double aspect, double nearPlane, double farPlane, IntPtr dest, bool forGpuProgram)
				{
					EarthView.World.Spatial.Math.Radian csobj_fovy = new EarthView.World.Spatial.Math.Radian(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_fovy.BindNativeObject(fovy,"CRadian");
					csobj_fovy.Delegate = true;
					IClassFactory csobj_fovyClassFactory = GlobalClassFactoryMap.Get(csobj_fovy.GetCppInstanceTypeName());
					if (csobj_fovyClassFactory != null)
					{
						csobj_fovy.Delegate = true;
						csobj_fovy = csobj_fovyClassFactory.Create() as EarthView.World.Spatial.Math.Radian;
						csobj_fovy.BindNativeObject(fovy, "CRadian");
						csobj_fovy.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_dest = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_dest.BindNativeObject(dest,"CMatrix4");
					csobj_dest.Delegate = true;
					IClassFactory csobj_destClassFactory = GlobalClassFactoryMap.Get(csobj_dest.GetCppInstanceTypeName());
					if (csobj_destClassFactory != null)
					{
						csobj_dest.Delegate = true;
						csobj_dest = csobj_destClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_dest.BindNativeObject(dest, "CMatrix4");
						csobj_dest.Delegate = true;
					}
					
					_makeProjectionMatrix(csobj_fovy, aspect, nearPlane, farPlane, ref csobj_dest, forGpuProgram);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_CRadian_Real_Real_Real_CMatrix4_ev_bool(IntPtr pNativeObject, IntPtr fovy, double aspect, double nearPlane, double farPlane, IntPtr dest, byte forGpuProgram);

				/// <summary>
				/// 生成一个适应渲染系统的透视投影矩阵
				/// </summary>
				/// <param name="fovy"></param>
				/// <param name="aspect"></param>
				/// <param name="nearPlane"></param>
				/// <param name="farPlane"></param>
				/// <param name="dest"></param>
				/// <param name="forGpuProgram"></param>
				/// <returns></returns>
				public virtual void _makeProjectionMatrix(EarthView.World.Spatial.Math.Radian fovy, double aspect, double nearPlane, double farPlane, ref EarthView.World.Spatial.Math.Matrix4 dest, bool forGpuProgram)
				{
					EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_CRadian_Real_Real_Real_CMatrix4_ev_bool(this.NativeObject, object.Equals(fovy, null) ? IntPtr.Zero : fovy.NativeObject, aspect, nearPlane, farPlane, object.Equals(dest, null) ? IntPtr.Zero : dest.NativeObject, Convert.ToByte(forGpuProgram));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _makeProjectionMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4(IntPtr fovy, double aspect, double nearPlane, double farPlane, IntPtr dest);

				protected _makeProjectionMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4 m__makeProjectionMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_CRadian_Real_Real_Real_CMatrix4_NoVirtual(IntPtr pNativeObject, IntPtr fovy, double aspect, double nearPlane, double farPlane, IntPtr dest);

				/// <summary>
				/// 生成一个适应渲染系统的透视投影矩阵
				/// </summary>
				/// <param name="fovy"></param>
				/// <param name="aspect"></param>
				/// <param name="nearPlane"></param>
				/// <param name="farPlane"></param>
				/// <param name="dest"></param>
				/// <returns></returns>
				public virtual void _makeProjectionMatrix_NoVirtual(EarthView.World.Spatial.Math.Radian fovy, double aspect, double nearPlane, double farPlane, ref EarthView.World.Spatial.Math.Matrix4 dest)
				{
					EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_CRadian_Real_Real_Real_CMatrix4_NoVirtual(this.NativeObject, object.Equals(fovy, null) ? IntPtr.Zero : fovy.NativeObject, aspect, nearPlane, farPlane, object.Equals(dest, null) ? IntPtr.Zero : dest.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_CRadian_Real_Real_Real_CMatrix4_Function(IntPtr fovy, double aspect, double nearPlane, double farPlane, IntPtr dest)
				{
					EarthView.World.Spatial.Math.Radian csobj_fovy = new EarthView.World.Spatial.Math.Radian(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_fovy.BindNativeObject(fovy,"CRadian");
					csobj_fovy.Delegate = true;
					IClassFactory csobj_fovyClassFactory = GlobalClassFactoryMap.Get(csobj_fovy.GetCppInstanceTypeName());
					if (csobj_fovyClassFactory != null)
					{
						csobj_fovy.Delegate = true;
						csobj_fovy = csobj_fovyClassFactory.Create() as EarthView.World.Spatial.Math.Radian;
						csobj_fovy.BindNativeObject(fovy, "CRadian");
						csobj_fovy.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_dest = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_dest.BindNativeObject(dest,"CMatrix4");
					csobj_dest.Delegate = true;
					IClassFactory csobj_destClassFactory = GlobalClassFactoryMap.Get(csobj_dest.GetCppInstanceTypeName());
					if (csobj_destClassFactory != null)
					{
						csobj_dest.Delegate = true;
						csobj_dest = csobj_destClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_dest.BindNativeObject(dest, "CMatrix4");
						csobj_dest.Delegate = true;
					}
					
					_makeProjectionMatrix(csobj_fovy, aspect, nearPlane, farPlane, ref csobj_dest);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_CRadian_Real_Real_Real_CMatrix4(IntPtr pNativeObject, IntPtr fovy, double aspect, double nearPlane, double farPlane, IntPtr dest);

				/// <summary>
				/// 生成一个适应渲染系统的透视投影矩阵
				/// </summary>
				/// <param name="fovy"></param>
				/// <param name="aspect"></param>
				/// <param name="nearPlane"></param>
				/// <param name="farPlane"></param>
				/// <param name="dest"></param>
				/// <returns></returns>
				public virtual void _makeProjectionMatrix(EarthView.World.Spatial.Math.Radian fovy, double aspect, double nearPlane, double farPlane, ref EarthView.World.Spatial.Math.Matrix4 dest)
				{
					EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_CRadian_Real_Real_Real_CMatrix4(this.NativeObject, object.Equals(fovy, null) ? IntPtr.Zero : fovy.NativeObject, aspect, nearPlane, farPlane, object.Equals(dest, null) ? IntPtr.Zero : dest.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _makeProjectionMatrix_CallBack_void_Real_Real_Real_Real_Real_Real_CMatrix4_ev_bool(double left, double right, double bottom, double top, double nearPlane, double farPlane, IntPtr dest, bool forGpuProgram);

				protected _makeProjectionMatrix_CallBack_void_Real_Real_Real_Real_Real_Real_CMatrix4_ev_bool m__makeProjectionMatrix_CallBack_void_Real_Real_Real_Real_Real_Real_CMatrix4_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_Real_Real_Real_Real_Real_Real_CMatrix4_ev_bool_NoVirtual(IntPtr pNativeObject, double left, double right, double bottom, double top, double nearPlane, double farPlane, IntPtr dest, byte forGpuProgram);

				/// <summary>
				/// 生成一个适应渲染系统给的透视投影矩阵
				/// </summary>
				/// <param name="left"></param>
				/// <param name="right"></param>
				/// <param name="bottom"></param>
				/// <param name="top"></param>
				/// <param name="nearPlane"></param>
				/// <param name="farPlane"></param>
				/// <param name="dest"></param>
				/// <param name="forGpuProgram"></param>
				/// <returns></returns>
				public virtual void _makeProjectionMatrix_NoVirtual(double left, double right, double bottom, double top, double nearPlane, double farPlane, ref EarthView.World.Spatial.Math.Matrix4 dest, bool forGpuProgram)
				{
					EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_Real_Real_Real_Real_Real_Real_CMatrix4_ev_bool_NoVirtual(this.NativeObject, left, right, bottom, top, nearPlane, farPlane, object.Equals(dest, null) ? IntPtr.Zero : dest.NativeObject, Convert.ToByte(forGpuProgram));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_Real_Real_Real_Real_Real_Real_CMatrix4_ev_bool_Function(double left, double right, double bottom, double top, double nearPlane, double farPlane, IntPtr dest, bool forGpuProgram)
				{
					EarthView.World.Spatial.Math.Matrix4 csobj_dest = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_dest.BindNativeObject(dest,"CMatrix4");
					csobj_dest.Delegate = true;
					IClassFactory csobj_destClassFactory = GlobalClassFactoryMap.Get(csobj_dest.GetCppInstanceTypeName());
					if (csobj_destClassFactory != null)
					{
						csobj_dest.Delegate = true;
						csobj_dest = csobj_destClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_dest.BindNativeObject(dest, "CMatrix4");
						csobj_dest.Delegate = true;
					}
					
					_makeProjectionMatrix(left, right, bottom, top, nearPlane, farPlane, ref csobj_dest, forGpuProgram);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_Real_Real_Real_Real_Real_Real_CMatrix4_ev_bool(IntPtr pNativeObject, double left, double right, double bottom, double top, double nearPlane, double farPlane, IntPtr dest, byte forGpuProgram);

				/// <summary>
				/// 生成一个适应渲染系统给的透视投影矩阵
				/// </summary>
				/// <param name="left"></param>
				/// <param name="right"></param>
				/// <param name="bottom"></param>
				/// <param name="top"></param>
				/// <param name="nearPlane"></param>
				/// <param name="farPlane"></param>
				/// <param name="dest"></param>
				/// <param name="forGpuProgram"></param>
				/// <returns></returns>
				public virtual void _makeProjectionMatrix(double left, double right, double bottom, double top, double nearPlane, double farPlane, ref EarthView.World.Spatial.Math.Matrix4 dest, bool forGpuProgram)
				{
					EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_Real_Real_Real_Real_Real_Real_CMatrix4_ev_bool(this.NativeObject, left, right, bottom, top, nearPlane, farPlane, object.Equals(dest, null) ? IntPtr.Zero : dest.NativeObject, Convert.ToByte(forGpuProgram));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _makeProjectionMatrix_CallBack_void_Real_Real_Real_Real_Real_Real_CMatrix4(double left, double right, double bottom, double top, double nearPlane, double farPlane, IntPtr dest);

				protected _makeProjectionMatrix_CallBack_void_Real_Real_Real_Real_Real_Real_CMatrix4 m__makeProjectionMatrix_CallBack_void_Real_Real_Real_Real_Real_Real_CMatrix4;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_Real_Real_Real_Real_Real_Real_CMatrix4_NoVirtual(IntPtr pNativeObject, double left, double right, double bottom, double top, double nearPlane, double farPlane, IntPtr dest);

				/// <summary>
				/// 生成一个适应渲染系统给的透视投影矩阵
				/// </summary>
				/// <param name="left"></param>
				/// <param name="right"></param>
				/// <param name="bottom"></param>
				/// <param name="top"></param>
				/// <param name="nearPlane"></param>
				/// <param name="farPlane"></param>
				/// <param name="dest"></param>
				/// <returns></returns>
				public virtual void _makeProjectionMatrix_NoVirtual(double left, double right, double bottom, double top, double nearPlane, double farPlane, ref EarthView.World.Spatial.Math.Matrix4 dest)
				{
					EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_Real_Real_Real_Real_Real_Real_CMatrix4_NoVirtual(this.NativeObject, left, right, bottom, top, nearPlane, farPlane, object.Equals(dest, null) ? IntPtr.Zero : dest.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_Real_Real_Real_Real_Real_Real_CMatrix4_Function(double left, double right, double bottom, double top, double nearPlane, double farPlane, IntPtr dest)
				{
					EarthView.World.Spatial.Math.Matrix4 csobj_dest = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_dest.BindNativeObject(dest,"CMatrix4");
					csobj_dest.Delegate = true;
					IClassFactory csobj_destClassFactory = GlobalClassFactoryMap.Get(csobj_dest.GetCppInstanceTypeName());
					if (csobj_destClassFactory != null)
					{
						csobj_dest.Delegate = true;
						csobj_dest = csobj_destClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_dest.BindNativeObject(dest, "CMatrix4");
						csobj_dest.Delegate = true;
					}
					
					_makeProjectionMatrix(left, right, bottom, top, nearPlane, farPlane, ref csobj_dest);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_Real_Real_Real_Real_Real_Real_CMatrix4(IntPtr pNativeObject, double left, double right, double bottom, double top, double nearPlane, double farPlane, IntPtr dest);

				/// <summary>
				/// 生成一个适应渲染系统给的透视投影矩阵
				/// </summary>
				/// <param name="left"></param>
				/// <param name="right"></param>
				/// <param name="bottom"></param>
				/// <param name="top"></param>
				/// <param name="nearPlane"></param>
				/// <param name="farPlane"></param>
				/// <param name="dest"></param>
				/// <returns></returns>
				public virtual void _makeProjectionMatrix(double left, double right, double bottom, double top, double nearPlane, double farPlane, ref EarthView.World.Spatial.Math.Matrix4 dest)
				{
					EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_Real_Real_Real_Real_Real_Real_CMatrix4(this.NativeObject, left, right, bottom, top, nearPlane, farPlane, object.Equals(dest, null) ? IntPtr.Zero : dest.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _makeOrthoMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4_ev_bool(IntPtr fovy, double aspect, double nearPlane, double farPlane, IntPtr dest, bool forGpuProgram);

				protected _makeOrthoMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4_ev_bool m__makeOrthoMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__makeOrthoMatrix_void_CRadian_Real_Real_Real_CMatrix4_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr fovy, double aspect, double nearPlane, double farPlane, IntPtr dest, byte forGpuProgram);

				/// <summary>
				/// 生成一个适合渲染系统的正射投影矩阵
				/// </summary>
				/// <param name="fovy"></param>
				/// <param name="aspect"></param>
				/// <param name="nearPlane"></param>
				/// <param name="farPlane"></param>
				/// <param name="dest"></param>
				/// <param name="forGpuProgram"></param>
				/// <returns></returns>
				public virtual void _makeOrthoMatrix_NoVirtual(EarthView.World.Spatial.Math.Radian fovy, double aspect, double nearPlane, double farPlane, ref EarthView.World.Spatial.Math.Matrix4 dest, bool forGpuProgram)
				{
					EarthView_World_Graphic_CRenderSystem__makeOrthoMatrix_void_CRadian_Real_Real_Real_CMatrix4_ev_bool_NoVirtual(this.NativeObject, object.Equals(fovy, null) ? IntPtr.Zero : fovy.NativeObject, aspect, nearPlane, farPlane, object.Equals(dest, null) ? IntPtr.Zero : dest.NativeObject, Convert.ToByte(forGpuProgram));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__makeOrthoMatrix_void_CRadian_Real_Real_Real_CMatrix4_ev_bool_Function(IntPtr fovy, double aspect, double nearPlane, double farPlane, IntPtr dest, bool forGpuProgram)
				{
					EarthView.World.Spatial.Math.Radian csobj_fovy = new EarthView.World.Spatial.Math.Radian(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_fovy.BindNativeObject(fovy,"CRadian");
					csobj_fovy.Delegate = true;
					IClassFactory csobj_fovyClassFactory = GlobalClassFactoryMap.Get(csobj_fovy.GetCppInstanceTypeName());
					if (csobj_fovyClassFactory != null)
					{
						csobj_fovy.Delegate = true;
						csobj_fovy = csobj_fovyClassFactory.Create() as EarthView.World.Spatial.Math.Radian;
						csobj_fovy.BindNativeObject(fovy, "CRadian");
						csobj_fovy.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_dest = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_dest.BindNativeObject(dest,"CMatrix4");
					csobj_dest.Delegate = true;
					IClassFactory csobj_destClassFactory = GlobalClassFactoryMap.Get(csobj_dest.GetCppInstanceTypeName());
					if (csobj_destClassFactory != null)
					{
						csobj_dest.Delegate = true;
						csobj_dest = csobj_destClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_dest.BindNativeObject(dest, "CMatrix4");
						csobj_dest.Delegate = true;
					}
					
					_makeOrthoMatrix(csobj_fovy, aspect, nearPlane, farPlane, ref csobj_dest, forGpuProgram);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__makeOrthoMatrix_void_CRadian_Real_Real_Real_CMatrix4_ev_bool(IntPtr pNativeObject, IntPtr fovy, double aspect, double nearPlane, double farPlane, IntPtr dest, byte forGpuProgram);

				/// <summary>
				/// 生成一个适合渲染系统的正射投影矩阵
				/// </summary>
				/// <param name="fovy"></param>
				/// <param name="aspect"></param>
				/// <param name="nearPlane"></param>
				/// <param name="farPlane"></param>
				/// <param name="dest"></param>
				/// <param name="forGpuProgram"></param>
				/// <returns></returns>
				public virtual void _makeOrthoMatrix(EarthView.World.Spatial.Math.Radian fovy, double aspect, double nearPlane, double farPlane, ref EarthView.World.Spatial.Math.Matrix4 dest, bool forGpuProgram)
				{
					EarthView_World_Graphic_CRenderSystem__makeOrthoMatrix_void_CRadian_Real_Real_Real_CMatrix4_ev_bool(this.NativeObject, object.Equals(fovy, null) ? IntPtr.Zero : fovy.NativeObject, aspect, nearPlane, farPlane, object.Equals(dest, null) ? IntPtr.Zero : dest.NativeObject, Convert.ToByte(forGpuProgram));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _makeOrthoMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4(IntPtr fovy, double aspect, double nearPlane, double farPlane, IntPtr dest);

				protected _makeOrthoMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4 m__makeOrthoMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__makeOrthoMatrix_void_CRadian_Real_Real_Real_CMatrix4_NoVirtual(IntPtr pNativeObject, IntPtr fovy, double aspect, double nearPlane, double farPlane, IntPtr dest);

				/// <summary>
				/// 生成一个适合渲染系统的正射投影矩阵
				/// </summary>
				/// <param name="fovy"></param>
				/// <param name="aspect"></param>
				/// <param name="nearPlane"></param>
				/// <param name="farPlane"></param>
				/// <param name="dest"></param>
				/// <returns></returns>
				public virtual void _makeOrthoMatrix_NoVirtual(EarthView.World.Spatial.Math.Radian fovy, double aspect, double nearPlane, double farPlane, ref EarthView.World.Spatial.Math.Matrix4 dest)
				{
					EarthView_World_Graphic_CRenderSystem__makeOrthoMatrix_void_CRadian_Real_Real_Real_CMatrix4_NoVirtual(this.NativeObject, object.Equals(fovy, null) ? IntPtr.Zero : fovy.NativeObject, aspect, nearPlane, farPlane, object.Equals(dest, null) ? IntPtr.Zero : dest.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__makeOrthoMatrix_void_CRadian_Real_Real_Real_CMatrix4_Function(IntPtr fovy, double aspect, double nearPlane, double farPlane, IntPtr dest)
				{
					EarthView.World.Spatial.Math.Radian csobj_fovy = new EarthView.World.Spatial.Math.Radian(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_fovy.BindNativeObject(fovy,"CRadian");
					csobj_fovy.Delegate = true;
					IClassFactory csobj_fovyClassFactory = GlobalClassFactoryMap.Get(csobj_fovy.GetCppInstanceTypeName());
					if (csobj_fovyClassFactory != null)
					{
						csobj_fovy.Delegate = true;
						csobj_fovy = csobj_fovyClassFactory.Create() as EarthView.World.Spatial.Math.Radian;
						csobj_fovy.BindNativeObject(fovy, "CRadian");
						csobj_fovy.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_dest = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_dest.BindNativeObject(dest,"CMatrix4");
					csobj_dest.Delegate = true;
					IClassFactory csobj_destClassFactory = GlobalClassFactoryMap.Get(csobj_dest.GetCppInstanceTypeName());
					if (csobj_destClassFactory != null)
					{
						csobj_dest.Delegate = true;
						csobj_dest = csobj_destClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_dest.BindNativeObject(dest, "CMatrix4");
						csobj_dest.Delegate = true;
					}
					
					_makeOrthoMatrix(csobj_fovy, aspect, nearPlane, farPlane, ref csobj_dest);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__makeOrthoMatrix_void_CRadian_Real_Real_Real_CMatrix4(IntPtr pNativeObject, IntPtr fovy, double aspect, double nearPlane, double farPlane, IntPtr dest);

				/// <summary>
				/// 生成一个适合渲染系统的正射投影矩阵
				/// </summary>
				/// <param name="fovy"></param>
				/// <param name="aspect"></param>
				/// <param name="nearPlane"></param>
				/// <param name="farPlane"></param>
				/// <param name="dest"></param>
				/// <returns></returns>
				public virtual void _makeOrthoMatrix(EarthView.World.Spatial.Math.Radian fovy, double aspect, double nearPlane, double farPlane, ref EarthView.World.Spatial.Math.Matrix4 dest)
				{
					EarthView_World_Graphic_CRenderSystem__makeOrthoMatrix_void_CRadian_Real_Real_Real_CMatrix4(this.NativeObject, object.Equals(fovy, null) ? IntPtr.Zero : fovy.NativeObject, aspect, nearPlane, farPlane, object.Equals(dest, null) ? IntPtr.Zero : dest.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _applyObliqueDepthProjection_CallBack_void_CMatrix4_CPlane_ev_bool(IntPtr matrix, IntPtr plane, bool forGpuProgram);

				protected _applyObliqueDepthProjection_CallBack_void_CMatrix4_CPlane_ev_bool m__applyObliqueDepthProjection_CallBack_void_CMatrix4_CPlane_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__applyObliqueDepthProjection_void_CMatrix4_CPlane_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr matrix, IntPtr plane, byte forGpuProgram);

				/// <summary>
				/// 更新透视投影矩阵，应用倾斜深度投影
				/// </summary>
				/// <param name="matrix">已存在的投影矩阵</param>
				/// <param name="plane">剪切平面</param>
				/// <param name="forGpuProgram"></param>
				/// <returns></returns>
				public virtual void _applyObliqueDepthProjection_NoVirtual(ref EarthView.World.Spatial.Math.Matrix4 matrix, EarthView.World.Spatial.Math.Plane plane, bool forGpuProgram)
				{
					EarthView_World_Graphic_CRenderSystem__applyObliqueDepthProjection_void_CMatrix4_CPlane_ev_bool_NoVirtual(this.NativeObject, object.Equals(matrix, null) ? IntPtr.Zero : matrix.NativeObject, object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, Convert.ToByte(forGpuProgram));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__applyObliqueDepthProjection_void_CMatrix4_CPlane_ev_bool_Function(IntPtr matrix, IntPtr plane, bool forGpuProgram)
				{
					EarthView.World.Spatial.Math.Matrix4 csobj_matrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_matrix.BindNativeObject(matrix,"CMatrix4");
					csobj_matrix.Delegate = true;
					IClassFactory csobj_matrixClassFactory = GlobalClassFactoryMap.Get(csobj_matrix.GetCppInstanceTypeName());
					if (csobj_matrixClassFactory != null)
					{
						csobj_matrix.Delegate = true;
						csobj_matrix = csobj_matrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_matrix.BindNativeObject(matrix, "CMatrix4");
						csobj_matrix.Delegate = true;
					}
					EarthView.World.Spatial.Math.Plane csobj_plane = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_plane.BindNativeObject(plane,"CPlane");
					csobj_plane.Delegate = true;
					IClassFactory csobj_planeClassFactory = GlobalClassFactoryMap.Get(csobj_plane.GetCppInstanceTypeName());
					if (csobj_planeClassFactory != null)
					{
						csobj_plane.Delegate = true;
						csobj_plane = csobj_planeClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_plane.BindNativeObject(plane, "CPlane");
						csobj_plane.Delegate = true;
					}
					
					_applyObliqueDepthProjection(ref csobj_matrix, csobj_plane, forGpuProgram);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__applyObliqueDepthProjection_void_CMatrix4_CPlane_ev_bool(IntPtr pNativeObject, IntPtr matrix, IntPtr plane, byte forGpuProgram);

				/// <summary>
				/// 更新透视投影矩阵，应用倾斜深度投影
				/// </summary>
				/// <param name="matrix">已存在的投影矩阵</param>
				/// <param name="plane">剪切平面</param>
				/// <param name="forGpuProgram"></param>
				/// <returns></returns>
				public virtual void _applyObliqueDepthProjection(ref EarthView.World.Spatial.Math.Matrix4 matrix, EarthView.World.Spatial.Math.Plane plane, bool forGpuProgram)
				{
					EarthView_World_Graphic_CRenderSystem__applyObliqueDepthProjection_void_CMatrix4_CPlane_ev_bool(this.NativeObject, object.Equals(matrix, null) ? IntPtr.Zero : matrix.NativeObject, object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, Convert.ToByte(forGpuProgram));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setPolygonMode_CallBack_void_PolygonMode(EarthView.World.Graphic.POLYGONMODE level);

				protected _setPolygonMode_CallBack_void_PolygonMode m__setPolygonMode_CallBack_void_PolygonMode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setPolygonMode_void_PolygonMode_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.POLYGONMODE level);

				public virtual void _setPolygonMode_NoVirtual(EarthView.World.Graphic.POLYGONMODE level)
				{
					EarthView_World_Graphic_CRenderSystem__setPolygonMode_void_PolygonMode_NoVirtual(this.NativeObject, level);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setPolygonMode_void_PolygonMode_Function(EarthView.World.Graphic.POLYGONMODE level)
				{
					_setPolygonMode(level);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setPolygonMode_void_PolygonMode(IntPtr pNativeObject, EarthView.World.Graphic.POLYGONMODE level);

				public virtual void _setPolygonMode(EarthView.World.Graphic.POLYGONMODE level)
				{
					EarthView_World_Graphic_CRenderSystem__setPolygonMode_void_PolygonMode(this.NativeObject, level);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setStencilCheckEnabled_CallBack_void_ev_bool(bool enabled);

				protected setStencilCheckEnabled_CallBack_void_ev_bool m_setStencilCheckEnabled_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilCheckEnabled_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte enabled);

				/// <summary>
				/// 设置是否启用模板缓冲测试
				/// </summary>
				/// <param name="evabled"></param>
				/// <returns></returns>
				public virtual void SetStencilCheckEnabled_NoVirtual(bool enabled)
				{
					EarthView_World_Graphic_CRenderSystem_setStencilCheckEnabled_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(enabled));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setStencilCheckEnabled_void_ev_bool_Function(bool enabled)
				{
					SetStencilCheckEnabled(enabled);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilCheckEnabled_void_ev_bool(IntPtr pNativeObject, byte enabled);

				/// <summary>
				/// 设置是否启用模板缓冲测试
				/// </summary>
				/// <param name="evabled"></param>
				/// <returns></returns>
				public virtual void SetStencilCheckEnabled(bool enabled)
				{
					EarthView_World_Graphic_CRenderSystem_setStencilCheckEnabled_void_ev_bool(this.NativeObject, Convert.ToByte(enabled));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_ev_bool(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp, STENCILOPERATION passOp, bool twoSidedOperation);

				protected setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_ev_bool m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_ev_bool_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp, STENCILOPERATION passOp, byte twoSidedOperation);

				/// <summary>
				/// 设置模板缓冲测试参数
				/// </summary>
				/// <param name="func">比较函数</param>
				/// <param name="refValue">参考值</param>
				/// <param name="mask"></param>
				/// <param name="stencilFailOp">模板检查失败时模板缓冲产生的行为</param>
				/// <param name="depthFailOp">模板检查通过，但是深度检查失败时模板缓冲产生的行为</param>
				/// <param name="passOp">模板检查和深度检查都通过时模板缓冲产生的行为</param>
				/// <param name="twoSidedOperation"></param>
				/// <returns></returns>
				public virtual void SetStencilBufferParams_NoVirtual(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp, STENCILOPERATION passOp, bool twoSidedOperation)
				{
					EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_ev_bool_NoVirtual(this.NativeObject, func, refValue, mask, stencilFailOp, depthFailOp, passOp, Convert.ToByte(twoSidedOperation));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_ev_bool_Function(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp, STENCILOPERATION passOp, bool twoSidedOperation)
				{
					SetStencilBufferParams(func, refValue, mask, stencilFailOp, depthFailOp, passOp, twoSidedOperation);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_ev_bool(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp, STENCILOPERATION passOp, byte twoSidedOperation);

				/// <summary>
				/// 设置模板缓冲测试参数
				/// </summary>
				/// <param name="func">比较函数</param>
				/// <param name="refValue">参考值</param>
				/// <param name="mask"></param>
				/// <param name="stencilFailOp">模板检查失败时模板缓冲产生的行为</param>
				/// <param name="depthFailOp">模板检查通过，但是深度检查失败时模板缓冲产生的行为</param>
				/// <param name="passOp">模板检查和深度检查都通过时模板缓冲产生的行为</param>
				/// <param name="twoSidedOperation"></param>
				/// <returns></returns>
				public virtual void SetStencilBufferParams(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp, STENCILOPERATION passOp, bool twoSidedOperation)
				{
					EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_ev_bool(this.NativeObject, func, refValue, mask, stencilFailOp, depthFailOp, passOp, Convert.ToByte(twoSidedOperation));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp, STENCILOPERATION passOp);

				protected setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp, STENCILOPERATION passOp);

				/// <summary>
				/// 设置模板缓冲测试参数
				/// </summary>
				/// <param name="func">比较函数</param>
				/// <param name="refValue">参考值</param>
				/// <param name="mask"></param>
				/// <param name="stencilFailOp">模板检查失败时模板缓冲产生的行为</param>
				/// <param name="depthFailOp">模板检查通过，但是深度检查失败时模板缓冲产生的行为</param>
				/// <param name="passOp">模板检查和深度检查都通过时模板缓冲产生的行为</param>
				/// <returns></returns>
				public virtual void SetStencilBufferParams_NoVirtual(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp, STENCILOPERATION passOp)
				{
					EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_NoVirtual(this.NativeObject, func, refValue, mask, stencilFailOp, depthFailOp, passOp);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_Function(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp, STENCILOPERATION passOp)
				{
					SetStencilBufferParams(func, refValue, mask, stencilFailOp, depthFailOp, passOp);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp, STENCILOPERATION passOp);

				/// <summary>
				/// 设置模板缓冲测试参数
				/// </summary>
				/// <param name="func">比较函数</param>
				/// <param name="refValue">参考值</param>
				/// <param name="mask"></param>
				/// <param name="stencilFailOp">模板检查失败时模板缓冲产生的行为</param>
				/// <param name="depthFailOp">模板检查通过，但是深度检查失败时模板缓冲产生的行为</param>
				/// <param name="passOp">模板检查和深度检查都通过时模板缓冲产生的行为</param>
				/// <returns></returns>
				public virtual void SetStencilBufferParams(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp, STENCILOPERATION passOp)
				{
					EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation(this.NativeObject, func, refValue, mask, stencilFailOp, depthFailOp, passOp);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp);

				protected setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp);

				/// <summary>
				/// 设置模板缓冲测试参数
				/// </summary>
				/// <param name="func">比较函数</param>
				/// <param name="refValue">参考值</param>
				/// <param name="mask"></param>
				/// <param name="stencilFailOp">模板检查失败时模板缓冲产生的行为</param>
				/// <param name="depthFailOp">模板检查通过，但是深度检查失败时模板缓冲产生的行为</param>
				/// <returns></returns>
				public virtual void SetStencilBufferParams_NoVirtual(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp)
				{
					EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_NoVirtual(this.NativeObject, func, refValue, mask, stencilFailOp, depthFailOp);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_Function(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp)
				{
					SetStencilBufferParams(func, refValue, mask, stencilFailOp, depthFailOp);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp);

				/// <summary>
				/// 设置模板缓冲测试参数
				/// </summary>
				/// <param name="func">比较函数</param>
				/// <param name="refValue">参考值</param>
				/// <param name="mask"></param>
				/// <param name="stencilFailOp">模板检查失败时模板缓冲产生的行为</param>
				/// <param name="depthFailOp">模板检查通过，但是深度检查失败时模板缓冲产生的行为</param>
				/// <returns></returns>
				public virtual void SetStencilBufferParams(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp, STENCILOPERATION depthFailOp)
				{
					EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation(this.NativeObject, func, refValue, mask, stencilFailOp, depthFailOp);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp);

				protected setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp);

				/// <summary>
				/// 设置模板缓冲测试参数
				/// </summary>
				/// <param name="func">比较函数</param>
				/// <param name="refValue">参考值</param>
				/// <param name="mask"></param>
				/// <param name="stencilFailOp">模板检查失败时模板缓冲产生的行为</param>
				/// <returns></returns>
				public virtual void SetStencilBufferParams_NoVirtual(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp)
				{
					EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_NoVirtual(this.NativeObject, func, refValue, mask, stencilFailOp);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_Function(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp)
				{
					SetStencilBufferParams(func, refValue, mask, stencilFailOp);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp);

				/// <summary>
				/// 设置模板缓冲测试参数
				/// </summary>
				/// <param name="func">比较函数</param>
				/// <param name="refValue">参考值</param>
				/// <param name="mask"></param>
				/// <param name="stencilFailOp">模板检查失败时模板缓冲产生的行为</param>
				/// <returns></returns>
				public virtual void SetStencilBufferParams(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask, STENCILOPERATION stencilFailOp)
				{
					EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation(this.NativeObject, func, refValue, mask, stencilFailOp);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask);

				protected setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32 m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask);

				/// <summary>
				/// 设置模板缓冲测试参数
				/// </summary>
				/// <param name="func">比较函数</param>
				/// <param name="refValue">参考值</param>
				/// <param name="mask"></param>
				/// <returns></returns>
				public virtual void SetStencilBufferParams_NoVirtual(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask)
				{
					EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_NoVirtual(this.NativeObject, func, refValue, mask);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_Function(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask)
				{
					SetStencilBufferParams(func, refValue, mask);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask);

				/// <summary>
				/// 设置模板缓冲测试参数
				/// </summary>
				/// <param name="func">比较函数</param>
				/// <param name="refValue">参考值</param>
				/// <param name="mask"></param>
				/// <returns></returns>
				public virtual void SetStencilBufferParams(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue, uint mask)
				{
					EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32(this.NativeObject, func, refValue, mask);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue);

				protected setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32 m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue);

				/// <summary>
				/// 设置模板缓冲测试参数
				/// </summary>
				/// <param name="func">比较函数</param>
				/// <param name="refValue">参考值</param>
				/// <returns></returns>
				public virtual void SetStencilBufferParams_NoVirtual(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue)
				{
					EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_NoVirtual(this.NativeObject, func, refValue);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_Function(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue)
				{
					SetStencilBufferParams(func, refValue);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue);

				/// <summary>
				/// 设置模板缓冲测试参数
				/// </summary>
				/// <param name="func">比较函数</param>
				/// <param name="refValue">参考值</param>
				/// <returns></returns>
				public virtual void SetStencilBufferParams(EarthView.World.Graphic.COMPAREFUNCTION func, uint refValue)
				{
					EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32(this.NativeObject, func, refValue);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setStencilBufferParams_CallBack_void_CompareFunction(EarthView.World.Graphic.COMPAREFUNCTION func);

				protected setStencilBufferParams_CallBack_void_CompareFunction m_setStencilBufferParams_CallBack_void_CompareFunction;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func);

				/// <summary>
				/// 设置模板缓冲测试参数
				/// </summary>
				/// <param name="func">比较函数</param>
				/// <returns></returns>
				public virtual void SetStencilBufferParams_NoVirtual(EarthView.World.Graphic.COMPAREFUNCTION func)
				{
					EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_NoVirtual(this.NativeObject, func);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_Function(EarthView.World.Graphic.COMPAREFUNCTION func)
				{
					SetStencilBufferParams(func);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction(IntPtr pNativeObject, EarthView.World.Graphic.COMPAREFUNCTION func);

				/// <summary>
				/// 设置模板缓冲测试参数
				/// </summary>
				/// <param name="func">比较函数</param>
				/// <returns></returns>
				public virtual void SetStencilBufferParams(EarthView.World.Graphic.COMPAREFUNCTION func)
				{
					EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction(this.NativeObject, func);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setStencilBufferParams_CallBack_void();

				protected setStencilBufferParams_CallBack_void m_setStencilBufferParams_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 设置模板缓冲测试参数
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void SetStencilBufferParams_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_Function()
				{
					SetStencilBufferParams();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void(IntPtr pNativeObject);

				/// <summary>
				/// 设置模板缓冲测试参数
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void SetStencilBufferParams()
				{
					EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setVertexDeclaration_CallBack_void_CVertexDeclaration(IntPtr decl);

				protected setVertexDeclaration_CallBack_void_CVertexDeclaration m_setVertexDeclaration_CallBack_void_CVertexDeclaration;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setVertexDeclaration_void_CVertexDeclaration_NoVirtual(IntPtr pNativeObject, IntPtr decl);

				/// <summary>
				/// 设置当前的顶点声明
				/// </summary>
				/// <param name="decl"></param>
				/// <returns></returns>
				public virtual void SetVertexDeclaration_NoVirtual(EarthView.World.Graphic.VertexDeclaration decl)
				{
					EarthView_World_Graphic_CRenderSystem_setVertexDeclaration_void_CVertexDeclaration_NoVirtual(this.NativeObject, object.Equals(decl, null) ? IntPtr.Zero : decl.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setVertexDeclaration_void_CVertexDeclaration_Function(IntPtr decl)
				{
					EarthView.World.Graphic.VertexDeclaration csobj_decl = new EarthView.World.Graphic.VertexDeclaration(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_decl.BindNativeObject(decl,"CVertexDeclaration");
					csobj_decl.Delegate = true;
					IClassFactory csobj_declClassFactory = GlobalClassFactoryMap.Get(csobj_decl.GetCppInstanceTypeName());
					if (csobj_declClassFactory != null)
					{
						csobj_decl.Delegate = true;
						csobj_decl = csobj_declClassFactory.Create() as EarthView.World.Graphic.VertexDeclaration;
						csobj_decl.BindNativeObject(decl, "CVertexDeclaration");
						csobj_decl.Delegate = true;
					}
					
					SetVertexDeclaration(csobj_decl);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setVertexDeclaration_void_CVertexDeclaration(IntPtr pNativeObject, IntPtr decl);

				/// <summary>
				/// 设置当前的顶点声明
				/// </summary>
				/// <param name="decl"></param>
				/// <returns></returns>
				public virtual void SetVertexDeclaration(EarthView.World.Graphic.VertexDeclaration decl)
				{
					EarthView_World_Graphic_CRenderSystem_setVertexDeclaration_void_CVertexDeclaration(this.NativeObject, object.Equals(decl, null) ? IntPtr.Zero : decl.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setVertexBufferBinding_CallBack_void_CVertexBufferBinding(IntPtr binding);

				protected setVertexBufferBinding_CallBack_void_CVertexBufferBinding m_setVertexBufferBinding_CallBack_void_CVertexBufferBinding;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setVertexBufferBinding_void_CVertexBufferBinding_NoVirtual(IntPtr pNativeObject, IntPtr binding);

				/// <summary>
				/// 设定当前的顶点缓冲的绑定状态
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void SetVertexBufferBinding_NoVirtual(EarthView.World.Graphic.VertexBufferBinding binding)
				{
					EarthView_World_Graphic_CRenderSystem_setVertexBufferBinding_void_CVertexBufferBinding_NoVirtual(this.NativeObject, object.Equals(binding, null) ? IntPtr.Zero : binding.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setVertexBufferBinding_void_CVertexBufferBinding_Function(IntPtr binding)
				{
					EarthView.World.Graphic.VertexBufferBinding csobj_binding = new EarthView.World.Graphic.VertexBufferBinding(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_binding.BindNativeObject(binding,"CVertexBufferBinding");
					csobj_binding.Delegate = true;
					IClassFactory csobj_bindingClassFactory = GlobalClassFactoryMap.Get(csobj_binding.GetCppInstanceTypeName());
					if (csobj_bindingClassFactory != null)
					{
						csobj_binding.Delegate = true;
						csobj_binding = csobj_bindingClassFactory.Create() as EarthView.World.Graphic.VertexBufferBinding;
						csobj_binding.BindNativeObject(binding, "CVertexBufferBinding");
						csobj_binding.Delegate = true;
					}
					
					SetVertexBufferBinding(csobj_binding);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setVertexBufferBinding_void_CVertexBufferBinding(IntPtr pNativeObject, IntPtr binding);

				/// <summary>
				/// 设定当前的顶点缓冲的绑定状态
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void SetVertexBufferBinding(EarthView.World.Graphic.VertexBufferBinding binding)
				{
					EarthView_World_Graphic_CRenderSystem_setVertexBufferBinding_void_CVertexBufferBinding(this.NativeObject, object.Equals(binding, null) ? IntPtr.Zero : binding.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setNormaliseNormals_CallBack_void_ev_bool(bool normalise);

				protected setNormaliseNormals_CallBack_void_ev_bool m_setNormaliseNormals_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setNormaliseNormals_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte normalise);

				public virtual void SetNormaliseNormals_NoVirtual(bool normalise)
				{
					EarthView_World_Graphic_CRenderSystem_setNormaliseNormals_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(normalise));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setNormaliseNormals_void_ev_bool_Function(bool normalise)
				{
					SetNormaliseNormals(normalise);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setNormaliseNormals_void_ev_bool(IntPtr pNativeObject, byte normalise);

				public virtual void SetNormaliseNormals(bool normalise)
				{
					EarthView_World_Graphic_CRenderSystem_setNormaliseNormals_void_ev_bool(this.NativeObject, Convert.ToByte(normalise));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _render_CallBack_void_CRenderOperation(IntPtr op);

				protected _render_CallBack_void_CRenderOperation m__render_CallBack_void_CRenderOperation;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__render_void_CRenderOperation_NoVirtual(IntPtr pNativeObject, IntPtr op);

				/// <summary>
				/// 渲染
				/// </summary>
				/// <param name="op">渲染操作实例</param>
				/// <returns></returns>
				public virtual void _render_NoVirtual(EarthView.World.Graphic.RenderOperation op)
				{
					EarthView_World_Graphic_CRenderSystem__render_void_CRenderOperation_NoVirtual(this.NativeObject, object.Equals(op, null) ? IntPtr.Zero : op.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__render_void_CRenderOperation_Function(IntPtr op)
				{
					EarthView.World.Graphic.RenderOperation csobj_op = new EarthView.World.Graphic.RenderOperation(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_op.BindNativeObject(op,"CRenderOperation");
					csobj_op.Delegate = true;
					IClassFactory csobj_opClassFactory = GlobalClassFactoryMap.Get(csobj_op.GetCppInstanceTypeName());
					if (csobj_opClassFactory != null)
					{
						csobj_op.Delegate = true;
						csobj_op = csobj_opClassFactory.Create() as EarthView.World.Graphic.RenderOperation;
						csobj_op.BindNativeObject(op, "CRenderOperation");
						csobj_op.Delegate = true;
					}
					
					_render(csobj_op);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__render_void_CRenderOperation(IntPtr pNativeObject, IntPtr op);

				/// <summary>
				/// 渲染
				/// </summary>
				/// <param name="op">渲染操作实例</param>
				/// <returns></returns>
				public virtual void _render(EarthView.World.Graphic.RenderOperation op)
				{
					EarthView_World_Graphic_CRenderSystem__render_void_CRenderOperation(this.NativeObject, object.Equals(op, null) ? IntPtr.Zero : op.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getCapabilities_CRenderSystemCapabilities(IntPtr pNativeObject);

				/// <summary>
				/// 获得渲染系统的能力
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public EarthView.World.Graphic.RenderSystemCapabilities GetCapabilities()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getCapabilities_CRenderSystemCapabilities(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderSystemCapabilities csObj = new EarthView.World.Graphic.RenderSystemCapabilities(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderSystemCapabilities");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderSystemCapabilities;
						csObj.BindNativeObject(__ptr, "CRenderSystemCapabilities");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getDriverVersion_CallBack_DriverVersion();

				protected getDriverVersion_CallBack_DriverVersion m_getDriverVersion_CallBack_DriverVersion;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getDriverVersion_DriverVersion_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 返回驱动的译本
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.DriverVersion GetDriverVersion_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getDriverVersion_DriverVersion_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.DriverVersion csObj = new EarthView.World.Graphic.DriverVersion(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "DriverVersion");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.DriverVersion;
						csObj.BindNativeObject(__ptr, "DriverVersion");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem_getDriverVersion_DriverVersion_Function()
				{
					EarthView.World.Graphic.DriverVersion csret=GetDriverVersion();
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getDriverVersion_DriverVersion(IntPtr pNativeObject);

				/// <summary>
				/// 返回驱动的译本
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.DriverVersion GetDriverVersion()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getDriverVersion_DriverVersion(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.DriverVersion csObj = new EarthView.World.Graphic.DriverVersion(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "DriverVersion");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.DriverVersion;
						csObj.BindNativeObject(__ptr, "DriverVersion");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getActD3D9Device_CallBack_void();

				protected getActD3D9Device_CallBack_void m_getActD3D9Device_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getActD3D9Device_void_NoVirtual(IntPtr pNativeObject);

				public virtual IntPtr GetActD3D9Device_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getActD3D9Device_void_NoVirtual(this.NativeObject);
					
					return __ptr;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem_getActD3D9Device_void_Function()
				{
					IntPtr csret=GetActD3D9Device();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getActD3D9Device_void(IntPtr pNativeObject);

				public virtual IntPtr GetActD3D9Device()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getActD3D9Device_void(this.NativeObject);
					
					return __ptr;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate string _getDefaultViewportMaterialScheme_CallBack_EVString();

				protected _getDefaultViewportMaterialScheme_CallBack_EVString m__getDefaultViewportMaterialScheme_CallBack_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__getDefaultViewportMaterialScheme_EVString_NoVirtual(IntPtr pNativeObject);

				public virtual string _getDefaultViewportMaterialScheme_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__getDefaultViewportMaterialScheme_EVString_NoVirtual(this.NativeObject);
					
					string ret = Marshal.PtrToStringAnsi(__ptr);
					ClassFactory.FreeString(ref __ptr);
					return ret;
					
				}

				protected  string EarthView_World_Graphic_CRenderSystem__getDefaultViewportMaterialScheme_EVString_Function()
				{
					string csret=_getDefaultViewportMaterialScheme();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem__getDefaultViewportMaterialScheme_EVString(IntPtr pNativeObject);

				public virtual string _getDefaultViewportMaterialScheme()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem__getDefaultViewportMaterialScheme_EVString(this.NativeObject);
					
					string ret = Marshal.PtrToStringAnsi(__ptr);
					ClassFactory.FreeString(ref __ptr);
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void bindGpuProgram_CallBack_void_CGpuProgram(IntPtr ref_prg);

				protected bindGpuProgram_CallBack_void_CGpuProgram m_bindGpuProgram_CallBack_void_CGpuProgram;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_bindGpuProgram_void_CGpuProgram_NoVirtual(IntPtr pNativeObject, IntPtr ref_prg);

				/// <summary>
				/// 绑定Gpu程序
				/// </summary>
				/// <param name="prg"></param>
				/// <returns></returns>
				public virtual void BindGpuProgram_NoVirtual(EarthView.World.Graphic.GpuProgram ref_prg)
				{
					EarthView_World_Graphic_CRenderSystem_bindGpuProgram_void_CGpuProgram_NoVirtual(this.NativeObject, object.Equals(ref_prg, null) ? IntPtr.Zero : ref_prg.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_bindGpuProgram_void_CGpuProgram_Function(IntPtr ref_prg)
				{
					EarthView.World.Graphic.GpuProgram csobj_ref_prg = new EarthView.World.Graphic.GpuProgram(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_ref_prg.BindNativeObject(ref_prg,"CGpuProgram");
					csobj_ref_prg.Delegate = true;
					IClassFactory csobj_ref_prgClassFactory = GlobalClassFactoryMap.Get(csobj_ref_prg.GetCppInstanceTypeName());
					if (csobj_ref_prgClassFactory != null)
					{
						csobj_ref_prg.Delegate = true;
						csobj_ref_prg = csobj_ref_prgClassFactory.Create() as EarthView.World.Graphic.GpuProgram;
						csobj_ref_prg.BindNativeObject(ref_prg, "CGpuProgram");
						csobj_ref_prg.Delegate = true;
					}
					
					BindGpuProgram(csobj_ref_prg);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_bindGpuProgram_void_CGpuProgram(IntPtr pNativeObject, IntPtr ref_prg);

				/// <summary>
				/// 绑定Gpu程序
				/// </summary>
				/// <param name="prg"></param>
				/// <returns></returns>
				public virtual void BindGpuProgram(EarthView.World.Graphic.GpuProgram ref_prg)
				{
					EarthView_World_Graphic_CRenderSystem_bindGpuProgram_void_CGpuProgram(this.NativeObject, object.Equals(ref_prg, null) ? IntPtr.Zero : ref_prg.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void bindGpuProgramParameters_CallBack_void_GpuProgramType_GpuProgramParametersSharedPtr_ev_uint16(EarthView.World.Graphic.GPUPROGRAMTYPE gptype, IntPtr EVparams, ushort variabilityMask);

				protected bindGpuProgramParameters_CallBack_void_GpuProgramType_GpuProgramParametersSharedPtr_ev_uint16 m_bindGpuProgramParameters_CallBack_void_GpuProgramType_GpuProgramParametersSharedPtr_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_bindGpuProgramParameters_void_GpuProgramType_GpuProgramParametersSharedPtr_ev_uint16_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.GPUPROGRAMTYPE gptype, IntPtr EVparams, ushort variabilityMask);

				/// <summary>
				/// 绑定Gpu程序的参数
				/// </summary>
				/// <param name="gptype">程序的类型</param>
				/// <param name="params">参数</param>
				/// <param name="variabilityMask">标识哪些参数需要绑定</param>
				/// <returns></returns>
				public virtual void BindGpuProgramParameters_NoVirtual(EarthView.World.Graphic.GPUPROGRAMTYPE gptype, EarthView.World.Graphic.GpuProgramParametersSharedPtr EVparams, ushort variabilityMask)
				{
					EarthView_World_Graphic_CRenderSystem_bindGpuProgramParameters_void_GpuProgramType_GpuProgramParametersSharedPtr_ev_uint16_NoVirtual(this.NativeObject, gptype, object.Equals(EVparams, null) ? IntPtr.Zero : EVparams.NativeObject, variabilityMask);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_bindGpuProgramParameters_void_GpuProgramType_GpuProgramParametersSharedPtr_ev_uint16_Function(EarthView.World.Graphic.GPUPROGRAMTYPE gptype, IntPtr EVparams, ushort variabilityMask)
				{
					EarthView.World.Graphic.GpuProgramParametersSharedPtr csobj_params = new EarthView.World.Graphic.GpuProgramParametersSharedPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_params.BindNativeObject(EVparams,"GpuProgramParametersSharedPtr");
					IClassFactory csobj_paramsClassFactory = GlobalClassFactoryMap.Get(csobj_params.GetCppInstanceTypeName());
					if (csobj_paramsClassFactory != null)
					{
						csobj_params.Delegate = true;
						csobj_params = csobj_paramsClassFactory.Create() as EarthView.World.Graphic.GpuProgramParametersSharedPtr;
						csobj_params.BindNativeObject(EVparams, "GpuProgramParametersSharedPtr");
					}
					
					BindGpuProgramParameters(gptype, csobj_params, variabilityMask);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_bindGpuProgramParameters_void_GpuProgramType_GpuProgramParametersSharedPtr_ev_uint16(IntPtr pNativeObject, EarthView.World.Graphic.GPUPROGRAMTYPE gptype, IntPtr EVparams, ushort variabilityMask);

				/// <summary>
				/// 绑定Gpu程序的参数
				/// </summary>
				/// <param name="gptype">程序的类型</param>
				/// <param name="params">参数</param>
				/// <param name="variabilityMask">标识哪些参数需要绑定</param>
				/// <returns></returns>
				public virtual void BindGpuProgramParameters(EarthView.World.Graphic.GPUPROGRAMTYPE gptype, EarthView.World.Graphic.GpuProgramParametersSharedPtr EVparams, ushort variabilityMask)
				{
					EarthView_World_Graphic_CRenderSystem_bindGpuProgramParameters_void_GpuProgramType_GpuProgramParametersSharedPtr_ev_uint16(this.NativeObject, gptype, object.Equals(EVparams, null) ? IntPtr.Zero : EVparams.NativeObject, variabilityMask);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void bindGpuProgramPassIterationParameters_CallBack_void_GpuProgramType(EarthView.World.Graphic.GPUPROGRAMTYPE gptype);

				protected bindGpuProgramPassIterationParameters_CallBack_void_GpuProgramType m_bindGpuProgramPassIterationParameters_CallBack_void_GpuProgramType;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_bindGpuProgramPassIterationParameters_void_GpuProgramType_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.GPUPROGRAMTYPE gptype);

				/// <summary>
				/// 绑定Gpu程序参数用于超过一次迭代渲染的通路
				/// </summary>
				/// <param name="gptype"></param>
				/// <returns></returns>
				public virtual void BindGpuProgramPassIterationParameters_NoVirtual(EarthView.World.Graphic.GPUPROGRAMTYPE gptype)
				{
					EarthView_World_Graphic_CRenderSystem_bindGpuProgramPassIterationParameters_void_GpuProgramType_NoVirtual(this.NativeObject, gptype);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_bindGpuProgramPassIterationParameters_void_GpuProgramType_Function(EarthView.World.Graphic.GPUPROGRAMTYPE gptype)
				{
					BindGpuProgramPassIterationParameters(gptype);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_bindGpuProgramPassIterationParameters_void_GpuProgramType(IntPtr pNativeObject, EarthView.World.Graphic.GPUPROGRAMTYPE gptype);

				/// <summary>
				/// 绑定Gpu程序参数用于超过一次迭代渲染的通路
				/// </summary>
				/// <param name="gptype"></param>
				/// <returns></returns>
				public virtual void BindGpuProgramPassIterationParameters(EarthView.World.Graphic.GPUPROGRAMTYPE gptype)
				{
					EarthView_World_Graphic_CRenderSystem_bindGpuProgramPassIterationParameters_void_GpuProgramType(this.NativeObject, gptype);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void unbindGpuProgram_CallBack_void_GpuProgramType(EarthView.World.Graphic.GPUPROGRAMTYPE gptype);

				protected unbindGpuProgram_CallBack_void_GpuProgramType m_unbindGpuProgram_CallBack_void_GpuProgramType;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_unbindGpuProgram_void_GpuProgramType_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.GPUPROGRAMTYPE gptype);

				/// <summary>
				/// 解绑定指定类型的Gpu程序
				/// </summary>
				/// <param name="gptype"></param>
				/// <returns></returns>
				public virtual void UnbindGpuProgram_NoVirtual(EarthView.World.Graphic.GPUPROGRAMTYPE gptype)
				{
					EarthView_World_Graphic_CRenderSystem_unbindGpuProgram_void_GpuProgramType_NoVirtual(this.NativeObject, gptype);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_unbindGpuProgram_void_GpuProgramType_Function(EarthView.World.Graphic.GPUPROGRAMTYPE gptype)
				{
					UnbindGpuProgram(gptype);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_unbindGpuProgram_void_GpuProgramType(IntPtr pNativeObject, EarthView.World.Graphic.GPUPROGRAMTYPE gptype);

				/// <summary>
				/// 解绑定指定类型的Gpu程序
				/// </summary>
				/// <param name="gptype"></param>
				/// <returns></returns>
				public virtual void UnbindGpuProgram(EarthView.World.Graphic.GPUPROGRAMTYPE gptype)
				{
					EarthView_World_Graphic_CRenderSystem_unbindGpuProgram_void_GpuProgramType(this.NativeObject, gptype);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte isGpuProgramBound_CallBack_ev_bool_GpuProgramType(EarthView.World.Graphic.GPUPROGRAMTYPE gptype);

				protected isGpuProgramBound_CallBack_ev_bool_GpuProgramType m_isGpuProgramBound_CallBack_ev_bool_GpuProgramType;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CRenderSystem_isGpuProgramBound_ev_bool_GpuProgramType_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.GPUPROGRAMTYPE gptype);

				/// <summary>
				/// 获得指定类型Gpu程序是否已绑定
				/// </summary>
				/// <param name="gptype"></param>
				/// <returns></returns>
				public virtual bool IsGpuProgramBound_NoVirtual(EarthView.World.Graphic.GPUPROGRAMTYPE gptype)
				{
					byte ret=EarthView_World_Graphic_CRenderSystem_isGpuProgramBound_ev_bool_GpuProgramType_NoVirtual(this.NativeObject, gptype);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CRenderSystem_isGpuProgramBound_ev_bool_GpuProgramType_Function(EarthView.World.Graphic.GPUPROGRAMTYPE gptype)
				{
					bool csret=IsGpuProgramBound(gptype);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CRenderSystem_isGpuProgramBound_ev_bool_GpuProgramType(IntPtr pNativeObject, EarthView.World.Graphic.GPUPROGRAMTYPE gptype);

				/// <summary>
				/// 获得指定类型Gpu程序是否已绑定
				/// </summary>
				/// <param name="gptype"></param>
				/// <returns></returns>
				public virtual bool IsGpuProgramBound(EarthView.World.Graphic.GPUPROGRAMTYPE gptype)
				{
					byte ret=EarthView_World_Graphic_CRenderSystem_isGpuProgramBound_ev_bool_GpuProgramType(this.NativeObject, gptype);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setClipPlanes_CallBack_void_PlaneList(IntPtr clipPlanes);

				protected setClipPlanes_CallBack_void_PlaneList m_setClipPlanes_CallBack_void_PlaneList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setClipPlanes_void_PlaneList_NoVirtual(IntPtr pNativeObject, IntPtr clipPlanes);

				/// <summary>
				/// 设置裁剪面
				/// </summary>
				/// <param name="clipPlanes"></param>
				/// <returns></returns>
				public virtual void SetClipPlanes_NoVirtual(EarthView.World.Spatial.Math.PlaneList clipPlanes)
				{
					EarthView_World_Graphic_CRenderSystem_setClipPlanes_void_PlaneList_NoVirtual(this.NativeObject, object.Equals(clipPlanes, null) ? IntPtr.Zero : clipPlanes.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setClipPlanes_void_PlaneList_Function(IntPtr clipPlanes)
				{
					EarthView.World.Spatial.Math.PlaneList csobj_clipPlanes = new EarthView.World.Spatial.Math.PlaneList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_clipPlanes.BindNativeObject(clipPlanes,"PlaneList");
					csobj_clipPlanes.Delegate = true;
					IClassFactory csobj_clipPlanesClassFactory = GlobalClassFactoryMap.Get(csobj_clipPlanes.GetCppInstanceTypeName());
					if (csobj_clipPlanesClassFactory != null)
					{
						csobj_clipPlanes.Delegate = true;
						csobj_clipPlanes = csobj_clipPlanesClassFactory.Create() as EarthView.World.Spatial.Math.PlaneList;
						csobj_clipPlanes.BindNativeObject(clipPlanes, "PlaneList");
						csobj_clipPlanes.Delegate = true;
					}
					
					SetClipPlanes(csobj_clipPlanes);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setClipPlanes_void_PlaneList(IntPtr pNativeObject, IntPtr clipPlanes);

				/// <summary>
				/// 设置裁剪面
				/// </summary>
				/// <param name="clipPlanes"></param>
				/// <returns></returns>
				public virtual void SetClipPlanes(EarthView.World.Spatial.Math.PlaneList clipPlanes)
				{
					EarthView_World_Graphic_CRenderSystem_setClipPlanes_void_PlaneList(this.NativeObject, object.Equals(clipPlanes, null) ? IntPtr.Zero : clipPlanes.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void addClipPlane_CallBack_void_CPlane(IntPtr p);

				protected addClipPlane_CallBack_void_CPlane m_addClipPlane_CallBack_void_CPlane;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_addClipPlane_void_CPlane_NoVirtual(IntPtr pNativeObject, IntPtr p);

				/// <summary>
				/// 添加裁剪面
				/// </summary>
				/// <param name="p"></param>
				/// <returns></returns>
				public virtual void AddClipPlane_NoVirtual(EarthView.World.Spatial.Math.Plane p)
				{
					EarthView_World_Graphic_CRenderSystem_addClipPlane_void_CPlane_NoVirtual(this.NativeObject, object.Equals(p, null) ? IntPtr.Zero : p.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_addClipPlane_void_CPlane_Function(IntPtr p)
				{
					EarthView.World.Spatial.Math.Plane csobj_p = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_p.BindNativeObject(p,"CPlane");
					csobj_p.Delegate = true;
					IClassFactory csobj_pClassFactory = GlobalClassFactoryMap.Get(csobj_p.GetCppInstanceTypeName());
					if (csobj_pClassFactory != null)
					{
						csobj_p.Delegate = true;
						csobj_p = csobj_pClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_p.BindNativeObject(p, "CPlane");
						csobj_p.Delegate = true;
					}
					
					AddClipPlane(csobj_p);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_addClipPlane_void_CPlane(IntPtr pNativeObject, IntPtr p);

				/// <summary>
				/// 添加裁剪面
				/// </summary>
				/// <param name="p"></param>
				/// <returns></returns>
				public virtual void AddClipPlane(EarthView.World.Spatial.Math.Plane p)
				{
					EarthView_World_Graphic_CRenderSystem_addClipPlane_void_CPlane(this.NativeObject, object.Equals(p, null) ? IntPtr.Zero : p.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void addClipPlane_CallBack_void_Real_Real_Real_Real(double A, double B, double C, double D);

				protected addClipPlane_CallBack_void_Real_Real_Real_Real m_addClipPlane_CallBack_void_Real_Real_Real_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_addClipPlane_void_Real_Real_Real_Real_NoVirtual(IntPtr pNativeObject, double A, double B, double C, double D);

				/// <summary>
				/// 添加裁剪面
				/// </summary>
				/// <param name="A"></param>
				/// <param name="B"></param>
				/// <param name="C"></param>
				/// <param name="D"></param>
				/// <returns></returns>
				public virtual void AddClipPlane_NoVirtual(double A, double B, double C, double D)
				{
					EarthView_World_Graphic_CRenderSystem_addClipPlane_void_Real_Real_Real_Real_NoVirtual(this.NativeObject, A, B, C, D);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_addClipPlane_void_Real_Real_Real_Real_Function(double A, double B, double C, double D)
				{
					AddClipPlane(A, B, C, D);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_addClipPlane_void_Real_Real_Real_Real(IntPtr pNativeObject, double A, double B, double C, double D);

				/// <summary>
				/// 添加裁剪面
				/// </summary>
				/// <param name="A"></param>
				/// <param name="B"></param>
				/// <param name="C"></param>
				/// <param name="D"></param>
				/// <returns></returns>
				public virtual void AddClipPlane(double A, double B, double C, double D)
				{
					EarthView_World_Graphic_CRenderSystem_addClipPlane_void_Real_Real_Real_Real(this.NativeObject, A, B, C, D);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void resetClipPlanes_CallBack_void();

				protected resetClipPlanes_CallBack_void m_resetClipPlanes_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_resetClipPlanes_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 重置裁剪面
				/// </summary>
				/// <param name="clipPlanes"></param>
				/// <returns></returns>
				public virtual void ResetClipPlanes_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem_resetClipPlanes_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_resetClipPlanes_void_Function()
				{
					ResetClipPlanes();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_resetClipPlanes_void(IntPtr pNativeObject);

				/// <summary>
				/// 重置裁剪面
				/// </summary>
				/// <param name="clipPlanes"></param>
				/// <returns></returns>
				public virtual void ResetClipPlanes()
				{
					EarthView_World_Graphic_CRenderSystem_resetClipPlanes_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _initRenderTargets_CallBack_void();

				protected _initRenderTargets_CallBack_void m__initRenderTargets_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__initRenderTargets_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 初始化所有渲染目标
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _initRenderTargets_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem__initRenderTargets_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__initRenderTargets_void_Function()
				{
					_initRenderTargets();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__initRenderTargets_void(IntPtr pNativeObject);

				/// <summary>
				/// 初始化所有渲染目标
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _initRenderTargets()
				{
					EarthView_World_Graphic_CRenderSystem__initRenderTargets_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _notifyCameraRemoved_CallBack_void_CCamera(IntPtr cam);

				protected _notifyCameraRemoved_CallBack_void_CCamera m__notifyCameraRemoved_CallBack_void_CCamera;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__notifyCameraRemoved_void_CCamera_NoVirtual(IntPtr pNativeObject, IntPtr cam);

				/// <summary>
				/// 通知摄像机被移除
				/// </summary>
				/// <param name="cam"></param>
				/// <returns></returns>
				public virtual void _notifyCameraRemoved_NoVirtual(EarthView.World.Graphic.Camera cam)
				{
					EarthView_World_Graphic_CRenderSystem__notifyCameraRemoved_void_CCamera_NoVirtual(this.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__notifyCameraRemoved_void_CCamera_Function(IntPtr cam)
				{
					EarthView.World.Graphic.Camera csobj_cam = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_cam.BindNativeObject(cam,"CCamera");
					csobj_cam.Delegate = true;
					IClassFactory csobj_camClassFactory = GlobalClassFactoryMap.Get(csobj_cam.GetCppInstanceTypeName());
					if (csobj_camClassFactory != null)
					{
						csobj_cam.Delegate = true;
						csobj_cam = csobj_camClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_cam.BindNativeObject(cam, "CCamera");
						csobj_cam.Delegate = true;
					}
					
					_notifyCameraRemoved(csobj_cam);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__notifyCameraRemoved_void_CCamera(IntPtr pNativeObject, IntPtr cam);

				/// <summary>
				/// 通知摄像机被移除
				/// </summary>
				/// <param name="cam"></param>
				/// <returns></returns>
				public virtual void _notifyCameraRemoved(EarthView.World.Graphic.Camera cam)
				{
					EarthView_World_Graphic_CRenderSystem__notifyCameraRemoved_void_CCamera(this.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _updateAllRenderTargets_CallBack_void_ev_bool(bool swapBuffers);

				protected _updateAllRenderTargets_CallBack_void_ev_bool m__updateAllRenderTargets_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__updateAllRenderTargets_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte swapBuffers);

				/// <summary>
				/// 更新所有渲染目标
				/// </summary>
				/// <param name="swapBuffers"></param>
				/// <returns></returns>
				public virtual void _updateAllRenderTargets_NoVirtual(bool swapBuffers)
				{
					EarthView_World_Graphic_CRenderSystem__updateAllRenderTargets_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(swapBuffers));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__updateAllRenderTargets_void_ev_bool_Function(bool swapBuffers)
				{
					_updateAllRenderTargets(swapBuffers);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__updateAllRenderTargets_void_ev_bool(IntPtr pNativeObject, byte swapBuffers);

				/// <summary>
				/// 更新所有渲染目标
				/// </summary>
				/// <param name="swapBuffers"></param>
				/// <returns></returns>
				public virtual void _updateAllRenderTargets(bool swapBuffers)
				{
					EarthView_World_Graphic_CRenderSystem__updateAllRenderTargets_void_ev_bool(this.NativeObject, Convert.ToByte(swapBuffers));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _updateAllRenderTargets_CallBack_void();

				protected _updateAllRenderTargets_CallBack_void m__updateAllRenderTargets_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__updateAllRenderTargets_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 更新所有渲染目标
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _updateAllRenderTargets_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem__updateAllRenderTargets_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__updateAllRenderTargets_void_Function()
				{
					_updateAllRenderTargets();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__updateAllRenderTargets_void(IntPtr pNativeObject);

				/// <summary>
				/// 更新所有渲染目标
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _updateAllRenderTargets()
				{
					EarthView_World_Graphic_CRenderSystem__updateAllRenderTargets_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _swapAllRenderTargetBuffers_CallBack_void_ev_bool(bool waitForVsync);

				protected _swapAllRenderTargetBuffers_CallBack_void_ev_bool m__swapAllRenderTargetBuffers_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__swapAllRenderTargetBuffers_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte waitForVsync);

				/// <summary>
				/// 如果传递了一个false参数，则交换所有渲染目标的缓存
				/// </summary>
				/// <param name="waitForVsync"></param>
				/// <returns></returns>
				public virtual void _swapAllRenderTargetBuffers_NoVirtual(bool waitForVsync)
				{
					EarthView_World_Graphic_CRenderSystem__swapAllRenderTargetBuffers_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(waitForVsync));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__swapAllRenderTargetBuffers_void_ev_bool_Function(bool waitForVsync)
				{
					_swapAllRenderTargetBuffers(waitForVsync);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__swapAllRenderTargetBuffers_void_ev_bool(IntPtr pNativeObject, byte waitForVsync);

				/// <summary>
				/// 如果传递了一个false参数，则交换所有渲染目标的缓存
				/// </summary>
				/// <param name="waitForVsync"></param>
				/// <returns></returns>
				public virtual void _swapAllRenderTargetBuffers(bool waitForVsync)
				{
					EarthView_World_Graphic_CRenderSystem__swapAllRenderTargetBuffers_void_ev_bool(this.NativeObject, Convert.ToByte(waitForVsync));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _swapAllRenderTargetBuffers_CallBack_void();

				protected _swapAllRenderTargetBuffers_CallBack_void m__swapAllRenderTargetBuffers_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__swapAllRenderTargetBuffers_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 交换所有渲染目标的缓存
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _swapAllRenderTargetBuffers_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem__swapAllRenderTargetBuffers_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__swapAllRenderTargetBuffers_void_Function()
				{
					_swapAllRenderTargetBuffers();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__swapAllRenderTargetBuffers_void(IntPtr pNativeObject);

				/// <summary>
				/// 交换所有渲染目标的缓存
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void _swapAllRenderTargetBuffers()
				{
					EarthView_World_Graphic_CRenderSystem__swapAllRenderTargetBuffers_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setInvertVertexWinding_CallBack_void_ev_bool(bool invert);

				protected setInvertVertexWinding_CallBack_void_ev_bool m_setInvertVertexWinding_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setInvertVertexWinding_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte invert);

				/// <summary>
				/// 设置vertex windings设置是否被转换
				/// </summary>
				/// <param name="invert"></param>
				/// <returns></returns>
				public virtual void SetInvertVertexWinding_NoVirtual(bool invert)
				{
					EarthView_World_Graphic_CRenderSystem_setInvertVertexWinding_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(invert));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setInvertVertexWinding_void_ev_bool_Function(bool invert)
				{
					SetInvertVertexWinding(invert);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setInvertVertexWinding_void_ev_bool(IntPtr pNativeObject, byte invert);

				/// <summary>
				/// 设置vertex windings设置是否被转换
				/// </summary>
				/// <param name="invert"></param>
				/// <returns></returns>
				public virtual void SetInvertVertexWinding(bool invert)
				{
					EarthView_World_Graphic_CRenderSystem_setInvertVertexWinding_void_ev_bool(this.NativeObject, Convert.ToByte(invert));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getInvertVertexWinding_CallBack_ev_bool();

				protected getInvertVertexWinding_CallBack_ev_bool m_getInvertVertexWinding_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CRenderSystem_getInvertVertexWinding_ev_bool_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 显示是否vertex windings设置被转换成当前的渲染
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual bool GetInvertVertexWinding_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CRenderSystem_getInvertVertexWinding_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CRenderSystem_getInvertVertexWinding_ev_bool_Function()
				{
					bool csret=GetInvertVertexWinding();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CRenderSystem_getInvertVertexWinding_ev_bool(IntPtr pNativeObject);

				/// <summary>
				/// 显示是否vertex windings设置被转换成当前的渲染
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual bool GetInvertVertexWinding()
				{
					byte ret=EarthView_World_Graphic_CRenderSystem_getInvertVertexWinding_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_ev_size_t(bool enabled, ulong left, ulong top, ulong right, ulong bottom);

				protected setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_ev_size_t m_setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_ev_size_t_NoVirtual(IntPtr pNativeObject, byte enabled, ulong left, ulong top, ulong right, ulong bottom);

				/// <summary>
				/// 设置渲染目标的裁剪测试参数
				/// </summary>
				/// <param name="enabled"></param>
				/// <param name="left">左侧（长方形角的位置）</param>
				/// <param name="top">上面（长方形角的位置）</param>
				/// <param name="right">右侧（长方形角的位置）</param>
				/// <param name="bottom">下面（长方形角的位置）</param>
				/// <returns></returns>
				public virtual void SetScissorTest_NoVirtual(bool enabled, ulong left, ulong top, ulong right, ulong bottom)
				{
					EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_ev_size_t_NoVirtual(this.NativeObject, Convert.ToByte(enabled), left, top, right, bottom);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_ev_size_t_Function(bool enabled, ulong left, ulong top, ulong right, ulong bottom)
				{
					SetScissorTest(enabled, left, top, right, bottom);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_ev_size_t(IntPtr pNativeObject, byte enabled, ulong left, ulong top, ulong right, ulong bottom);

				/// <summary>
				/// 设置渲染目标的裁剪测试参数
				/// </summary>
				/// <param name="enabled"></param>
				/// <param name="left">左侧（长方形角的位置）</param>
				/// <param name="top">上面（长方形角的位置）</param>
				/// <param name="right">右侧（长方形角的位置）</param>
				/// <param name="bottom">下面（长方形角的位置）</param>
				/// <returns></returns>
				public virtual void SetScissorTest(bool enabled, ulong left, ulong top, ulong right, ulong bottom)
				{
					EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_ev_size_t(this.NativeObject, Convert.ToByte(enabled), left, top, right, bottom);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t_ev_size_t(bool enabled, ulong left, ulong top, ulong right);

				protected setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t_ev_size_t m_setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_NoVirtual(IntPtr pNativeObject, byte enabled, ulong left, ulong top, ulong right);

				/// <summary>
				/// 设置渲染目标的裁剪测试参数
				/// </summary>
				/// <param name="enabled"></param>
				/// <param name="left">左侧（长方形角的位置）</param>
				/// <param name="top">上面（长方形角的位置）</param>
				/// <param name="right">右侧（长方形角的位置）</param>
				/// <returns></returns>
				public virtual void SetScissorTest_NoVirtual(bool enabled, ulong left, ulong top, ulong right)
				{
					EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_NoVirtual(this.NativeObject, Convert.ToByte(enabled), left, top, right);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_Function(bool enabled, ulong left, ulong top, ulong right)
				{
					SetScissorTest(enabled, left, top, right);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_ev_size_t(IntPtr pNativeObject, byte enabled, ulong left, ulong top, ulong right);

				/// <summary>
				/// 设置渲染目标的裁剪测试参数
				/// </summary>
				/// <param name="enabled"></param>
				/// <param name="left">左侧（长方形角的位置）</param>
				/// <param name="top">上面（长方形角的位置）</param>
				/// <param name="right">右侧（长方形角的位置）</param>
				/// <returns></returns>
				public virtual void SetScissorTest(bool enabled, ulong left, ulong top, ulong right)
				{
					EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_ev_size_t(this.NativeObject, Convert.ToByte(enabled), left, top, right);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t(bool enabled, ulong left, ulong top);

				protected setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t m_setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_NoVirtual(IntPtr pNativeObject, byte enabled, ulong left, ulong top);

				/// <summary>
				/// 设置渲染目标的裁剪测试参数
				/// </summary>
				/// <param name="enabled"></param>
				/// <param name="left">左侧（长方形角的位置）</param>
				/// <param name="top">上面（长方形角的位置）</param>
				/// <returns></returns>
				public virtual void SetScissorTest_NoVirtual(bool enabled, ulong left, ulong top)
				{
					EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_NoVirtual(this.NativeObject, Convert.ToByte(enabled), left, top);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_Function(bool enabled, ulong left, ulong top)
				{
					SetScissorTest(enabled, left, top);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t(IntPtr pNativeObject, byte enabled, ulong left, ulong top);

				/// <summary>
				/// 设置渲染目标的裁剪测试参数
				/// </summary>
				/// <param name="enabled"></param>
				/// <param name="left">左侧（长方形角的位置）</param>
				/// <param name="top">上面（长方形角的位置）</param>
				/// <returns></returns>
				public virtual void SetScissorTest(bool enabled, ulong left, ulong top)
				{
					EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t(this.NativeObject, Convert.ToByte(enabled), left, top);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setScissorTest_CallBack_void_ev_bool_ev_size_t(bool enabled, ulong left);

				protected setScissorTest_CallBack_void_ev_bool_ev_size_t m_setScissorTest_CallBack_void_ev_bool_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_NoVirtual(IntPtr pNativeObject, byte enabled, ulong left);

				/// <summary>
				/// 设置渲染目标的裁剪测试参数
				/// </summary>
				/// <param name="enabled"></param>
				/// <param name="left">左侧（长方形角的位置）</param>
				/// <returns></returns>
				public virtual void SetScissorTest_NoVirtual(bool enabled, ulong left)
				{
					EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_NoVirtual(this.NativeObject, Convert.ToByte(enabled), left);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_Function(bool enabled, ulong left)
				{
					SetScissorTest(enabled, left);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t(IntPtr pNativeObject, byte enabled, ulong left);

				/// <summary>
				/// 设置渲染目标的裁剪测试参数
				/// </summary>
				/// <param name="enabled"></param>
				/// <param name="left">左侧（长方形角的位置）</param>
				/// <returns></returns>
				public virtual void SetScissorTest(bool enabled, ulong left)
				{
					EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t(this.NativeObject, Convert.ToByte(enabled), left);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setScissorTest_CallBack_void_ev_bool(bool enabled);

				protected setScissorTest_CallBack_void_ev_bool m_setScissorTest_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte enabled);

				/// <summary>
				/// 设置渲染目标的裁剪测试参数
				/// </summary>
				/// <param name="enabled"></param>
				/// <returns></returns>
				public virtual void SetScissorTest_NoVirtual(bool enabled)
				{
					EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(enabled));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_Function(bool enabled)
				{
					SetScissorTest(enabled);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool(IntPtr pNativeObject, byte enabled);

				/// <summary>
				/// 设置渲染目标的裁剪测试参数
				/// </summary>
				/// <param name="enabled"></param>
				/// <returns></returns>
				public virtual void SetScissorTest(bool enabled)
				{
					EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool(this.NativeObject, Convert.ToByte(enabled));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void clearFrameBuffer_CallBack_void_ev_uint32_CColourValue_Real_ev_uint16(uint buffers, IntPtr colour, double depth, ushort stencil);

				protected clearFrameBuffer_CallBack_void_ev_uint32_CColourValue_Real_ev_uint16 m_clearFrameBuffer_CallBack_void_ev_uint32_CColourValue_Real_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Real_ev_uint16_NoVirtual(IntPtr pNativeObject, uint buffers, IntPtr colour, double depth, ushort stencil);

				/// <summary>
				/// 清空活动渲染目标的帧缓存
				/// </summary>
				/// <param name="buffers">标明哪一个缓存被清空</param>
				/// <param name="colour">缓存颜色</param>
				/// <param name="depth">初始化深度缓存的值</param>
				/// <param name="stencil">初始化模板缓存的值</param>
				/// <returns></returns>
				public virtual void ClearFrameBuffer_NoVirtual(uint buffers, EarthView.World.Graphic.ColourValue colour, double depth, ushort stencil)
				{
					EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Real_ev_uint16_NoVirtual(this.NativeObject, buffers, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject, depth, stencil);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Real_ev_uint16_Function(uint buffers, IntPtr colour, double depth, ushort stencil)
				{
					EarthView.World.Graphic.ColourValue csobj_colour = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_colour.BindNativeObject(colour,"CColourValue");
					csobj_colour.Delegate = true;
					IClassFactory csobj_colourClassFactory = GlobalClassFactoryMap.Get(csobj_colour.GetCppInstanceTypeName());
					if (csobj_colourClassFactory != null)
					{
						csobj_colour.Delegate = true;
						csobj_colour = csobj_colourClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_colour.BindNativeObject(colour, "CColourValue");
						csobj_colour.Delegate = true;
					}
					
					ClearFrameBuffer(buffers, csobj_colour, depth, stencil);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Real_ev_uint16(IntPtr pNativeObject, uint buffers, IntPtr colour, double depth, ushort stencil);

				/// <summary>
				/// 清空活动渲染目标的帧缓存
				/// </summary>
				/// <param name="buffers">标明哪一个缓存被清空</param>
				/// <param name="colour">缓存颜色</param>
				/// <param name="depth">初始化深度缓存的值</param>
				/// <param name="stencil">初始化模板缓存的值</param>
				/// <returns></returns>
				public virtual void ClearFrameBuffer(uint buffers, EarthView.World.Graphic.ColourValue colour, double depth, ushort stencil)
				{
					EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Real_ev_uint16(this.NativeObject, buffers, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject, depth, stencil);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void clearFrameBuffer_CallBack_void_ev_uint32_CColourValue_Real(uint buffers, IntPtr colour, double depth);

				protected clearFrameBuffer_CallBack_void_ev_uint32_CColourValue_Real m_clearFrameBuffer_CallBack_void_ev_uint32_CColourValue_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Real_NoVirtual(IntPtr pNativeObject, uint buffers, IntPtr colour, double depth);

				/// <summary>
				/// 清空活动渲染目标的帧缓存
				/// </summary>
				/// <param name="buffers">标明哪一个缓存被清空</param>
				/// <param name="colour">缓存颜色</param>
				/// <param name="depth">初始化深度缓存的值</param>
				/// <returns></returns>
				public virtual void ClearFrameBuffer_NoVirtual(uint buffers, EarthView.World.Graphic.ColourValue colour, double depth)
				{
					EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Real_NoVirtual(this.NativeObject, buffers, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject, depth);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Real_Function(uint buffers, IntPtr colour, double depth)
				{
					EarthView.World.Graphic.ColourValue csobj_colour = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_colour.BindNativeObject(colour,"CColourValue");
					csobj_colour.Delegate = true;
					IClassFactory csobj_colourClassFactory = GlobalClassFactoryMap.Get(csobj_colour.GetCppInstanceTypeName());
					if (csobj_colourClassFactory != null)
					{
						csobj_colour.Delegate = true;
						csobj_colour = csobj_colourClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_colour.BindNativeObject(colour, "CColourValue");
						csobj_colour.Delegate = true;
					}
					
					ClearFrameBuffer(buffers, csobj_colour, depth);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Real(IntPtr pNativeObject, uint buffers, IntPtr colour, double depth);

				/// <summary>
				/// 清空活动渲染目标的帧缓存
				/// </summary>
				/// <param name="buffers">标明哪一个缓存被清空</param>
				/// <param name="colour">缓存颜色</param>
				/// <param name="depth">初始化深度缓存的值</param>
				/// <returns></returns>
				public virtual void ClearFrameBuffer(uint buffers, EarthView.World.Graphic.ColourValue colour, double depth)
				{
					EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Real(this.NativeObject, buffers, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject, depth);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void clearFrameBuffer_CallBack_void_ev_uint32_CColourValue(uint buffers, IntPtr colour);

				protected clearFrameBuffer_CallBack_void_ev_uint32_CColourValue m_clearFrameBuffer_CallBack_void_ev_uint32_CColourValue;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_NoVirtual(IntPtr pNativeObject, uint buffers, IntPtr colour);

				/// <summary>
				/// 清空活动渲染目标的帧缓存
				/// </summary>
				/// <param name="buffers">标明哪一个缓存被清空</param>
				/// <param name="colour">缓存颜色</param>
				/// <returns></returns>
				public virtual void ClearFrameBuffer_NoVirtual(uint buffers, EarthView.World.Graphic.ColourValue colour)
				{
					EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_NoVirtual(this.NativeObject, buffers, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Function(uint buffers, IntPtr colour)
				{
					EarthView.World.Graphic.ColourValue csobj_colour = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_colour.BindNativeObject(colour,"CColourValue");
					csobj_colour.Delegate = true;
					IClassFactory csobj_colourClassFactory = GlobalClassFactoryMap.Get(csobj_colour.GetCppInstanceTypeName());
					if (csobj_colourClassFactory != null)
					{
						csobj_colour.Delegate = true;
						csobj_colour = csobj_colourClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_colour.BindNativeObject(colour, "CColourValue");
						csobj_colour.Delegate = true;
					}
					
					ClearFrameBuffer(buffers, csobj_colour);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue(IntPtr pNativeObject, uint buffers, IntPtr colour);

				/// <summary>
				/// 清空活动渲染目标的帧缓存
				/// </summary>
				/// <param name="buffers">标明哪一个缓存被清空</param>
				/// <param name="colour">缓存颜色</param>
				/// <returns></returns>
				public virtual void ClearFrameBuffer(uint buffers, EarthView.World.Graphic.ColourValue colour)
				{
					EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue(this.NativeObject, buffers, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void clearFrameBuffer_CallBack_void_ev_uint32(uint buffers);

				protected clearFrameBuffer_CallBack_void_ev_uint32 m_clearFrameBuffer_CallBack_void_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_NoVirtual(IntPtr pNativeObject, uint buffers);

				/// <summary>
				/// 清空活动渲染目标的帧缓存
				/// </summary>
				/// <param name="buffers">标明哪一个缓存被清空</param>
				/// <returns></returns>
				public virtual void ClearFrameBuffer_NoVirtual(uint buffers)
				{
					EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_NoVirtual(this.NativeObject, buffers);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_Function(uint buffers)
				{
					ClearFrameBuffer(buffers);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32(IntPtr pNativeObject, uint buffers);

				/// <summary>
				/// 清空活动渲染目标的帧缓存
				/// </summary>
				/// <param name="buffers">标明哪一个缓存被清空</param>
				/// <returns></returns>
				public virtual void ClearFrameBuffer(uint buffers)
				{
					EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32(this.NativeObject, buffers);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getHorizontalTexelOffset_CallBack_Real();

				protected getHorizontalTexelOffset_CallBack_Real m_getHorizontalTexelOffset_CallBack_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CRenderSystem_getHorizontalTexelOffset_Real_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 返回纹理的水平偏移量
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual double GetHorizontalTexelOffset_NoVirtual()
				{
					double ret=EarthView_World_Graphic_CRenderSystem_getHorizontalTexelOffset_Real_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CRenderSystem_getHorizontalTexelOffset_Real_Function()
				{
					double csret=GetHorizontalTexelOffset();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CRenderSystem_getHorizontalTexelOffset_Real(IntPtr pNativeObject);

				/// <summary>
				/// 返回纹理的水平偏移量
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual double GetHorizontalTexelOffset()
				{
					double ret=EarthView_World_Graphic_CRenderSystem_getHorizontalTexelOffset_Real(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getVerticalTexelOffset_CallBack_Real();

				protected getVerticalTexelOffset_CallBack_Real m_getVerticalTexelOffset_CallBack_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CRenderSystem_getVerticalTexelOffset_Real_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 返回纹理的垂直偏移量
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual double GetVerticalTexelOffset_NoVirtual()
				{
					double ret=EarthView_World_Graphic_CRenderSystem_getVerticalTexelOffset_Real_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CRenderSystem_getVerticalTexelOffset_Real_Function()
				{
					double csret=GetVerticalTexelOffset();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CRenderSystem_getVerticalTexelOffset_Real(IntPtr pNativeObject);

				/// <summary>
				/// 返回纹理的垂直偏移量
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual double GetVerticalTexelOffset()
				{
					double ret=EarthView_World_Graphic_CRenderSystem_getVerticalTexelOffset_Real(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getMinimumDepthInputValue_CallBack_Real();

				protected getMinimumDepthInputValue_CallBack_Real m_getMinimumDepthInputValue_CallBack_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CRenderSystem_getMinimumDepthInputValue_Real_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 当渲染应用统一的转换时获得最小的深度值
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual double GetMinimumDepthInputValue_NoVirtual()
				{
					double ret=EarthView_World_Graphic_CRenderSystem_getMinimumDepthInputValue_Real_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CRenderSystem_getMinimumDepthInputValue_Real_Function()
				{
					double csret=GetMinimumDepthInputValue();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CRenderSystem_getMinimumDepthInputValue_Real(IntPtr pNativeObject);

				/// <summary>
				/// 当渲染应用统一的转换时获得最小的深度值
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual double GetMinimumDepthInputValue()
				{
					double ret=EarthView_World_Graphic_CRenderSystem_getMinimumDepthInputValue_Real(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getMaximumDepthInputValue_CallBack_Real();

				protected getMaximumDepthInputValue_CallBack_Real m_getMaximumDepthInputValue_CallBack_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CRenderSystem_getMaximumDepthInputValue_Real_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 当渲染应用统一的转换时获得最大的深度值
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual double GetMaximumDepthInputValue_NoVirtual()
				{
					double ret=EarthView_World_Graphic_CRenderSystem_getMaximumDepthInputValue_Real_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CRenderSystem_getMaximumDepthInputValue_Real_Function()
				{
					double csret=GetMaximumDepthInputValue();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CRenderSystem_getMaximumDepthInputValue_Real(IntPtr pNativeObject);

				/// <summary>
				/// 当渲染应用统一的转换时获得最大的深度值
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual double GetMaximumDepthInputValue()
				{
					double ret=EarthView_World_Graphic_CRenderSystem_getMaximumDepthInputValue_Real(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setCurrentPassIterationCount_CallBack_void_ev_size_t(ulong count);

				protected setCurrentPassIterationCount_CallBack_void_ev_size_t m_setCurrentPassIterationCount_CallBack_void_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setCurrentPassIterationCount_void_ev_size_t_NoVirtual(IntPtr pNativeObject, ulong count);

				/// <summary>
				/// 设置当前的多通路数量值
				/// </summary>
				/// <param name="count">渲染当前状态的次数</param>
				/// <returns></returns>
				public virtual void SetCurrentPassIterationCount_NoVirtual(ulong count)
				{
					EarthView_World_Graphic_CRenderSystem_setCurrentPassIterationCount_void_ev_size_t_NoVirtual(this.NativeObject, count);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setCurrentPassIterationCount_void_ev_size_t_Function(ulong count)
				{
					SetCurrentPassIterationCount(count);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setCurrentPassIterationCount_void_ev_size_t(IntPtr pNativeObject, ulong count);

				/// <summary>
				/// 设置当前的多通路数量值
				/// </summary>
				/// <param name="count">渲染当前状态的次数</param>
				/// <returns></returns>
				public virtual void SetCurrentPassIterationCount(ulong count)
				{
					EarthView_World_Graphic_CRenderSystem_setCurrentPassIterationCount_void_ev_size_t(this.NativeObject, count);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setDeriveDepthBias_CallBack_void_ev_bool_ev_real32_ev_real32_ev_real32(bool derive, float baseValue, float multiplier, float slopeScale);

				protected setDeriveDepthBias_CallBack_void_ev_bool_ev_real32_ev_real32_ev_real32 m_setDeriveDepthBias_CallBack_void_ev_bool_ev_real32_ev_real32_ev_real32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_ev_real32_ev_real32_NoVirtual(IntPtr pNativeObject, byte derive, float baseValue, float multiplier, float slopeScale);

				/// <summary>
				/// 设置深度偏移值
				/// </summary>
				/// <param name="derive">如果为true，告诉渲染系统自动获得</param>
				/// <param name="baseValue">基本值</param>
				/// <param name="multiplier">应用到每一个迭代中深度偏差的数量</param>
				/// <param name="slopeScale">斜面偏差的常量值</param>
				/// <returns></returns>
				public virtual void SetDeriveDepthBias_NoVirtual(bool derive, float baseValue, float multiplier, float slopeScale)
				{
					EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_ev_real32_ev_real32_NoVirtual(this.NativeObject, Convert.ToByte(derive), baseValue, multiplier, slopeScale);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_ev_real32_ev_real32_Function(bool derive, float baseValue, float multiplier, float slopeScale)
				{
					SetDeriveDepthBias(derive, baseValue, multiplier, slopeScale);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_ev_real32_ev_real32(IntPtr pNativeObject, byte derive, float baseValue, float multiplier, float slopeScale);

				/// <summary>
				/// 设置深度偏移值
				/// </summary>
				/// <param name="derive">如果为true，告诉渲染系统自动获得</param>
				/// <param name="baseValue">基本值</param>
				/// <param name="multiplier">应用到每一个迭代中深度偏差的数量</param>
				/// <param name="slopeScale">斜面偏差的常量值</param>
				/// <returns></returns>
				public virtual void SetDeriveDepthBias(bool derive, float baseValue, float multiplier, float slopeScale)
				{
					EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_ev_real32_ev_real32(this.NativeObject, Convert.ToByte(derive), baseValue, multiplier, slopeScale);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setDeriveDepthBias_CallBack_void_ev_bool_ev_real32_ev_real32(bool derive, float baseValue, float multiplier);

				protected setDeriveDepthBias_CallBack_void_ev_bool_ev_real32_ev_real32 m_setDeriveDepthBias_CallBack_void_ev_bool_ev_real32_ev_real32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_ev_real32_NoVirtual(IntPtr pNativeObject, byte derive, float baseValue, float multiplier);

				/// <summary>
				/// 设置深度偏移值
				/// </summary>
				/// <param name="derive">如果为true，告诉渲染系统自动获得</param>
				/// <param name="baseValue">基本值</param>
				/// <param name="multiplier">应用到每一个迭代中深度偏差的数量</param>
				/// <returns></returns>
				public virtual void SetDeriveDepthBias_NoVirtual(bool derive, float baseValue, float multiplier)
				{
					EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_ev_real32_NoVirtual(this.NativeObject, Convert.ToByte(derive), baseValue, multiplier);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_ev_real32_Function(bool derive, float baseValue, float multiplier)
				{
					SetDeriveDepthBias(derive, baseValue, multiplier);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_ev_real32(IntPtr pNativeObject, byte derive, float baseValue, float multiplier);

				/// <summary>
				/// 设置深度偏移值
				/// </summary>
				/// <param name="derive">如果为true，告诉渲染系统自动获得</param>
				/// <param name="baseValue">基本值</param>
				/// <param name="multiplier">应用到每一个迭代中深度偏差的数量</param>
				/// <returns></returns>
				public virtual void SetDeriveDepthBias(bool derive, float baseValue, float multiplier)
				{
					EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_ev_real32(this.NativeObject, Convert.ToByte(derive), baseValue, multiplier);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setDeriveDepthBias_CallBack_void_ev_bool_ev_real32(bool derive, float baseValue);

				protected setDeriveDepthBias_CallBack_void_ev_bool_ev_real32 m_setDeriveDepthBias_CallBack_void_ev_bool_ev_real32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_NoVirtual(IntPtr pNativeObject, byte derive, float baseValue);

				/// <summary>
				/// 设置深度偏移值
				/// </summary>
				/// <param name="derive">如果为true，告诉渲染系统自动获得</param>
				/// <param name="baseValue">基本值</param>
				/// <returns></returns>
				public virtual void SetDeriveDepthBias_NoVirtual(bool derive, float baseValue)
				{
					EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_NoVirtual(this.NativeObject, Convert.ToByte(derive), baseValue);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_Function(bool derive, float baseValue)
				{
					SetDeriveDepthBias(derive, baseValue);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32(IntPtr pNativeObject, byte derive, float baseValue);

				/// <summary>
				/// 设置深度偏移值
				/// </summary>
				/// <param name="derive">如果为true，告诉渲染系统自动获得</param>
				/// <param name="baseValue">基本值</param>
				/// <returns></returns>
				public virtual void SetDeriveDepthBias(bool derive, float baseValue)
				{
					EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32(this.NativeObject, Convert.ToByte(derive), baseValue);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setDeriveDepthBias_CallBack_void_ev_bool(bool derive);

				protected setDeriveDepthBias_CallBack_void_ev_bool m_setDeriveDepthBias_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte derive);

				/// <summary>
				/// 设置深度偏移值
				/// </summary>
				/// <param name="derive">如果为true，告诉渲染系统自动获得</param>
				/// <returns></returns>
				public virtual void SetDeriveDepthBias_NoVirtual(bool derive)
				{
					EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(derive));
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_Function(bool derive)
				{
					SetDeriveDepthBias(derive);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool(IntPtr pNativeObject, byte derive);

				/// <summary>
				/// 设置深度偏移值
				/// </summary>
				/// <param name="derive">如果为true，告诉渲染系统自动获得</param>
				/// <returns></returns>
				public virtual void SetDeriveDepthBias(bool derive)
				{
					EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool(this.NativeObject, Convert.ToByte(derive));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setRenderTarget_CallBack_void_CRenderTarget(IntPtr ref_target);

				protected _setRenderTarget_CallBack_void_CRenderTarget m__setRenderTarget_CallBack_void_CRenderTarget;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setRenderTarget_void_CRenderTarget_NoVirtual(IntPtr pNativeObject, IntPtr ref_target);

				/// <summary>
				/// 设置当前渲染目标
				/// </summary>
				/// <param name="target"></param>
				/// <returns></returns>
				public virtual void _setRenderTarget_NoVirtual(EarthView.World.Graphic.RenderTarget ref_target)
				{
					EarthView_World_Graphic_CRenderSystem__setRenderTarget_void_CRenderTarget_NoVirtual(this.NativeObject, object.Equals(ref_target, null) ? IntPtr.Zero : ref_target.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem__setRenderTarget_void_CRenderTarget_Function(IntPtr ref_target)
				{
					EarthView.World.Graphic.RenderTarget csobj_ref_target = new EarthView.World.Graphic.RenderTarget(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_ref_target.BindNativeObject(ref_target,"CRenderTarget");
					csobj_ref_target.Delegate = true;
					IClassFactory csobj_ref_targetClassFactory = GlobalClassFactoryMap.Get(csobj_ref_target.GetCppInstanceTypeName());
					if (csobj_ref_targetClassFactory != null)
					{
						csobj_ref_target.Delegate = true;
						csobj_ref_target = csobj_ref_targetClassFactory.Create() as EarthView.World.Graphic.RenderTarget;
						csobj_ref_target.BindNativeObject(ref_target, "CRenderTarget");
						csobj_ref_target.Delegate = true;
					}
					
					_setRenderTarget(csobj_ref_target);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem__setRenderTarget_void_CRenderTarget(IntPtr pNativeObject, IntPtr ref_target);

				/// <summary>
				/// 设置当前渲染目标
				/// </summary>
				/// <param name="target"></param>
				/// <returns></returns>
				public virtual void _setRenderTarget(EarthView.World.Graphic.RenderTarget ref_target)
				{
					EarthView_World_Graphic_CRenderSystem__setRenderTarget_void_CRenderTarget(this.NativeObject, object.Equals(ref_target, null) ? IntPtr.Zero : ref_target.NativeObject);
					
				}

				/// <summary>
				/// 对渲染系统自定义的事件定义一个监听器
				/// </summary>
				public class RenderSystemListener : EarthView.World.Core.BaseObject
				{
					/// <summary>
					/// 默认构造函数
					/// </summary>
					/// <param name=""></param>
					/// <returns></returns>
					public RenderSystemListener() : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						Create("CRenderSystemListenerProxy", null);
						if (!"EarthView.World.Graphic.RenderSystem+RenderSystemListener".Equals(((Object)this).GetType().ToString()))
						{
							this.SetCustomExtend(true);
						}
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}
					[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
					protected delegate void eventOccurred_CallBack_void_EVString_CommonStringPairList(ref IntPtr eventName, IntPtr parameters);

					protected eventOccurred_CallBack_void_EVString_CommonStringPairList m_eventOccurred_CallBack_void_EVString_CommonStringPairList;

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CRenderSystem_CRenderSystemListener_eventOccurred_void_EVString_CommonStringPairList_NoVirtual(IntPtr pNativeObject, string eventName, IntPtr parameters);

					/// <summary>
					/// 渲染系统中一个已发生的特殊的事件
					/// </summary>
					/// <param name="eventName">事件的名称</param>
					/// <param name="parameters">事件的参数列表</param>
					/// <returns></returns>
					public virtual void EventOccurred_NoVirtual(string eventName, EarthView.World.Core.CommonStringPairList parameters)
					{
						EarthView_World_Graphic_CRenderSystem_CRenderSystemListener_eventOccurred_void_EVString_CommonStringPairList_NoVirtual(this.NativeObject, eventName, object.Equals(parameters, null) ? IntPtr.Zero : parameters.NativeObject);
						
					}

					protected  void EarthView_World_Graphic_CRenderSystem_CRenderSystemListener_eventOccurred_void_EVString_CommonStringPairList_Function(ref IntPtr eventName, IntPtr parameters)
					{
						string streventName= Marshal.PtrToStringAnsi(eventName);
						ClassFactory.FreeString(ref eventName);
						EarthView.World.Core.CommonStringPairList csobj_parameters = new EarthView.World.Core.CommonStringPairList(CreatedWhenConstruct.CWC_NotToCreate);
						csobj_parameters.BindNativeObject(parameters,"CommonStringPairList");
						csobj_parameters.Delegate = true;
						IClassFactory csobj_parametersClassFactory = GlobalClassFactoryMap.Get(csobj_parameters.GetCppInstanceTypeName());
						if (csobj_parametersClassFactory != null)
						{
							csobj_parameters.Delegate = true;
							csobj_parameters = csobj_parametersClassFactory.Create() as EarthView.World.Core.CommonStringPairList;
							csobj_parameters.BindNativeObject(parameters, "CommonStringPairList");
							csobj_parameters.Delegate = true;
						}
						
						EventOccurred(streventName,csobj_parameters);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CRenderSystem_CRenderSystemListener_eventOccurred_void_EVString_CommonStringPairList(IntPtr pNativeObject, string eventName, IntPtr parameters);

					/// <summary>
					/// 渲染系统中一个已发生的特殊的事件
					/// </summary>
					/// <param name="eventName">事件的名称</param>
					/// <param name="parameters">事件的参数列表</param>
					/// <returns></returns>
					public virtual void EventOccurred(string eventName, EarthView.World.Core.CommonStringPairList parameters)
					{
						EarthView_World_Graphic_CRenderSystem_CRenderSystemListener_eventOccurred_void_EVString_CommonStringPairList(this.NativeObject, eventName, object.Equals(parameters, null) ? IntPtr.Zero : parameters.NativeObject);
						
					}

					[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
					protected delegate void eventOccurred_CallBack_void_EVString(ref IntPtr eventName);

					protected eventOccurred_CallBack_void_EVString m_eventOccurred_CallBack_void_EVString;

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CRenderSystem_CRenderSystemListener_eventOccurred_void_EVString_NoVirtual(IntPtr pNativeObject, string eventName);

					/// <summary>
					/// 渲染系统中一个已发生的特殊的事件
					/// </summary>
					/// <param name="eventName">事件的名称</param>
					/// <returns></returns>
					public virtual void EventOccurred_NoVirtual(string eventName)
					{
						EarthView_World_Graphic_CRenderSystem_CRenderSystemListener_eventOccurred_void_EVString_NoVirtual(this.NativeObject, eventName);
						
					}

					protected  void EarthView_World_Graphic_CRenderSystem_CRenderSystemListener_eventOccurred_void_EVString_Function(ref IntPtr eventName)
					{
						string streventName= Marshal.PtrToStringAnsi(eventName);
						ClassFactory.FreeString(ref eventName);
						
						EventOccurred(streventName);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CRenderSystem_CRenderSystemListener_eventOccurred_void_EVString(IntPtr pNativeObject, string eventName);

					/// <summary>
					/// 渲染系统中一个已发生的特殊的事件
					/// </summary>
					/// <param name="eventName">事件的名称</param>
					/// <returns></returns>
					public virtual void EventOccurred(string eventName)
					{
						EarthView_World_Graphic_CRenderSystem_CRenderSystemListener_eventOccurred_void_EVString(this.NativeObject, eventName);
						
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadRenderSystemListener = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadRenderSystemListener = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadRenderSystemListener = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadRenderSystemListener = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadRenderSystemListener = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadRenderSystemListener = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadRenderSystemListener = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadRenderSystemListener = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadRenderSystemListener = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadRenderSystemListener = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadRenderSystemListener = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadRenderSystemListener = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CRenderSystem::CRenderSystemListener", new RenderSystemListenerClassFactory());

					private static bool registerProxyStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CRenderSystem::CRenderSystemListenerProxy", new RenderSystemListenerClassFactory());

					public RenderSystemListener(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_CRenderSystemListener_eventOccurred_void_EVString_CommonStringPairList(IntPtr pObject, eventOccurred_CallBack_void_EVString_CommonStringPairList pCallback);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_CRenderSystemListener_eventOccurred_void_EVString(IntPtr pObject, eventOccurred_CallBack_void_EVString pCallback);

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
							m_eventOccurred_CallBack_void_EVString_CommonStringPairList = EarthView_World_Graphic_CRenderSystem_CRenderSystemListener_eventOccurred_void_EVString_CommonStringPairList_Function;
							GC.KeepAlive(m_eventOccurred_CallBack_void_EVString_CommonStringPairList);
							EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_CRenderSystemListener_eventOccurred_void_EVString_CommonStringPairList(this.NativeObject, m_eventOccurred_CallBack_void_EVString_CommonStringPairList);
							m_eventOccurred_CallBack_void_EVString = EarthView_World_Graphic_CRenderSystem_CRenderSystemListener_eventOccurred_void_EVString_Function;
							GC.KeepAlive(m_eventOccurred_CallBack_void_EVString);
							EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_CRenderSystemListener_eventOccurred_void_EVString(this.NativeObject, m_eventOccurred_CallBack_void_EVString);
						}
					}
					public static RenderSystemListener FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						RenderSystemListener obj = baseObj as  RenderSystemListener;
						if (object.Equals(obj, null))
						{
							obj = new RenderSystemListener(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "CRenderSystemListener");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class RenderSystemListenerClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						RenderSystemListener emptyInstance = new RenderSystemListener(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void addListener_CallBack_void_CRenderSystemListener(IntPtr ref_l);

				protected addListener_CallBack_void_CRenderSystemListener m_addListener_CallBack_void_CRenderSystemListener;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_addListener_void_CRenderSystemListener_NoVirtual(IntPtr pNativeObject, IntPtr ref_l);

				/// <summary>
				/// 给渲染系统中自定义事件添加一个监听器
				/// </summary>
				/// <param name="l"></param>
				/// <returns></returns>
				public virtual void AddListener_NoVirtual(EarthView.World.Graphic.RenderSystem.RenderSystemListener ref_l)
				{
					EarthView_World_Graphic_CRenderSystem_addListener_void_CRenderSystemListener_NoVirtual(this.NativeObject, object.Equals(ref_l, null) ? IntPtr.Zero : ref_l.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_addListener_void_CRenderSystemListener_Function(IntPtr ref_l)
				{
					EarthView.World.Graphic.RenderSystem.RenderSystemListener csobj_ref_l = new EarthView.World.Graphic.RenderSystem.RenderSystemListener(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_ref_l.BindNativeObject(ref_l,"CRenderSystemListener");
					csobj_ref_l.Delegate = true;
					IClassFactory csobj_ref_lClassFactory = GlobalClassFactoryMap.Get(csobj_ref_l.GetCppInstanceTypeName());
					if (csobj_ref_lClassFactory != null)
					{
						csobj_ref_l.Delegate = true;
						csobj_ref_l = csobj_ref_lClassFactory.Create() as EarthView.World.Graphic.RenderSystem.RenderSystemListener;
						csobj_ref_l.BindNativeObject(ref_l, "CRenderSystemListener");
						csobj_ref_l.Delegate = true;
					}
					
					AddListener(csobj_ref_l);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_addListener_void_CRenderSystemListener(IntPtr pNativeObject, IntPtr ref_l);

				/// <summary>
				/// 给渲染系统中自定义事件添加一个监听器
				/// </summary>
				/// <param name="l"></param>
				/// <returns></returns>
				public virtual void AddListener(EarthView.World.Graphic.RenderSystem.RenderSystemListener ref_l)
				{
					EarthView_World_Graphic_CRenderSystem_addListener_void_CRenderSystemListener(this.NativeObject, object.Equals(ref_l, null) ? IntPtr.Zero : ref_l.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void removeListener_CallBack_void_CRenderSystemListener(IntPtr l);

				protected removeListener_CallBack_void_CRenderSystemListener m_removeListener_CallBack_void_CRenderSystemListener;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_removeListener_void_CRenderSystemListener_NoVirtual(IntPtr pNativeObject, IntPtr l);

				/// <summary>
				/// 去除掉渲染系统中自定义事件的监听器
				/// </summary>
				/// <param name="l"></param>
				/// <returns></returns>
				public virtual void RemoveListener_NoVirtual(EarthView.World.Graphic.RenderSystem.RenderSystemListener l)
				{
					EarthView_World_Graphic_CRenderSystem_removeListener_void_CRenderSystemListener_NoVirtual(this.NativeObject, object.Equals(l, null) ? IntPtr.Zero : l.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_removeListener_void_CRenderSystemListener_Function(IntPtr l)
				{
					EarthView.World.Graphic.RenderSystem.RenderSystemListener csobj_l = new EarthView.World.Graphic.RenderSystem.RenderSystemListener(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_l.BindNativeObject(l,"CRenderSystemListener");
					csobj_l.Delegate = true;
					IClassFactory csobj_lClassFactory = GlobalClassFactoryMap.Get(csobj_l.GetCppInstanceTypeName());
					if (csobj_lClassFactory != null)
					{
						csobj_l.Delegate = true;
						csobj_l = csobj_lClassFactory.Create() as EarthView.World.Graphic.RenderSystem.RenderSystemListener;
						csobj_l.BindNativeObject(l, "CRenderSystemListener");
						csobj_l.Delegate = true;
					}
					
					RemoveListener(csobj_l);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_removeListener_void_CRenderSystemListener(IntPtr pNativeObject, IntPtr l);

				/// <summary>
				/// 去除掉渲染系统中自定义事件的监听器
				/// </summary>
				/// <param name="l"></param>
				/// <returns></returns>
				public virtual void RemoveListener(EarthView.World.Graphic.RenderSystem.RenderSystemListener l)
				{
					EarthView_World_Graphic_CRenderSystem_removeListener_void_CRenderSystemListener(this.NativeObject, object.Equals(l, null) ? IntPtr.Zero : l.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getRenderSystemEvents_CallBack_StringVector();

				protected getRenderSystemEvents_CallBack_StringVector m_getRenderSystemEvents_CallBack_StringVector;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getRenderSystemEvents_StringVector_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得渲染系统中特殊事件的列表
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Core.StringVector GetRenderSystemEvents_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getRenderSystemEvents_StringVector_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Core.StringVector csObj = new EarthView.World.Core.StringVector(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "StringVector");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Core.StringVector;
						csObj.BindNativeObject(__ptr, "StringVector");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CRenderSystem_getRenderSystemEvents_StringVector_Function()
				{
					EarthView.World.Core.StringVector csret=GetRenderSystemEvents();
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CRenderSystem_getRenderSystemEvents_StringVector(IntPtr pNativeObject);

				/// <summary>
				/// 获得渲染系统中特殊事件的列表
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Core.StringVector GetRenderSystemEvents()
				{
					IntPtr __ptr = EarthView_World_Graphic_CRenderSystem_getRenderSystemEvents_StringVector(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Core.StringVector csObj = new EarthView.World.Core.StringVector(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "StringVector");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Core.StringVector;
						csObj.BindNativeObject(__ptr, "StringVector");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void preExtraThreadsStarted_CallBack_void();

				protected preExtraThreadsStarted_CallBack_void m_preExtraThreadsStarted_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_preExtraThreadsStarted_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 告诉渲染系统直接运行任务之前，附加线程已经注册
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void PreExtraThreadsStarted_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem_preExtraThreadsStarted_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_preExtraThreadsStarted_void_Function()
				{
					PreExtraThreadsStarted();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_preExtraThreadsStarted_void(IntPtr pNativeObject);

				/// <summary>
				/// 告诉渲染系统直接运行任务之前，附加线程已经注册
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void PreExtraThreadsStarted()
				{
					EarthView_World_Graphic_CRenderSystem_preExtraThreadsStarted_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void postExtraThreadsStarted_CallBack_void();

				protected postExtraThreadsStarted_CallBack_void m_postExtraThreadsStarted_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_postExtraThreadsStarted_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 告诉渲染系统直接运行任务之后，附加线程已经注册
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void PostExtraThreadsStarted_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem_postExtraThreadsStarted_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_postExtraThreadsStarted_void_Function()
				{
					PostExtraThreadsStarted();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_postExtraThreadsStarted_void(IntPtr pNativeObject);

				/// <summary>
				/// 告诉渲染系统直接运行任务之后，附加线程已经注册
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void PostExtraThreadsStarted()
				{
					EarthView_World_Graphic_CRenderSystem_postExtraThreadsStarted_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void registerThread_CallBack_void();

				protected registerThread_CallBack_void m_registerThread_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_registerThread_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 注册一个附加线程，它可能调用渲染系统相关的对象
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void RegisterThread_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem_registerThread_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_registerThread_void_Function()
				{
					RegisterThread();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_registerThread_void(IntPtr pNativeObject);

				/// <summary>
				/// 注册一个附加线程，它可能调用渲染系统相关的对象
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void RegisterThread()
				{
					EarthView_World_Graphic_CRenderSystem_registerThread_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void flushRenderSystem_CallBack_void();

				protected flushRenderSystem_CallBack_void m_flushRenderSystem_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_flushRenderSystem_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 清空渲染系统命令队列，并全部执行
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void FlushRenderSystem_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem_flushRenderSystem_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_flushRenderSystem_void_Function()
				{
					FlushRenderSystem();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_flushRenderSystem_void(IntPtr pNativeObject);

				/// <summary>
				/// 清空渲染系统命令队列，并全部执行
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void FlushRenderSystem()
				{
					EarthView_World_Graphic_CRenderSystem_flushRenderSystem_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void unregisterThread_CallBack_void();

				protected unregisterThread_CallBack_void m_unregisterThread_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_unregisterThread_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 反注册一个附加线程
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void UnregisterThread_NoVirtual()
				{
					EarthView_World_Graphic_CRenderSystem_unregisterThread_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_unregisterThread_void_Function()
				{
					UnregisterThread();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_unregisterThread_void(IntPtr pNativeObject);

				/// <summary>
				/// 反注册一个附加线程
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void UnregisterThread()
				{
					EarthView_World_Graphic_CRenderSystem_unregisterThread_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate uint getDisplayMonitorCount_CallBack_ev_uint32();

				protected getDisplayMonitorCount_CallBack_ev_uint32 m_getDisplayMonitorCount_CallBack_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint EarthView_World_Graphic_CRenderSystem_getDisplayMonitorCount_ev_uint32_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得显示监听器的数量
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual uint GetDisplayMonitorCount_NoVirtual()
				{
					uint ret=EarthView_World_Graphic_CRenderSystem_getDisplayMonitorCount_ev_uint32_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  uint EarthView_World_Graphic_CRenderSystem_getDisplayMonitorCount_ev_uint32_Function()
				{
					uint csret=GetDisplayMonitorCount();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint EarthView_World_Graphic_CRenderSystem_getDisplayMonitorCount_ev_uint32(IntPtr pNativeObject);

				/// <summary>
				/// 获得显示监听器的数量
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual uint GetDisplayMonitorCount()
				{
					uint ret=EarthView_World_Graphic_CRenderSystem_getDisplayMonitorCount_ev_uint32(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void fireEvent_CallBack_void_EVString_CommonStringPairList(ref IntPtr name, IntPtr EVparams);

				protected fireEvent_CallBack_void_EVString_CommonStringPairList m_fireEvent_CallBack_void_EVString_CommonStringPairList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_fireEvent_void_EVString_CommonStringPairList_NoVirtual(IntPtr pNativeObject, string name, IntPtr EVparams);

				/// <summary>
				/// 内部方法，点燃渲染系统事件
				/// </summary>
				/// <param name="name"></param>
				/// <param name="params"></param>
				/// <returns></returns>
				protected virtual void FireEvent_NoVirtual(string name, EarthView.World.Core.CommonStringPairList EVparams)
				{
					EarthView_World_Graphic_CRenderSystem_fireEvent_void_EVString_CommonStringPairList_NoVirtual(this.NativeObject, name, object.Equals(EVparams, null) ? IntPtr.Zero : EVparams.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_fireEvent_void_EVString_CommonStringPairList_Function(ref IntPtr name, IntPtr EVparams)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					EarthView.World.Core.CommonStringPairList csobj_params = new EarthView.World.Core.CommonStringPairList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_params.BindNativeObject(EVparams,"CommonStringPairList");
					csobj_params.Delegate = true;
					IClassFactory csobj_paramsClassFactory = GlobalClassFactoryMap.Get(csobj_params.GetCppInstanceTypeName());
					if (csobj_paramsClassFactory != null)
					{
						csobj_params.Delegate = true;
						csobj_params = csobj_paramsClassFactory.Create() as EarthView.World.Core.CommonStringPairList;
						csobj_params.BindNativeObject(EVparams, "CommonStringPairList");
						csobj_params.Delegate = true;
					}
					
					FireEvent(strname,csobj_params);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_fireEvent_void_EVString_CommonStringPairList(IntPtr pNativeObject, string name, IntPtr EVparams);

				/// <summary>
				/// 内部方法，点燃渲染系统事件
				/// </summary>
				/// <param name="name"></param>
				/// <param name="params"></param>
				/// <returns></returns>
				protected virtual void FireEvent(string name, EarthView.World.Core.CommonStringPairList EVparams)
				{
					EarthView_World_Graphic_CRenderSystem_fireEvent_void_EVString_CommonStringPairList(this.NativeObject, name, object.Equals(EVparams, null) ? IntPtr.Zero : EVparams.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void fireEvent_CallBack_void_EVString(ref IntPtr name);

				protected fireEvent_CallBack_void_EVString m_fireEvent_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_fireEvent_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 内部方法，点燃渲染系统事件
				/// </summary>
				/// <param name="name"></param>
				/// <returns></returns>
				protected virtual void FireEvent_NoVirtual(string name)
				{
					EarthView_World_Graphic_CRenderSystem_fireEvent_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_fireEvent_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					FireEvent(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_fireEvent_void_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 内部方法，点燃渲染系统事件
				/// </summary>
				/// <param name="name"></param>
				/// <returns></returns>
				protected virtual void FireEvent(string name)
				{
					EarthView_World_Graphic_CRenderSystem_fireEvent_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setClipPlanesImpl_CallBack_void_PlaneList(IntPtr clipPlanes);

				protected setClipPlanesImpl_CallBack_void_PlaneList m_setClipPlanesImpl_CallBack_void_PlaneList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setClipPlanesImpl_void_PlaneList_NoVirtual(IntPtr pNativeObject, IntPtr clipPlanes);

				/// <summary>
				/// 设置潜在的切面
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				protected virtual void SetClipPlanesImpl_NoVirtual(EarthView.World.Spatial.Math.PlaneList clipPlanes)
				{
					EarthView_World_Graphic_CRenderSystem_setClipPlanesImpl_void_PlaneList_NoVirtual(this.NativeObject, object.Equals(clipPlanes, null) ? IntPtr.Zero : clipPlanes.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_setClipPlanesImpl_void_PlaneList_Function(IntPtr clipPlanes)
				{
					EarthView.World.Spatial.Math.PlaneList csobj_clipPlanes = new EarthView.World.Spatial.Math.PlaneList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_clipPlanes.BindNativeObject(clipPlanes,"PlaneList");
					csobj_clipPlanes.Delegate = true;
					IClassFactory csobj_clipPlanesClassFactory = GlobalClassFactoryMap.Get(csobj_clipPlanes.GetCppInstanceTypeName());
					if (csobj_clipPlanesClassFactory != null)
					{
						csobj_clipPlanes.Delegate = true;
						csobj_clipPlanes = csobj_clipPlanesClassFactory.Create() as EarthView.World.Spatial.Math.PlaneList;
						csobj_clipPlanes.BindNativeObject(clipPlanes, "PlaneList");
						csobj_clipPlanes.Delegate = true;
					}
					
					SetClipPlanesImpl(csobj_clipPlanes);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_setClipPlanesImpl_void_PlaneList(IntPtr pNativeObject, IntPtr clipPlanes);

				/// <summary>
				/// 设置潜在的切面
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				protected virtual void SetClipPlanesImpl(EarthView.World.Spatial.Math.PlaneList clipPlanes)
				{
					EarthView_World_Graphic_CRenderSystem_setClipPlanesImpl_void_PlaneList(this.NativeObject, object.Equals(clipPlanes, null) ? IntPtr.Zero : clipPlanes.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void initialiseFromRenderSystemCapabilities_CallBack_void_CRenderSystemCapabilities_CRenderTarget(IntPtr caps, IntPtr primary);

				protected initialiseFromRenderSystemCapabilities_CallBack_void_CRenderSystemCapabilities_CRenderTarget m_initialiseFromRenderSystemCapabilities_CallBack_void_CRenderSystemCapabilities_CRenderTarget;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_initialiseFromRenderSystemCapabilities_void_CRenderSystemCapabilities_CRenderTarget_NoVirtual(IntPtr pNativeObject, IntPtr caps, IntPtr primary);

				/// <summary>
				/// 从性能初始化渲染系统
				/// </summary>
				/// <param name="caps"></param>
				/// <param name="primary"></param>
				/// <returns></returns>
				protected virtual void InitialiseFromRenderSystemCapabilities_NoVirtual(EarthView.World.Graphic.RenderSystemCapabilities caps, EarthView.World.Graphic.RenderTarget primary)
				{
					EarthView_World_Graphic_CRenderSystem_initialiseFromRenderSystemCapabilities_void_CRenderSystemCapabilities_CRenderTarget_NoVirtual(this.NativeObject, object.Equals(caps, null) ? IntPtr.Zero : caps.NativeObject, object.Equals(primary, null) ? IntPtr.Zero : primary.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CRenderSystem_initialiseFromRenderSystemCapabilities_void_CRenderSystemCapabilities_CRenderTarget_Function(IntPtr caps, IntPtr primary)
				{
					EarthView.World.Graphic.RenderSystemCapabilities csobj_caps = new EarthView.World.Graphic.RenderSystemCapabilities(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_caps.BindNativeObject(caps,"CRenderSystemCapabilities");
					csobj_caps.Delegate = true;
					IClassFactory csobj_capsClassFactory = GlobalClassFactoryMap.Get(csobj_caps.GetCppInstanceTypeName());
					if (csobj_capsClassFactory != null)
					{
						csobj_caps.Delegate = true;
						csobj_caps = csobj_capsClassFactory.Create() as EarthView.World.Graphic.RenderSystemCapabilities;
						csobj_caps.BindNativeObject(caps, "CRenderSystemCapabilities");
						csobj_caps.Delegate = true;
					}
					EarthView.World.Graphic.RenderTarget csobj_primary = new EarthView.World.Graphic.RenderTarget(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_primary.BindNativeObject(primary,"CRenderTarget");
					csobj_primary.Delegate = true;
					IClassFactory csobj_primaryClassFactory = GlobalClassFactoryMap.Get(csobj_primary.GetCppInstanceTypeName());
					if (csobj_primaryClassFactory != null)
					{
						csobj_primary.Delegate = true;
						csobj_primary = csobj_primaryClassFactory.Create() as EarthView.World.Graphic.RenderTarget;
						csobj_primary.BindNativeObject(primary, "CRenderTarget");
						csobj_primary.Delegate = true;
					}
					
					InitialiseFromRenderSystemCapabilities(csobj_caps, csobj_primary);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CRenderSystem_initialiseFromRenderSystemCapabilities_void_CRenderSystemCapabilities_CRenderTarget(IntPtr pNativeObject, IntPtr caps, IntPtr primary);

				/// <summary>
				/// 从性能初始化渲染系统
				/// </summary>
				/// <param name="caps"></param>
				/// <param name="primary"></param>
				/// <returns></returns>
				protected virtual void InitialiseFromRenderSystemCapabilities(EarthView.World.Graphic.RenderSystemCapabilities caps, EarthView.World.Graphic.RenderTarget primary)
				{
					EarthView_World_Graphic_CRenderSystem_initialiseFromRenderSystemCapabilities_void_CRenderSystemCapabilities_CRenderTarget(this.NativeObject, object.Equals(caps, null) ? IntPtr.Zero : caps.NativeObject, object.Equals(primary, null) ? IntPtr.Zero : primary.NativeObject);
					
				}

				#if DEBUG 
					#if Windows 
						private static bool bLoadRenderSystem = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadRenderSystem = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#elif Linux 
						private static bool bLoadRenderSystem = LoadDll.Load("EV_Graphic_d.so");
						private static bool csbLoadRenderSystem = LoadDll.Load("EV_Graphic_CSharp_d.so");

					#else 
						private static bool bLoadRenderSystem = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadRenderSystem = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#endif 
				#else 
					#if Windows 
						private static bool bLoadRenderSystem = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadRenderSystem = LoadDll.Load("EV_Graphic_CSharp.dll");

					#elif Linux 
						private static bool bLoadRenderSystem = LoadDll.Load("EV_Graphic.so");
						private static bool csbLoadRenderSystem = LoadDll.Load("EV_Graphic_CSharp.so");

					#else 
						private static bool bLoadRenderSystem = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadRenderSystem = LoadDll.Load("EV_Graphic_CSharp.dll");

					#endif 
				#endif 

				private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CRenderSystem", new RenderSystemClassFactory());

				private static bool registerProxyStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CRenderSystemProxy", new RenderSystemClassFactory());

				public RenderSystem(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
				{
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getName_EVString(IntPtr pObject, getName_CallBack_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getConfigOptions_ConfigOptionMap(IntPtr pObject, getConfigOptions_CallBack_ConfigOptionMap pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setConfigOption_void_EVString_EVString(IntPtr pObject, setConfigOption_CallBack_void_EVString_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_createHardwareOcclusionQuery_CHardwareOcclusionQuery(IntPtr pObject, createHardwareOcclusionQuery_CallBack_CHardwareOcclusionQuery pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_destroyHardwareOcclusionQuery_void_CHardwareOcclusionQuery(IntPtr pObject, destroyHardwareOcclusionQuery_CallBack_void_CHardwareOcclusionQuery pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_validateConfigOptions_EVString(IntPtr pObject, validateConfigOptions_CallBack_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__initialise_CRenderWindow_ev_bool_EVString(IntPtr pObject, _initialise_CallBack_CRenderWindow_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__initialise_CRenderWindow_ev_bool(IntPtr pObject, _initialise_CallBack_CRenderWindow_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_createRenderSystemCapabilities_CRenderSystemCapabilities(IntPtr pObject, createRenderSystemCapabilities_CallBack_CRenderSystemCapabilities pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_useCustomRenderSystemCapabilities_void_CRenderSystemCapabilities(IntPtr pObject, useCustomRenderSystemCapabilities_CallBack_void_CRenderSystemCapabilities pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_reinitialise_void(IntPtr pObject, reinitialise_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_shutdown_void(IntPtr pObject, shutdown_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setAmbientLight_void_ev_real32_ev_real32_ev_real32(IntPtr pObject, setAmbientLight_CallBack_void_ev_real32_ev_real32_ev_real32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setShadingType_void_ShadeOptions(IntPtr pObject, setShadingType_CallBack_void_ShadeOptions pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setLightingEnabled_void_ev_bool(IntPtr pObject, setLightingEnabled_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__createRenderWindow_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_CommonStringPairList(IntPtr pObject, _createRenderWindow_CallBack_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_CommonStringPairList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__createRenderWindow_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool(IntPtr pObject, _createRenderWindow_CallBack_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__createRenderWindows_ev_bool_RenderWindowDescriptionList_RenderWindowList(IntPtr pObject, _createRenderWindows_CallBack_ev_bool_RenderWindowDescriptionList_RenderWindowList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_createMultiRenderTarget_CMultiRenderTarget_EVString(IntPtr pObject, createMultiRenderTarget_CallBack_CMultiRenderTarget_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_destroyRenderWindow_void_EVString(IntPtr pObject, destroyRenderWindow_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_destroyRenderTexture_void_EVString(IntPtr pObject, destroyRenderTexture_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_destroyRenderTarget_void_EVString(IntPtr pObject, destroyRenderTarget_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_attachRenderTarget_void_CRenderTarget(IntPtr pObject, attachRenderTarget_CallBack_void_CRenderTarget pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getRenderTarget_CRenderTarget_EVString(IntPtr pObject, getRenderTarget_CallBack_CRenderTarget_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_detachRenderTarget_CRenderTarget_EVString(IntPtr pObject, detachRenderTarget_CallBack_CRenderTarget_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getRenderTargetIterator_RenderTargetIterator(IntPtr pObject, getRenderTargetIterator_CallBack_RenderTargetIterator pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getErrorDescription_EVString_ev_int32(IntPtr pObject, getErrorDescription_CallBack_EVString_ev_int32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setDepthBufferFor_void_CRenderTarget(IntPtr pObject, setDepthBufferFor_CallBack_void_CRenderTarget pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__useLights_void_LightList_ev_uint16(IntPtr pObject, _useLights_CallBack_void_LightList_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_areFixedFunctionLightsInViewSpace_ev_bool(IntPtr pObject, areFixedFunctionLightsInViewSpace_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setWorldMatrix_void_CMatrix4(IntPtr pObject, _setWorldMatrix_CallBack_void_CMatrix4 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setWorldMatrices_void_CMatrix4_ev_uint16(IntPtr pObject, _setWorldMatrices_CallBack_void_CMatrix4_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setViewMatrix_void_CMatrix4(IntPtr pObject, _setViewMatrix_CallBack_void_CMatrix4 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getViewMatrix_CMatrix4(IntPtr pObject, _getViewMatrix_CallBack_CMatrix4 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setProjectionMatrix_void_CMatrix4(IntPtr pObject, _setProjectionMatrix_CallBack_void_CMatrix4 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getProjectMatrix_CMatrix4(IntPtr pObject, _getProjectMatrix_CallBack_CMatrix4 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getProjectMatrixDepth_CMatrix4(IntPtr pObject, _getProjectMatrixDepth_CallBack_CMatrix4 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureUnitSettings_void_ev_size_t_CTextureUnitState(IntPtr pObject, _setTextureUnitSettings_CallBack_void_ev_size_t_CTextureUnitState pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__disableTextureUnit_void_ev_size_t(IntPtr pObject, _disableTextureUnit_CallBack_void_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__disableTextureUnitsFrom_void_ev_size_t(IntPtr pObject, _disableTextureUnitsFrom_CallBack_void_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setSurfaceParams_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_ev_int32(IntPtr pObject, _setSurfaceParams_CallBack_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_ev_int32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setSurfaceParams_void_CColourValue_CColourValue_CColourValue_CColourValue_Real(IntPtr pObject, _setSurfaceParams_CallBack_void_CColourValue_CColourValue_CColourValue_CColourValue_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setPointSpritesEnabled_void_ev_bool(IntPtr pObject, _setPointSpritesEnabled_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setPointParameters_void_Real_ev_bool_Real_Real_Real_Real_Real(IntPtr pObject, _setPointParameters_CallBack_void_Real_ev_bool_Real_Real_Real_Real_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTexture_void_ev_size_t_ev_bool_CTexturePtr(IntPtr pObject, _setTexture_CallBack_void_ev_size_t_ev_bool_CTexturePtr pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTexture_void_ev_size_t_ev_bool_EVString(IntPtr pObject, _setTexture_CallBack_void_ev_size_t_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setVertexTexture_void_ev_size_t_CTexturePtr(IntPtr pObject, _setVertexTexture_CallBack_void_ev_size_t_CTexturePtr pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureCoordSet_void_ev_size_t_ev_size_t(IntPtr pObject, _setTextureCoordSet_CallBack_void_ev_size_t_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureCoordCalculation_void_ev_size_t_TexCoordCalcMethod_CFrustum(IntPtr pObject, _setTextureCoordCalculation_CallBack_void_ev_size_t_TexCoordCalcMethod_CFrustum pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureCoordCalculation_void_ev_size_t_TexCoordCalcMethod(IntPtr pObject, _setTextureCoordCalculation_CallBack_void_ev_size_t_TexCoordCalcMethod pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureBlendMode_void_ev_size_t_CLayerBlendModeEx(IntPtr pObject, _setTextureBlendMode_CallBack_void_ev_size_t_CLayerBlendModeEx pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureUnitFiltering_void_ev_size_t_FilterOptions_FilterOptions_FilterOptions(IntPtr pObject, _setTextureUnitFiltering_CallBack_void_ev_size_t_FilterOptions_FilterOptions_FilterOptions pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureUnitFiltering_void_ev_size_t_FilterType_FilterOptions(IntPtr pObject, _setTextureUnitFiltering_CallBack_void_ev_size_t_FilterType_FilterOptions pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureLayerAnisotropy_void_ev_size_t_ev_uint32(IntPtr pObject, _setTextureLayerAnisotropy_CallBack_void_ev_size_t_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureAddressingMode_void_ev_size_t_UVWAddressingMode(IntPtr pObject, _setTextureAddressingMode_CallBack_void_ev_size_t_UVWAddressingMode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureBorderColour_void_ev_size_t_CColourValue(IntPtr pObject, _setTextureBorderColour_CallBack_void_ev_size_t_CColourValue pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureMipmapBias_void_ev_size_t_ev_real32(IntPtr pObject, _setTextureMipmapBias_CallBack_void_ev_size_t_ev_real32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureMatrix_void_ev_size_t_CMatrix4(IntPtr pObject, _setTextureMatrix_CallBack_void_ev_size_t_CMatrix4 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation(IntPtr pObject, _setSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setSceneBlending_void_SceneBlendFactor_SceneBlendFactor(IntPtr pObject, _setSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_SceneBlendOperation(IntPtr pObject, _setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_SceneBlendOperation pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation(IntPtr pObject, _setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor(IntPtr pObject, _setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setAlphaRejectSettings_void_CompareFunction_ev_uchar_ev_bool(IntPtr pObject, _setAlphaRejectSettings_CallBack_void_CompareFunction_ev_uchar_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureProjectionRelativeTo_void_ev_bool_CVector3(IntPtr pObject, _setTextureProjectionRelativeTo_CallBack_void_ev_bool_CVector3 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__createDepthBufferFor_CDepthBuffer_CRenderTarget(IntPtr pObject, _createDepthBufferFor_CallBack_CDepthBuffer_CRenderTarget pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__beginFrame_void(IntPtr pObject, _beginFrame_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__pauseFrame_RenderSystemContext(IntPtr pObject, _pauseFrame_CallBack_RenderSystemContext pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__resumeFrame_void_RenderSystemContext(IntPtr pObject, _resumeFrame_CallBack_void_RenderSystemContext pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__endFrame_void(IntPtr pObject, _endFrame_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setViewport_void_CViewport(IntPtr pObject, _setViewport_CallBack_void_CViewport pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getViewport_CViewport(IntPtr pObject, _getViewport_CallBack_CViewport pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setCullingMode_void_CullingMode(IntPtr pObject, _setCullingMode_CallBack_void_CullingMode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getCullingMode_CullingMode(IntPtr pObject, _getCullingMode_CallBack_CullingMode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_ev_bool_CompareFunction(IntPtr pObject, _setDepthBufferParams_CallBack_void_ev_bool_ev_bool_CompareFunction pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_ev_bool(IntPtr pObject, _setDepthBufferParams_CallBack_void_ev_bool_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool(IntPtr pObject, _setDepthBufferParams_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void(IntPtr pObject, _setDepthBufferParams_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferCheckEnabled_void_ev_bool(IntPtr pObject, _setDepthBufferCheckEnabled_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferCheckEnabled_void(IntPtr pObject, _setDepthBufferCheckEnabled_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferWriteEnabled_void_ev_bool(IntPtr pObject, _setDepthBufferWriteEnabled_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferWriteEnabled_void(IntPtr pObject, _setDepthBufferWriteEnabled_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferFunction_void_CompareFunction(IntPtr pObject, _setDepthBufferFunction_CallBack_void_CompareFunction pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferFunction_void(IntPtr pObject, _setDepthBufferFunction_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setColourBufferWriteEnabled_void_ev_bool_ev_bool_ev_bool_ev_bool(IntPtr pObject, _setColourBufferWriteEnabled_CallBack_void_ev_bool_ev_bool_ev_bool_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBias_void_ev_real32_ev_real32(IntPtr pObject, _setDepthBias_CallBack_void_ev_real32_ev_real32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBias_void_ev_real32(IntPtr pObject, _setDepthBias_CallBack_void_ev_real32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Real_Real(IntPtr pObject, _setFog_CallBack_void_FogMode_CColourValue_Real_Real_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Real(IntPtr pObject, _setFog_CallBack_void_FogMode_CColourValue_Real_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real(IntPtr pObject, _setFog_CallBack_void_FogMode_CColourValue_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue(IntPtr pObject, _setFog_CallBack_void_FogMode_CColourValue pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode(IntPtr pObject, _setFog_CallBack_void_FogMode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setFog_void(IntPtr pObject, _setFog_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__beginGeometryCount_void(IntPtr pObject, _beginGeometryCount_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getFaceCount_ev_uint32(IntPtr pObject, _getFaceCount_CallBack_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getBatchCount_ev_uint32(IntPtr pObject, _getBatchCount_CallBack_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getVertexCount_ev_uint32(IntPtr pObject, _getVertexCount_CallBack_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_convertColourValue_void_CColourValue_ev_uint32(IntPtr pObject, convertColourValue_CallBack_void_CColourValue_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_toColourValue_void_ev_uint32_CColourValue(IntPtr pObject, toColourValue_CallBack_void_ev_uint32_CColourValue pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getColourVertexElementType_VertexElementType(IntPtr pObject, getColourVertexElementType_CallBack_VertexElementType pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__convertProjectionMatrix_void_CMatrix4_CMatrix4_ev_bool(IntPtr pObject, _convertProjectionMatrix_CallBack_void_CMatrix4_CMatrix4_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__convertProjectionMatrix_void_CMatrix4_CMatrix4(IntPtr pObject, _convertProjectionMatrix_CallBack_void_CMatrix4_CMatrix4 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_CRadian_Real_Real_Real_CMatrix4_ev_bool(IntPtr pObject, _makeProjectionMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_CRadian_Real_Real_Real_CMatrix4(IntPtr pObject, _makeProjectionMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_Real_Real_Real_Real_Real_Real_CMatrix4_ev_bool(IntPtr pObject, _makeProjectionMatrix_CallBack_void_Real_Real_Real_Real_Real_Real_CMatrix4_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_Real_Real_Real_Real_Real_Real_CMatrix4(IntPtr pObject, _makeProjectionMatrix_CallBack_void_Real_Real_Real_Real_Real_Real_CMatrix4 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__makeOrthoMatrix_void_CRadian_Real_Real_Real_CMatrix4_ev_bool(IntPtr pObject, _makeOrthoMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__makeOrthoMatrix_void_CRadian_Real_Real_Real_CMatrix4(IntPtr pObject, _makeOrthoMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__applyObliqueDepthProjection_void_CMatrix4_CPlane_ev_bool(IntPtr pObject, _applyObliqueDepthProjection_CallBack_void_CMatrix4_CPlane_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setPolygonMode_void_PolygonMode(IntPtr pObject, _setPolygonMode_CallBack_void_PolygonMode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilCheckEnabled_void_ev_bool(IntPtr pObject, setStencilCheckEnabled_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_ev_bool(IntPtr pObject, setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation(IntPtr pObject, setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation(IntPtr pObject, setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation(IntPtr pObject, setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32(IntPtr pObject, setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32(IntPtr pObject, setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction(IntPtr pObject, setStencilBufferParams_CallBack_void_CompareFunction pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void(IntPtr pObject, setStencilBufferParams_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setVertexDeclaration_void_CVertexDeclaration(IntPtr pObject, setVertexDeclaration_CallBack_void_CVertexDeclaration pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setVertexBufferBinding_void_CVertexBufferBinding(IntPtr pObject, setVertexBufferBinding_CallBack_void_CVertexBufferBinding pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setNormaliseNormals_void_ev_bool(IntPtr pObject, setNormaliseNormals_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__render_void_CRenderOperation(IntPtr pObject, _render_CallBack_void_CRenderOperation pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getDriverVersion_DriverVersion(IntPtr pObject, getDriverVersion_CallBack_DriverVersion pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getActD3D9Device_void(IntPtr pObject, getActD3D9Device_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getDefaultViewportMaterialScheme_EVString(IntPtr pObject, _getDefaultViewportMaterialScheme_CallBack_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_bindGpuProgram_void_CGpuProgram(IntPtr pObject, bindGpuProgram_CallBack_void_CGpuProgram pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_bindGpuProgramParameters_void_GpuProgramType_GpuProgramParametersSharedPtr_ev_uint16(IntPtr pObject, bindGpuProgramParameters_CallBack_void_GpuProgramType_GpuProgramParametersSharedPtr_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_bindGpuProgramPassIterationParameters_void_GpuProgramType(IntPtr pObject, bindGpuProgramPassIterationParameters_CallBack_void_GpuProgramType pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_unbindGpuProgram_void_GpuProgramType(IntPtr pObject, unbindGpuProgram_CallBack_void_GpuProgramType pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_isGpuProgramBound_ev_bool_GpuProgramType(IntPtr pObject, isGpuProgramBound_CallBack_ev_bool_GpuProgramType pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setClipPlanes_void_PlaneList(IntPtr pObject, setClipPlanes_CallBack_void_PlaneList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_addClipPlane_void_CPlane(IntPtr pObject, addClipPlane_CallBack_void_CPlane pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_addClipPlane_void_Real_Real_Real_Real(IntPtr pObject, addClipPlane_CallBack_void_Real_Real_Real_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_resetClipPlanes_void(IntPtr pObject, resetClipPlanes_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__initRenderTargets_void(IntPtr pObject, _initRenderTargets_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__notifyCameraRemoved_void_CCamera(IntPtr pObject, _notifyCameraRemoved_CallBack_void_CCamera pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__updateAllRenderTargets_void_ev_bool(IntPtr pObject, _updateAllRenderTargets_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__updateAllRenderTargets_void(IntPtr pObject, _updateAllRenderTargets_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__swapAllRenderTargetBuffers_void_ev_bool(IntPtr pObject, _swapAllRenderTargetBuffers_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__swapAllRenderTargetBuffers_void(IntPtr pObject, _swapAllRenderTargetBuffers_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setInvertVertexWinding_void_ev_bool(IntPtr pObject, setInvertVertexWinding_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getInvertVertexWinding_ev_bool(IntPtr pObject, getInvertVertexWinding_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_ev_size_t(IntPtr pObject, setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_ev_size_t(IntPtr pObject, setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t(IntPtr pObject, setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t(IntPtr pObject, setScissorTest_CallBack_void_ev_bool_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool(IntPtr pObject, setScissorTest_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Real_ev_uint16(IntPtr pObject, clearFrameBuffer_CallBack_void_ev_uint32_CColourValue_Real_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Real(IntPtr pObject, clearFrameBuffer_CallBack_void_ev_uint32_CColourValue_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue(IntPtr pObject, clearFrameBuffer_CallBack_void_ev_uint32_CColourValue pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32(IntPtr pObject, clearFrameBuffer_CallBack_void_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getHorizontalTexelOffset_Real(IntPtr pObject, getHorizontalTexelOffset_CallBack_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getVerticalTexelOffset_Real(IntPtr pObject, getVerticalTexelOffset_CallBack_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getMinimumDepthInputValue_Real(IntPtr pObject, getMinimumDepthInputValue_CallBack_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getMaximumDepthInputValue_Real(IntPtr pObject, getMaximumDepthInputValue_CallBack_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setCurrentPassIterationCount_void_ev_size_t(IntPtr pObject, setCurrentPassIterationCount_CallBack_void_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_ev_real32_ev_real32(IntPtr pObject, setDeriveDepthBias_CallBack_void_ev_bool_ev_real32_ev_real32_ev_real32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_ev_real32(IntPtr pObject, setDeriveDepthBias_CallBack_void_ev_bool_ev_real32_ev_real32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32(IntPtr pObject, setDeriveDepthBias_CallBack_void_ev_bool_ev_real32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool(IntPtr pObject, setDeriveDepthBias_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setRenderTarget_void_CRenderTarget(IntPtr pObject, _setRenderTarget_CallBack_void_CRenderTarget pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_addListener_void_CRenderSystemListener(IntPtr pObject, addListener_CallBack_void_CRenderSystemListener pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_removeListener_void_CRenderSystemListener(IntPtr pObject, removeListener_CallBack_void_CRenderSystemListener pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getRenderSystemEvents_StringVector(IntPtr pObject, getRenderSystemEvents_CallBack_StringVector pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_preExtraThreadsStarted_void(IntPtr pObject, preExtraThreadsStarted_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_postExtraThreadsStarted_void(IntPtr pObject, postExtraThreadsStarted_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_registerThread_void(IntPtr pObject, registerThread_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_flushRenderSystem_void(IntPtr pObject, flushRenderSystem_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_unregisterThread_void(IntPtr pObject, unregisterThread_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getDisplayMonitorCount_ev_uint32(IntPtr pObject, getDisplayMonitorCount_CallBack_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_fireEvent_void_EVString_CommonStringPairList(IntPtr pObject, fireEvent_CallBack_void_EVString_CommonStringPairList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_fireEvent_void_EVString(IntPtr pObject, fireEvent_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setClipPlanesImpl_void_PlaneList(IntPtr pObject, setClipPlanesImpl_CallBack_void_PlaneList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_initialiseFromRenderSystemCapabilities_void_CRenderSystemCapabilities_CRenderTarget(IntPtr pObject, initialiseFromRenderSystemCapabilities_CallBack_void_CRenderSystemCapabilities_CRenderTarget pCallback);

				public override void RegisterCallBack()
				{
					if (this.NativeObject != IntPtr.Zero)
					{
						m_getName_CallBack_EVString = EarthView_World_Graphic_CRenderSystem_getName_EVString_Function;
						GC.KeepAlive(m_getName_CallBack_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getName_EVString(this.NativeObject, m_getName_CallBack_EVString);
						m_getConfigOptions_CallBack_ConfigOptionMap = EarthView_World_Graphic_CRenderSystem_getConfigOptions_ConfigOptionMap_Function;
						GC.KeepAlive(m_getConfigOptions_CallBack_ConfigOptionMap);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getConfigOptions_ConfigOptionMap(this.NativeObject, m_getConfigOptions_CallBack_ConfigOptionMap);
						m_setConfigOption_CallBack_void_EVString_EVString = EarthView_World_Graphic_CRenderSystem_setConfigOption_void_EVString_EVString_Function;
						GC.KeepAlive(m_setConfigOption_CallBack_void_EVString_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setConfigOption_void_EVString_EVString(this.NativeObject, m_setConfigOption_CallBack_void_EVString_EVString);
						m_createHardwareOcclusionQuery_CallBack_CHardwareOcclusionQuery = EarthView_World_Graphic_CRenderSystem_createHardwareOcclusionQuery_CHardwareOcclusionQuery_Function;
						GC.KeepAlive(m_createHardwareOcclusionQuery_CallBack_CHardwareOcclusionQuery);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_createHardwareOcclusionQuery_CHardwareOcclusionQuery(this.NativeObject, m_createHardwareOcclusionQuery_CallBack_CHardwareOcclusionQuery);
						m_destroyHardwareOcclusionQuery_CallBack_void_CHardwareOcclusionQuery = EarthView_World_Graphic_CRenderSystem_destroyHardwareOcclusionQuery_void_CHardwareOcclusionQuery_Function;
						GC.KeepAlive(m_destroyHardwareOcclusionQuery_CallBack_void_CHardwareOcclusionQuery);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_destroyHardwareOcclusionQuery_void_CHardwareOcclusionQuery(this.NativeObject, m_destroyHardwareOcclusionQuery_CallBack_void_CHardwareOcclusionQuery);
						m_validateConfigOptions_CallBack_EVString = EarthView_World_Graphic_CRenderSystem_validateConfigOptions_EVString_Function;
						GC.KeepAlive(m_validateConfigOptions_CallBack_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_validateConfigOptions_EVString(this.NativeObject, m_validateConfigOptions_CallBack_EVString);
						m__initialise_CallBack_CRenderWindow_ev_bool_EVString = EarthView_World_Graphic_CRenderSystem__initialise_CRenderWindow_ev_bool_EVString_Function;
						GC.KeepAlive(m__initialise_CallBack_CRenderWindow_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__initialise_CRenderWindow_ev_bool_EVString(this.NativeObject, m__initialise_CallBack_CRenderWindow_ev_bool_EVString);
						m__initialise_CallBack_CRenderWindow_ev_bool = EarthView_World_Graphic_CRenderSystem__initialise_CRenderWindow_ev_bool_Function;
						GC.KeepAlive(m__initialise_CallBack_CRenderWindow_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__initialise_CRenderWindow_ev_bool(this.NativeObject, m__initialise_CallBack_CRenderWindow_ev_bool);
						m_createRenderSystemCapabilities_CallBack_CRenderSystemCapabilities = EarthView_World_Graphic_CRenderSystem_createRenderSystemCapabilities_CRenderSystemCapabilities_Function;
						GC.KeepAlive(m_createRenderSystemCapabilities_CallBack_CRenderSystemCapabilities);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_createRenderSystemCapabilities_CRenderSystemCapabilities(this.NativeObject, m_createRenderSystemCapabilities_CallBack_CRenderSystemCapabilities);
						m_useCustomRenderSystemCapabilities_CallBack_void_CRenderSystemCapabilities = EarthView_World_Graphic_CRenderSystem_useCustomRenderSystemCapabilities_void_CRenderSystemCapabilities_Function;
						GC.KeepAlive(m_useCustomRenderSystemCapabilities_CallBack_void_CRenderSystemCapabilities);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_useCustomRenderSystemCapabilities_void_CRenderSystemCapabilities(this.NativeObject, m_useCustomRenderSystemCapabilities_CallBack_void_CRenderSystemCapabilities);
						m_reinitialise_CallBack_void = EarthView_World_Graphic_CRenderSystem_reinitialise_void_Function;
						GC.KeepAlive(m_reinitialise_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_reinitialise_void(this.NativeObject, m_reinitialise_CallBack_void);
						m_shutdown_CallBack_void = EarthView_World_Graphic_CRenderSystem_shutdown_void_Function;
						GC.KeepAlive(m_shutdown_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_shutdown_void(this.NativeObject, m_shutdown_CallBack_void);
						m_setAmbientLight_CallBack_void_ev_real32_ev_real32_ev_real32 = EarthView_World_Graphic_CRenderSystem_setAmbientLight_void_ev_real32_ev_real32_ev_real32_Function;
						GC.KeepAlive(m_setAmbientLight_CallBack_void_ev_real32_ev_real32_ev_real32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setAmbientLight_void_ev_real32_ev_real32_ev_real32(this.NativeObject, m_setAmbientLight_CallBack_void_ev_real32_ev_real32_ev_real32);
						m_setShadingType_CallBack_void_ShadeOptions = EarthView_World_Graphic_CRenderSystem_setShadingType_void_ShadeOptions_Function;
						GC.KeepAlive(m_setShadingType_CallBack_void_ShadeOptions);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setShadingType_void_ShadeOptions(this.NativeObject, m_setShadingType_CallBack_void_ShadeOptions);
						m_setLightingEnabled_CallBack_void_ev_bool = EarthView_World_Graphic_CRenderSystem_setLightingEnabled_void_ev_bool_Function;
						GC.KeepAlive(m_setLightingEnabled_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setLightingEnabled_void_ev_bool(this.NativeObject, m_setLightingEnabled_CallBack_void_ev_bool);
						m__createRenderWindow_CallBack_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_CommonStringPairList = EarthView_World_Graphic_CRenderSystem__createRenderWindow_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_CommonStringPairList_Function;
						GC.KeepAlive(m__createRenderWindow_CallBack_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_CommonStringPairList);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__createRenderWindow_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_CommonStringPairList(this.NativeObject, m__createRenderWindow_CallBack_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_CommonStringPairList);
						m__createRenderWindow_CallBack_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool = EarthView_World_Graphic_CRenderSystem__createRenderWindow_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool_Function;
						GC.KeepAlive(m__createRenderWindow_CallBack_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__createRenderWindow_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool(this.NativeObject, m__createRenderWindow_CallBack_CRenderWindow_EVString_ev_uint32_ev_uint32_ev_bool);
						m__createRenderWindows_CallBack_ev_bool_RenderWindowDescriptionList_RenderWindowList = EarthView_World_Graphic_CRenderSystem__createRenderWindows_ev_bool_RenderWindowDescriptionList_RenderWindowList_Function;
						GC.KeepAlive(m__createRenderWindows_CallBack_ev_bool_RenderWindowDescriptionList_RenderWindowList);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__createRenderWindows_ev_bool_RenderWindowDescriptionList_RenderWindowList(this.NativeObject, m__createRenderWindows_CallBack_ev_bool_RenderWindowDescriptionList_RenderWindowList);
						m_createMultiRenderTarget_CallBack_CMultiRenderTarget_EVString = EarthView_World_Graphic_CRenderSystem_createMultiRenderTarget_CMultiRenderTarget_EVString_Function;
						GC.KeepAlive(m_createMultiRenderTarget_CallBack_CMultiRenderTarget_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_createMultiRenderTarget_CMultiRenderTarget_EVString(this.NativeObject, m_createMultiRenderTarget_CallBack_CMultiRenderTarget_EVString);
						m_destroyRenderWindow_CallBack_void_EVString = EarthView_World_Graphic_CRenderSystem_destroyRenderWindow_void_EVString_Function;
						GC.KeepAlive(m_destroyRenderWindow_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_destroyRenderWindow_void_EVString(this.NativeObject, m_destroyRenderWindow_CallBack_void_EVString);
						m_destroyRenderTexture_CallBack_void_EVString = EarthView_World_Graphic_CRenderSystem_destroyRenderTexture_void_EVString_Function;
						GC.KeepAlive(m_destroyRenderTexture_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_destroyRenderTexture_void_EVString(this.NativeObject, m_destroyRenderTexture_CallBack_void_EVString);
						m_destroyRenderTarget_CallBack_void_EVString = EarthView_World_Graphic_CRenderSystem_destroyRenderTarget_void_EVString_Function;
						GC.KeepAlive(m_destroyRenderTarget_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_destroyRenderTarget_void_EVString(this.NativeObject, m_destroyRenderTarget_CallBack_void_EVString);
						m_attachRenderTarget_CallBack_void_CRenderTarget = EarthView_World_Graphic_CRenderSystem_attachRenderTarget_void_CRenderTarget_Function;
						GC.KeepAlive(m_attachRenderTarget_CallBack_void_CRenderTarget);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_attachRenderTarget_void_CRenderTarget(this.NativeObject, m_attachRenderTarget_CallBack_void_CRenderTarget);
						m_getRenderTarget_CallBack_CRenderTarget_EVString = EarthView_World_Graphic_CRenderSystem_getRenderTarget_CRenderTarget_EVString_Function;
						GC.KeepAlive(m_getRenderTarget_CallBack_CRenderTarget_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getRenderTarget_CRenderTarget_EVString(this.NativeObject, m_getRenderTarget_CallBack_CRenderTarget_EVString);
						m_detachRenderTarget_CallBack_CRenderTarget_EVString = EarthView_World_Graphic_CRenderSystem_detachRenderTarget_CRenderTarget_EVString_Function;
						GC.KeepAlive(m_detachRenderTarget_CallBack_CRenderTarget_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_detachRenderTarget_CRenderTarget_EVString(this.NativeObject, m_detachRenderTarget_CallBack_CRenderTarget_EVString);
						m_getRenderTargetIterator_CallBack_RenderTargetIterator = EarthView_World_Graphic_CRenderSystem_getRenderTargetIterator_RenderTargetIterator_Function;
						GC.KeepAlive(m_getRenderTargetIterator_CallBack_RenderTargetIterator);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getRenderTargetIterator_RenderTargetIterator(this.NativeObject, m_getRenderTargetIterator_CallBack_RenderTargetIterator);
						m_getErrorDescription_CallBack_EVString_ev_int32 = EarthView_World_Graphic_CRenderSystem_getErrorDescription_EVString_ev_int32_Function;
						GC.KeepAlive(m_getErrorDescription_CallBack_EVString_ev_int32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getErrorDescription_EVString_ev_int32(this.NativeObject, m_getErrorDescription_CallBack_EVString_ev_int32);
						m_setDepthBufferFor_CallBack_void_CRenderTarget = EarthView_World_Graphic_CRenderSystem_setDepthBufferFor_void_CRenderTarget_Function;
						GC.KeepAlive(m_setDepthBufferFor_CallBack_void_CRenderTarget);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setDepthBufferFor_void_CRenderTarget(this.NativeObject, m_setDepthBufferFor_CallBack_void_CRenderTarget);
						m__useLights_CallBack_void_LightList_ev_uint16 = EarthView_World_Graphic_CRenderSystem__useLights_void_LightList_ev_uint16_Function;
						GC.KeepAlive(m__useLights_CallBack_void_LightList_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__useLights_void_LightList_ev_uint16(this.NativeObject, m__useLights_CallBack_void_LightList_ev_uint16);
						m_areFixedFunctionLightsInViewSpace_CallBack_ev_bool = EarthView_World_Graphic_CRenderSystem_areFixedFunctionLightsInViewSpace_ev_bool_Function;
						GC.KeepAlive(m_areFixedFunctionLightsInViewSpace_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_areFixedFunctionLightsInViewSpace_ev_bool(this.NativeObject, m_areFixedFunctionLightsInViewSpace_CallBack_ev_bool);
						m__setWorldMatrix_CallBack_void_CMatrix4 = EarthView_World_Graphic_CRenderSystem__setWorldMatrix_void_CMatrix4_Function;
						GC.KeepAlive(m__setWorldMatrix_CallBack_void_CMatrix4);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setWorldMatrix_void_CMatrix4(this.NativeObject, m__setWorldMatrix_CallBack_void_CMatrix4);
						m__setWorldMatrices_CallBack_void_CMatrix4_ev_uint16 = EarthView_World_Graphic_CRenderSystem__setWorldMatrices_void_CMatrix4_ev_uint16_Function;
						GC.KeepAlive(m__setWorldMatrices_CallBack_void_CMatrix4_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setWorldMatrices_void_CMatrix4_ev_uint16(this.NativeObject, m__setWorldMatrices_CallBack_void_CMatrix4_ev_uint16);
						m__setViewMatrix_CallBack_void_CMatrix4 = EarthView_World_Graphic_CRenderSystem__setViewMatrix_void_CMatrix4_Function;
						GC.KeepAlive(m__setViewMatrix_CallBack_void_CMatrix4);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setViewMatrix_void_CMatrix4(this.NativeObject, m__setViewMatrix_CallBack_void_CMatrix4);
						m__getViewMatrix_CallBack_CMatrix4 = EarthView_World_Graphic_CRenderSystem__getViewMatrix_CMatrix4_Function;
						GC.KeepAlive(m__getViewMatrix_CallBack_CMatrix4);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getViewMatrix_CMatrix4(this.NativeObject, m__getViewMatrix_CallBack_CMatrix4);
						m__setProjectionMatrix_CallBack_void_CMatrix4 = EarthView_World_Graphic_CRenderSystem__setProjectionMatrix_void_CMatrix4_Function;
						GC.KeepAlive(m__setProjectionMatrix_CallBack_void_CMatrix4);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setProjectionMatrix_void_CMatrix4(this.NativeObject, m__setProjectionMatrix_CallBack_void_CMatrix4);
						m__getProjectMatrix_CallBack_CMatrix4 = EarthView_World_Graphic_CRenderSystem__getProjectMatrix_CMatrix4_Function;
						GC.KeepAlive(m__getProjectMatrix_CallBack_CMatrix4);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getProjectMatrix_CMatrix4(this.NativeObject, m__getProjectMatrix_CallBack_CMatrix4);
						m__getProjectMatrixDepth_CallBack_CMatrix4 = EarthView_World_Graphic_CRenderSystem__getProjectMatrixDepth_CMatrix4_Function;
						GC.KeepAlive(m__getProjectMatrixDepth_CallBack_CMatrix4);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getProjectMatrixDepth_CMatrix4(this.NativeObject, m__getProjectMatrixDepth_CallBack_CMatrix4);
						m__setTextureUnitSettings_CallBack_void_ev_size_t_CTextureUnitState = EarthView_World_Graphic_CRenderSystem__setTextureUnitSettings_void_ev_size_t_CTextureUnitState_Function;
						GC.KeepAlive(m__setTextureUnitSettings_CallBack_void_ev_size_t_CTextureUnitState);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureUnitSettings_void_ev_size_t_CTextureUnitState(this.NativeObject, m__setTextureUnitSettings_CallBack_void_ev_size_t_CTextureUnitState);
						m__disableTextureUnit_CallBack_void_ev_size_t = EarthView_World_Graphic_CRenderSystem__disableTextureUnit_void_ev_size_t_Function;
						GC.KeepAlive(m__disableTextureUnit_CallBack_void_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__disableTextureUnit_void_ev_size_t(this.NativeObject, m__disableTextureUnit_CallBack_void_ev_size_t);
						m__disableTextureUnitsFrom_CallBack_void_ev_size_t = EarthView_World_Graphic_CRenderSystem__disableTextureUnitsFrom_void_ev_size_t_Function;
						GC.KeepAlive(m__disableTextureUnitsFrom_CallBack_void_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__disableTextureUnitsFrom_void_ev_size_t(this.NativeObject, m__disableTextureUnitsFrom_CallBack_void_ev_size_t);
						m__setSurfaceParams_CallBack_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_ev_int32 = EarthView_World_Graphic_CRenderSystem__setSurfaceParams_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_ev_int32_Function;
						GC.KeepAlive(m__setSurfaceParams_CallBack_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_ev_int32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setSurfaceParams_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_ev_int32(this.NativeObject, m__setSurfaceParams_CallBack_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_ev_int32);
						m__setSurfaceParams_CallBack_void_CColourValue_CColourValue_CColourValue_CColourValue_Real = EarthView_World_Graphic_CRenderSystem__setSurfaceParams_void_CColourValue_CColourValue_CColourValue_CColourValue_Real_Function;
						GC.KeepAlive(m__setSurfaceParams_CallBack_void_CColourValue_CColourValue_CColourValue_CColourValue_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setSurfaceParams_void_CColourValue_CColourValue_CColourValue_CColourValue_Real(this.NativeObject, m__setSurfaceParams_CallBack_void_CColourValue_CColourValue_CColourValue_CColourValue_Real);
						m__setPointSpritesEnabled_CallBack_void_ev_bool = EarthView_World_Graphic_CRenderSystem__setPointSpritesEnabled_void_ev_bool_Function;
						GC.KeepAlive(m__setPointSpritesEnabled_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setPointSpritesEnabled_void_ev_bool(this.NativeObject, m__setPointSpritesEnabled_CallBack_void_ev_bool);
						m__setPointParameters_CallBack_void_Real_ev_bool_Real_Real_Real_Real_Real = EarthView_World_Graphic_CRenderSystem__setPointParameters_void_Real_ev_bool_Real_Real_Real_Real_Real_Function;
						GC.KeepAlive(m__setPointParameters_CallBack_void_Real_ev_bool_Real_Real_Real_Real_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setPointParameters_void_Real_ev_bool_Real_Real_Real_Real_Real(this.NativeObject, m__setPointParameters_CallBack_void_Real_ev_bool_Real_Real_Real_Real_Real);
						m__setTexture_CallBack_void_ev_size_t_ev_bool_CTexturePtr = EarthView_World_Graphic_CRenderSystem__setTexture_void_ev_size_t_ev_bool_CTexturePtr_Function;
						GC.KeepAlive(m__setTexture_CallBack_void_ev_size_t_ev_bool_CTexturePtr);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTexture_void_ev_size_t_ev_bool_CTexturePtr(this.NativeObject, m__setTexture_CallBack_void_ev_size_t_ev_bool_CTexturePtr);
						m__setTexture_CallBack_void_ev_size_t_ev_bool_EVString = EarthView_World_Graphic_CRenderSystem__setTexture_void_ev_size_t_ev_bool_EVString_Function;
						GC.KeepAlive(m__setTexture_CallBack_void_ev_size_t_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTexture_void_ev_size_t_ev_bool_EVString(this.NativeObject, m__setTexture_CallBack_void_ev_size_t_ev_bool_EVString);
						m__setVertexTexture_CallBack_void_ev_size_t_CTexturePtr = EarthView_World_Graphic_CRenderSystem__setVertexTexture_void_ev_size_t_CTexturePtr_Function;
						GC.KeepAlive(m__setVertexTexture_CallBack_void_ev_size_t_CTexturePtr);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setVertexTexture_void_ev_size_t_CTexturePtr(this.NativeObject, m__setVertexTexture_CallBack_void_ev_size_t_CTexturePtr);
						m__setTextureCoordSet_CallBack_void_ev_size_t_ev_size_t = EarthView_World_Graphic_CRenderSystem__setTextureCoordSet_void_ev_size_t_ev_size_t_Function;
						GC.KeepAlive(m__setTextureCoordSet_CallBack_void_ev_size_t_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureCoordSet_void_ev_size_t_ev_size_t(this.NativeObject, m__setTextureCoordSet_CallBack_void_ev_size_t_ev_size_t);
						m__setTextureCoordCalculation_CallBack_void_ev_size_t_TexCoordCalcMethod_CFrustum = EarthView_World_Graphic_CRenderSystem__setTextureCoordCalculation_void_ev_size_t_TexCoordCalcMethod_CFrustum_Function;
						GC.KeepAlive(m__setTextureCoordCalculation_CallBack_void_ev_size_t_TexCoordCalcMethod_CFrustum);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureCoordCalculation_void_ev_size_t_TexCoordCalcMethod_CFrustum(this.NativeObject, m__setTextureCoordCalculation_CallBack_void_ev_size_t_TexCoordCalcMethod_CFrustum);
						m__setTextureCoordCalculation_CallBack_void_ev_size_t_TexCoordCalcMethod = EarthView_World_Graphic_CRenderSystem__setTextureCoordCalculation_void_ev_size_t_TexCoordCalcMethod_Function;
						GC.KeepAlive(m__setTextureCoordCalculation_CallBack_void_ev_size_t_TexCoordCalcMethod);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureCoordCalculation_void_ev_size_t_TexCoordCalcMethod(this.NativeObject, m__setTextureCoordCalculation_CallBack_void_ev_size_t_TexCoordCalcMethod);
						m__setTextureBlendMode_CallBack_void_ev_size_t_CLayerBlendModeEx = EarthView_World_Graphic_CRenderSystem__setTextureBlendMode_void_ev_size_t_CLayerBlendModeEx_Function;
						GC.KeepAlive(m__setTextureBlendMode_CallBack_void_ev_size_t_CLayerBlendModeEx);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureBlendMode_void_ev_size_t_CLayerBlendModeEx(this.NativeObject, m__setTextureBlendMode_CallBack_void_ev_size_t_CLayerBlendModeEx);
						m__setTextureUnitFiltering_CallBack_void_ev_size_t_FilterOptions_FilterOptions_FilterOptions = EarthView_World_Graphic_CRenderSystem__setTextureUnitFiltering_void_ev_size_t_FilterOptions_FilterOptions_FilterOptions_Function;
						GC.KeepAlive(m__setTextureUnitFiltering_CallBack_void_ev_size_t_FilterOptions_FilterOptions_FilterOptions);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureUnitFiltering_void_ev_size_t_FilterOptions_FilterOptions_FilterOptions(this.NativeObject, m__setTextureUnitFiltering_CallBack_void_ev_size_t_FilterOptions_FilterOptions_FilterOptions);
						m__setTextureUnitFiltering_CallBack_void_ev_size_t_FilterType_FilterOptions = EarthView_World_Graphic_CRenderSystem__setTextureUnitFiltering_void_ev_size_t_FilterType_FilterOptions_Function;
						GC.KeepAlive(m__setTextureUnitFiltering_CallBack_void_ev_size_t_FilterType_FilterOptions);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureUnitFiltering_void_ev_size_t_FilterType_FilterOptions(this.NativeObject, m__setTextureUnitFiltering_CallBack_void_ev_size_t_FilterType_FilterOptions);
						m__setTextureLayerAnisotropy_CallBack_void_ev_size_t_ev_uint32 = EarthView_World_Graphic_CRenderSystem__setTextureLayerAnisotropy_void_ev_size_t_ev_uint32_Function;
						GC.KeepAlive(m__setTextureLayerAnisotropy_CallBack_void_ev_size_t_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureLayerAnisotropy_void_ev_size_t_ev_uint32(this.NativeObject, m__setTextureLayerAnisotropy_CallBack_void_ev_size_t_ev_uint32);
						m__setTextureAddressingMode_CallBack_void_ev_size_t_UVWAddressingMode = EarthView_World_Graphic_CRenderSystem__setTextureAddressingMode_void_ev_size_t_UVWAddressingMode_Function;
						GC.KeepAlive(m__setTextureAddressingMode_CallBack_void_ev_size_t_UVWAddressingMode);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureAddressingMode_void_ev_size_t_UVWAddressingMode(this.NativeObject, m__setTextureAddressingMode_CallBack_void_ev_size_t_UVWAddressingMode);
						m__setTextureBorderColour_CallBack_void_ev_size_t_CColourValue = EarthView_World_Graphic_CRenderSystem__setTextureBorderColour_void_ev_size_t_CColourValue_Function;
						GC.KeepAlive(m__setTextureBorderColour_CallBack_void_ev_size_t_CColourValue);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureBorderColour_void_ev_size_t_CColourValue(this.NativeObject, m__setTextureBorderColour_CallBack_void_ev_size_t_CColourValue);
						m__setTextureMipmapBias_CallBack_void_ev_size_t_ev_real32 = EarthView_World_Graphic_CRenderSystem__setTextureMipmapBias_void_ev_size_t_ev_real32_Function;
						GC.KeepAlive(m__setTextureMipmapBias_CallBack_void_ev_size_t_ev_real32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureMipmapBias_void_ev_size_t_ev_real32(this.NativeObject, m__setTextureMipmapBias_CallBack_void_ev_size_t_ev_real32);
						m__setTextureMatrix_CallBack_void_ev_size_t_CMatrix4 = EarthView_World_Graphic_CRenderSystem__setTextureMatrix_void_ev_size_t_CMatrix4_Function;
						GC.KeepAlive(m__setTextureMatrix_CallBack_void_ev_size_t_CMatrix4);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureMatrix_void_ev_size_t_CMatrix4(this.NativeObject, m__setTextureMatrix_CallBack_void_ev_size_t_CMatrix4);
						m__setSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation = EarthView_World_Graphic_CRenderSystem__setSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_Function;
						GC.KeepAlive(m__setSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation(this.NativeObject, m__setSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation);
						m__setSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor = EarthView_World_Graphic_CRenderSystem__setSceneBlending_void_SceneBlendFactor_SceneBlendFactor_Function;
						GC.KeepAlive(m__setSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setSceneBlending_void_SceneBlendFactor_SceneBlendFactor(this.NativeObject, m__setSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor);
						m__setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_SceneBlendOperation = EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_SceneBlendOperation_Function;
						GC.KeepAlive(m__setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_SceneBlendOperation);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_SceneBlendOperation(this.NativeObject, m__setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_SceneBlendOperation);
						m__setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation = EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation_Function;
						GC.KeepAlive(m__setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation(this.NativeObject, m__setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendOperation);
						m__setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor = EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_Function;
						GC.KeepAlive(m__setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setSeparateSceneBlending_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor(this.NativeObject, m__setSeparateSceneBlending_CallBack_void_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor_SceneBlendFactor);
						m__setAlphaRejectSettings_CallBack_void_CompareFunction_ev_uchar_ev_bool = EarthView_World_Graphic_CRenderSystem__setAlphaRejectSettings_void_CompareFunction_ev_uchar_ev_bool_Function;
						GC.KeepAlive(m__setAlphaRejectSettings_CallBack_void_CompareFunction_ev_uchar_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setAlphaRejectSettings_void_CompareFunction_ev_uchar_ev_bool(this.NativeObject, m__setAlphaRejectSettings_CallBack_void_CompareFunction_ev_uchar_ev_bool);
						m__setTextureProjectionRelativeTo_CallBack_void_ev_bool_CVector3 = EarthView_World_Graphic_CRenderSystem__setTextureProjectionRelativeTo_void_ev_bool_CVector3_Function;
						GC.KeepAlive(m__setTextureProjectionRelativeTo_CallBack_void_ev_bool_CVector3);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setTextureProjectionRelativeTo_void_ev_bool_CVector3(this.NativeObject, m__setTextureProjectionRelativeTo_CallBack_void_ev_bool_CVector3);
						m__createDepthBufferFor_CallBack_CDepthBuffer_CRenderTarget = EarthView_World_Graphic_CRenderSystem__createDepthBufferFor_CDepthBuffer_CRenderTarget_Function;
						GC.KeepAlive(m__createDepthBufferFor_CallBack_CDepthBuffer_CRenderTarget);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__createDepthBufferFor_CDepthBuffer_CRenderTarget(this.NativeObject, m__createDepthBufferFor_CallBack_CDepthBuffer_CRenderTarget);
						m__beginFrame_CallBack_void = EarthView_World_Graphic_CRenderSystem__beginFrame_void_Function;
						GC.KeepAlive(m__beginFrame_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__beginFrame_void(this.NativeObject, m__beginFrame_CallBack_void);
						m__pauseFrame_CallBack_RenderSystemContext = EarthView_World_Graphic_CRenderSystem__pauseFrame_RenderSystemContext_Function;
						GC.KeepAlive(m__pauseFrame_CallBack_RenderSystemContext);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__pauseFrame_RenderSystemContext(this.NativeObject, m__pauseFrame_CallBack_RenderSystemContext);
						m__resumeFrame_CallBack_void_RenderSystemContext = EarthView_World_Graphic_CRenderSystem__resumeFrame_void_RenderSystemContext_Function;
						GC.KeepAlive(m__resumeFrame_CallBack_void_RenderSystemContext);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__resumeFrame_void_RenderSystemContext(this.NativeObject, m__resumeFrame_CallBack_void_RenderSystemContext);
						m__endFrame_CallBack_void = EarthView_World_Graphic_CRenderSystem__endFrame_void_Function;
						GC.KeepAlive(m__endFrame_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__endFrame_void(this.NativeObject, m__endFrame_CallBack_void);
						m__setViewport_CallBack_void_CViewport = EarthView_World_Graphic_CRenderSystem__setViewport_void_CViewport_Function;
						GC.KeepAlive(m__setViewport_CallBack_void_CViewport);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setViewport_void_CViewport(this.NativeObject, m__setViewport_CallBack_void_CViewport);
						m__getViewport_CallBack_CViewport = EarthView_World_Graphic_CRenderSystem__getViewport_CViewport_Function;
						GC.KeepAlive(m__getViewport_CallBack_CViewport);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getViewport_CViewport(this.NativeObject, m__getViewport_CallBack_CViewport);
						m__setCullingMode_CallBack_void_CullingMode = EarthView_World_Graphic_CRenderSystem__setCullingMode_void_CullingMode_Function;
						GC.KeepAlive(m__setCullingMode_CallBack_void_CullingMode);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setCullingMode_void_CullingMode(this.NativeObject, m__setCullingMode_CallBack_void_CullingMode);
						m__getCullingMode_CallBack_CullingMode = EarthView_World_Graphic_CRenderSystem__getCullingMode_CullingMode_Function;
						GC.KeepAlive(m__getCullingMode_CallBack_CullingMode);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getCullingMode_CullingMode(this.NativeObject, m__getCullingMode_CallBack_CullingMode);
						m__setDepthBufferParams_CallBack_void_ev_bool_ev_bool_CompareFunction = EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_ev_bool_CompareFunction_Function;
						GC.KeepAlive(m__setDepthBufferParams_CallBack_void_ev_bool_ev_bool_CompareFunction);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_ev_bool_CompareFunction(this.NativeObject, m__setDepthBufferParams_CallBack_void_ev_bool_ev_bool_CompareFunction);
						m__setDepthBufferParams_CallBack_void_ev_bool_ev_bool = EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_ev_bool_Function;
						GC.KeepAlive(m__setDepthBufferParams_CallBack_void_ev_bool_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_ev_bool(this.NativeObject, m__setDepthBufferParams_CallBack_void_ev_bool_ev_bool);
						m__setDepthBufferParams_CallBack_void_ev_bool = EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool_Function;
						GC.KeepAlive(m__setDepthBufferParams_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_ev_bool(this.NativeObject, m__setDepthBufferParams_CallBack_void_ev_bool);
						m__setDepthBufferParams_CallBack_void = EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void_Function;
						GC.KeepAlive(m__setDepthBufferParams_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferParams_void(this.NativeObject, m__setDepthBufferParams_CallBack_void);
						m__setDepthBufferCheckEnabled_CallBack_void_ev_bool = EarthView_World_Graphic_CRenderSystem__setDepthBufferCheckEnabled_void_ev_bool_Function;
						GC.KeepAlive(m__setDepthBufferCheckEnabled_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferCheckEnabled_void_ev_bool(this.NativeObject, m__setDepthBufferCheckEnabled_CallBack_void_ev_bool);
						m__setDepthBufferCheckEnabled_CallBack_void = EarthView_World_Graphic_CRenderSystem__setDepthBufferCheckEnabled_void_Function;
						GC.KeepAlive(m__setDepthBufferCheckEnabled_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferCheckEnabled_void(this.NativeObject, m__setDepthBufferCheckEnabled_CallBack_void);
						m__setDepthBufferWriteEnabled_CallBack_void_ev_bool = EarthView_World_Graphic_CRenderSystem__setDepthBufferWriteEnabled_void_ev_bool_Function;
						GC.KeepAlive(m__setDepthBufferWriteEnabled_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferWriteEnabled_void_ev_bool(this.NativeObject, m__setDepthBufferWriteEnabled_CallBack_void_ev_bool);
						m__setDepthBufferWriteEnabled_CallBack_void = EarthView_World_Graphic_CRenderSystem__setDepthBufferWriteEnabled_void_Function;
						GC.KeepAlive(m__setDepthBufferWriteEnabled_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferWriteEnabled_void(this.NativeObject, m__setDepthBufferWriteEnabled_CallBack_void);
						m__setDepthBufferFunction_CallBack_void_CompareFunction = EarthView_World_Graphic_CRenderSystem__setDepthBufferFunction_void_CompareFunction_Function;
						GC.KeepAlive(m__setDepthBufferFunction_CallBack_void_CompareFunction);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferFunction_void_CompareFunction(this.NativeObject, m__setDepthBufferFunction_CallBack_void_CompareFunction);
						m__setDepthBufferFunction_CallBack_void = EarthView_World_Graphic_CRenderSystem__setDepthBufferFunction_void_Function;
						GC.KeepAlive(m__setDepthBufferFunction_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBufferFunction_void(this.NativeObject, m__setDepthBufferFunction_CallBack_void);
						m__setColourBufferWriteEnabled_CallBack_void_ev_bool_ev_bool_ev_bool_ev_bool = EarthView_World_Graphic_CRenderSystem__setColourBufferWriteEnabled_void_ev_bool_ev_bool_ev_bool_ev_bool_Function;
						GC.KeepAlive(m__setColourBufferWriteEnabled_CallBack_void_ev_bool_ev_bool_ev_bool_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setColourBufferWriteEnabled_void_ev_bool_ev_bool_ev_bool_ev_bool(this.NativeObject, m__setColourBufferWriteEnabled_CallBack_void_ev_bool_ev_bool_ev_bool_ev_bool);
						m__setDepthBias_CallBack_void_ev_real32_ev_real32 = EarthView_World_Graphic_CRenderSystem__setDepthBias_void_ev_real32_ev_real32_Function;
						GC.KeepAlive(m__setDepthBias_CallBack_void_ev_real32_ev_real32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBias_void_ev_real32_ev_real32(this.NativeObject, m__setDepthBias_CallBack_void_ev_real32_ev_real32);
						m__setDepthBias_CallBack_void_ev_real32 = EarthView_World_Graphic_CRenderSystem__setDepthBias_void_ev_real32_Function;
						GC.KeepAlive(m__setDepthBias_CallBack_void_ev_real32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setDepthBias_void_ev_real32(this.NativeObject, m__setDepthBias_CallBack_void_ev_real32);
						m__setFog_CallBack_void_FogMode_CColourValue_Real_Real_Real = EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Real_Real_Function;
						GC.KeepAlive(m__setFog_CallBack_void_FogMode_CColourValue_Real_Real_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Real_Real(this.NativeObject, m__setFog_CallBack_void_FogMode_CColourValue_Real_Real_Real);
						m__setFog_CallBack_void_FogMode_CColourValue_Real_Real = EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Real_Function;
						GC.KeepAlive(m__setFog_CallBack_void_FogMode_CColourValue_Real_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Real(this.NativeObject, m__setFog_CallBack_void_FogMode_CColourValue_Real_Real);
						m__setFog_CallBack_void_FogMode_CColourValue_Real = EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real_Function;
						GC.KeepAlive(m__setFog_CallBack_void_FogMode_CColourValue_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Real(this.NativeObject, m__setFog_CallBack_void_FogMode_CColourValue_Real);
						m__setFog_CallBack_void_FogMode_CColourValue = EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue_Function;
						GC.KeepAlive(m__setFog_CallBack_void_FogMode_CColourValue);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_CColourValue(this.NativeObject, m__setFog_CallBack_void_FogMode_CColourValue);
						m__setFog_CallBack_void_FogMode = EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode_Function;
						GC.KeepAlive(m__setFog_CallBack_void_FogMode);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setFog_void_FogMode(this.NativeObject, m__setFog_CallBack_void_FogMode);
						m__setFog_CallBack_void = EarthView_World_Graphic_CRenderSystem__setFog_void_Function;
						GC.KeepAlive(m__setFog_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setFog_void(this.NativeObject, m__setFog_CallBack_void);
						m__beginGeometryCount_CallBack_void = EarthView_World_Graphic_CRenderSystem__beginGeometryCount_void_Function;
						GC.KeepAlive(m__beginGeometryCount_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__beginGeometryCount_void(this.NativeObject, m__beginGeometryCount_CallBack_void);
						m__getFaceCount_CallBack_ev_uint32 = EarthView_World_Graphic_CRenderSystem__getFaceCount_ev_uint32_Function;
						GC.KeepAlive(m__getFaceCount_CallBack_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getFaceCount_ev_uint32(this.NativeObject, m__getFaceCount_CallBack_ev_uint32);
						m__getBatchCount_CallBack_ev_uint32 = EarthView_World_Graphic_CRenderSystem__getBatchCount_ev_uint32_Function;
						GC.KeepAlive(m__getBatchCount_CallBack_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getBatchCount_ev_uint32(this.NativeObject, m__getBatchCount_CallBack_ev_uint32);
						m__getVertexCount_CallBack_ev_uint32 = EarthView_World_Graphic_CRenderSystem__getVertexCount_ev_uint32_Function;
						GC.KeepAlive(m__getVertexCount_CallBack_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getVertexCount_ev_uint32(this.NativeObject, m__getVertexCount_CallBack_ev_uint32);
						m_convertColourValue_CallBack_void_CColourValue_ev_uint32 = EarthView_World_Graphic_CRenderSystem_convertColourValue_void_CColourValue_ev_uint32_Function;
						GC.KeepAlive(m_convertColourValue_CallBack_void_CColourValue_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_convertColourValue_void_CColourValue_ev_uint32(this.NativeObject, m_convertColourValue_CallBack_void_CColourValue_ev_uint32);
						m_toColourValue_CallBack_void_ev_uint32_CColourValue = EarthView_World_Graphic_CRenderSystem_toColourValue_void_ev_uint32_CColourValue_Function;
						GC.KeepAlive(m_toColourValue_CallBack_void_ev_uint32_CColourValue);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_toColourValue_void_ev_uint32_CColourValue(this.NativeObject, m_toColourValue_CallBack_void_ev_uint32_CColourValue);
						m_getColourVertexElementType_CallBack_VertexElementType = EarthView_World_Graphic_CRenderSystem_getColourVertexElementType_VertexElementType_Function;
						GC.KeepAlive(m_getColourVertexElementType_CallBack_VertexElementType);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getColourVertexElementType_VertexElementType(this.NativeObject, m_getColourVertexElementType_CallBack_VertexElementType);
						m__convertProjectionMatrix_CallBack_void_CMatrix4_CMatrix4_ev_bool = EarthView_World_Graphic_CRenderSystem__convertProjectionMatrix_void_CMatrix4_CMatrix4_ev_bool_Function;
						GC.KeepAlive(m__convertProjectionMatrix_CallBack_void_CMatrix4_CMatrix4_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__convertProjectionMatrix_void_CMatrix4_CMatrix4_ev_bool(this.NativeObject, m__convertProjectionMatrix_CallBack_void_CMatrix4_CMatrix4_ev_bool);
						m__convertProjectionMatrix_CallBack_void_CMatrix4_CMatrix4 = EarthView_World_Graphic_CRenderSystem__convertProjectionMatrix_void_CMatrix4_CMatrix4_Function;
						GC.KeepAlive(m__convertProjectionMatrix_CallBack_void_CMatrix4_CMatrix4);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__convertProjectionMatrix_void_CMatrix4_CMatrix4(this.NativeObject, m__convertProjectionMatrix_CallBack_void_CMatrix4_CMatrix4);
						m__makeProjectionMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4_ev_bool = EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_CRadian_Real_Real_Real_CMatrix4_ev_bool_Function;
						GC.KeepAlive(m__makeProjectionMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_CRadian_Real_Real_Real_CMatrix4_ev_bool(this.NativeObject, m__makeProjectionMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4_ev_bool);
						m__makeProjectionMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4 = EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_CRadian_Real_Real_Real_CMatrix4_Function;
						GC.KeepAlive(m__makeProjectionMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_CRadian_Real_Real_Real_CMatrix4(this.NativeObject, m__makeProjectionMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4);
						m__makeProjectionMatrix_CallBack_void_Real_Real_Real_Real_Real_Real_CMatrix4_ev_bool = EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_Real_Real_Real_Real_Real_Real_CMatrix4_ev_bool_Function;
						GC.KeepAlive(m__makeProjectionMatrix_CallBack_void_Real_Real_Real_Real_Real_Real_CMatrix4_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_Real_Real_Real_Real_Real_Real_CMatrix4_ev_bool(this.NativeObject, m__makeProjectionMatrix_CallBack_void_Real_Real_Real_Real_Real_Real_CMatrix4_ev_bool);
						m__makeProjectionMatrix_CallBack_void_Real_Real_Real_Real_Real_Real_CMatrix4 = EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_Real_Real_Real_Real_Real_Real_CMatrix4_Function;
						GC.KeepAlive(m__makeProjectionMatrix_CallBack_void_Real_Real_Real_Real_Real_Real_CMatrix4);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__makeProjectionMatrix_void_Real_Real_Real_Real_Real_Real_CMatrix4(this.NativeObject, m__makeProjectionMatrix_CallBack_void_Real_Real_Real_Real_Real_Real_CMatrix4);
						m__makeOrthoMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4_ev_bool = EarthView_World_Graphic_CRenderSystem__makeOrthoMatrix_void_CRadian_Real_Real_Real_CMatrix4_ev_bool_Function;
						GC.KeepAlive(m__makeOrthoMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__makeOrthoMatrix_void_CRadian_Real_Real_Real_CMatrix4_ev_bool(this.NativeObject, m__makeOrthoMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4_ev_bool);
						m__makeOrthoMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4 = EarthView_World_Graphic_CRenderSystem__makeOrthoMatrix_void_CRadian_Real_Real_Real_CMatrix4_Function;
						GC.KeepAlive(m__makeOrthoMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__makeOrthoMatrix_void_CRadian_Real_Real_Real_CMatrix4(this.NativeObject, m__makeOrthoMatrix_CallBack_void_CRadian_Real_Real_Real_CMatrix4);
						m__applyObliqueDepthProjection_CallBack_void_CMatrix4_CPlane_ev_bool = EarthView_World_Graphic_CRenderSystem__applyObliqueDepthProjection_void_CMatrix4_CPlane_ev_bool_Function;
						GC.KeepAlive(m__applyObliqueDepthProjection_CallBack_void_CMatrix4_CPlane_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__applyObliqueDepthProjection_void_CMatrix4_CPlane_ev_bool(this.NativeObject, m__applyObliqueDepthProjection_CallBack_void_CMatrix4_CPlane_ev_bool);
						m__setPolygonMode_CallBack_void_PolygonMode = EarthView_World_Graphic_CRenderSystem__setPolygonMode_void_PolygonMode_Function;
						GC.KeepAlive(m__setPolygonMode_CallBack_void_PolygonMode);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setPolygonMode_void_PolygonMode(this.NativeObject, m__setPolygonMode_CallBack_void_PolygonMode);
						m_setStencilCheckEnabled_CallBack_void_ev_bool = EarthView_World_Graphic_CRenderSystem_setStencilCheckEnabled_void_ev_bool_Function;
						GC.KeepAlive(m_setStencilCheckEnabled_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilCheckEnabled_void_ev_bool(this.NativeObject, m_setStencilCheckEnabled_CallBack_void_ev_bool);
						m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_ev_bool = EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_ev_bool_Function;
						GC.KeepAlive(m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_ev_bool(this.NativeObject, m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_ev_bool);
						m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation = EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation_Function;
						GC.KeepAlive(m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation(this.NativeObject, m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_StencilOperation);
						m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation = EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation_Function;
						GC.KeepAlive(m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation(this.NativeObject, m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_StencilOperation);
						m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation = EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation_Function;
						GC.KeepAlive(m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation(this.NativeObject, m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32_StencilOperation);
						m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32 = EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32_Function;
						GC.KeepAlive(m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_ev_uint32(this.NativeObject, m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32_ev_uint32);
						m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32 = EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32_Function;
						GC.KeepAlive(m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_ev_uint32(this.NativeObject, m_setStencilBufferParams_CallBack_void_CompareFunction_ev_uint32);
						m_setStencilBufferParams_CallBack_void_CompareFunction = EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction_Function;
						GC.KeepAlive(m_setStencilBufferParams_CallBack_void_CompareFunction);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_CompareFunction(this.NativeObject, m_setStencilBufferParams_CallBack_void_CompareFunction);
						m_setStencilBufferParams_CallBack_void = EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void_Function;
						GC.KeepAlive(m_setStencilBufferParams_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setStencilBufferParams_void(this.NativeObject, m_setStencilBufferParams_CallBack_void);
						m_setVertexDeclaration_CallBack_void_CVertexDeclaration = EarthView_World_Graphic_CRenderSystem_setVertexDeclaration_void_CVertexDeclaration_Function;
						GC.KeepAlive(m_setVertexDeclaration_CallBack_void_CVertexDeclaration);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setVertexDeclaration_void_CVertexDeclaration(this.NativeObject, m_setVertexDeclaration_CallBack_void_CVertexDeclaration);
						m_setVertexBufferBinding_CallBack_void_CVertexBufferBinding = EarthView_World_Graphic_CRenderSystem_setVertexBufferBinding_void_CVertexBufferBinding_Function;
						GC.KeepAlive(m_setVertexBufferBinding_CallBack_void_CVertexBufferBinding);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setVertexBufferBinding_void_CVertexBufferBinding(this.NativeObject, m_setVertexBufferBinding_CallBack_void_CVertexBufferBinding);
						m_setNormaliseNormals_CallBack_void_ev_bool = EarthView_World_Graphic_CRenderSystem_setNormaliseNormals_void_ev_bool_Function;
						GC.KeepAlive(m_setNormaliseNormals_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setNormaliseNormals_void_ev_bool(this.NativeObject, m_setNormaliseNormals_CallBack_void_ev_bool);
						m__render_CallBack_void_CRenderOperation = EarthView_World_Graphic_CRenderSystem__render_void_CRenderOperation_Function;
						GC.KeepAlive(m__render_CallBack_void_CRenderOperation);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__render_void_CRenderOperation(this.NativeObject, m__render_CallBack_void_CRenderOperation);
						m_getDriverVersion_CallBack_DriverVersion = EarthView_World_Graphic_CRenderSystem_getDriverVersion_DriverVersion_Function;
						GC.KeepAlive(m_getDriverVersion_CallBack_DriverVersion);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getDriverVersion_DriverVersion(this.NativeObject, m_getDriverVersion_CallBack_DriverVersion);
						m_getActD3D9Device_CallBack_void = EarthView_World_Graphic_CRenderSystem_getActD3D9Device_void_Function;
						GC.KeepAlive(m_getActD3D9Device_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getActD3D9Device_void(this.NativeObject, m_getActD3D9Device_CallBack_void);
						m__getDefaultViewportMaterialScheme_CallBack_EVString = EarthView_World_Graphic_CRenderSystem__getDefaultViewportMaterialScheme_EVString_Function;
						GC.KeepAlive(m__getDefaultViewportMaterialScheme_CallBack_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__getDefaultViewportMaterialScheme_EVString(this.NativeObject, m__getDefaultViewportMaterialScheme_CallBack_EVString);
						m_bindGpuProgram_CallBack_void_CGpuProgram = EarthView_World_Graphic_CRenderSystem_bindGpuProgram_void_CGpuProgram_Function;
						GC.KeepAlive(m_bindGpuProgram_CallBack_void_CGpuProgram);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_bindGpuProgram_void_CGpuProgram(this.NativeObject, m_bindGpuProgram_CallBack_void_CGpuProgram);
						m_bindGpuProgramParameters_CallBack_void_GpuProgramType_GpuProgramParametersSharedPtr_ev_uint16 = EarthView_World_Graphic_CRenderSystem_bindGpuProgramParameters_void_GpuProgramType_GpuProgramParametersSharedPtr_ev_uint16_Function;
						GC.KeepAlive(m_bindGpuProgramParameters_CallBack_void_GpuProgramType_GpuProgramParametersSharedPtr_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_bindGpuProgramParameters_void_GpuProgramType_GpuProgramParametersSharedPtr_ev_uint16(this.NativeObject, m_bindGpuProgramParameters_CallBack_void_GpuProgramType_GpuProgramParametersSharedPtr_ev_uint16);
						m_bindGpuProgramPassIterationParameters_CallBack_void_GpuProgramType = EarthView_World_Graphic_CRenderSystem_bindGpuProgramPassIterationParameters_void_GpuProgramType_Function;
						GC.KeepAlive(m_bindGpuProgramPassIterationParameters_CallBack_void_GpuProgramType);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_bindGpuProgramPassIterationParameters_void_GpuProgramType(this.NativeObject, m_bindGpuProgramPassIterationParameters_CallBack_void_GpuProgramType);
						m_unbindGpuProgram_CallBack_void_GpuProgramType = EarthView_World_Graphic_CRenderSystem_unbindGpuProgram_void_GpuProgramType_Function;
						GC.KeepAlive(m_unbindGpuProgram_CallBack_void_GpuProgramType);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_unbindGpuProgram_void_GpuProgramType(this.NativeObject, m_unbindGpuProgram_CallBack_void_GpuProgramType);
						m_isGpuProgramBound_CallBack_ev_bool_GpuProgramType = EarthView_World_Graphic_CRenderSystem_isGpuProgramBound_ev_bool_GpuProgramType_Function;
						GC.KeepAlive(m_isGpuProgramBound_CallBack_ev_bool_GpuProgramType);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_isGpuProgramBound_ev_bool_GpuProgramType(this.NativeObject, m_isGpuProgramBound_CallBack_ev_bool_GpuProgramType);
						m_setClipPlanes_CallBack_void_PlaneList = EarthView_World_Graphic_CRenderSystem_setClipPlanes_void_PlaneList_Function;
						GC.KeepAlive(m_setClipPlanes_CallBack_void_PlaneList);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setClipPlanes_void_PlaneList(this.NativeObject, m_setClipPlanes_CallBack_void_PlaneList);
						m_addClipPlane_CallBack_void_CPlane = EarthView_World_Graphic_CRenderSystem_addClipPlane_void_CPlane_Function;
						GC.KeepAlive(m_addClipPlane_CallBack_void_CPlane);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_addClipPlane_void_CPlane(this.NativeObject, m_addClipPlane_CallBack_void_CPlane);
						m_addClipPlane_CallBack_void_Real_Real_Real_Real = EarthView_World_Graphic_CRenderSystem_addClipPlane_void_Real_Real_Real_Real_Function;
						GC.KeepAlive(m_addClipPlane_CallBack_void_Real_Real_Real_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_addClipPlane_void_Real_Real_Real_Real(this.NativeObject, m_addClipPlane_CallBack_void_Real_Real_Real_Real);
						m_resetClipPlanes_CallBack_void = EarthView_World_Graphic_CRenderSystem_resetClipPlanes_void_Function;
						GC.KeepAlive(m_resetClipPlanes_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_resetClipPlanes_void(this.NativeObject, m_resetClipPlanes_CallBack_void);
						m__initRenderTargets_CallBack_void = EarthView_World_Graphic_CRenderSystem__initRenderTargets_void_Function;
						GC.KeepAlive(m__initRenderTargets_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__initRenderTargets_void(this.NativeObject, m__initRenderTargets_CallBack_void);
						m__notifyCameraRemoved_CallBack_void_CCamera = EarthView_World_Graphic_CRenderSystem__notifyCameraRemoved_void_CCamera_Function;
						GC.KeepAlive(m__notifyCameraRemoved_CallBack_void_CCamera);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__notifyCameraRemoved_void_CCamera(this.NativeObject, m__notifyCameraRemoved_CallBack_void_CCamera);
						m__updateAllRenderTargets_CallBack_void_ev_bool = EarthView_World_Graphic_CRenderSystem__updateAllRenderTargets_void_ev_bool_Function;
						GC.KeepAlive(m__updateAllRenderTargets_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__updateAllRenderTargets_void_ev_bool(this.NativeObject, m__updateAllRenderTargets_CallBack_void_ev_bool);
						m__updateAllRenderTargets_CallBack_void = EarthView_World_Graphic_CRenderSystem__updateAllRenderTargets_void_Function;
						GC.KeepAlive(m__updateAllRenderTargets_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__updateAllRenderTargets_void(this.NativeObject, m__updateAllRenderTargets_CallBack_void);
						m__swapAllRenderTargetBuffers_CallBack_void_ev_bool = EarthView_World_Graphic_CRenderSystem__swapAllRenderTargetBuffers_void_ev_bool_Function;
						GC.KeepAlive(m__swapAllRenderTargetBuffers_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__swapAllRenderTargetBuffers_void_ev_bool(this.NativeObject, m__swapAllRenderTargetBuffers_CallBack_void_ev_bool);
						m__swapAllRenderTargetBuffers_CallBack_void = EarthView_World_Graphic_CRenderSystem__swapAllRenderTargetBuffers_void_Function;
						GC.KeepAlive(m__swapAllRenderTargetBuffers_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__swapAllRenderTargetBuffers_void(this.NativeObject, m__swapAllRenderTargetBuffers_CallBack_void);
						m_setInvertVertexWinding_CallBack_void_ev_bool = EarthView_World_Graphic_CRenderSystem_setInvertVertexWinding_void_ev_bool_Function;
						GC.KeepAlive(m_setInvertVertexWinding_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setInvertVertexWinding_void_ev_bool(this.NativeObject, m_setInvertVertexWinding_CallBack_void_ev_bool);
						m_getInvertVertexWinding_CallBack_ev_bool = EarthView_World_Graphic_CRenderSystem_getInvertVertexWinding_ev_bool_Function;
						GC.KeepAlive(m_getInvertVertexWinding_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getInvertVertexWinding_ev_bool(this.NativeObject, m_getInvertVertexWinding_CallBack_ev_bool);
						m_setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_ev_size_t = EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_ev_size_t_Function;
						GC.KeepAlive(m_setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_ev_size_t(this.NativeObject, m_setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_ev_size_t);
						m_setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t_ev_size_t = EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_ev_size_t_Function;
						GC.KeepAlive(m_setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_ev_size_t(this.NativeObject, m_setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t_ev_size_t);
						m_setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t = EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t_Function;
						GC.KeepAlive(m_setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_ev_size_t(this.NativeObject, m_setScissorTest_CallBack_void_ev_bool_ev_size_t_ev_size_t);
						m_setScissorTest_CallBack_void_ev_bool_ev_size_t = EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t_Function;
						GC.KeepAlive(m_setScissorTest_CallBack_void_ev_bool_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_ev_size_t(this.NativeObject, m_setScissorTest_CallBack_void_ev_bool_ev_size_t);
						m_setScissorTest_CallBack_void_ev_bool = EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool_Function;
						GC.KeepAlive(m_setScissorTest_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setScissorTest_void_ev_bool(this.NativeObject, m_setScissorTest_CallBack_void_ev_bool);
						m_clearFrameBuffer_CallBack_void_ev_uint32_CColourValue_Real_ev_uint16 = EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Real_ev_uint16_Function;
						GC.KeepAlive(m_clearFrameBuffer_CallBack_void_ev_uint32_CColourValue_Real_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Real_ev_uint16(this.NativeObject, m_clearFrameBuffer_CallBack_void_ev_uint32_CColourValue_Real_ev_uint16);
						m_clearFrameBuffer_CallBack_void_ev_uint32_CColourValue_Real = EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Real_Function;
						GC.KeepAlive(m_clearFrameBuffer_CallBack_void_ev_uint32_CColourValue_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Real(this.NativeObject, m_clearFrameBuffer_CallBack_void_ev_uint32_CColourValue_Real);
						m_clearFrameBuffer_CallBack_void_ev_uint32_CColourValue = EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue_Function;
						GC.KeepAlive(m_clearFrameBuffer_CallBack_void_ev_uint32_CColourValue);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_CColourValue(this.NativeObject, m_clearFrameBuffer_CallBack_void_ev_uint32_CColourValue);
						m_clearFrameBuffer_CallBack_void_ev_uint32 = EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32_Function;
						GC.KeepAlive(m_clearFrameBuffer_CallBack_void_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_clearFrameBuffer_void_ev_uint32(this.NativeObject, m_clearFrameBuffer_CallBack_void_ev_uint32);
						m_getHorizontalTexelOffset_CallBack_Real = EarthView_World_Graphic_CRenderSystem_getHorizontalTexelOffset_Real_Function;
						GC.KeepAlive(m_getHorizontalTexelOffset_CallBack_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getHorizontalTexelOffset_Real(this.NativeObject, m_getHorizontalTexelOffset_CallBack_Real);
						m_getVerticalTexelOffset_CallBack_Real = EarthView_World_Graphic_CRenderSystem_getVerticalTexelOffset_Real_Function;
						GC.KeepAlive(m_getVerticalTexelOffset_CallBack_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getVerticalTexelOffset_Real(this.NativeObject, m_getVerticalTexelOffset_CallBack_Real);
						m_getMinimumDepthInputValue_CallBack_Real = EarthView_World_Graphic_CRenderSystem_getMinimumDepthInputValue_Real_Function;
						GC.KeepAlive(m_getMinimumDepthInputValue_CallBack_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getMinimumDepthInputValue_Real(this.NativeObject, m_getMinimumDepthInputValue_CallBack_Real);
						m_getMaximumDepthInputValue_CallBack_Real = EarthView_World_Graphic_CRenderSystem_getMaximumDepthInputValue_Real_Function;
						GC.KeepAlive(m_getMaximumDepthInputValue_CallBack_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getMaximumDepthInputValue_Real(this.NativeObject, m_getMaximumDepthInputValue_CallBack_Real);
						m_setCurrentPassIterationCount_CallBack_void_ev_size_t = EarthView_World_Graphic_CRenderSystem_setCurrentPassIterationCount_void_ev_size_t_Function;
						GC.KeepAlive(m_setCurrentPassIterationCount_CallBack_void_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setCurrentPassIterationCount_void_ev_size_t(this.NativeObject, m_setCurrentPassIterationCount_CallBack_void_ev_size_t);
						m_setDeriveDepthBias_CallBack_void_ev_bool_ev_real32_ev_real32_ev_real32 = EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_ev_real32_ev_real32_Function;
						GC.KeepAlive(m_setDeriveDepthBias_CallBack_void_ev_bool_ev_real32_ev_real32_ev_real32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_ev_real32_ev_real32(this.NativeObject, m_setDeriveDepthBias_CallBack_void_ev_bool_ev_real32_ev_real32_ev_real32);
						m_setDeriveDepthBias_CallBack_void_ev_bool_ev_real32_ev_real32 = EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_ev_real32_Function;
						GC.KeepAlive(m_setDeriveDepthBias_CallBack_void_ev_bool_ev_real32_ev_real32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_ev_real32(this.NativeObject, m_setDeriveDepthBias_CallBack_void_ev_bool_ev_real32_ev_real32);
						m_setDeriveDepthBias_CallBack_void_ev_bool_ev_real32 = EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32_Function;
						GC.KeepAlive(m_setDeriveDepthBias_CallBack_void_ev_bool_ev_real32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_ev_real32(this.NativeObject, m_setDeriveDepthBias_CallBack_void_ev_bool_ev_real32);
						m_setDeriveDepthBias_CallBack_void_ev_bool = EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool_Function;
						GC.KeepAlive(m_setDeriveDepthBias_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setDeriveDepthBias_void_ev_bool(this.NativeObject, m_setDeriveDepthBias_CallBack_void_ev_bool);
						m__setRenderTarget_CallBack_void_CRenderTarget = EarthView_World_Graphic_CRenderSystem__setRenderTarget_void_CRenderTarget_Function;
						GC.KeepAlive(m__setRenderTarget_CallBack_void_CRenderTarget);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem__setRenderTarget_void_CRenderTarget(this.NativeObject, m__setRenderTarget_CallBack_void_CRenderTarget);
						m_addListener_CallBack_void_CRenderSystemListener = EarthView_World_Graphic_CRenderSystem_addListener_void_CRenderSystemListener_Function;
						GC.KeepAlive(m_addListener_CallBack_void_CRenderSystemListener);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_addListener_void_CRenderSystemListener(this.NativeObject, m_addListener_CallBack_void_CRenderSystemListener);
						m_removeListener_CallBack_void_CRenderSystemListener = EarthView_World_Graphic_CRenderSystem_removeListener_void_CRenderSystemListener_Function;
						GC.KeepAlive(m_removeListener_CallBack_void_CRenderSystemListener);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_removeListener_void_CRenderSystemListener(this.NativeObject, m_removeListener_CallBack_void_CRenderSystemListener);
						m_getRenderSystemEvents_CallBack_StringVector = EarthView_World_Graphic_CRenderSystem_getRenderSystemEvents_StringVector_Function;
						GC.KeepAlive(m_getRenderSystemEvents_CallBack_StringVector);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getRenderSystemEvents_StringVector(this.NativeObject, m_getRenderSystemEvents_CallBack_StringVector);
						m_preExtraThreadsStarted_CallBack_void = EarthView_World_Graphic_CRenderSystem_preExtraThreadsStarted_void_Function;
						GC.KeepAlive(m_preExtraThreadsStarted_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_preExtraThreadsStarted_void(this.NativeObject, m_preExtraThreadsStarted_CallBack_void);
						m_postExtraThreadsStarted_CallBack_void = EarthView_World_Graphic_CRenderSystem_postExtraThreadsStarted_void_Function;
						GC.KeepAlive(m_postExtraThreadsStarted_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_postExtraThreadsStarted_void(this.NativeObject, m_postExtraThreadsStarted_CallBack_void);
						m_registerThread_CallBack_void = EarthView_World_Graphic_CRenderSystem_registerThread_void_Function;
						GC.KeepAlive(m_registerThread_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_registerThread_void(this.NativeObject, m_registerThread_CallBack_void);
						m_flushRenderSystem_CallBack_void = EarthView_World_Graphic_CRenderSystem_flushRenderSystem_void_Function;
						GC.KeepAlive(m_flushRenderSystem_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_flushRenderSystem_void(this.NativeObject, m_flushRenderSystem_CallBack_void);
						m_unregisterThread_CallBack_void = EarthView_World_Graphic_CRenderSystem_unregisterThread_void_Function;
						GC.KeepAlive(m_unregisterThread_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_unregisterThread_void(this.NativeObject, m_unregisterThread_CallBack_void);
						m_getDisplayMonitorCount_CallBack_ev_uint32 = EarthView_World_Graphic_CRenderSystem_getDisplayMonitorCount_ev_uint32_Function;
						GC.KeepAlive(m_getDisplayMonitorCount_CallBack_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_getDisplayMonitorCount_ev_uint32(this.NativeObject, m_getDisplayMonitorCount_CallBack_ev_uint32);
						m_fireEvent_CallBack_void_EVString_CommonStringPairList = EarthView_World_Graphic_CRenderSystem_fireEvent_void_EVString_CommonStringPairList_Function;
						GC.KeepAlive(m_fireEvent_CallBack_void_EVString_CommonStringPairList);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_fireEvent_void_EVString_CommonStringPairList(this.NativeObject, m_fireEvent_CallBack_void_EVString_CommonStringPairList);
						m_fireEvent_CallBack_void_EVString = EarthView_World_Graphic_CRenderSystem_fireEvent_void_EVString_Function;
						GC.KeepAlive(m_fireEvent_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_fireEvent_void_EVString(this.NativeObject, m_fireEvent_CallBack_void_EVString);
						m_setClipPlanesImpl_CallBack_void_PlaneList = EarthView_World_Graphic_CRenderSystem_setClipPlanesImpl_void_PlaneList_Function;
						GC.KeepAlive(m_setClipPlanesImpl_CallBack_void_PlaneList);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_setClipPlanesImpl_void_PlaneList(this.NativeObject, m_setClipPlanesImpl_CallBack_void_PlaneList);
						m_initialiseFromRenderSystemCapabilities_CallBack_void_CRenderSystemCapabilities_CRenderTarget = EarthView_World_Graphic_CRenderSystem_initialiseFromRenderSystemCapabilities_void_CRenderSystemCapabilities_CRenderTarget_Function;
						GC.KeepAlive(m_initialiseFromRenderSystemCapabilities_CallBack_void_CRenderSystemCapabilities_CRenderTarget);
						EV_RegisterCallback_EarthView_World_Graphic_CRenderSystem_initialiseFromRenderSystemCapabilities_void_CRenderSystemCapabilities_CRenderTarget(this.NativeObject, m_initialiseFromRenderSystemCapabilities_CallBack_void_CRenderSystemCapabilities_CRenderTarget);
					}
				}
				public static RenderSystem FromBaseObject(BaseObject baseObj)
				{
					if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
						return null;
					RenderSystem obj = baseObj as  RenderSystem;
					if (object.Equals(obj, null))
					{
						obj = new RenderSystem(CreatedWhenConstruct.CWC_NotToCreate);
						obj.BindNativeObject(baseObj.NativeObject, "CRenderSystem");
						obj.IncreaseCast();
					}

					return obj;
				}
			}

			public class RenderSystemClassFactory : IClassFactory
			{
				public BaseObject Create()
				{
					RenderSystem emptyInstance = new RenderSystem(CreatedWhenConstruct.CWC_NotToCreate);
					return emptyInstance;
				}
			}

		}
	}
}
