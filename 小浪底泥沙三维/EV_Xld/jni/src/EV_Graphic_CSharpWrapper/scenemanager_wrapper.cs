/********* This file is produced by the P/Invoke AutoWrapper Utility 
 Copyright (c) 2012 by EarthView Image Inc *********/
using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;
using EarthView.World.Core;

namespace EarthView
{
	namespace World
	{
		namespace Spatial
		{
			namespace Math
			{
			}
		}
	}
}
namespace EarthView
{
	namespace World
	{
		namespace Graphic
		{
			/// <summary>
			/// 观察点类
			/// 原为struct类型，定义场景中观察点的类型
			/// </summary>
			public class ViewPoint : EarthView.World.Core.BaseObject
			{
				/// <summary>
				/// 默认构造函数
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public ViewPoint() : base(CreatedWhenConstruct.CWC_NotToCreate)
				{
					Create("ViewPoint",  null);
					RegisterCallBack();
					this.needDispose = true;
					GlobalTraceInfoMap.Put(this);
				}
				private EarthView.World.Spatial.Math.Vector3 positionField;
				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr Get_EarthView_World_Graphic_ViewPoint_position(IntPtr pObject);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_ViewPoint_position( IntPtr pObject, IntPtr value );

				public 				EarthView.World.Spatial.Math.Vector3 Position
				{
					get
					{
						IntPtr __ptr = Get_EarthView_World_Graphic_ViewPoint_position(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						if(!object.Equals(positionField, null)){
							positionField.NativeObject = __ptr;
							return positionField;
						}
						EarthView.World.Spatial.Math.Vector3 csObj = new EarthView.World.Spatial.Math.Vector3(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CVector3");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.Vector3;
							csObj.BindNativeObject(__ptr, "CVector3");
							csObj.Delegate = true;
						}
						return csObj;
						
					}

					set
					{
						positionField = value;
						Set_EarthView_World_Graphic_ViewPoint_position( this.NativeObject,object.Equals(value, null) ? IntPtr.Zero : value.NativeObject );
					}
				}

				private EarthView.World.Spatial.Math.Quaternion orientationField;
				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr Get_EarthView_World_Graphic_ViewPoint_orientation(IntPtr pObject);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_ViewPoint_orientation( IntPtr pObject, IntPtr value );

				public 				EarthView.World.Spatial.Math.Quaternion Orientation
				{
					get
					{
						IntPtr __ptr = Get_EarthView_World_Graphic_ViewPoint_orientation(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						if(!object.Equals(orientationField, null)){
							orientationField.NativeObject = __ptr;
							return orientationField;
						}
						EarthView.World.Spatial.Math.Quaternion csObj = new EarthView.World.Spatial.Math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CQuaternion");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.Quaternion;
							csObj.BindNativeObject(__ptr, "CQuaternion");
							csObj.Delegate = true;
						}
						return csObj;
						
					}

					set
					{
						orientationField = value;
						Set_EarthView_World_Graphic_ViewPoint_orientation( this.NativeObject,object.Equals(value, null) ? IntPtr.Zero : value.NativeObject );
					}
				}

				#if DEBUG 
					#if Windows 
						private static bool bLoadViewPoint = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadViewPoint = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#elif Linux 
						private static bool bLoadViewPoint = LoadDll.Load("EV_Graphic_d.so");
						private static bool csbLoadViewPoint = LoadDll.Load("EV_Graphic_CSharp_d.so");

					#else 
						private static bool bLoadViewPoint = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadViewPoint = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#endif 
				#else 
					#if Windows 
						private static bool bLoadViewPoint = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadViewPoint = LoadDll.Load("EV_Graphic_CSharp.dll");

					#elif Linux 
						private static bool bLoadViewPoint = LoadDll.Load("EV_Graphic.so");
						private static bool csbLoadViewPoint = LoadDll.Load("EV_Graphic_CSharp.so");

					#else 
						private static bool bLoadViewPoint = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadViewPoint = LoadDll.Load("EV_Graphic_CSharp.dll");

					#endif 
				#endif 

				private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::ViewPoint", new ViewPointClassFactory());

				public ViewPoint(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
				{
				}

				public override void RegisterCallBack()
				{
					if (this.NativeObject != IntPtr.Zero)
					{
					}
				}
				public static ViewPoint FromBaseObject(BaseObject baseObj)
				{
					if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
						return null;
					ViewPoint obj = baseObj as  ViewPoint;
					if (object.Equals(obj, null))
					{
						obj = new ViewPoint(CreatedWhenConstruct.CWC_NotToCreate);
						obj.BindNativeObject(baseObj.NativeObject, "ViewPoint");
						obj.IncreaseCast();
					}

					return obj;
				}
			}

			public class ViewPointClassFactory : IClassFactory
			{
				public BaseObject Create()
				{
					ViewPoint emptyInstance = new ViewPoint(CreatedWhenConstruct.CWC_NotToCreate);
					return emptyInstance;
				}
			}

			/// <summary>
			/// 可见对象信息类
			/// 原为struct类型，管理场景中被发现的可见对象
			/// </summary>
			public class VisibleObjectsBoundsInfo : EarthView.World.Core.BaseObject
			{
				private EarthView.World.Spatial.Math.AxisAlignedBox aabbField;
				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr Get_EarthView_World_Graphic_VisibleObjectsBoundsInfo_aabb(IntPtr pObject);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_VisibleObjectsBoundsInfo_aabb( IntPtr pObject, IntPtr value );

				public 				EarthView.World.Spatial.Math.AxisAlignedBox Aabb
				{
					get
					{
						IntPtr __ptr = Get_EarthView_World_Graphic_VisibleObjectsBoundsInfo_aabb(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						if(!object.Equals(aabbField, null)){
							aabbField.NativeObject = __ptr;
							return aabbField;
						}
						EarthView.World.Spatial.Math.AxisAlignedBox csObj = new EarthView.World.Spatial.Math.AxisAlignedBox(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CAxisAlignedBox");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.AxisAlignedBox;
							csObj.BindNativeObject(__ptr, "CAxisAlignedBox");
							csObj.Delegate = true;
						}
						return csObj;
						
					}

					set
					{
						aabbField = value;
						Set_EarthView_World_Graphic_VisibleObjectsBoundsInfo_aabb( this.NativeObject,object.Equals(value, null) ? IntPtr.Zero : value.NativeObject );
					}
				}

				private EarthView.World.Spatial.Math.AxisAlignedBox receiverAabbField;
				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr Get_EarthView_World_Graphic_VisibleObjectsBoundsInfo_receiverAabb(IntPtr pObject);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_VisibleObjectsBoundsInfo_receiverAabb( IntPtr pObject, IntPtr value );

				public 				EarthView.World.Spatial.Math.AxisAlignedBox ReceiverAabb
				{
					get
					{
						IntPtr __ptr = Get_EarthView_World_Graphic_VisibleObjectsBoundsInfo_receiverAabb(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						if(!object.Equals(receiverAabbField, null)){
							receiverAabbField.NativeObject = __ptr;
							return receiverAabbField;
						}
						EarthView.World.Spatial.Math.AxisAlignedBox csObj = new EarthView.World.Spatial.Math.AxisAlignedBox(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CAxisAlignedBox");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.AxisAlignedBox;
							csObj.BindNativeObject(__ptr, "CAxisAlignedBox");
							csObj.Delegate = true;
						}
						return csObj;
						
					}

					set
					{
						receiverAabbField = value;
						Set_EarthView_World_Graphic_VisibleObjectsBoundsInfo_receiverAabb( this.NativeObject,object.Equals(value, null) ? IntPtr.Zero : value.NativeObject );
					}
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double Get_EarthView_World_Graphic_VisibleObjectsBoundsInfo_minDistance(IntPtr pObject);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_VisibleObjectsBoundsInfo_minDistance( IntPtr pObject, double value );

				public 				double MinDistance
				{
					get
					{
						double ret=Get_EarthView_World_Graphic_VisibleObjectsBoundsInfo_minDistance(this.NativeObject);
						
						return ret;
						
					}

					set
					{
						Set_EarthView_World_Graphic_VisibleObjectsBoundsInfo_minDistance(this.NativeObject,value);
					}
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double Get_EarthView_World_Graphic_VisibleObjectsBoundsInfo_maxDistance(IntPtr pObject);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_VisibleObjectsBoundsInfo_maxDistance( IntPtr pObject, double value );

				public 				double MaxDistance
				{
					get
					{
						double ret=Get_EarthView_World_Graphic_VisibleObjectsBoundsInfo_maxDistance(this.NativeObject);
						
						return ret;
						
					}

					set
					{
						Set_EarthView_World_Graphic_VisibleObjectsBoundsInfo_maxDistance(this.NativeObject,value);
					}
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double Get_EarthView_World_Graphic_VisibleObjectsBoundsInfo_minDistanceInFrustum(IntPtr pObject);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_VisibleObjectsBoundsInfo_minDistanceInFrustum( IntPtr pObject, double value );

				public 				double MinDistanceInFrustum
				{
					get
					{
						double ret=Get_EarthView_World_Graphic_VisibleObjectsBoundsInfo_minDistanceInFrustum(this.NativeObject);
						
						return ret;
						
					}

					set
					{
						Set_EarthView_World_Graphic_VisibleObjectsBoundsInfo_minDistanceInFrustum(this.NativeObject,value);
					}
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double Get_EarthView_World_Graphic_VisibleObjectsBoundsInfo_maxDistanceInFrustum(IntPtr pObject);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_VisibleObjectsBoundsInfo_maxDistanceInFrustum( IntPtr pObject, double value );

				public 				double MaxDistanceInFrustum
				{
					get
					{
						double ret=Get_EarthView_World_Graphic_VisibleObjectsBoundsInfo_maxDistanceInFrustum(this.NativeObject);
						
						return ret;
						
					}

					set
					{
						Set_EarthView_World_Graphic_VisibleObjectsBoundsInfo_maxDistanceInFrustum(this.NativeObject,value);
					}
				}

				public VisibleObjectsBoundsInfo() : base(CreatedWhenConstruct.CWC_NotToCreate)
				{
					Create("VisibleObjectsBoundsInfo",  null);
					RegisterCallBack();
					this.needDispose = true;
					GlobalTraceInfoMap.Put(this);
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_VisibleObjectsBoundsInfo_reset_void(IntPtr pNativeObject);

				public void Reset()
				{
					EarthView_World_Graphic_VisibleObjectsBoundsInfo_reset_void(this.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_VisibleObjectsBoundsInfo_merge_void_CAxisAlignedBox_CSphere_CCamera_ev_bool(IntPtr pNativeObject, IntPtr boxBounds, IntPtr sphereBounds, IntPtr cam, byte receiver);

				public void Merge(EarthView.World.Spatial.Math.AxisAlignedBox boxBounds, EarthView.World.Spatial.Math.Sphere sphereBounds, EarthView.World.Graphic.Camera cam, bool receiver)
				{
					EarthView_World_Graphic_VisibleObjectsBoundsInfo_merge_void_CAxisAlignedBox_CSphere_CCamera_ev_bool(this.NativeObject, object.Equals(boxBounds, null) ? IntPtr.Zero : boxBounds.NativeObject, object.Equals(sphereBounds, null) ? IntPtr.Zero : sphereBounds.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject, Convert.ToByte(receiver));
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_VisibleObjectsBoundsInfo_merge_void_CAxisAlignedBox_CSphere_CCamera(IntPtr pNativeObject, IntPtr boxBounds, IntPtr sphereBounds, IntPtr cam);

				public void Merge(EarthView.World.Spatial.Math.AxisAlignedBox boxBounds, EarthView.World.Spatial.Math.Sphere sphereBounds, EarthView.World.Graphic.Camera cam)
				{
					EarthView_World_Graphic_VisibleObjectsBoundsInfo_merge_void_CAxisAlignedBox_CSphere_CCamera(this.NativeObject, object.Equals(boxBounds, null) ? IntPtr.Zero : boxBounds.NativeObject, object.Equals(sphereBounds, null) ? IntPtr.Zero : sphereBounds.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_VisibleObjectsBoundsInfo_mergeNonRenderedButInFrustum_void_CAxisAlignedBox_CSphere_CCamera(IntPtr pNativeObject, IntPtr boxBounds, IntPtr sphereBounds, IntPtr cam);

				public void MergeNonRenderedButInFrustum(EarthView.World.Spatial.Math.AxisAlignedBox boxBounds, EarthView.World.Spatial.Math.Sphere sphereBounds, EarthView.World.Graphic.Camera cam)
				{
					EarthView_World_Graphic_VisibleObjectsBoundsInfo_mergeNonRenderedButInFrustum_void_CAxisAlignedBox_CSphere_CCamera(this.NativeObject, object.Equals(boxBounds, null) ? IntPtr.Zero : boxBounds.NativeObject, object.Equals(sphereBounds, null) ? IntPtr.Zero : sphereBounds.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject);
					
				}

				#if DEBUG 
					#if Windows 
						private static bool bLoadVisibleObjectsBoundsInfo = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadVisibleObjectsBoundsInfo = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#elif Linux 
						private static bool bLoadVisibleObjectsBoundsInfo = LoadDll.Load("EV_Graphic_d.so");
						private static bool csbLoadVisibleObjectsBoundsInfo = LoadDll.Load("EV_Graphic_CSharp_d.so");

					#else 
						private static bool bLoadVisibleObjectsBoundsInfo = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadVisibleObjectsBoundsInfo = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#endif 
				#else 
					#if Windows 
						private static bool bLoadVisibleObjectsBoundsInfo = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadVisibleObjectsBoundsInfo = LoadDll.Load("EV_Graphic_CSharp.dll");

					#elif Linux 
						private static bool bLoadVisibleObjectsBoundsInfo = LoadDll.Load("EV_Graphic.so");
						private static bool csbLoadVisibleObjectsBoundsInfo = LoadDll.Load("EV_Graphic_CSharp.so");

					#else 
						private static bool bLoadVisibleObjectsBoundsInfo = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadVisibleObjectsBoundsInfo = LoadDll.Load("EV_Graphic_CSharp.dll");

					#endif 
				#endif 

				private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::VisibleObjectsBoundsInfo", new VisibleObjectsBoundsInfoClassFactory());

				public VisibleObjectsBoundsInfo(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
				{
				}

				public override void RegisterCallBack()
				{
					if (this.NativeObject != IntPtr.Zero)
					{
					}
				}
				public static VisibleObjectsBoundsInfo FromBaseObject(BaseObject baseObj)
				{
					if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
						return null;
					VisibleObjectsBoundsInfo obj = baseObj as  VisibleObjectsBoundsInfo;
					if (object.Equals(obj, null))
					{
						obj = new VisibleObjectsBoundsInfo(CreatedWhenConstruct.CWC_NotToCreate);
						obj.BindNativeObject(baseObj.NativeObject, "VisibleObjectsBoundsInfo");
						obj.IncreaseCast();
					}

					return obj;
				}
			}

			public class VisibleObjectsBoundsInfoClassFactory : IClassFactory
			{
				public BaseObject Create()
				{
					VisibleObjectsBoundsInfo emptyInstance = new VisibleObjectsBoundsInfo(CreatedWhenConstruct.CWC_NotToCreate);
					return emptyInstance;
				}
			}

			/// <summary>
			/// 场景管理类
			/// 此类是场景管理核心类，提供各种方法为摄像机，光源等进行管理和维护。
			/// 还直接保存场景节点树的跟节点指针以提供该树的访问入口。
			/// </summary>
			public class SceneManager : EarthView.World.Core.AllocatedObject
			{
				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint Get_EarthView_World_Graphic_CSceneManager_WORLD_GEOMETRY_TYPE_MASK( );

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_CSceneManager_WORLD_GEOMETRY_TYPE_MASK( uint value );

				public 				static uint WORLD_GEOMETRY_TYPE_MASK
				{
					get
					{
						uint ret=Get_EarthView_World_Graphic_CSceneManager_WORLD_GEOMETRY_TYPE_MASK();
						
						return ret;
						
					}

					set
					{
						Set_EarthView_World_Graphic_CSceneManager_WORLD_GEOMETRY_TYPE_MASK( value );
					}
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint Get_EarthView_World_Graphic_CSceneManager_ENTITY_TYPE_MASK( );

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_CSceneManager_ENTITY_TYPE_MASK( uint value );

				public 				static uint ENTITY_TYPE_MASK
				{
					get
					{
						uint ret=Get_EarthView_World_Graphic_CSceneManager_ENTITY_TYPE_MASK();
						
						return ret;
						
					}

					set
					{
						Set_EarthView_World_Graphic_CSceneManager_ENTITY_TYPE_MASK( value );
					}
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint Get_EarthView_World_Graphic_CSceneManager_FX_TYPE_MASK( );

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_CSceneManager_FX_TYPE_MASK( uint value );

				public 				static uint FX_TYPE_MASK
				{
					get
					{
						uint ret=Get_EarthView_World_Graphic_CSceneManager_FX_TYPE_MASK();
						
						return ret;
						
					}

					set
					{
						Set_EarthView_World_Graphic_CSceneManager_FX_TYPE_MASK( value );
					}
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint Get_EarthView_World_Graphic_CSceneManager_STATICGEOMETRY_TYPE_MASK( );

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_CSceneManager_STATICGEOMETRY_TYPE_MASK( uint value );

				public 				static uint STATICGEOMETRY_TYPE_MASK
				{
					get
					{
						uint ret=Get_EarthView_World_Graphic_CSceneManager_STATICGEOMETRY_TYPE_MASK();
						
						return ret;
						
					}

					set
					{
						Set_EarthView_World_Graphic_CSceneManager_STATICGEOMETRY_TYPE_MASK( value );
					}
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint Get_EarthView_World_Graphic_CSceneManager_LIGHT_TYPE_MASK( );

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_CSceneManager_LIGHT_TYPE_MASK( uint value );

				public 				static uint LIGHT_TYPE_MASK
				{
					get
					{
						uint ret=Get_EarthView_World_Graphic_CSceneManager_LIGHT_TYPE_MASK();
						
						return ret;
						
					}

					set
					{
						Set_EarthView_World_Graphic_CSceneManager_LIGHT_TYPE_MASK( value );
					}
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint Get_EarthView_World_Graphic_CSceneManager_FRUSTUM_TYPE_MASK( );

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_CSceneManager_FRUSTUM_TYPE_MASK( uint value );

				public 				static uint FRUSTUM_TYPE_MASK
				{
					get
					{
						uint ret=Get_EarthView_World_Graphic_CSceneManager_FRUSTUM_TYPE_MASK();
						
						return ret;
						
					}

					set
					{
						Set_EarthView_World_Graphic_CSceneManager_FRUSTUM_TYPE_MASK( value );
					}
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint Get_EarthView_World_Graphic_CSceneManager_USER_TYPE_MASK_LIMIT( );

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_CSceneManager_USER_TYPE_MASK_LIMIT( uint value );

				public 				static uint USER_TYPE_MASK_LIMIT
				{
					get
					{
						uint ret=Get_EarthView_World_Graphic_CSceneManager_USER_TYPE_MASK_LIMIT();
						
						return ret;
						
					}

					set
					{
						Set_EarthView_World_Graphic_CSceneManager_USER_TYPE_MASK_LIMIT( value );
					}
				}

				private static string GlobeCameraNameField;
				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr Get_EarthView_World_Graphic_CSceneManager_GlobeCameraName( );

				public 				static string GlobeCameraName
				{
					get
					{
						IntPtr __ptr = Get_EarthView_World_Graphic_CSceneManager_GlobeCameraName();
						
						string ret = Marshal.PtrToStringAnsi(__ptr);
						ClassFactory.FreeString(ref __ptr);
						return ret;
						
					}

				}

				/// <summary>
				/// 渲染阶段
				/// </summary>
				public enum ILLUMINATIONRENDERSTAGE
				{
								IRS_NONE,
								IRS_RENDER_TO_TEXTURE,
								IRS_RENDER_RECEIVER_PASS
				
				}

				/// <summary>
				/// 特殊实例渲染队列
				/// </summary>
				public enum SPECIALCASERENDERQUEUEMODE
				{
								SCRQM_INCLUDE,
								SCRQM_EXCLUDE
				
				}

				public enum BOXPLANE
				{
								BP_FRONT = 0,
								BP_BACK = 1,
								BP_LEFT = 2,
								BP_RIGHT = 3,
								BP_UP = 4,
								BP_DOWN = 5
				
				}

				/// <summary>
				/// 天空穹顶参数
				/// 原为struct类型
				/// </summary>
				[StructLayout( LayoutKind.Sequential )]
				public struct SKYDOMEGENPARAMETERS
				{
					public double skyDomeCurvature;
					public double skyDomeTiling;
					public double skyDomeDistance;
					public int skyDomeXSegments;
					public int skyDomeYSegments;
					public int skyDomeYSegments_keep;
				}

				/// <summary>
				/// 天空面参数
				/// 原为struct类型
				/// </summary>
				[StructLayout( LayoutKind.Sequential )]
				public struct SKYPLANEGENPARAMETERS
				{
					public double skyPlaneScale;
					public double skyPlaneTiling;
					public double skyPlaneBow;
					public int skyPlaneXSegments;
					public int skyPlaneYSegments;
				}

				/// <summary>
				/// 天空盒参数
				/// 原为struct类型
				/// </summary>
				[StructLayout( LayoutKind.Sequential )]
				public struct SKYBOXGENPARAMETERS
				{
					public double skyBoxDistance;
				}

				public class ShadowMapGround : BaseObject
				{
					public ShadowMapGround(EarthView.World.Graphic.SceneManager manager, float width) : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						NameValuePairList list = new NameValuePairList();
						BasePtr valuemanager = new BasePtr(manager);
						list.Add("manager", valuemanager.PtrVal);
						BasePtr valuewidth = new BasePtr(width);
						list.Add("width", valuewidth.PtrVal);
						Create("ShadowMapGround", list);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_ShadowMapGround_render_void_CCamera(IntPtr pNativeObject, IntPtr cam);

					public void Render(EarthView.World.Graphic.Camera cam)
					{
						EarthView_World_Graphic_CSceneManager_ShadowMapGround_render_void_CCamera(this.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_ShadowMapGround_disableRender_void(IntPtr pNativeObject);

					public void DisableRender()
					{
						EarthView_World_Graphic_CSceneManager_ShadowMapGround_disableRender_void(this.NativeObject);
						
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadShadowMapGround = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadShadowMapGround = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadShadowMapGround = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadShadowMapGround = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadShadowMapGround = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadShadowMapGround = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadShadowMapGround = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadShadowMapGround = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadShadowMapGround = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadShadowMapGround = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadShadowMapGround = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadShadowMapGround = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::ShadowMapGround", new ShadowMapGroundClassFactory());

					public ShadowMapGround(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
						}
					}
					public static ShadowMapGround FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						ShadowMapGround obj = baseObj as  ShadowMapGround;
						if (object.Equals(obj, null))
						{
							obj = new ShadowMapGround(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "ShadowMapGround");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class ShadowMapGroundClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						ShadowMapGround emptyInstance = new ShadowMapGround(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				public class ShadowFullScreenQuad : BaseObject
				{
					public ShadowFullScreenQuad(EarthView.World.Graphic.SceneManager manager, float width, EarthView.World.Graphic.TexturePtr tex, EarthView.World.Graphic.TexturePtr texVB) : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						NameValuePairList list = new NameValuePairList();
						BasePtr valuemanager = new BasePtr(manager);
						list.Add("manager", valuemanager.PtrVal);
						BasePtr valuewidth = new BasePtr(width);
						list.Add("width", valuewidth.PtrVal);
						BasePtr valuetex = new BasePtr(tex);
						list.Add("tex", valuetex.PtrVal);
						BasePtr valuetexVB = new BasePtr(texVB);
						list.Add("texVB", valuetexVB.PtrVal);
						Create("ShadowFullScreenQuad", list);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_ShadowFullScreenQuad_render_void(IntPtr pNativeObject);

					public void Render()
					{
						EarthView_World_Graphic_CSceneManager_ShadowFullScreenQuad_render_void(this.NativeObject);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_ShadowFullScreenQuad_disableRender_void(IntPtr pNativeObject);

					public void DisableRender()
					{
						EarthView_World_Graphic_CSceneManager_ShadowFullScreenQuad_disableRender_void(this.NativeObject);
						
					}

					private EarthView.World.Graphic.SimpleRenderable mFullScreenQuadRenderableField;
					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr Get_EarthView_World_Graphic_CSceneManager_ShadowFullScreenQuad_mFullScreenQuadRenderable(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_ShadowFullScreenQuad_mFullScreenQuadRenderable( IntPtr pObject, IntPtr value );

					public 					EarthView.World.Graphic.SimpleRenderable MFullScreenQuadRenderable
					{
						get
						{
							IntPtr __ptr = Get_EarthView_World_Graphic_CSceneManager_ShadowFullScreenQuad_mFullScreenQuadRenderable(this.NativeObject);
							
							if(__ptr==IntPtr.Zero)
							{
							return null;
							}
							if(!object.Equals(mFullScreenQuadRenderableField, null)){
								mFullScreenQuadRenderableField.NativeObject = __ptr;
								return mFullScreenQuadRenderableField;
							}
							EarthView.World.Graphic.SimpleRenderable csObj = new EarthView.World.Graphic.SimpleRenderable(CreatedWhenConstruct.CWC_NotToCreate);
							csObj.BindNativeObject(__ptr, "CSimpleRenderable");
							csObj.Delegate = true;
							IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
							if (csObjClassFactory != null)
							{
								csObj.Delegate = true;
								csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SimpleRenderable;
								csObj.BindNativeObject(__ptr, "CSimpleRenderable");
								csObj.Delegate = true;
							}
							return csObj;
							
						}

						set
						{
							mFullScreenQuadRenderableField = value;
							Set_EarthView_World_Graphic_CSceneManager_ShadowFullScreenQuad_mFullScreenQuadRenderable( this.NativeObject,object.Equals(value, null) ? IntPtr.Zero : value.NativeObject );
						}
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_ShadowFullScreenQuad_GetMaterialVB_CMaterialPtr(IntPtr pNativeObject);

					public EarthView.World.Graphic.MaterialPtr GetMaterialVB()
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_ShadowFullScreenQuad_GetMaterialVB_CMaterialPtr(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.MaterialPtr csObj = new EarthView.World.Graphic.MaterialPtr(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CMaterialPtr");
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MaterialPtr;
							csObj.BindNativeObject(__ptr, "CMaterialPtr");
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_ShadowFullScreenQuad_GetMaterialHB_CMaterialPtr(IntPtr pNativeObject);

					public EarthView.World.Graphic.MaterialPtr GetMaterialHB()
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_ShadowFullScreenQuad_GetMaterialHB_CMaterialPtr(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.MaterialPtr csObj = new EarthView.World.Graphic.MaterialPtr(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CMaterialPtr");
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MaterialPtr;
							csObj.BindNativeObject(__ptr, "CMaterialPtr");
						}
						return csObj;
						
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadShadowFullScreenQuad = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadShadowFullScreenQuad = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadShadowFullScreenQuad = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadShadowFullScreenQuad = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadShadowFullScreenQuad = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadShadowFullScreenQuad = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadShadowFullScreenQuad = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadShadowFullScreenQuad = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadShadowFullScreenQuad = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadShadowFullScreenQuad = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadShadowFullScreenQuad = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadShadowFullScreenQuad = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::ShadowFullScreenQuad", new ShadowFullScreenQuadClassFactory());

					public ShadowFullScreenQuad(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
						}
					}
					public static ShadowFullScreenQuad FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						ShadowFullScreenQuad obj = baseObj as  ShadowFullScreenQuad;
						if (object.Equals(obj, null))
						{
							obj = new ShadowFullScreenQuad(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "ShadowFullScreenQuad");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class ShadowFullScreenQuadClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						ShadowFullScreenQuad emptyInstance = new ShadowFullScreenQuad(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				/// <summary>
				/// 场景管理监听类
				/// 自定义操作可以在外部实施
				/// </summary>
				public class SceneManagerListener : EarthView.World.Core.AllocatedObject
				{
					/// <summary>
					/// 默认构造函数
					/// </summary>
					/// <param name=""></param>
					/// <returns></returns>
					public SceneManagerListener() : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						Create("CSceneManagerListenerProxy", null);
						if (!"EarthView.World.Graphic.SceneManager+SceneManagerListener".Equals(((Object)this).GetType().ToString()))
						{
							this.SetCustomExtend(true);
						}
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}
					[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
					protected delegate void preUpdateSceneGraph_CallBack_void_CSceneManager_CCamera(IntPtr source, IntPtr camera);

					protected preUpdateSceneGraph_CallBack_void_CSceneManager_CCamera m_preUpdateSceneGraph_CallBack_void_CSceneManager_CCamera;

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_preUpdateSceneGraph_void_CSceneManager_CCamera_NoVirtual(IntPtr pNativeObject, IntPtr source, IntPtr camera);

					/// <summary>
					/// 在每帧更新场景图前触发			
					/// </summary>				
					/// <returns></returns>
					public virtual void PreUpdateSceneGraph_NoVirtual(EarthView.World.Graphic.SceneManager source, EarthView.World.Graphic.Camera camera)
					{
						EarthView_World_Graphic_CSceneManager_CSceneManagerListener_preUpdateSceneGraph_void_CSceneManager_CCamera_NoVirtual(this.NativeObject, object.Equals(source, null) ? IntPtr.Zero : source.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject);
						
					}

					protected  void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_preUpdateSceneGraph_void_CSceneManager_CCamera_Function(IntPtr source, IntPtr camera)
					{
						EarthView.World.Graphic.SceneManager csobj_source = new EarthView.World.Graphic.SceneManager(CreatedWhenConstruct.CWC_NotToCreate);
						csobj_source.BindNativeObject(source,"CSceneManager");
						csobj_source.Delegate = true;
						IClassFactory csobj_sourceClassFactory = GlobalClassFactoryMap.Get(csobj_source.GetCppInstanceTypeName());
						if (csobj_sourceClassFactory != null)
						{
							csobj_source.Delegate = true;
							csobj_source = csobj_sourceClassFactory.Create() as EarthView.World.Graphic.SceneManager;
							csobj_source.BindNativeObject(source, "CSceneManager");
							csobj_source.Delegate = true;
						}
						EarthView.World.Graphic.Camera csobj_camera = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
						csobj_camera.BindNativeObject(camera,"CCamera");
						csobj_camera.Delegate = true;
						IClassFactory csobj_cameraClassFactory = GlobalClassFactoryMap.Get(csobj_camera.GetCppInstanceTypeName());
						if (csobj_cameraClassFactory != null)
						{
							csobj_camera.Delegate = true;
							csobj_camera = csobj_cameraClassFactory.Create() as EarthView.World.Graphic.Camera;
							csobj_camera.BindNativeObject(camera, "CCamera");
							csobj_camera.Delegate = true;
						}
						
						PreUpdateSceneGraph(csobj_source, csobj_camera);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_preUpdateSceneGraph_void_CSceneManager_CCamera(IntPtr pNativeObject, IntPtr source, IntPtr camera);

					/// <summary>
					/// 在每帧更新场景图前触发			
					/// </summary>				
					/// <returns></returns>
					public virtual void PreUpdateSceneGraph(EarthView.World.Graphic.SceneManager source, EarthView.World.Graphic.Camera camera)
					{
						EarthView_World_Graphic_CSceneManager_CSceneManagerListener_preUpdateSceneGraph_void_CSceneManager_CCamera(this.NativeObject, object.Equals(source, null) ? IntPtr.Zero : source.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject);
						
					}

					[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
					protected delegate void postUpdateSceneGraph_CallBack_void_CSceneManager_CCamera(IntPtr source, IntPtr camera);

					protected postUpdateSceneGraph_CallBack_void_CSceneManager_CCamera m_postUpdateSceneGraph_CallBack_void_CSceneManager_CCamera;

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_postUpdateSceneGraph_void_CSceneManager_CCamera_NoVirtual(IntPtr pNativeObject, IntPtr source, IntPtr camera);

					/// <summary>
					/// 在每帧更新场景图后触发			
					/// </summary>				
					/// <returns></returns>
					public virtual void PostUpdateSceneGraph_NoVirtual(EarthView.World.Graphic.SceneManager source, EarthView.World.Graphic.Camera camera)
					{
						EarthView_World_Graphic_CSceneManager_CSceneManagerListener_postUpdateSceneGraph_void_CSceneManager_CCamera_NoVirtual(this.NativeObject, object.Equals(source, null) ? IntPtr.Zero : source.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject);
						
					}

					protected  void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_postUpdateSceneGraph_void_CSceneManager_CCamera_Function(IntPtr source, IntPtr camera)
					{
						EarthView.World.Graphic.SceneManager csobj_source = new EarthView.World.Graphic.SceneManager(CreatedWhenConstruct.CWC_NotToCreate);
						csobj_source.BindNativeObject(source,"CSceneManager");
						csobj_source.Delegate = true;
						IClassFactory csobj_sourceClassFactory = GlobalClassFactoryMap.Get(csobj_source.GetCppInstanceTypeName());
						if (csobj_sourceClassFactory != null)
						{
							csobj_source.Delegate = true;
							csobj_source = csobj_sourceClassFactory.Create() as EarthView.World.Graphic.SceneManager;
							csobj_source.BindNativeObject(source, "CSceneManager");
							csobj_source.Delegate = true;
						}
						EarthView.World.Graphic.Camera csobj_camera = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
						csobj_camera.BindNativeObject(camera,"CCamera");
						csobj_camera.Delegate = true;
						IClassFactory csobj_cameraClassFactory = GlobalClassFactoryMap.Get(csobj_camera.GetCppInstanceTypeName());
						if (csobj_cameraClassFactory != null)
						{
							csobj_camera.Delegate = true;
							csobj_camera = csobj_cameraClassFactory.Create() as EarthView.World.Graphic.Camera;
							csobj_camera.BindNativeObject(camera, "CCamera");
							csobj_camera.Delegate = true;
						}
						
						PostUpdateSceneGraph(csobj_source, csobj_camera);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_postUpdateSceneGraph_void_CSceneManager_CCamera(IntPtr pNativeObject, IntPtr source, IntPtr camera);

					/// <summary>
					/// 在每帧更新场景图后触发			
					/// </summary>				
					/// <returns></returns>
					public virtual void PostUpdateSceneGraph(EarthView.World.Graphic.SceneManager source, EarthView.World.Graphic.Camera camera)
					{
						EarthView_World_Graphic_CSceneManager_CSceneManagerListener_postUpdateSceneGraph_void_CSceneManager_CCamera(this.NativeObject, object.Equals(source, null) ? IntPtr.Zero : source.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject);
						
					}

					[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
					protected delegate void preFindVisibleObjects_CallBack_void_CSceneManager_IlluminationRenderStage_CViewport(IntPtr source, EarthView.World.Graphic.SceneManager.ILLUMINATIONRENDERSTAGE irs, IntPtr v);

					protected preFindVisibleObjects_CallBack_void_CSceneManager_IlluminationRenderStage_CViewport m_preFindVisibleObjects_CallBack_void_CSceneManager_IlluminationRenderStage_CViewport;

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_preFindVisibleObjects_void_CSceneManager_IlluminationRenderStage_CViewport_NoVirtual(IntPtr pNativeObject, IntPtr source, EarthView.World.Graphic.SceneManager.ILLUMINATIONRENDERSTAGE irs, IntPtr v);

					/// <summary>
					/// 在场景中搜索可见对象之前触发
					/// </summary>
					/// <param name="source">场景管理实例</param>
					/// <param name="irs">渲染阶段</param>
					/// <param name="v">视口</param>
					/// <returns></returns>
					public virtual void PreFindVisibleObjects_NoVirtual(EarthView.World.Graphic.SceneManager source, EarthView.World.Graphic.SceneManager.ILLUMINATIONRENDERSTAGE irs, EarthView.World.Graphic.Viewport v)
					{
						EarthView_World_Graphic_CSceneManager_CSceneManagerListener_preFindVisibleObjects_void_CSceneManager_IlluminationRenderStage_CViewport_NoVirtual(this.NativeObject, object.Equals(source, null) ? IntPtr.Zero : source.NativeObject, irs, object.Equals(v, null) ? IntPtr.Zero : v.NativeObject);
						
					}

					protected  void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_preFindVisibleObjects_void_CSceneManager_IlluminationRenderStage_CViewport_Function(IntPtr source, EarthView.World.Graphic.SceneManager.ILLUMINATIONRENDERSTAGE irs, IntPtr v)
					{
						EarthView.World.Graphic.SceneManager csobj_source = new EarthView.World.Graphic.SceneManager(CreatedWhenConstruct.CWC_NotToCreate);
						csobj_source.BindNativeObject(source,"CSceneManager");
						csobj_source.Delegate = true;
						IClassFactory csobj_sourceClassFactory = GlobalClassFactoryMap.Get(csobj_source.GetCppInstanceTypeName());
						if (csobj_sourceClassFactory != null)
						{
							csobj_source.Delegate = true;
							csobj_source = csobj_sourceClassFactory.Create() as EarthView.World.Graphic.SceneManager;
							csobj_source.BindNativeObject(source, "CSceneManager");
							csobj_source.Delegate = true;
						}
						EarthView.World.Graphic.Viewport csobj_v = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
						csobj_v.BindNativeObject(v,"CViewport");
						csobj_v.Delegate = true;
						IClassFactory csobj_vClassFactory = GlobalClassFactoryMap.Get(csobj_v.GetCppInstanceTypeName());
						if (csobj_vClassFactory != null)
						{
							csobj_v.Delegate = true;
							csobj_v = csobj_vClassFactory.Create() as EarthView.World.Graphic.Viewport;
							csobj_v.BindNativeObject(v, "CViewport");
							csobj_v.Delegate = true;
						}
						
						PreFindVisibleObjects(csobj_source, irs, csobj_v);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_preFindVisibleObjects_void_CSceneManager_IlluminationRenderStage_CViewport(IntPtr pNativeObject, IntPtr source, EarthView.World.Graphic.SceneManager.ILLUMINATIONRENDERSTAGE irs, IntPtr v);

					/// <summary>
					/// 在场景中搜索可见对象之前触发
					/// </summary>
					/// <param name="source">场景管理实例</param>
					/// <param name="irs">渲染阶段</param>
					/// <param name="v">视口</param>
					/// <returns></returns>
					public virtual void PreFindVisibleObjects(EarthView.World.Graphic.SceneManager source, EarthView.World.Graphic.SceneManager.ILLUMINATIONRENDERSTAGE irs, EarthView.World.Graphic.Viewport v)
					{
						EarthView_World_Graphic_CSceneManager_CSceneManagerListener_preFindVisibleObjects_void_CSceneManager_IlluminationRenderStage_CViewport(this.NativeObject, object.Equals(source, null) ? IntPtr.Zero : source.NativeObject, irs, object.Equals(v, null) ? IntPtr.Zero : v.NativeObject);
						
					}

					[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
					protected delegate void postFindVisibleObjects_CallBack_void_CSceneManager_IlluminationRenderStage_CViewport(IntPtr source, EarthView.World.Graphic.SceneManager.ILLUMINATIONRENDERSTAGE irs, IntPtr v);

					protected postFindVisibleObjects_CallBack_void_CSceneManager_IlluminationRenderStage_CViewport m_postFindVisibleObjects_CallBack_void_CSceneManager_IlluminationRenderStage_CViewport;

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_postFindVisibleObjects_void_CSceneManager_IlluminationRenderStage_CViewport_NoVirtual(IntPtr pNativeObject, IntPtr source, EarthView.World.Graphic.SceneManager.ILLUMINATIONRENDERSTAGE irs, IntPtr v);

					/// <summary>
					/// 在场景中搜索可见对象之后触发
					/// </summary>
					/// <param name="source">场景管理实例</param>
					/// <param name="irs">渲染阶段</param>
					/// <param name="v">视口</param>
					/// <returns></returns>
					public virtual void PostFindVisibleObjects_NoVirtual(EarthView.World.Graphic.SceneManager source, EarthView.World.Graphic.SceneManager.ILLUMINATIONRENDERSTAGE irs, EarthView.World.Graphic.Viewport v)
					{
						EarthView_World_Graphic_CSceneManager_CSceneManagerListener_postFindVisibleObjects_void_CSceneManager_IlluminationRenderStage_CViewport_NoVirtual(this.NativeObject, object.Equals(source, null) ? IntPtr.Zero : source.NativeObject, irs, object.Equals(v, null) ? IntPtr.Zero : v.NativeObject);
						
					}

					protected  void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_postFindVisibleObjects_void_CSceneManager_IlluminationRenderStage_CViewport_Function(IntPtr source, EarthView.World.Graphic.SceneManager.ILLUMINATIONRENDERSTAGE irs, IntPtr v)
					{
						EarthView.World.Graphic.SceneManager csobj_source = new EarthView.World.Graphic.SceneManager(CreatedWhenConstruct.CWC_NotToCreate);
						csobj_source.BindNativeObject(source,"CSceneManager");
						csobj_source.Delegate = true;
						IClassFactory csobj_sourceClassFactory = GlobalClassFactoryMap.Get(csobj_source.GetCppInstanceTypeName());
						if (csobj_sourceClassFactory != null)
						{
							csobj_source.Delegate = true;
							csobj_source = csobj_sourceClassFactory.Create() as EarthView.World.Graphic.SceneManager;
							csobj_source.BindNativeObject(source, "CSceneManager");
							csobj_source.Delegate = true;
						}
						EarthView.World.Graphic.Viewport csobj_v = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
						csobj_v.BindNativeObject(v,"CViewport");
						csobj_v.Delegate = true;
						IClassFactory csobj_vClassFactory = GlobalClassFactoryMap.Get(csobj_v.GetCppInstanceTypeName());
						if (csobj_vClassFactory != null)
						{
							csobj_v.Delegate = true;
							csobj_v = csobj_vClassFactory.Create() as EarthView.World.Graphic.Viewport;
							csobj_v.BindNativeObject(v, "CViewport");
							csobj_v.Delegate = true;
						}
						
						PostFindVisibleObjects(csobj_source, irs, csobj_v);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_postFindVisibleObjects_void_CSceneManager_IlluminationRenderStage_CViewport(IntPtr pNativeObject, IntPtr source, EarthView.World.Graphic.SceneManager.ILLUMINATIONRENDERSTAGE irs, IntPtr v);

					/// <summary>
					/// 在场景中搜索可见对象之后触发
					/// </summary>
					/// <param name="source">场景管理实例</param>
					/// <param name="irs">渲染阶段</param>
					/// <param name="v">视口</param>
					/// <returns></returns>
					public virtual void PostFindVisibleObjects(EarthView.World.Graphic.SceneManager source, EarthView.World.Graphic.SceneManager.ILLUMINATIONRENDERSTAGE irs, EarthView.World.Graphic.Viewport v)
					{
						EarthView_World_Graphic_CSceneManager_CSceneManagerListener_postFindVisibleObjects_void_CSceneManager_IlluminationRenderStage_CViewport(this.NativeObject, object.Equals(source, null) ? IntPtr.Zero : source.NativeObject, irs, object.Equals(v, null) ? IntPtr.Zero : v.NativeObject);
						
					}

					[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
					protected delegate void shadowTexturesUpdated_CallBack_void_ev_size_t(ulong numberOfShadowTextures);

					protected shadowTexturesUpdated_CallBack_void_ev_size_t m_shadowTexturesUpdated_CallBack_void_ev_size_t;

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTexturesUpdated_void_ev_size_t_NoVirtual(IntPtr pNativeObject, ulong numberOfShadowTextures);

					/// <summary>
					/// 阴影纹理更新时调用
					/// 只有阴影纹理被使用的时候，这个事件才触发
					/// </summary>
					/// <param name="numberOfShadowTextures">阴影纹理使用中的数量</param>
					/// <returns></returns>
					public virtual void ShadowTexturesUpdated_NoVirtual(ulong numberOfShadowTextures)
					{
						EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTexturesUpdated_void_ev_size_t_NoVirtual(this.NativeObject, numberOfShadowTextures);
						
					}

					protected  void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTexturesUpdated_void_ev_size_t_Function(ulong numberOfShadowTextures)
					{
						ShadowTexturesUpdated(numberOfShadowTextures);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTexturesUpdated_void_ev_size_t(IntPtr pNativeObject, ulong numberOfShadowTextures);

					/// <summary>
					/// 阴影纹理更新时调用
					/// 只有阴影纹理被使用的时候，这个事件才触发
					/// </summary>
					/// <param name="numberOfShadowTextures">阴影纹理使用中的数量</param>
					/// <returns></returns>
					public virtual void ShadowTexturesUpdated(ulong numberOfShadowTextures)
					{
						EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTexturesUpdated_void_ev_size_t(this.NativeObject, numberOfShadowTextures);
						
					}

					[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
					protected delegate void shadowTextureCasterPreViewProj_CallBack_void_CLight_CCamera_ev_size_t(IntPtr light, IntPtr camera, ulong iteration);

					protected shadowTextureCasterPreViewProj_CallBack_void_CLight_CCamera_ev_size_t m_shadowTextureCasterPreViewProj_CallBack_void_CLight_CCamera_ev_size_t;

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTextureCasterPreViewProj_void_CLight_CCamera_ev_size_t_NoVirtual(IntPtr pNativeObject, IntPtr light, IntPtr camera, ulong iteration);

					/// <summary>
					/// 在为纹理阴影投射者设置观察投影矩阵前触发                
					/// </summary>
					/// <param name="light">阴影纹理的光源</param>
					/// <param name="camera">摄像机</param>
					/// <param name="iteration">迭代次数</param>
					/// <returns></returns>
					public virtual void ShadowTextureCasterPreViewProj_NoVirtual(EarthView.World.Graphic.Light light, EarthView.World.Graphic.Camera camera, ulong iteration)
					{
						EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTextureCasterPreViewProj_void_CLight_CCamera_ev_size_t_NoVirtual(this.NativeObject, object.Equals(light, null) ? IntPtr.Zero : light.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject, iteration);
						
					}

					protected  void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTextureCasterPreViewProj_void_CLight_CCamera_ev_size_t_Function(IntPtr light, IntPtr camera, ulong iteration)
					{
						EarthView.World.Graphic.Light csobj_light = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
						csobj_light.BindNativeObject(light,"CLight");
						csobj_light.Delegate = true;
						IClassFactory csobj_lightClassFactory = GlobalClassFactoryMap.Get(csobj_light.GetCppInstanceTypeName());
						if (csobj_lightClassFactory != null)
						{
							csobj_light.Delegate = true;
							csobj_light = csobj_lightClassFactory.Create() as EarthView.World.Graphic.Light;
							csobj_light.BindNativeObject(light, "CLight");
							csobj_light.Delegate = true;
						}
						EarthView.World.Graphic.Camera csobj_camera = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
						csobj_camera.BindNativeObject(camera,"CCamera");
						csobj_camera.Delegate = true;
						IClassFactory csobj_cameraClassFactory = GlobalClassFactoryMap.Get(csobj_camera.GetCppInstanceTypeName());
						if (csobj_cameraClassFactory != null)
						{
							csobj_camera.Delegate = true;
							csobj_camera = csobj_cameraClassFactory.Create() as EarthView.World.Graphic.Camera;
							csobj_camera.BindNativeObject(camera, "CCamera");
							csobj_camera.Delegate = true;
						}
						
						ShadowTextureCasterPreViewProj(csobj_light, csobj_camera, iteration);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTextureCasterPreViewProj_void_CLight_CCamera_ev_size_t(IntPtr pNativeObject, IntPtr light, IntPtr camera, ulong iteration);

					/// <summary>
					/// 在为纹理阴影投射者设置观察投影矩阵前触发                
					/// </summary>
					/// <param name="light">阴影纹理的光源</param>
					/// <param name="camera">摄像机</param>
					/// <param name="iteration">迭代次数</param>
					/// <returns></returns>
					public virtual void ShadowTextureCasterPreViewProj(EarthView.World.Graphic.Light light, EarthView.World.Graphic.Camera camera, ulong iteration)
					{
						EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTextureCasterPreViewProj_void_CLight_CCamera_ev_size_t(this.NativeObject, object.Equals(light, null) ? IntPtr.Zero : light.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject, iteration);
						
					}

					[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
					protected delegate void shadowTextureReceiverPreViewProj_CallBack_void_CLight_CFrustum(IntPtr light, IntPtr frustum);

					protected shadowTextureReceiverPreViewProj_CallBack_void_CLight_CFrustum m_shadowTextureReceiverPreViewProj_CallBack_void_CLight_CFrustum;

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTextureReceiverPreViewProj_void_CLight_CFrustum_NoVirtual(IntPtr pNativeObject, IntPtr light, IntPtr frustum);

					/// <summary>
					/// 在为纹理阴影接收者设置观察投影矩阵前触发                    
					/// </summary>
					/// <param name="light">阴影纹理的光源</param>
					/// <param name="frustum">视椎体</param>
					/// <returns></returns>
					public virtual void ShadowTextureReceiverPreViewProj_NoVirtual(EarthView.World.Graphic.Light light, EarthView.World.Graphic.Frustum frustum)
					{
						EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTextureReceiverPreViewProj_void_CLight_CFrustum_NoVirtual(this.NativeObject, object.Equals(light, null) ? IntPtr.Zero : light.NativeObject, object.Equals(frustum, null) ? IntPtr.Zero : frustum.NativeObject);
						
					}

					protected  void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTextureReceiverPreViewProj_void_CLight_CFrustum_Function(IntPtr light, IntPtr frustum)
					{
						EarthView.World.Graphic.Light csobj_light = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
						csobj_light.BindNativeObject(light,"CLight");
						csobj_light.Delegate = true;
						IClassFactory csobj_lightClassFactory = GlobalClassFactoryMap.Get(csobj_light.GetCppInstanceTypeName());
						if (csobj_lightClassFactory != null)
						{
							csobj_light.Delegate = true;
							csobj_light = csobj_lightClassFactory.Create() as EarthView.World.Graphic.Light;
							csobj_light.BindNativeObject(light, "CLight");
							csobj_light.Delegate = true;
						}
						EarthView.World.Graphic.Frustum csobj_frustum = new EarthView.World.Graphic.Frustum(CreatedWhenConstruct.CWC_NotToCreate);
						csobj_frustum.BindNativeObject(frustum,"CFrustum");
						csobj_frustum.Delegate = true;
						IClassFactory csobj_frustumClassFactory = GlobalClassFactoryMap.Get(csobj_frustum.GetCppInstanceTypeName());
						if (csobj_frustumClassFactory != null)
						{
							csobj_frustum.Delegate = true;
							csobj_frustum = csobj_frustumClassFactory.Create() as EarthView.World.Graphic.Frustum;
							csobj_frustum.BindNativeObject(frustum, "CFrustum");
							csobj_frustum.Delegate = true;
						}
						
						ShadowTextureReceiverPreViewProj(csobj_light, csobj_frustum);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTextureReceiverPreViewProj_void_CLight_CFrustum(IntPtr pNativeObject, IntPtr light, IntPtr frustum);

					/// <summary>
					/// 在为纹理阴影接收者设置观察投影矩阵前触发                    
					/// </summary>
					/// <param name="light">阴影纹理的光源</param>
					/// <param name="frustum">视椎体</param>
					/// <returns></returns>
					public virtual void ShadowTextureReceiverPreViewProj(EarthView.World.Graphic.Light light, EarthView.World.Graphic.Frustum frustum)
					{
						EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTextureReceiverPreViewProj_void_CLight_CFrustum(this.NativeObject, object.Equals(light, null) ? IntPtr.Zero : light.NativeObject, object.Equals(frustum, null) ? IntPtr.Zero : frustum.NativeObject);
						
					}

					[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
					protected delegate byte sortLightsAffectingFrustum_CallBack_ev_bool_LightList(IntPtr lightList);

					protected sortLightsAffectingFrustum_CallBack_ev_bool_LightList m_sortLightsAffectingFrustum_CallBack_ev_bool_LightList;

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_CSceneManagerListener_sortLightsAffectingFrustum_ev_bool_LightList_NoVirtual(IntPtr pNativeObject, IntPtr lightList);

					/// <summary>
					/// 对影响视椎体的光源进行排序
					/// </summary>
					/// <param name="lightList">光源列表</param>
					/// <returns>为true，已排序</returns>
					public virtual bool SortLightsAffectingFrustum_NoVirtual(ref EarthView.World.Graphic.LightList lightList)
					{
						byte ret=EarthView_World_Graphic_CSceneManager_CSceneManagerListener_sortLightsAffectingFrustum_ev_bool_LightList_NoVirtual(this.NativeObject, object.Equals(lightList, null) ? IntPtr.Zero : lightList.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}

					protected  byte EarthView_World_Graphic_CSceneManager_CSceneManagerListener_sortLightsAffectingFrustum_ev_bool_LightList_Function(IntPtr lightList)
					{
						EarthView.World.Graphic.LightList csobj_lightList = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
						csobj_lightList.BindNativeObject(lightList,"LightList");
						csobj_lightList.Delegate = true;
						IClassFactory csobj_lightListClassFactory = GlobalClassFactoryMap.Get(csobj_lightList.GetCppInstanceTypeName());
						if (csobj_lightListClassFactory != null)
						{
							csobj_lightList.Delegate = true;
							csobj_lightList = csobj_lightListClassFactory.Create() as EarthView.World.Graphic.LightList;
							csobj_lightList.BindNativeObject(lightList, "LightList");
							csobj_lightList.Delegate = true;
						}
						
						bool csret=SortLightsAffectingFrustum(ref csobj_lightList);
						
						return Convert.ToByte(csret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_CSceneManagerListener_sortLightsAffectingFrustum_ev_bool_LightList(IntPtr pNativeObject, IntPtr lightList);

					/// <summary>
					/// 对影响视椎体的光源进行排序
					/// </summary>
					/// <param name="lightList">光源列表</param>
					/// <returns>为true，已排序</returns>
					public virtual bool SortLightsAffectingFrustum(ref EarthView.World.Graphic.LightList lightList)
					{
						byte ret=EarthView_World_Graphic_CSceneManager_CSceneManagerListener_sortLightsAffectingFrustum_ev_bool_LightList(this.NativeObject, object.Equals(lightList, null) ? IntPtr.Zero : lightList.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}

					[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
					protected delegate void sceneManagerDestroyed_CallBack_void_CSceneManager(IntPtr source);

					protected sceneManagerDestroyed_CallBack_void_CSceneManager m_sceneManagerDestroyed_CallBack_void_CSceneManager;

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_sceneManagerDestroyed_void_CSceneManager_NoVirtual(IntPtr pNativeObject, IntPtr source);

					/// <summary>
					/// 场景管理器销毁时触发
					/// </summary>
					/// <param name="source">场景管理器</param>
					/// <returns></returns>
					public virtual void SceneManagerDestroyed_NoVirtual(EarthView.World.Graphic.SceneManager source)
					{
						EarthView_World_Graphic_CSceneManager_CSceneManagerListener_sceneManagerDestroyed_void_CSceneManager_NoVirtual(this.NativeObject, object.Equals(source, null) ? IntPtr.Zero : source.NativeObject);
						
					}

					protected  void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_sceneManagerDestroyed_void_CSceneManager_Function(IntPtr source)
					{
						EarthView.World.Graphic.SceneManager csobj_source = new EarthView.World.Graphic.SceneManager(CreatedWhenConstruct.CWC_NotToCreate);
						csobj_source.BindNativeObject(source,"CSceneManager");
						csobj_source.Delegate = true;
						IClassFactory csobj_sourceClassFactory = GlobalClassFactoryMap.Get(csobj_source.GetCppInstanceTypeName());
						if (csobj_sourceClassFactory != null)
						{
							csobj_source.Delegate = true;
							csobj_source = csobj_sourceClassFactory.Create() as EarthView.World.Graphic.SceneManager;
							csobj_source.BindNativeObject(source, "CSceneManager");
							csobj_source.Delegate = true;
						}
						
						SceneManagerDestroyed(csobj_source);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneManagerListener_sceneManagerDestroyed_void_CSceneManager(IntPtr pNativeObject, IntPtr source);

					/// <summary>
					/// 场景管理器销毁时触发
					/// </summary>
					/// <param name="source">场景管理器</param>
					/// <returns></returns>
					public virtual void SceneManagerDestroyed(EarthView.World.Graphic.SceneManager source)
					{
						EarthView_World_Graphic_CSceneManager_CSceneManagerListener_sceneManagerDestroyed_void_CSceneManager(this.NativeObject, object.Equals(source, null) ? IntPtr.Zero : source.NativeObject);
						
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadSceneManagerListener = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadSceneManagerListener = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadSceneManagerListener = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadSceneManagerListener = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadSceneManagerListener = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadSceneManagerListener = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadSceneManagerListener = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadSceneManagerListener = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadSceneManagerListener = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadSceneManagerListener = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadSceneManagerListener = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadSceneManagerListener = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::CSceneManagerListener", new SceneManagerListenerClassFactory());

					private static bool registerProxyStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::CSceneManagerListenerProxy", new SceneManagerListenerClassFactory());

					public SceneManagerListener(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_preUpdateSceneGraph_void_CSceneManager_CCamera(IntPtr pObject, preUpdateSceneGraph_CallBack_void_CSceneManager_CCamera pCallback);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_postUpdateSceneGraph_void_CSceneManager_CCamera(IntPtr pObject, postUpdateSceneGraph_CallBack_void_CSceneManager_CCamera pCallback);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_preFindVisibleObjects_void_CSceneManager_IlluminationRenderStage_CViewport(IntPtr pObject, preFindVisibleObjects_CallBack_void_CSceneManager_IlluminationRenderStage_CViewport pCallback);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_postFindVisibleObjects_void_CSceneManager_IlluminationRenderStage_CViewport(IntPtr pObject, postFindVisibleObjects_CallBack_void_CSceneManager_IlluminationRenderStage_CViewport pCallback);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTexturesUpdated_void_ev_size_t(IntPtr pObject, shadowTexturesUpdated_CallBack_void_ev_size_t pCallback);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTextureCasterPreViewProj_void_CLight_CCamera_ev_size_t(IntPtr pObject, shadowTextureCasterPreViewProj_CallBack_void_CLight_CCamera_ev_size_t pCallback);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTextureReceiverPreViewProj_void_CLight_CFrustum(IntPtr pObject, shadowTextureReceiverPreViewProj_CallBack_void_CLight_CFrustum pCallback);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_sortLightsAffectingFrustum_ev_bool_LightList(IntPtr pObject, sortLightsAffectingFrustum_CallBack_ev_bool_LightList pCallback);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_sceneManagerDestroyed_void_CSceneManager(IntPtr pObject, sceneManagerDestroyed_CallBack_void_CSceneManager pCallback);

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
							m_preUpdateSceneGraph_CallBack_void_CSceneManager_CCamera = EarthView_World_Graphic_CSceneManager_CSceneManagerListener_preUpdateSceneGraph_void_CSceneManager_CCamera_Function;
							GC.KeepAlive(m_preUpdateSceneGraph_CallBack_void_CSceneManager_CCamera);
							EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_preUpdateSceneGraph_void_CSceneManager_CCamera(this.NativeObject, m_preUpdateSceneGraph_CallBack_void_CSceneManager_CCamera);
							m_postUpdateSceneGraph_CallBack_void_CSceneManager_CCamera = EarthView_World_Graphic_CSceneManager_CSceneManagerListener_postUpdateSceneGraph_void_CSceneManager_CCamera_Function;
							GC.KeepAlive(m_postUpdateSceneGraph_CallBack_void_CSceneManager_CCamera);
							EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_postUpdateSceneGraph_void_CSceneManager_CCamera(this.NativeObject, m_postUpdateSceneGraph_CallBack_void_CSceneManager_CCamera);
							m_preFindVisibleObjects_CallBack_void_CSceneManager_IlluminationRenderStage_CViewport = EarthView_World_Graphic_CSceneManager_CSceneManagerListener_preFindVisibleObjects_void_CSceneManager_IlluminationRenderStage_CViewport_Function;
							GC.KeepAlive(m_preFindVisibleObjects_CallBack_void_CSceneManager_IlluminationRenderStage_CViewport);
							EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_preFindVisibleObjects_void_CSceneManager_IlluminationRenderStage_CViewport(this.NativeObject, m_preFindVisibleObjects_CallBack_void_CSceneManager_IlluminationRenderStage_CViewport);
							m_postFindVisibleObjects_CallBack_void_CSceneManager_IlluminationRenderStage_CViewport = EarthView_World_Graphic_CSceneManager_CSceneManagerListener_postFindVisibleObjects_void_CSceneManager_IlluminationRenderStage_CViewport_Function;
							GC.KeepAlive(m_postFindVisibleObjects_CallBack_void_CSceneManager_IlluminationRenderStage_CViewport);
							EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_postFindVisibleObjects_void_CSceneManager_IlluminationRenderStage_CViewport(this.NativeObject, m_postFindVisibleObjects_CallBack_void_CSceneManager_IlluminationRenderStage_CViewport);
							m_shadowTexturesUpdated_CallBack_void_ev_size_t = EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTexturesUpdated_void_ev_size_t_Function;
							GC.KeepAlive(m_shadowTexturesUpdated_CallBack_void_ev_size_t);
							EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTexturesUpdated_void_ev_size_t(this.NativeObject, m_shadowTexturesUpdated_CallBack_void_ev_size_t);
							m_shadowTextureCasterPreViewProj_CallBack_void_CLight_CCamera_ev_size_t = EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTextureCasterPreViewProj_void_CLight_CCamera_ev_size_t_Function;
							GC.KeepAlive(m_shadowTextureCasterPreViewProj_CallBack_void_CLight_CCamera_ev_size_t);
							EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTextureCasterPreViewProj_void_CLight_CCamera_ev_size_t(this.NativeObject, m_shadowTextureCasterPreViewProj_CallBack_void_CLight_CCamera_ev_size_t);
							m_shadowTextureReceiverPreViewProj_CallBack_void_CLight_CFrustum = EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTextureReceiverPreViewProj_void_CLight_CFrustum_Function;
							GC.KeepAlive(m_shadowTextureReceiverPreViewProj_CallBack_void_CLight_CFrustum);
							EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_shadowTextureReceiverPreViewProj_void_CLight_CFrustum(this.NativeObject, m_shadowTextureReceiverPreViewProj_CallBack_void_CLight_CFrustum);
							m_sortLightsAffectingFrustum_CallBack_ev_bool_LightList = EarthView_World_Graphic_CSceneManager_CSceneManagerListener_sortLightsAffectingFrustum_ev_bool_LightList_Function;
							GC.KeepAlive(m_sortLightsAffectingFrustum_CallBack_ev_bool_LightList);
							EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_sortLightsAffectingFrustum_ev_bool_LightList(this.NativeObject, m_sortLightsAffectingFrustum_CallBack_ev_bool_LightList);
							m_sceneManagerDestroyed_CallBack_void_CSceneManager = EarthView_World_Graphic_CSceneManager_CSceneManagerListener_sceneManagerDestroyed_void_CSceneManager_Function;
							GC.KeepAlive(m_sceneManagerDestroyed_CallBack_void_CSceneManager);
							EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneManagerListener_sceneManagerDestroyed_void_CSceneManager(this.NativeObject, m_sceneManagerDestroyed_CallBack_void_CSceneManager);
						}
					}
					public static SceneManagerListener FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						SceneManagerListener obj = baseObj as  SceneManagerListener;
						if (object.Equals(obj, null))
						{
							obj = new SceneManagerListener(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "CSceneManagerListener");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class SceneManagerListenerClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						SceneManagerListener emptyInstance = new SceneManagerListener(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				/// <summary>
				/// 队列中渲染对象的访问者
				/// 内部帮助类
				/// </summary>
				public class SceneMgrQueuedRenderableVisitor : EarthView.World.Graphic.QueuedRenderableVisitor
				{
					/// <summary>
					/// 默认构造函数
					/// </summary>
					/// <param name=""></param>
					/// <returns></returns>
					public SceneMgrQueuedRenderableVisitor() : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						Create("CSceneMgrQueuedRenderableVisitorProxy", null);
						if (!"EarthView.World.Graphic.SceneManager+SceneMgrQueuedRenderableVisitor".Equals(((Object)this).GetType().ToString()))
						{
							this.SetCustomExtend(true);
						}
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_void_CRenderable_NoVirtual(IntPtr pNativeObject, IntPtr r);

					/// <summary>
					/// 访问可渲染对象
					/// </summary>
					/// <param name="r">渲染接口</param>
					/// <returns></returns>
					public new void Visit_NoVirtual(EarthView.World.Graphic.Renderable r)
					{
						EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_void_CRenderable_NoVirtual(this.NativeObject, object.Equals(r, null) ? IntPtr.Zero : r.NativeObject);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_void_CRenderable(IntPtr pNativeObject, IntPtr r);

					/// <summary>
					/// 访问可渲染对象
					/// </summary>
					/// <param name="r">渲染接口</param>
					/// <returns></returns>
					public override void Visit(EarthView.World.Graphic.Renderable r)
					{
						EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_void_CRenderable(this.NativeObject, object.Equals(r, null) ? IntPtr.Zero : r.NativeObject);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_ev_bool_CPass_NoVirtual(IntPtr pNativeObject, IntPtr p);

					/// <summary>
					/// 访问渲染通路(当通路改变时，这个函数被调用)
					/// </summary>
					/// <param name="p">通路</param>
					/// <returns></returns>
					public new bool Visit_NoVirtual(EarthView.World.Graphic.Pass p)
					{
						byte ret=EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_ev_bool_CPass_NoVirtual(this.NativeObject, object.Equals(p, null) ? IntPtr.Zero : p.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_ev_bool_CPass(IntPtr pNativeObject, IntPtr p);

					/// <summary>
					/// 访问渲染通路(当通路改变时，这个函数被调用)
					/// </summary>
					/// <param name="p">通路</param>
					/// <returns></returns>
					public override bool Visit(EarthView.World.Graphic.Pass p)
					{
						byte ret=EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_ev_bool_CPass(this.NativeObject, object.Equals(p, null) ? IntPtr.Zero : p.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_void_RenderablePass_NoVirtual(IntPtr pNativeObject, IntPtr rp);

					/// <summary>
					/// 访问渲染对象及其渲染通路
					/// </summary>
					/// <param name="rp">渲染通路</param>
					/// <returns></returns>
					public new void Visit_NoVirtual(EarthView.World.Graphic.RenderablePass rp)
					{
						EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_void_RenderablePass_NoVirtual(this.NativeObject, object.Equals(rp, null) ? IntPtr.Zero : rp.NativeObject);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_void_RenderablePass(IntPtr pNativeObject, IntPtr rp);

					/// <summary>
					/// 访问渲染对象及其渲染通路
					/// </summary>
					/// <param name="rp">渲染通路</param>
					/// <returns></returns>
					public override void Visit(EarthView.World.Graphic.RenderablePass rp)
					{
						EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_void_RenderablePass(this.NativeObject, object.Equals(rp, null) ? IntPtr.Zero : rp.NativeObject);
						
					}

					private EarthView.World.Graphic.SceneManager targetSceneMgrField;
					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr Get_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_targetSceneMgr(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_targetSceneMgr( IntPtr pObject, IntPtr value );

					public 					EarthView.World.Graphic.SceneManager TargetSceneMgr
					{
						get
						{
							IntPtr __ptr = Get_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_targetSceneMgr(this.NativeObject);
							
							if(__ptr==IntPtr.Zero)
							{
							return null;
							}
							if(!object.Equals(targetSceneMgrField, null)){
								targetSceneMgrField.NativeObject = __ptr;
								return targetSceneMgrField;
							}
							EarthView.World.Graphic.SceneManager csObj = new EarthView.World.Graphic.SceneManager(CreatedWhenConstruct.CWC_NotToCreate);
							csObj.BindNativeObject(__ptr, "CSceneManager");
							csObj.Delegate = true;
							IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
							if (csObjClassFactory != null)
							{
								csObj.Delegate = true;
								csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager;
								csObj.BindNativeObject(__ptr, "CSceneManager");
								csObj.Delegate = true;
							}
							return csObj;
							
						}

						set
						{
							targetSceneMgrField = value;
							Set_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_targetSceneMgr( this.NativeObject,object.Equals(value, null) ? IntPtr.Zero : value.NativeObject );
						}
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte Get_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_transparentShadowCastersMode(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_transparentShadowCastersMode( IntPtr pObject, byte value );

					public 					bool TransparentShadowCastersMode
					{
						get
						{
							byte ret=Get_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_transparentShadowCastersMode(this.NativeObject);
							
							return Convert.ToBoolean(ret);
							
						}

						set
						{
							Set_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_transparentShadowCastersMode(this.NativeObject,Convert.ToByte(value));
						}
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte Get_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_autoLights(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_autoLights( IntPtr pObject, byte value );

					public 					bool AutoLights
					{
						get
						{
							byte ret=Get_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_autoLights(this.NativeObject);
							
							return Convert.ToBoolean(ret);
							
						}

						set
						{
							Set_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_autoLights(this.NativeObject,Convert.ToByte(value));
						}
					}

					private EarthView.World.Graphic.LightList manualLightListField;
					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr Get_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_manualLightList(IntPtr pObject);

					public 					EarthView.World.Graphic.LightList ManualLightList
					{
						get
						{
							IntPtr __ptr = Get_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_manualLightList(this.NativeObject);
							
							if(__ptr==IntPtr.Zero)
							{
							return null;
							}
							if(!object.Equals(manualLightListField, null)){
								manualLightListField.NativeObject = __ptr;
								return manualLightListField;
							}
							EarthView.World.Graphic.LightList csObj = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
							csObj.BindNativeObject(__ptr, "LightList");
							csObj.Delegate = true;
							IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
							if (csObjClassFactory != null)
							{
								csObj.Delegate = true;
								csObj = csObjClassFactory.Create() as EarthView.World.Graphic.LightList;
								csObj.BindNativeObject(__ptr, "LightList");
								csObj.Delegate = true;
							}
							return csObj;
							
						}

					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte Get_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_scissoring(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_scissoring( IntPtr pObject, byte value );

					public 					bool Scissoring
					{
						get
						{
							byte ret=Get_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_scissoring(this.NativeObject);
							
							return Convert.ToBoolean(ret);
							
						}

						set
						{
							Set_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_scissoring(this.NativeObject,Convert.ToByte(value));
						}
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadSceneMgrQueuedRenderableVisitor = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadSceneMgrQueuedRenderableVisitor = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadSceneMgrQueuedRenderableVisitor = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadSceneMgrQueuedRenderableVisitor = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadSceneMgrQueuedRenderableVisitor = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadSceneMgrQueuedRenderableVisitor = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadSceneMgrQueuedRenderableVisitor = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadSceneMgrQueuedRenderableVisitor = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadSceneMgrQueuedRenderableVisitor = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadSceneMgrQueuedRenderableVisitor = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadSceneMgrQueuedRenderableVisitor = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadSceneMgrQueuedRenderableVisitor = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitor", new SceneMgrQueuedRenderableVisitorClassFactory());

					private static bool registerProxyStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::CSceneMgrQueuedRenderableVisitorProxy", new SceneMgrQueuedRenderableVisitorClassFactory());

					public SceneMgrQueuedRenderableVisitor(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_void_RenderablePass(IntPtr pObject, visit_CallBack_void_RenderablePass pCallback);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_ev_bool_CPass(IntPtr pObject, visit_CallBack_ev_bool_CPass pCallback);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_void_CRenderable(IntPtr pObject, visit_CallBack_void_CRenderable pCallback);

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
							m_visit_CallBack_void_RenderablePass = EarthView_World_Graphic_CQueuedRenderableVisitor_visit_void_RenderablePass_Function;
							GC.KeepAlive(m_visit_CallBack_void_RenderablePass);
							EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_void_RenderablePass(this.NativeObject, m_visit_CallBack_void_RenderablePass);
							m_visit_CallBack_ev_bool_CPass = EarthView_World_Graphic_CQueuedRenderableVisitor_visit_ev_bool_CPass_Function;
							GC.KeepAlive(m_visit_CallBack_ev_bool_CPass);
							EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_ev_bool_CPass(this.NativeObject, m_visit_CallBack_ev_bool_CPass);
							m_visit_CallBack_void_CRenderable = EarthView_World_Graphic_CQueuedRenderableVisitor_visit_void_CRenderable_Function;
							GC.KeepAlive(m_visit_CallBack_void_CRenderable);
							EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CSceneMgrQueuedRenderableVisitor_visit_void_CRenderable(this.NativeObject, m_visit_CallBack_void_CRenderable);
						}
					}
					public static SceneMgrQueuedRenderableVisitor FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						SceneMgrQueuedRenderableVisitor obj = baseObj as  SceneMgrQueuedRenderableVisitor;
						if (object.Equals(obj, null))
						{
							obj = new SceneMgrQueuedRenderableVisitor(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "CSceneMgrQueuedRenderableVisitor");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class SceneMgrQueuedRenderableVisitorClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						SceneMgrQueuedRenderableVisitor emptyInstance = new SceneMgrQueuedRenderableVisitor(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				public class CameraList : EarthView.World.Core.BaseObject
				{
					public CameraList() : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						Create("CameraList",  null);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_CameraList_push_ev_bool_EVString_CCamera(IntPtr pNativeObject, string key, ref IntPtr ref_val);

					public bool Push(string key, EarthView.World.Graphic.Camera ref_val)
					{
						byte ret=EarthView_World_Graphic_CSceneManager_CameraList_push_ev_bool_EVString_CCamera(this.NativeObject, key, ref ref_val.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_CameraList_exist_ev_bool_EVString(IntPtr pNativeObject, string key);

					public bool Exist(string key)
					{
						byte ret=EarthView_World_Graphic_CSceneManager_CameraList_exist_ev_bool_EVString(this.NativeObject, key);
						
						return Convert.ToBoolean(ret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_CameraList_get_CCamera_EVString(IntPtr pNativeObject, string key);

					public EarthView.World.Graphic.Camera Get(string key)
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_CameraList_get_CCamera_EVString(this.NativeObject, key);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.Camera csObj = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CCamera");
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Camera;
							csObj.BindNativeObject(__ptr, "CCamera");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CameraList_erase_void_EVString(IntPtr pNativeObject, string key);

					public void Erase(string key)
					{
						EarthView_World_Graphic_CSceneManager_CameraList_erase_void_EVString(this.NativeObject, key);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern ulong EarthView_World_Graphic_CSceneManager_CameraList_size_ev_size_t(IntPtr pNativeObject);

					public ulong Size()
					{
						ulong ret=EarthView_World_Graphic_CSceneManager_CameraList_size_ev_size_t(this.NativeObject);
						
						return ret;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CameraList_clear_void(IntPtr pNativeObject);

					public void Clear()
					{
						EarthView_World_Graphic_CSceneManager_CameraList_clear_void(this.NativeObject);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_CameraList_empty_ev_bool(IntPtr pNativeObject);

					public bool Empty()
					{
						byte ret=EarthView_World_Graphic_CSceneManager_CameraList_empty_ev_bool(this.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadCameraList = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadCameraList = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadCameraList = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadCameraList = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadCameraList = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadCameraList = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadCameraList = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadCameraList = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadCameraList = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadCameraList = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadCameraList = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadCameraList = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::CameraList", new CameraListClassFactory());

					public CameraList(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
						}
					}
					public static CameraList FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						CameraList obj = baseObj as  CameraList;
						if (object.Equals(obj, null))
						{
							obj = new CameraList(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "CameraList");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class CameraListClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						CameraList emptyInstance = new CameraList(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				public class AnimationList : EarthView.World.Core.BaseObject
				{
					public AnimationList() : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						Create("AnimationList",  null);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_AnimationList_push_ev_bool_EVString_CAnimation(IntPtr pNativeObject, string key, ref IntPtr ref_val);

					public bool Push(string key, EarthView.World.Graphic.Animation ref_val)
					{
						byte ret=EarthView_World_Graphic_CSceneManager_AnimationList_push_ev_bool_EVString_CAnimation(this.NativeObject, key, ref ref_val.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_AnimationList_exist_ev_bool_EVString(IntPtr pNativeObject, string key);

					public bool Exist(string key)
					{
						byte ret=EarthView_World_Graphic_CSceneManager_AnimationList_exist_ev_bool_EVString(this.NativeObject, key);
						
						return Convert.ToBoolean(ret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_AnimationList_get_CAnimation_EVString(IntPtr pNativeObject, string key);

					public EarthView.World.Graphic.Animation Get(string key)
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_AnimationList_get_CAnimation_EVString(this.NativeObject, key);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.Animation csObj = new EarthView.World.Graphic.Animation(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CAnimation");
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Animation;
							csObj.BindNativeObject(__ptr, "CAnimation");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_AnimationList_erase_void_EVString(IntPtr pNativeObject, string key);

					public void Erase(string key)
					{
						EarthView_World_Graphic_CSceneManager_AnimationList_erase_void_EVString(this.NativeObject, key);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern ulong EarthView_World_Graphic_CSceneManager_AnimationList_size_ev_size_t(IntPtr pNativeObject);

					public ulong Size()
					{
						ulong ret=EarthView_World_Graphic_CSceneManager_AnimationList_size_ev_size_t(this.NativeObject);
						
						return ret;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_AnimationList_clear_void(IntPtr pNativeObject);

					public void Clear()
					{
						EarthView_World_Graphic_CSceneManager_AnimationList_clear_void(this.NativeObject);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_AnimationList_empty_ev_bool(IntPtr pNativeObject);

					public bool Empty()
					{
						byte ret=EarthView_World_Graphic_CSceneManager_AnimationList_empty_ev_bool(this.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadAnimationList = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadAnimationList = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadAnimationList = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadAnimationList = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadAnimationList = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadAnimationList = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadAnimationList = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadAnimationList = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadAnimationList = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadAnimationList = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadAnimationList = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadAnimationList = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::AnimationList", new AnimationListClassFactory());

					public AnimationList(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
						}
					}
					public static AnimationList FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						AnimationList obj = baseObj as  AnimationList;
						if (object.Equals(obj, null))
						{
							obj = new AnimationList(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "AnimationList");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class AnimationListClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						AnimationList emptyInstance = new AnimationList(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				public class MovableObjectMap : EarthView.World.Core.BaseObject
				{
					public MovableObjectMap() : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						Create("MovableObjectMap",  null);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_MovableObjectMap_push_ev_bool_EVString_CMovableObject(IntPtr pNativeObject, string key, ref IntPtr val);

					public bool Push(string key, EarthView.World.Graphic.MovableObject val)
					{
						byte ret=EarthView_World_Graphic_CSceneManager_MovableObjectMap_push_ev_bool_EVString_CMovableObject(this.NativeObject, key, ref val.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_MovableObjectMap_exist_ev_bool_EVString(IntPtr pNativeObject, string key);

					public bool Exist(string key)
					{
						byte ret=EarthView_World_Graphic_CSceneManager_MovableObjectMap_exist_ev_bool_EVString(this.NativeObject, key);
						
						return Convert.ToBoolean(ret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_MovableObjectMap_get_CMovableObject_EVString(IntPtr pNativeObject, string key);

					public EarthView.World.Graphic.MovableObject Get(string key)
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_MovableObjectMap_get_CMovableObject_EVString(this.NativeObject, key);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.MovableObject csObj = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CMovableObject");
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MovableObject;
							csObj.BindNativeObject(__ptr, "CMovableObject");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_MovableObjectMap_erase_void_EVString(IntPtr pNativeObject, string key);

					public void Erase(string key)
					{
						EarthView_World_Graphic_CSceneManager_MovableObjectMap_erase_void_EVString(this.NativeObject, key);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern ulong EarthView_World_Graphic_CSceneManager_MovableObjectMap_size_ev_size_t(IntPtr pNativeObject);

					public ulong Size()
					{
						ulong ret=EarthView_World_Graphic_CSceneManager_MovableObjectMap_size_ev_size_t(this.NativeObject);
						
						return ret;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_MovableObjectMap_clear_void(IntPtr pNativeObject);

					public void Clear()
					{
						EarthView_World_Graphic_CSceneManager_MovableObjectMap_clear_void(this.NativeObject);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_MovableObjectMap_empty_ev_bool(IntPtr pNativeObject);

					public bool Empty()
					{
						byte ret=EarthView_World_Graphic_CSceneManager_MovableObjectMap_empty_ev_bool(this.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadMovableObjectMap = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadMovableObjectMap = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadMovableObjectMap = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadMovableObjectMap = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadMovableObjectMap = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadMovableObjectMap = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadMovableObjectMap = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadMovableObjectMap = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadMovableObjectMap = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadMovableObjectMap = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadMovableObjectMap = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadMovableObjectMap = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::MovableObjectMap", new MovableObjectMapClassFactory());

					public MovableObjectMap(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
						}
					}
					public static MovableObjectMap FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						MovableObjectMap obj = baseObj as  MovableObjectMap;
						if (object.Equals(obj, null))
						{
							obj = new MovableObjectMap(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "MovableObjectMap");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class MovableObjectMapClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						MovableObjectMap emptyInstance = new MovableObjectMap(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createSceneNodeImpl_CallBack_CSceneNode();

				protected createSceneNodeImpl_CallBack_CSceneNode m_createSceneNodeImpl_CallBack_CSceneNode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createSceneNodeImpl_CSceneNode_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 创建场景节点的实现函数                
				/// </summary>
				/// <param name="name">节点名称</param>
				/// <returns>场景节点</returns>
				protected virtual EarthView.World.Graphic.SceneNode CreateSceneNodeImpl_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createSceneNodeImpl_CSceneNode_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createSceneNodeImpl_CSceneNode_Function()
				{
					EarthView.World.Graphic.SceneNode csret=CreateSceneNodeImpl();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createSceneNodeImpl_CSceneNode(IntPtr pNativeObject);

				/// <summary>
				/// 创建场景节点的实现函数                
				/// </summary>
				/// <param name="name">节点名称</param>
				/// <returns>场景节点</returns>
				protected virtual EarthView.World.Graphic.SceneNode CreateSceneNodeImpl()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createSceneNodeImpl_CSceneNode(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createSceneNodeImpl_CallBack_CSceneNode_EVString(ref IntPtr name);

				protected createSceneNodeImpl_CallBack_CSceneNode_EVString m_createSceneNodeImpl_CallBack_CSceneNode_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createSceneNodeImpl_CSceneNode_EVString_NoVirtual(IntPtr pNativeObject, string name);

				protected virtual EarthView.World.Graphic.SceneNode CreateSceneNodeImpl_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createSceneNodeImpl_CSceneNode_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createSceneNodeImpl_CSceneNode_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.SceneNode csret=CreateSceneNodeImpl(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createSceneNodeImpl_CSceneNode_EVString(IntPtr pNativeObject, string name);

				protected virtual EarthView.World.Graphic.SceneNode CreateSceneNodeImpl(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createSceneNodeImpl_CSceneNode_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getHeightMapRendering_ev_bool(IntPtr pNativeObject);

				protected bool GetHeightMapRendering()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getHeightMapRendering_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				/// <summary>
				/// 存储光源信息
				/// 用于追踪光源改变，原为struct
				/// </summary>
				public class LightInfo : EarthView.World.Core.BaseObject
				{
					private EarthView.World.Graphic.Light lightField;
					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr Get_EarthView_World_Graphic_CSceneManager_LightInfo_light(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_LightInfo_light( IntPtr pObject, IntPtr value );

					public 					EarthView.World.Graphic.Light Light
					{
						get
						{
							IntPtr __ptr = Get_EarthView_World_Graphic_CSceneManager_LightInfo_light(this.NativeObject);
							
							if(__ptr==IntPtr.Zero)
							{
							return null;
							}
							if(!object.Equals(lightField, null)){
								lightField.NativeObject = __ptr;
								return lightField;
							}
							EarthView.World.Graphic.Light csObj = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
							csObj.BindNativeObject(__ptr, "CLight");
							csObj.Delegate = true;
							IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
							if (csObjClassFactory != null)
							{
								csObj.Delegate = true;
								csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Light;
								csObj.BindNativeObject(__ptr, "CLight");
								csObj.Delegate = true;
							}
							return csObj;
							
						}

						set
						{
							lightField = value;
							Set_EarthView_World_Graphic_CSceneManager_LightInfo_light( this.NativeObject,object.Equals(value, null) ? IntPtr.Zero : value.NativeObject );
						}
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern int Get_EarthView_World_Graphic_CSceneManager_LightInfo_type(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_LightInfo_type( IntPtr pObject, int value );

					public 					int EVType
					{
						get
						{
							int ret=Get_EarthView_World_Graphic_CSceneManager_LightInfo_type(this.NativeObject);
							
							return ret;
							
						}

						set
						{
							Set_EarthView_World_Graphic_CSceneManager_LightInfo_type(this.NativeObject,value);
						}
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern double Get_EarthView_World_Graphic_CSceneManager_LightInfo_range(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_LightInfo_range( IntPtr pObject, double value );

					public 					double Range
					{
						get
						{
							double ret=Get_EarthView_World_Graphic_CSceneManager_LightInfo_range(this.NativeObject);
							
							return ret;
							
						}

						set
						{
							Set_EarthView_World_Graphic_CSceneManager_LightInfo_range(this.NativeObject,value);
						}
					}

					private EarthView.World.Spatial.Math.Vector3 positionField;
					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr Get_EarthView_World_Graphic_CSceneManager_LightInfo_position(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_LightInfo_position( IntPtr pObject, IntPtr value );

					public 					EarthView.World.Spatial.Math.Vector3 Position
					{
						get
						{
							IntPtr __ptr = Get_EarthView_World_Graphic_CSceneManager_LightInfo_position(this.NativeObject);
							
							if(__ptr==IntPtr.Zero)
							{
							return null;
							}
							if(!object.Equals(positionField, null)){
								positionField.NativeObject = __ptr;
								return positionField;
							}
							EarthView.World.Spatial.Math.Vector3 csObj = new EarthView.World.Spatial.Math.Vector3(CreatedWhenConstruct.CWC_NotToCreate);
							csObj.BindNativeObject(__ptr, "CVector3");
							csObj.Delegate = true;
							IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
							if (csObjClassFactory != null)
							{
								csObj.Delegate = true;
								csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.Vector3;
								csObj.BindNativeObject(__ptr, "CVector3");
								csObj.Delegate = true;
							}
							return csObj;
							
						}

						set
						{
							positionField = value;
							Set_EarthView_World_Graphic_CSceneManager_LightInfo_position( this.NativeObject,object.Equals(value, null) ? IntPtr.Zero : value.NativeObject );
						}
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern uint Get_EarthView_World_Graphic_CSceneManager_LightInfo_lightMask(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_LightInfo_lightMask( IntPtr pObject, uint value );

					public 					uint LightMask
					{
						get
						{
							uint ret=Get_EarthView_World_Graphic_CSceneManager_LightInfo_lightMask(this.NativeObject);
							
							return ret;
							
						}

						set
						{
							Set_EarthView_World_Graphic_CSceneManager_LightInfo_lightMask(this.NativeObject,value);
						}
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_LightInfo_OperatorEquals_ev_bool_LightInfo(IntPtr pNativeObject, IntPtr rhs);

					public 					static bool operator ==(EarthView.World.Graphic.SceneManager.LightInfo mLightInfo,EarthView.World.Graphic.SceneManager.LightInfo rhs)
					{
						byte ret=EarthView_World_Graphic_CSceneManager_LightInfo_OperatorEquals_ev_bool_LightInfo(mLightInfo.NativeObject, object.Equals(rhs, null) ? IntPtr.Zero : rhs.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_LightInfo_OperatorNotEquals_ev_bool_LightInfo(IntPtr pNativeObject, IntPtr rhs);

					public 					static bool operator !=(EarthView.World.Graphic.SceneManager.LightInfo mLightInfo,EarthView.World.Graphic.SceneManager.LightInfo rhs)
					{
						byte ret=EarthView_World_Graphic_CSceneManager_LightInfo_OperatorNotEquals_ev_bool_LightInfo(mLightInfo.NativeObject, object.Equals(rhs, null) ? IntPtr.Zero : rhs.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}

					public LightInfo() : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						Create("LightInfo",  null);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}
					#if DEBUG 
						#if Windows 
							private static bool bLoadLightInfo = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadLightInfo = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadLightInfo = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadLightInfo = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadLightInfo = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadLightInfo = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadLightInfo = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadLightInfo = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadLightInfo = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadLightInfo = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadLightInfo = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadLightInfo = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::LightInfo", new LightInfoClassFactory());

					public LightInfo(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
						}
					}
					public static LightInfo FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						LightInfo obj = baseObj as  LightInfo;
						if (object.Equals(obj, null))
						{
							obj = new LightInfo(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "LightInfo");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class LightInfoClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						LightInfo emptyInstance = new LightInfo(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void initRenderQueue_CallBack_void();

				protected initRenderQueue_CallBack_void m_initRenderQueue_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_initRenderQueue_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 初始化渲染队列
				/// 内部方法
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				protected virtual void InitRenderQueue_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_initRenderQueue_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_initRenderQueue_void_Function()
				{
					InitRenderQueue();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_initRenderQueue_void(IntPtr pNativeObject);

				/// <summary>
				/// 初始化渲染队列
				/// 内部方法
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				protected virtual void InitRenderQueue()
				{
					EarthView_World_Graphic_CSceneManager_initRenderQueue_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr deriveShadowCasterPass_CallBack_CPass_CPass(IntPtr pass);

				protected deriveShadowCasterPass_CallBack_CPass_CPass m_deriveShadowCasterPass_CallBack_CPass_CPass;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_deriveShadowCasterPass_CPass_CPass_NoVirtual(IntPtr pNativeObject, IntPtr pass);

				protected virtual EarthView.World.Graphic.Pass DeriveShadowCasterPass_NoVirtual(EarthView.World.Graphic.Pass pass)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_deriveShadowCasterPass_CPass_CPass_NoVirtual(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Pass csObj = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CPass");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Pass;
						csObj.BindNativeObject(__ptr, "CPass");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_deriveShadowCasterPass_CPass_CPass_Function(IntPtr pass)
				{
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					
					EarthView.World.Graphic.Pass csret=DeriveShadowCasterPass(csobj_pass);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_deriveShadowCasterPass_CPass_CPass(IntPtr pNativeObject, IntPtr pass);

				protected virtual EarthView.World.Graphic.Pass DeriveShadowCasterPass(EarthView.World.Graphic.Pass pass)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_deriveShadowCasterPass_CPass_CPass(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Pass csObj = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CPass");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Pass;
						csObj.BindNativeObject(__ptr, "CPass");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr deriveShadowReceiverPass_CallBack_CPass_CPass(IntPtr pass);

				protected deriveShadowReceiverPass_CallBack_CPass_CPass m_deriveShadowReceiverPass_CallBack_CPass_CPass;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_deriveShadowReceiverPass_CPass_CPass_NoVirtual(IntPtr pNativeObject, IntPtr pass);

				protected virtual EarthView.World.Graphic.Pass DeriveShadowReceiverPass_NoVirtual(EarthView.World.Graphic.Pass pass)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_deriveShadowReceiverPass_CPass_CPass_NoVirtual(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Pass csObj = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CPass");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Pass;
						csObj.BindNativeObject(__ptr, "CPass");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_deriveShadowReceiverPass_CPass_CPass_Function(IntPtr pass)
				{
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					
					EarthView.World.Graphic.Pass csret=DeriveShadowReceiverPass(csobj_pass);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_deriveShadowReceiverPass_CPass_CPass(IntPtr pNativeObject, IntPtr pass);

				protected virtual EarthView.World.Graphic.Pass DeriveShadowReceiverPass(EarthView.World.Graphic.Pass pass)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_deriveShadowReceiverPass_CPass_CPass(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Pass csObj = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CPass");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Pass;
						csObj.BindNativeObject(__ptr, "CPass");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte validatePassForRendering_CallBack_ev_bool_CPass(IntPtr pass);

				protected validatePassForRendering_CallBack_ev_bool_CPass m_validatePassForRendering_CallBack_ev_bool_CPass;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_validatePassForRendering_ev_bool_CPass_NoVirtual(IntPtr pNativeObject, IntPtr pass);

				protected virtual bool ValidatePassForRendering_NoVirtual(EarthView.World.Graphic.Pass pass)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_validatePassForRendering_ev_bool_CPass_NoVirtual(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_validatePassForRendering_ev_bool_CPass_Function(IntPtr pass)
				{
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					
					bool csret=ValidatePassForRendering(csobj_pass);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_validatePassForRendering_ev_bool_CPass(IntPtr pNativeObject, IntPtr pass);

				protected virtual bool ValidatePassForRendering(EarthView.World.Graphic.Pass pass)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_validatePassForRendering_ev_bool_CPass(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte validateRenderableForRendering_CallBack_ev_bool_CPass_CRenderable(IntPtr pass, IntPtr rend);

				protected validateRenderableForRendering_CallBack_ev_bool_CPass_CRenderable m_validateRenderableForRendering_CallBack_ev_bool_CPass_CRenderable;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_validateRenderableForRendering_ev_bool_CPass_CRenderable_NoVirtual(IntPtr pNativeObject, IntPtr pass, IntPtr rend);

				protected virtual bool ValidateRenderableForRendering_NoVirtual(EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Renderable rend)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_validateRenderableForRendering_ev_bool_CPass_CRenderable_NoVirtual(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_validateRenderableForRendering_ev_bool_CPass_CRenderable_Function(IntPtr pass, IntPtr rend)
				{
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					EarthView.World.Graphic.Renderable csobj_rend = new EarthView.World.Graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_rend.BindNativeObject(rend,"CRenderable");
					csobj_rend.Delegate = true;
					IClassFactory csobj_rendClassFactory = GlobalClassFactoryMap.Get(csobj_rend.GetCppInstanceTypeName());
					if (csobj_rendClassFactory != null)
					{
						csobj_rend.Delegate = true;
						csobj_rend = csobj_rendClassFactory.Create() as EarthView.World.Graphic.Renderable;
						csobj_rend.BindNativeObject(rend, "CRenderable");
						csobj_rend.Delegate = true;
					}
					
					bool csret=ValidateRenderableForRendering(csobj_pass, csobj_rend);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_validateRenderableForRendering_ev_bool_CPass_CRenderable(IntPtr pNativeObject, IntPtr pass, IntPtr rend);

				protected virtual bool ValidateRenderableForRendering(EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Renderable rend)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_validateRenderableForRendering_ev_bool_CPass_CRenderable(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createSkyboxPlane_CallBack_CMeshPtr_BoxPlane_Real_CQuaternion_EVString(EarthView.World.Graphic.SceneManager.BOXPLANE bp, double distance, IntPtr orientation, ref IntPtr groupName);

				protected createSkyboxPlane_CallBack_CMeshPtr_BoxPlane_Real_CQuaternion_EVString m_createSkyboxPlane_CallBack_CMeshPtr_BoxPlane_Real_CQuaternion_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createSkyboxPlane_CMeshPtr_BoxPlane_Real_CQuaternion_EVString_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.SceneManager.BOXPLANE bp, double distance, IntPtr orientation, string groupName);

				protected virtual EarthView.World.Graphic.MeshPtr CreateSkyboxPlane_NoVirtual(EarthView.World.Graphic.SceneManager.BOXPLANE bp, double distance, EarthView.World.Spatial.Math.Quaternion orientation, string groupName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createSkyboxPlane_CMeshPtr_BoxPlane_Real_CQuaternion_EVString_NoVirtual(this.NativeObject, bp, distance, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, groupName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.MeshPtr csObj = new EarthView.World.Graphic.MeshPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMeshPtr");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MeshPtr;
						csObj.BindNativeObject(__ptr, "CMeshPtr");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createSkyboxPlane_CMeshPtr_BoxPlane_Real_CQuaternion_EVString_Function(EarthView.World.Graphic.SceneManager.BOXPLANE bp, double distance, IntPtr orientation, ref IntPtr groupName)
				{
					EarthView.World.Spatial.Math.Quaternion csobj_orientation = new EarthView.World.Spatial.Math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_orientation.BindNativeObject(orientation,"CQuaternion");
					csobj_orientation.Delegate = true;
					IClassFactory csobj_orientationClassFactory = GlobalClassFactoryMap.Get(csobj_orientation.GetCppInstanceTypeName());
					if (csobj_orientationClassFactory != null)
					{
						csobj_orientation.Delegate = true;
						csobj_orientation = csobj_orientationClassFactory.Create() as EarthView.World.Spatial.Math.Quaternion;
						csobj_orientation.BindNativeObject(orientation, "CQuaternion");
						csobj_orientation.Delegate = true;
					}
					string strgroupName= Marshal.PtrToStringAnsi(groupName);
					ClassFactory.FreeString(ref groupName);
					
					EarthView.World.Graphic.MeshPtr csret=CreateSkyboxPlane(bp, distance, csobj_orientation, strgroupName);
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createSkyboxPlane_CMeshPtr_BoxPlane_Real_CQuaternion_EVString(IntPtr pNativeObject, EarthView.World.Graphic.SceneManager.BOXPLANE bp, double distance, IntPtr orientation, string groupName);

				protected virtual EarthView.World.Graphic.MeshPtr CreateSkyboxPlane(EarthView.World.Graphic.SceneManager.BOXPLANE bp, double distance, EarthView.World.Spatial.Math.Quaternion orientation, string groupName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createSkyboxPlane_CMeshPtr_BoxPlane_Real_CQuaternion_EVString(this.NativeObject, bp, distance, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, groupName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.MeshPtr csObj = new EarthView.World.Graphic.MeshPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMeshPtr");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MeshPtr;
						csObj.BindNativeObject(__ptr, "CMeshPtr");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createSkydomePlane_CallBack_CMeshPtr_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(EarthView.World.Graphic.SceneManager.BOXPLANE bp, double curvature, double tiling, double distance, IntPtr orientation, int xsegments, int ysegments, int ySegmentsToKeep, ref IntPtr groupName);

				protected createSkydomePlane_CallBack_CMeshPtr_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString m_createSkydomePlane_CallBack_CMeshPtr_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createSkydomePlane_CMeshPtr_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.SceneManager.BOXPLANE bp, double curvature, double tiling, double distance, IntPtr orientation, int xsegments, int ysegments, int ySegmentsToKeep, string groupName);

				protected virtual EarthView.World.Graphic.MeshPtr CreateSkydomePlane_NoVirtual(EarthView.World.Graphic.SceneManager.BOXPLANE bp, double curvature, double tiling, double distance, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments, int ysegments, int ySegmentsToKeep, string groupName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createSkydomePlane_CMeshPtr_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_NoVirtual(this.NativeObject, bp, curvature, tiling, distance, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments, ysegments, ySegmentsToKeep, groupName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.MeshPtr csObj = new EarthView.World.Graphic.MeshPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMeshPtr");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MeshPtr;
						csObj.BindNativeObject(__ptr, "CMeshPtr");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createSkydomePlane_CMeshPtr_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_Function(EarthView.World.Graphic.SceneManager.BOXPLANE bp, double curvature, double tiling, double distance, IntPtr orientation, int xsegments, int ysegments, int ySegmentsToKeep, ref IntPtr groupName)
				{
					EarthView.World.Spatial.Math.Quaternion csobj_orientation = new EarthView.World.Spatial.Math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_orientation.BindNativeObject(orientation,"CQuaternion");
					csobj_orientation.Delegate = true;
					IClassFactory csobj_orientationClassFactory = GlobalClassFactoryMap.Get(csobj_orientation.GetCppInstanceTypeName());
					if (csobj_orientationClassFactory != null)
					{
						csobj_orientation.Delegate = true;
						csobj_orientation = csobj_orientationClassFactory.Create() as EarthView.World.Spatial.Math.Quaternion;
						csobj_orientation.BindNativeObject(orientation, "CQuaternion");
						csobj_orientation.Delegate = true;
					}
					string strgroupName= Marshal.PtrToStringAnsi(groupName);
					ClassFactory.FreeString(ref groupName);
					
					EarthView.World.Graphic.MeshPtr csret=CreateSkydomePlane(bp, curvature, tiling, distance, csobj_orientation, xsegments, ysegments, ySegmentsToKeep, strgroupName);
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createSkydomePlane_CMeshPtr_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(IntPtr pNativeObject, EarthView.World.Graphic.SceneManager.BOXPLANE bp, double curvature, double tiling, double distance, IntPtr orientation, int xsegments, int ysegments, int ySegmentsToKeep, string groupName);

				protected virtual EarthView.World.Graphic.MeshPtr CreateSkydomePlane(EarthView.World.Graphic.SceneManager.BOXPLANE bp, double curvature, double tiling, double distance, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments, int ysegments, int ySegmentsToKeep, string groupName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createSkydomePlane_CMeshPtr_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(this.NativeObject, bp, curvature, tiling, distance, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments, ysegments, ySegmentsToKeep, groupName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.MeshPtr csObj = new EarthView.World.Graphic.MeshPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMeshPtr");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MeshPtr;
						csObj.BindNativeObject(__ptr, "CMeshPtr");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void useRenderableViewProjMode_CallBack_void_CRenderable_ev_bool(IntPtr pRend, bool fixedFunction);

				protected useRenderableViewProjMode_CallBack_void_CRenderable_ev_bool m_useRenderableViewProjMode_CallBack_void_CRenderable_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_useRenderableViewProjMode_void_CRenderable_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr pRend, byte fixedFunction);

				protected virtual void UseRenderableViewProjMode_NoVirtual(EarthView.World.Graphic.Renderable pRend, bool fixedFunction)
				{
					EarthView_World_Graphic_CSceneManager_useRenderableViewProjMode_void_CRenderable_ev_bool_NoVirtual(this.NativeObject, object.Equals(pRend, null) ? IntPtr.Zero : pRend.NativeObject, Convert.ToByte(fixedFunction));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_useRenderableViewProjMode_void_CRenderable_ev_bool_Function(IntPtr pRend, bool fixedFunction)
				{
					EarthView.World.Graphic.Renderable csobj_pRend = new EarthView.World.Graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pRend.BindNativeObject(pRend,"CRenderable");
					csobj_pRend.Delegate = true;
					IClassFactory csobj_pRendClassFactory = GlobalClassFactoryMap.Get(csobj_pRend.GetCppInstanceTypeName());
					if (csobj_pRendClassFactory != null)
					{
						csobj_pRend.Delegate = true;
						csobj_pRend = csobj_pRendClassFactory.Create() as EarthView.World.Graphic.Renderable;
						csobj_pRend.BindNativeObject(pRend, "CRenderable");
						csobj_pRend.Delegate = true;
					}
					
					UseRenderableViewProjMode(csobj_pRend, fixedFunction);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_useRenderableViewProjMode_void_CRenderable_ev_bool(IntPtr pNativeObject, IntPtr pRend, byte fixedFunction);

				protected virtual void UseRenderableViewProjMode(EarthView.World.Graphic.Renderable pRend, bool fixedFunction)
				{
					EarthView_World_Graphic_CSceneManager_useRenderableViewProjMode_void_CRenderable_ev_bool(this.NativeObject, object.Equals(pRend, null) ? IntPtr.Zero : pRend.NativeObject, Convert.ToByte(fixedFunction));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void resetViewProjMode_CallBack_void_ev_bool(bool fixedFunction);

				protected resetViewProjMode_CallBack_void_ev_bool m_resetViewProjMode_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_resetViewProjMode_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte fixedFunction);

				protected virtual void ResetViewProjMode_NoVirtual(bool fixedFunction)
				{
					EarthView_World_Graphic_CSceneManager_resetViewProjMode_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(fixedFunction));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_resetViewProjMode_void_ev_bool_Function(bool fixedFunction)
				{
					ResetViewProjMode(fixedFunction);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_resetViewProjMode_void_ev_bool(IntPtr pNativeObject, byte fixedFunction);

				protected virtual void ResetViewProjMode(bool fixedFunction)
				{
					EarthView_World_Graphic_CSceneManager_resetViewProjMode_void_ev_bool(this.NativeObject, Convert.ToByte(fixedFunction));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void firePreRenderQueues_CallBack_void();

				protected firePreRenderQueues_CallBack_void m_firePreRenderQueues_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_firePreRenderQueues_void_NoVirtual(IntPtr pNativeObject);

				protected virtual void FirePreRenderQueues_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_firePreRenderQueues_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_firePreRenderQueues_void_Function()
				{
					FirePreRenderQueues();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_firePreRenderQueues_void(IntPtr pNativeObject);

				protected virtual void FirePreRenderQueues()
				{
					EarthView_World_Graphic_CSceneManager_firePreRenderQueues_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void firePostRenderQueues_CallBack_void();

				protected firePostRenderQueues_CallBack_void m_firePostRenderQueues_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_firePostRenderQueues_void_NoVirtual(IntPtr pNativeObject);

				protected virtual void FirePostRenderQueues_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_firePostRenderQueues_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_firePostRenderQueues_void_Function()
				{
					FirePostRenderQueues();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_firePostRenderQueues_void(IntPtr pNativeObject);

				protected virtual void FirePostRenderQueues()
				{
					EarthView_World_Graphic_CSceneManager_firePostRenderQueues_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte fireRenderQueueStarted_CallBack_ev_bool_ev_uint8_EVString(byte id, ref IntPtr invocation);

				protected fireRenderQueueStarted_CallBack_ev_bool_ev_uint8_EVString m_fireRenderQueueStarted_CallBack_ev_bool_ev_uint8_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_fireRenderQueueStarted_ev_bool_ev_uint8_EVString_NoVirtual(IntPtr pNativeObject, byte id, string invocation);

				protected virtual bool FireRenderQueueStarted_NoVirtual(byte id, string invocation)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_fireRenderQueueStarted_ev_bool_ev_uint8_EVString_NoVirtual(this.NativeObject, id, invocation);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_fireRenderQueueStarted_ev_bool_ev_uint8_EVString_Function(byte id, ref IntPtr invocation)
				{
					string strinvocation= Marshal.PtrToStringAnsi(invocation);
					ClassFactory.FreeString(ref invocation);
					
					bool csret=FireRenderQueueStarted(id, strinvocation);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_fireRenderQueueStarted_ev_bool_ev_uint8_EVString(IntPtr pNativeObject, byte id, string invocation);

				protected virtual bool FireRenderQueueStarted(byte id, string invocation)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_fireRenderQueueStarted_ev_bool_ev_uint8_EVString(this.NativeObject, id, invocation);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte fireRenderQueueEnded_CallBack_ev_bool_ev_uint8_EVString(byte id, ref IntPtr invocation);

				protected fireRenderQueueEnded_CallBack_ev_bool_ev_uint8_EVString m_fireRenderQueueEnded_CallBack_ev_bool_ev_uint8_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_fireRenderQueueEnded_ev_bool_ev_uint8_EVString_NoVirtual(IntPtr pNativeObject, byte id, string invocation);

				protected virtual bool FireRenderQueueEnded_NoVirtual(byte id, string invocation)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_fireRenderQueueEnded_ev_bool_ev_uint8_EVString_NoVirtual(this.NativeObject, id, invocation);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_fireRenderQueueEnded_ev_bool_ev_uint8_EVString_Function(byte id, ref IntPtr invocation)
				{
					string strinvocation= Marshal.PtrToStringAnsi(invocation);
					ClassFactory.FreeString(ref invocation);
					
					bool csret=FireRenderQueueEnded(id, strinvocation);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_fireRenderQueueEnded_ev_bool_ev_uint8_EVString(IntPtr pNativeObject, byte id, string invocation);

				protected virtual bool FireRenderQueueEnded(byte id, string invocation)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_fireRenderQueueEnded_ev_bool_ev_uint8_EVString(this.NativeObject, id, invocation);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void fireRenderSingleObjectStarted_CallBack_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(IntPtr rend, IntPtr pass, IntPtr source, IntPtr pLightList, bool suppressRenderStateChanges);

				protected fireRenderSingleObjectStarted_CallBack_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool m_fireRenderSingleObjectStarted_CallBack_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_fireRenderSingleObjectStarted_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr source, IntPtr pLightList, byte suppressRenderStateChanges);

				protected virtual void FireRenderSingleObjectStarted_NoVirtual(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.AutoParamDataSource source, EarthView.World.Graphic.LightList pLightList, bool suppressRenderStateChanges)
				{
					EarthView_World_Graphic_CSceneManager_fireRenderSingleObjectStarted_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_NoVirtual(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(source, null) ? IntPtr.Zero : source.NativeObject, object.Equals(pLightList, null) ? IntPtr.Zero : pLightList.NativeObject, Convert.ToByte(suppressRenderStateChanges));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_fireRenderSingleObjectStarted_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_Function(IntPtr rend, IntPtr pass, IntPtr source, IntPtr pLightList, bool suppressRenderStateChanges)
				{
					EarthView.World.Graphic.Renderable csobj_rend = new EarthView.World.Graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_rend.BindNativeObject(rend,"CRenderable");
					csobj_rend.Delegate = true;
					IClassFactory csobj_rendClassFactory = GlobalClassFactoryMap.Get(csobj_rend.GetCppInstanceTypeName());
					if (csobj_rendClassFactory != null)
					{
						csobj_rend.Delegate = true;
						csobj_rend = csobj_rendClassFactory.Create() as EarthView.World.Graphic.Renderable;
						csobj_rend.BindNativeObject(rend, "CRenderable");
						csobj_rend.Delegate = true;
					}
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					EarthView.World.Graphic.AutoParamDataSource csobj_source = new EarthView.World.Graphic.AutoParamDataSource(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_source.BindNativeObject(source,"CAutoParamDataSource");
					csobj_source.Delegate = true;
					IClassFactory csobj_sourceClassFactory = GlobalClassFactoryMap.Get(csobj_source.GetCppInstanceTypeName());
					if (csobj_sourceClassFactory != null)
					{
						csobj_source.Delegate = true;
						csobj_source = csobj_sourceClassFactory.Create() as EarthView.World.Graphic.AutoParamDataSource;
						csobj_source.BindNativeObject(source, "CAutoParamDataSource");
						csobj_source.Delegate = true;
					}
					EarthView.World.Graphic.LightList csobj_pLightList = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pLightList.BindNativeObject(pLightList,"LightList");
					csobj_pLightList.Delegate = true;
					IClassFactory csobj_pLightListClassFactory = GlobalClassFactoryMap.Get(csobj_pLightList.GetCppInstanceTypeName());
					if (csobj_pLightListClassFactory != null)
					{
						csobj_pLightList.Delegate = true;
						csobj_pLightList = csobj_pLightListClassFactory.Create() as EarthView.World.Graphic.LightList;
						csobj_pLightList.BindNativeObject(pLightList, "LightList");
						csobj_pLightList.Delegate = true;
					}
					
					FireRenderSingleObjectStarted(csobj_rend, csobj_pass, csobj_source, csobj_pLightList, suppressRenderStateChanges);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_fireRenderSingleObjectStarted_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr source, IntPtr pLightList, byte suppressRenderStateChanges);

				protected virtual void FireRenderSingleObjectStarted(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.AutoParamDataSource source, EarthView.World.Graphic.LightList pLightList, bool suppressRenderStateChanges)
				{
					EarthView_World_Graphic_CSceneManager_fireRenderSingleObjectStarted_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(source, null) ? IntPtr.Zero : source.NativeObject, object.Equals(pLightList, null) ? IntPtr.Zero : pLightList.NativeObject, Convert.ToByte(suppressRenderStateChanges));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void fireRenderSingleObjectEnd_CallBack_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(IntPtr rend, IntPtr pass, IntPtr source, IntPtr pLightList, bool suppressRenderStateChanges);

				protected fireRenderSingleObjectEnd_CallBack_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool m_fireRenderSingleObjectEnd_CallBack_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_fireRenderSingleObjectEnd_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr source, IntPtr pLightList, byte suppressRenderStateChanges);

				protected virtual void FireRenderSingleObjectEnd_NoVirtual(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.AutoParamDataSource source, EarthView.World.Graphic.LightList pLightList, bool suppressRenderStateChanges)
				{
					EarthView_World_Graphic_CSceneManager_fireRenderSingleObjectEnd_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_NoVirtual(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(source, null) ? IntPtr.Zero : source.NativeObject, object.Equals(pLightList, null) ? IntPtr.Zero : pLightList.NativeObject, Convert.ToByte(suppressRenderStateChanges));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_fireRenderSingleObjectEnd_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_Function(IntPtr rend, IntPtr pass, IntPtr source, IntPtr pLightList, bool suppressRenderStateChanges)
				{
					EarthView.World.Graphic.Renderable csobj_rend = new EarthView.World.Graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_rend.BindNativeObject(rend,"CRenderable");
					csobj_rend.Delegate = true;
					IClassFactory csobj_rendClassFactory = GlobalClassFactoryMap.Get(csobj_rend.GetCppInstanceTypeName());
					if (csobj_rendClassFactory != null)
					{
						csobj_rend.Delegate = true;
						csobj_rend = csobj_rendClassFactory.Create() as EarthView.World.Graphic.Renderable;
						csobj_rend.BindNativeObject(rend, "CRenderable");
						csobj_rend.Delegate = true;
					}
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					EarthView.World.Graphic.AutoParamDataSource csobj_source = new EarthView.World.Graphic.AutoParamDataSource(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_source.BindNativeObject(source,"CAutoParamDataSource");
					csobj_source.Delegate = true;
					IClassFactory csobj_sourceClassFactory = GlobalClassFactoryMap.Get(csobj_source.GetCppInstanceTypeName());
					if (csobj_sourceClassFactory != null)
					{
						csobj_source.Delegate = true;
						csobj_source = csobj_sourceClassFactory.Create() as EarthView.World.Graphic.AutoParamDataSource;
						csobj_source.BindNativeObject(source, "CAutoParamDataSource");
						csobj_source.Delegate = true;
					}
					EarthView.World.Graphic.LightList csobj_pLightList = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pLightList.BindNativeObject(pLightList,"LightList");
					csobj_pLightList.Delegate = true;
					IClassFactory csobj_pLightListClassFactory = GlobalClassFactoryMap.Get(csobj_pLightList.GetCppInstanceTypeName());
					if (csobj_pLightListClassFactory != null)
					{
						csobj_pLightList.Delegate = true;
						csobj_pLightList = csobj_pLightListClassFactory.Create() as EarthView.World.Graphic.LightList;
						csobj_pLightList.BindNativeObject(pLightList, "LightList");
						csobj_pLightList.Delegate = true;
					}
					
					FireRenderSingleObjectEnd(csobj_rend, csobj_pass, csobj_source, csobj_pLightList, suppressRenderStateChanges);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_fireRenderSingleObjectEnd_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr source, IntPtr pLightList, byte suppressRenderStateChanges);

				protected virtual void FireRenderSingleObjectEnd(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.AutoParamDataSource source, EarthView.World.Graphic.LightList pLightList, bool suppressRenderStateChanges)
				{
					EarthView_World_Graphic_CSceneManager_fireRenderSingleObjectEnd_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(source, null) ? IntPtr.Zero : source.NativeObject, object.Equals(pLightList, null) ? IntPtr.Zero : pLightList.NativeObject, Convert.ToByte(suppressRenderStateChanges));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void fireShadowTexturesUpdated_CallBack_void_ev_size_t(ulong numberOfShadowTextures);

				protected fireShadowTexturesUpdated_CallBack_void_ev_size_t m_fireShadowTexturesUpdated_CallBack_void_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_fireShadowTexturesUpdated_void_ev_size_t_NoVirtual(IntPtr pNativeObject, ulong numberOfShadowTextures);

				protected virtual void FireShadowTexturesUpdated_NoVirtual(ulong numberOfShadowTextures)
				{
					EarthView_World_Graphic_CSceneManager_fireShadowTexturesUpdated_void_ev_size_t_NoVirtual(this.NativeObject, numberOfShadowTextures);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_fireShadowTexturesUpdated_void_ev_size_t_Function(ulong numberOfShadowTextures)
				{
					FireShadowTexturesUpdated(numberOfShadowTextures);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_fireShadowTexturesUpdated_void_ev_size_t(IntPtr pNativeObject, ulong numberOfShadowTextures);

				protected virtual void FireShadowTexturesUpdated(ulong numberOfShadowTextures)
				{
					EarthView_World_Graphic_CSceneManager_fireShadowTexturesUpdated_void_ev_size_t(this.NativeObject, numberOfShadowTextures);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void fireShadowTexturesPreCaster_CallBack_void_CLight_CCamera_ev_size_t(IntPtr light, IntPtr camera, ulong iteration);

				protected fireShadowTexturesPreCaster_CallBack_void_CLight_CCamera_ev_size_t m_fireShadowTexturesPreCaster_CallBack_void_CLight_CCamera_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_fireShadowTexturesPreCaster_void_CLight_CCamera_ev_size_t_NoVirtual(IntPtr pNativeObject, IntPtr light, IntPtr camera, ulong iteration);

				protected virtual void FireShadowTexturesPreCaster_NoVirtual(EarthView.World.Graphic.Light light, EarthView.World.Graphic.Camera camera, ulong iteration)
				{
					EarthView_World_Graphic_CSceneManager_fireShadowTexturesPreCaster_void_CLight_CCamera_ev_size_t_NoVirtual(this.NativeObject, object.Equals(light, null) ? IntPtr.Zero : light.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject, iteration);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_fireShadowTexturesPreCaster_void_CLight_CCamera_ev_size_t_Function(IntPtr light, IntPtr camera, ulong iteration)
				{
					EarthView.World.Graphic.Light csobj_light = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_light.BindNativeObject(light,"CLight");
					csobj_light.Delegate = true;
					IClassFactory csobj_lightClassFactory = GlobalClassFactoryMap.Get(csobj_light.GetCppInstanceTypeName());
					if (csobj_lightClassFactory != null)
					{
						csobj_light.Delegate = true;
						csobj_light = csobj_lightClassFactory.Create() as EarthView.World.Graphic.Light;
						csobj_light.BindNativeObject(light, "CLight");
						csobj_light.Delegate = true;
					}
					EarthView.World.Graphic.Camera csobj_camera = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_camera.BindNativeObject(camera,"CCamera");
					csobj_camera.Delegate = true;
					IClassFactory csobj_cameraClassFactory = GlobalClassFactoryMap.Get(csobj_camera.GetCppInstanceTypeName());
					if (csobj_cameraClassFactory != null)
					{
						csobj_camera.Delegate = true;
						csobj_camera = csobj_cameraClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_camera.BindNativeObject(camera, "CCamera");
						csobj_camera.Delegate = true;
					}
					
					FireShadowTexturesPreCaster(csobj_light, csobj_camera, iteration);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_fireShadowTexturesPreCaster_void_CLight_CCamera_ev_size_t(IntPtr pNativeObject, IntPtr light, IntPtr camera, ulong iteration);

				protected virtual void FireShadowTexturesPreCaster(EarthView.World.Graphic.Light light, EarthView.World.Graphic.Camera camera, ulong iteration)
				{
					EarthView_World_Graphic_CSceneManager_fireShadowTexturesPreCaster_void_CLight_CCamera_ev_size_t(this.NativeObject, object.Equals(light, null) ? IntPtr.Zero : light.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject, iteration);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void fireShadowTexturesPreReceiver_CallBack_void_CLight_CFrustum(IntPtr light, IntPtr f);

				protected fireShadowTexturesPreReceiver_CallBack_void_CLight_CFrustum m_fireShadowTexturesPreReceiver_CallBack_void_CLight_CFrustum;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_fireShadowTexturesPreReceiver_void_CLight_CFrustum_NoVirtual(IntPtr pNativeObject, IntPtr light, IntPtr f);

				protected virtual void FireShadowTexturesPreReceiver_NoVirtual(EarthView.World.Graphic.Light light, EarthView.World.Graphic.Frustum f)
				{
					EarthView_World_Graphic_CSceneManager_fireShadowTexturesPreReceiver_void_CLight_CFrustum_NoVirtual(this.NativeObject, object.Equals(light, null) ? IntPtr.Zero : light.NativeObject, object.Equals(f, null) ? IntPtr.Zero : f.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_fireShadowTexturesPreReceiver_void_CLight_CFrustum_Function(IntPtr light, IntPtr f)
				{
					EarthView.World.Graphic.Light csobj_light = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_light.BindNativeObject(light,"CLight");
					csobj_light.Delegate = true;
					IClassFactory csobj_lightClassFactory = GlobalClassFactoryMap.Get(csobj_light.GetCppInstanceTypeName());
					if (csobj_lightClassFactory != null)
					{
						csobj_light.Delegate = true;
						csobj_light = csobj_lightClassFactory.Create() as EarthView.World.Graphic.Light;
						csobj_light.BindNativeObject(light, "CLight");
						csobj_light.Delegate = true;
					}
					EarthView.World.Graphic.Frustum csobj_f = new EarthView.World.Graphic.Frustum(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_f.BindNativeObject(f,"CFrustum");
					csobj_f.Delegate = true;
					IClassFactory csobj_fClassFactory = GlobalClassFactoryMap.Get(csobj_f.GetCppInstanceTypeName());
					if (csobj_fClassFactory != null)
					{
						csobj_f.Delegate = true;
						csobj_f = csobj_fClassFactory.Create() as EarthView.World.Graphic.Frustum;
						csobj_f.BindNativeObject(f, "CFrustum");
						csobj_f.Delegate = true;
					}
					
					FireShadowTexturesPreReceiver(csobj_light, csobj_f);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_fireShadowTexturesPreReceiver_void_CLight_CFrustum(IntPtr pNativeObject, IntPtr light, IntPtr f);

				protected virtual void FireShadowTexturesPreReceiver(EarthView.World.Graphic.Light light, EarthView.World.Graphic.Frustum f)
				{
					EarthView_World_Graphic_CSceneManager_fireShadowTexturesPreReceiver_void_CLight_CFrustum(this.NativeObject, object.Equals(light, null) ? IntPtr.Zero : light.NativeObject, object.Equals(f, null) ? IntPtr.Zero : f.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void firePreUpdateSceneGraph_CallBack_void_CCamera(IntPtr camera);

				protected firePreUpdateSceneGraph_CallBack_void_CCamera m_firePreUpdateSceneGraph_CallBack_void_CCamera;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_firePreUpdateSceneGraph_void_CCamera_NoVirtual(IntPtr pNativeObject, IntPtr camera);

				protected virtual void FirePreUpdateSceneGraph_NoVirtual(EarthView.World.Graphic.Camera camera)
				{
					EarthView_World_Graphic_CSceneManager_firePreUpdateSceneGraph_void_CCamera_NoVirtual(this.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_firePreUpdateSceneGraph_void_CCamera_Function(IntPtr camera)
				{
					EarthView.World.Graphic.Camera csobj_camera = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_camera.BindNativeObject(camera,"CCamera");
					csobj_camera.Delegate = true;
					IClassFactory csobj_cameraClassFactory = GlobalClassFactoryMap.Get(csobj_camera.GetCppInstanceTypeName());
					if (csobj_cameraClassFactory != null)
					{
						csobj_camera.Delegate = true;
						csobj_camera = csobj_cameraClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_camera.BindNativeObject(camera, "CCamera");
						csobj_camera.Delegate = true;
					}
					
					FirePreUpdateSceneGraph(csobj_camera);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_firePreUpdateSceneGraph_void_CCamera(IntPtr pNativeObject, IntPtr camera);

				protected virtual void FirePreUpdateSceneGraph(EarthView.World.Graphic.Camera camera)
				{
					EarthView_World_Graphic_CSceneManager_firePreUpdateSceneGraph_void_CCamera(this.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void firePostUpdateSceneGraph_CallBack_void_CCamera(IntPtr camera);

				protected firePostUpdateSceneGraph_CallBack_void_CCamera m_firePostUpdateSceneGraph_CallBack_void_CCamera;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_firePostUpdateSceneGraph_void_CCamera_NoVirtual(IntPtr pNativeObject, IntPtr camera);

				protected virtual void FirePostUpdateSceneGraph_NoVirtual(EarthView.World.Graphic.Camera camera)
				{
					EarthView_World_Graphic_CSceneManager_firePostUpdateSceneGraph_void_CCamera_NoVirtual(this.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_firePostUpdateSceneGraph_void_CCamera_Function(IntPtr camera)
				{
					EarthView.World.Graphic.Camera csobj_camera = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_camera.BindNativeObject(camera,"CCamera");
					csobj_camera.Delegate = true;
					IClassFactory csobj_cameraClassFactory = GlobalClassFactoryMap.Get(csobj_camera.GetCppInstanceTypeName());
					if (csobj_cameraClassFactory != null)
					{
						csobj_camera.Delegate = true;
						csobj_camera = csobj_cameraClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_camera.BindNativeObject(camera, "CCamera");
						csobj_camera.Delegate = true;
					}
					
					FirePostUpdateSceneGraph(csobj_camera);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_firePostUpdateSceneGraph_void_CCamera(IntPtr pNativeObject, IntPtr camera);

				protected virtual void FirePostUpdateSceneGraph(EarthView.World.Graphic.Camera camera)
				{
					EarthView_World_Graphic_CSceneManager_firePostUpdateSceneGraph_void_CCamera(this.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void firePreFindVisibleObjects_CallBack_void_CViewport(IntPtr v);

				protected firePreFindVisibleObjects_CallBack_void_CViewport m_firePreFindVisibleObjects_CallBack_void_CViewport;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_firePreFindVisibleObjects_void_CViewport_NoVirtual(IntPtr pNativeObject, IntPtr v);

				protected virtual void FirePreFindVisibleObjects_NoVirtual(EarthView.World.Graphic.Viewport v)
				{
					EarthView_World_Graphic_CSceneManager_firePreFindVisibleObjects_void_CViewport_NoVirtual(this.NativeObject, object.Equals(v, null) ? IntPtr.Zero : v.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_firePreFindVisibleObjects_void_CViewport_Function(IntPtr v)
				{
					EarthView.World.Graphic.Viewport csobj_v = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_v.BindNativeObject(v,"CViewport");
					csobj_v.Delegate = true;
					IClassFactory csobj_vClassFactory = GlobalClassFactoryMap.Get(csobj_v.GetCppInstanceTypeName());
					if (csobj_vClassFactory != null)
					{
						csobj_v.Delegate = true;
						csobj_v = csobj_vClassFactory.Create() as EarthView.World.Graphic.Viewport;
						csobj_v.BindNativeObject(v, "CViewport");
						csobj_v.Delegate = true;
					}
					
					FirePreFindVisibleObjects(csobj_v);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_firePreFindVisibleObjects_void_CViewport(IntPtr pNativeObject, IntPtr v);

				protected virtual void FirePreFindVisibleObjects(EarthView.World.Graphic.Viewport v)
				{
					EarthView_World_Graphic_CSceneManager_firePreFindVisibleObjects_void_CViewport(this.NativeObject, object.Equals(v, null) ? IntPtr.Zero : v.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void firePostFindVisibleObjects_CallBack_void_CViewport(IntPtr v);

				protected firePostFindVisibleObjects_CallBack_void_CViewport m_firePostFindVisibleObjects_CallBack_void_CViewport;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_firePostFindVisibleObjects_void_CViewport_NoVirtual(IntPtr pNativeObject, IntPtr v);

				protected virtual void FirePostFindVisibleObjects_NoVirtual(EarthView.World.Graphic.Viewport v)
				{
					EarthView_World_Graphic_CSceneManager_firePostFindVisibleObjects_void_CViewport_NoVirtual(this.NativeObject, object.Equals(v, null) ? IntPtr.Zero : v.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_firePostFindVisibleObjects_void_CViewport_Function(IntPtr v)
				{
					EarthView.World.Graphic.Viewport csobj_v = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_v.BindNativeObject(v,"CViewport");
					csobj_v.Delegate = true;
					IClassFactory csobj_vClassFactory = GlobalClassFactoryMap.Get(csobj_v.GetCppInstanceTypeName());
					if (csobj_vClassFactory != null)
					{
						csobj_v.Delegate = true;
						csobj_v = csobj_vClassFactory.Create() as EarthView.World.Graphic.Viewport;
						csobj_v.BindNativeObject(v, "CViewport");
						csobj_v.Delegate = true;
					}
					
					FirePostFindVisibleObjects(csobj_v);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_firePostFindVisibleObjects_void_CViewport(IntPtr pNativeObject, IntPtr v);

				protected virtual void FirePostFindVisibleObjects(EarthView.World.Graphic.Viewport v)
				{
					EarthView_World_Graphic_CSceneManager_firePostFindVisibleObjects_void_CViewport(this.NativeObject, object.Equals(v, null) ? IntPtr.Zero : v.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void fireSceneManagerDestroyed_CallBack_void();

				protected fireSceneManagerDestroyed_CallBack_void m_fireSceneManagerDestroyed_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_fireSceneManagerDestroyed_void_NoVirtual(IntPtr pNativeObject);

				protected virtual void FireSceneManagerDestroyed_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_fireSceneManagerDestroyed_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_fireSceneManagerDestroyed_void_Function()
				{
					FireSceneManagerDestroyed();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_fireSceneManagerDestroyed_void(IntPtr pNativeObject);

				protected virtual void FireSceneManagerDestroyed()
				{
					EarthView_World_Graphic_CSceneManager_fireSceneManagerDestroyed_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setViewport_CallBack_void_CViewport(IntPtr vp);

				protected setViewport_CallBack_void_CViewport m_setViewport_CallBack_void_CViewport;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setViewport_void_CViewport_NoVirtual(IntPtr pNativeObject, IntPtr vp);

				protected virtual void SetViewport_NoVirtual(EarthView.World.Graphic.Viewport vp)
				{
					EarthView_World_Graphic_CSceneManager_setViewport_void_CViewport_NoVirtual(this.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setViewport_void_CViewport_Function(IntPtr vp)
				{
					EarthView.World.Graphic.Viewport csobj_vp = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_vp.BindNativeObject(vp,"CViewport");
					csobj_vp.Delegate = true;
					IClassFactory csobj_vpClassFactory = GlobalClassFactoryMap.Get(csobj_vp.GetCppInstanceTypeName());
					if (csobj_vpClassFactory != null)
					{
						csobj_vp.Delegate = true;
						csobj_vp = csobj_vpClassFactory.Create() as EarthView.World.Graphic.Viewport;
						csobj_vp.BindNativeObject(vp, "CViewport");
						csobj_vp.Delegate = true;
					}
					
					SetViewport(csobj_vp);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setViewport_void_CViewport(IntPtr pNativeObject, IntPtr vp);

				protected virtual void SetViewport(EarthView.World.Graphic.Viewport vp)
				{
					EarthView_World_Graphic_CSceneManager_setViewport_void_CViewport(this.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void renderVisibleObjectsDefaultSequence_CallBack_void();

				protected renderVisibleObjectsDefaultSequence_CallBack_void m_renderVisibleObjectsDefaultSequence_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderVisibleObjectsDefaultSequence_void_NoVirtual(IntPtr pNativeObject);

				protected virtual void RenderVisibleObjectsDefaultSequence_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_renderVisibleObjectsDefaultSequence_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_renderVisibleObjectsDefaultSequence_void_Function()
				{
					RenderVisibleObjectsDefaultSequence();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderVisibleObjectsDefaultSequence_void(IntPtr pNativeObject);

				protected virtual void RenderVisibleObjectsDefaultSequence()
				{
					EarthView_World_Graphic_CSceneManager_renderVisibleObjectsDefaultSequence_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void renderVisibleObjectsCustomSequence_CallBack_void_CRenderQueueInvocationSequence(IntPtr s);

				protected renderVisibleObjectsCustomSequence_CallBack_void_CRenderQueueInvocationSequence m_renderVisibleObjectsCustomSequence_CallBack_void_CRenderQueueInvocationSequence;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderVisibleObjectsCustomSequence_void_CRenderQueueInvocationSequence_NoVirtual(IntPtr pNativeObject, IntPtr s);

				protected virtual void RenderVisibleObjectsCustomSequence_NoVirtual(EarthView.World.Graphic.RenderQueueInvocationSequence s)
				{
					EarthView_World_Graphic_CSceneManager_renderVisibleObjectsCustomSequence_void_CRenderQueueInvocationSequence_NoVirtual(this.NativeObject, object.Equals(s, null) ? IntPtr.Zero : s.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_renderVisibleObjectsCustomSequence_void_CRenderQueueInvocationSequence_Function(IntPtr s)
				{
					EarthView.World.Graphic.RenderQueueInvocationSequence csobj_s = new EarthView.World.Graphic.RenderQueueInvocationSequence(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_s.BindNativeObject(s,"CRenderQueueInvocationSequence");
					csobj_s.Delegate = true;
					IClassFactory csobj_sClassFactory = GlobalClassFactoryMap.Get(csobj_s.GetCppInstanceTypeName());
					if (csobj_sClassFactory != null)
					{
						csobj_s.Delegate = true;
						csobj_s = csobj_sClassFactory.Create() as EarthView.World.Graphic.RenderQueueInvocationSequence;
						csobj_s.BindNativeObject(s, "CRenderQueueInvocationSequence");
						csobj_s.Delegate = true;
					}
					
					RenderVisibleObjectsCustomSequence(csobj_s);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderVisibleObjectsCustomSequence_void_CRenderQueueInvocationSequence(IntPtr pNativeObject, IntPtr s);

				protected virtual void RenderVisibleObjectsCustomSequence(EarthView.World.Graphic.RenderQueueInvocationSequence s)
				{
					EarthView_World_Graphic_CSceneManager_renderVisibleObjectsCustomSequence_void_CRenderQueueInvocationSequence(this.NativeObject, object.Equals(s, null) ? IntPtr.Zero : s.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void prepareRenderQueue_CallBack_void();

				protected prepareRenderQueue_CallBack_void m_prepareRenderQueue_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_prepareRenderQueue_void_NoVirtual(IntPtr pNativeObject);

				protected virtual void PrepareRenderQueue_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_prepareRenderQueue_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_prepareRenderQueue_void_Function()
				{
					PrepareRenderQueue();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_prepareRenderQueue_void(IntPtr pNativeObject);

				protected virtual void PrepareRenderQueue()
				{
					EarthView_World_Graphic_CSceneManager_prepareRenderQueue_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void renderSingleObject_CallBack_void_CRenderable_CPass_ev_bool_ev_bool_LightList(IntPtr rend, IntPtr pass, bool lightScissoringClipping, bool doLightIteration, IntPtr manualLightList);

				protected renderSingleObject_CallBack_void_CRenderable_CPass_ev_bool_ev_bool_LightList m_renderSingleObject_CallBack_void_CRenderable_CPass_ev_bool_ev_bool_LightList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderSingleObject_void_CRenderable_CPass_ev_bool_ev_bool_LightList_NoVirtual(IntPtr pNativeObject, IntPtr rend, IntPtr pass, byte lightScissoringClipping, byte doLightIteration, IntPtr manualLightList);

				protected virtual void RenderSingleObject_NoVirtual(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, bool lightScissoringClipping, bool doLightIteration, EarthView.World.Graphic.LightList manualLightList)
				{
					EarthView_World_Graphic_CSceneManager_renderSingleObject_void_CRenderable_CPass_ev_bool_ev_bool_LightList_NoVirtual(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, Convert.ToByte(lightScissoringClipping), Convert.ToByte(doLightIteration), object.Equals(manualLightList, null) ? IntPtr.Zero : manualLightList.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_renderSingleObject_void_CRenderable_CPass_ev_bool_ev_bool_LightList_Function(IntPtr rend, IntPtr pass, bool lightScissoringClipping, bool doLightIteration, IntPtr manualLightList)
				{
					EarthView.World.Graphic.Renderable csobj_rend = new EarthView.World.Graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_rend.BindNativeObject(rend,"CRenderable");
					csobj_rend.Delegate = true;
					IClassFactory csobj_rendClassFactory = GlobalClassFactoryMap.Get(csobj_rend.GetCppInstanceTypeName());
					if (csobj_rendClassFactory != null)
					{
						csobj_rend.Delegate = true;
						csobj_rend = csobj_rendClassFactory.Create() as EarthView.World.Graphic.Renderable;
						csobj_rend.BindNativeObject(rend, "CRenderable");
						csobj_rend.Delegate = true;
					}
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					EarthView.World.Graphic.LightList csobj_manualLightList = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_manualLightList.BindNativeObject(manualLightList,"LightList");
					csobj_manualLightList.Delegate = true;
					IClassFactory csobj_manualLightListClassFactory = GlobalClassFactoryMap.Get(csobj_manualLightList.GetCppInstanceTypeName());
					if (csobj_manualLightListClassFactory != null)
					{
						csobj_manualLightList.Delegate = true;
						csobj_manualLightList = csobj_manualLightListClassFactory.Create() as EarthView.World.Graphic.LightList;
						csobj_manualLightList.BindNativeObject(manualLightList, "LightList");
						csobj_manualLightList.Delegate = true;
					}
					
					RenderSingleObject(csobj_rend, csobj_pass, lightScissoringClipping, doLightIteration, csobj_manualLightList);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderSingleObject_void_CRenderable_CPass_ev_bool_ev_bool_LightList(IntPtr pNativeObject, IntPtr rend, IntPtr pass, byte lightScissoringClipping, byte doLightIteration, IntPtr manualLightList);

				protected virtual void RenderSingleObject(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, bool lightScissoringClipping, bool doLightIteration, EarthView.World.Graphic.LightList manualLightList)
				{
					EarthView_World_Graphic_CSceneManager_renderSingleObject_void_CRenderable_CPass_ev_bool_ev_bool_LightList(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, Convert.ToByte(lightScissoringClipping), Convert.ToByte(doLightIteration), object.Equals(manualLightList, null) ? IntPtr.Zero : manualLightList.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void renderSingleObject_CallBack_void_CRenderable_CPass_ev_bool_ev_bool(IntPtr rend, IntPtr pass, bool lightScissoringClipping, bool doLightIteration);

				protected renderSingleObject_CallBack_void_CRenderable_CPass_ev_bool_ev_bool m_renderSingleObject_CallBack_void_CRenderable_CPass_ev_bool_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderSingleObject_void_CRenderable_CPass_ev_bool_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr rend, IntPtr pass, byte lightScissoringClipping, byte doLightIteration);

				protected virtual void RenderSingleObject_NoVirtual(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, bool lightScissoringClipping, bool doLightIteration)
				{
					EarthView_World_Graphic_CSceneManager_renderSingleObject_void_CRenderable_CPass_ev_bool_ev_bool_NoVirtual(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, Convert.ToByte(lightScissoringClipping), Convert.ToByte(doLightIteration));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_renderSingleObject_void_CRenderable_CPass_ev_bool_ev_bool_Function(IntPtr rend, IntPtr pass, bool lightScissoringClipping, bool doLightIteration)
				{
					EarthView.World.Graphic.Renderable csobj_rend = new EarthView.World.Graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_rend.BindNativeObject(rend,"CRenderable");
					csobj_rend.Delegate = true;
					IClassFactory csobj_rendClassFactory = GlobalClassFactoryMap.Get(csobj_rend.GetCppInstanceTypeName());
					if (csobj_rendClassFactory != null)
					{
						csobj_rend.Delegate = true;
						csobj_rend = csobj_rendClassFactory.Create() as EarthView.World.Graphic.Renderable;
						csobj_rend.BindNativeObject(rend, "CRenderable");
						csobj_rend.Delegate = true;
					}
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					
					RenderSingleObject(csobj_rend, csobj_pass, lightScissoringClipping, doLightIteration);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderSingleObject_void_CRenderable_CPass_ev_bool_ev_bool(IntPtr pNativeObject, IntPtr rend, IntPtr pass, byte lightScissoringClipping, byte doLightIteration);

				protected virtual void RenderSingleObject(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, bool lightScissoringClipping, bool doLightIteration)
				{
					EarthView_World_Graphic_CSceneManager_renderSingleObject_void_CRenderable_CPass_ev_bool_ev_bool(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, Convert.ToByte(lightScissoringClipping), Convert.ToByte(doLightIteration));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createAutoParamDataSource_CallBack_CAutoParamDataSource();

				protected createAutoParamDataSource_CallBack_CAutoParamDataSource m_createAutoParamDataSource_CallBack_CAutoParamDataSource;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createAutoParamDataSource_CAutoParamDataSource_NoVirtual(IntPtr pNativeObject);

				protected virtual EarthView.World.Graphic.AutoParamDataSource CreateAutoParamDataSource_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createAutoParamDataSource_CAutoParamDataSource_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.AutoParamDataSource csObj = new EarthView.World.Graphic.AutoParamDataSource(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CAutoParamDataSource");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.AutoParamDataSource;
						csObj.BindNativeObject(__ptr, "CAutoParamDataSource");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createAutoParamDataSource_CAutoParamDataSource_Function()
				{
					EarthView.World.Graphic.AutoParamDataSource csret=CreateAutoParamDataSource();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createAutoParamDataSource_CAutoParamDataSource(IntPtr pNativeObject);

				protected virtual EarthView.World.Graphic.AutoParamDataSource CreateAutoParamDataSource()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createAutoParamDataSource_CAutoParamDataSource(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.AutoParamDataSource csObj = new EarthView.World.Graphic.AutoParamDataSource(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CAutoParamDataSource");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.AutoParamDataSource;
						csObj.BindNativeObject(__ptr, "CAutoParamDataSource");
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getAutoParamDataSource_CAutoParamDataSource(IntPtr pNativeObject);

				protected EarthView.World.Graphic.AutoParamDataSource GetAutoParamDataSource()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getAutoParamDataSource_CAutoParamDataSource(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.AutoParamDataSource csObj = new EarthView.World.Graphic.AutoParamDataSource(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CAutoParamDataSource");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.AutoParamDataSource;
						csObj.BindNativeObject(__ptr, "CAutoParamDataSource");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void findLightsAffectingFrustum_CallBack_void_CCamera(IntPtr camera);

				protected findLightsAffectingFrustum_CallBack_void_CCamera m_findLightsAffectingFrustum_CallBack_void_CCamera;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_findLightsAffectingFrustum_void_CCamera_NoVirtual(IntPtr pNativeObject, IntPtr camera);

				protected virtual void FindLightsAffectingFrustum_NoVirtual(EarthView.World.Graphic.Camera camera)
				{
					EarthView_World_Graphic_CSceneManager_findLightsAffectingFrustum_void_CCamera_NoVirtual(this.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_findLightsAffectingFrustum_void_CCamera_Function(IntPtr camera)
				{
					EarthView.World.Graphic.Camera csobj_camera = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_camera.BindNativeObject(camera,"CCamera");
					csobj_camera.Delegate = true;
					IClassFactory csobj_cameraClassFactory = GlobalClassFactoryMap.Get(csobj_camera.GetCppInstanceTypeName());
					if (csobj_cameraClassFactory != null)
					{
						csobj_camera.Delegate = true;
						csobj_camera = csobj_cameraClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_camera.BindNativeObject(camera, "CCamera");
						csobj_camera.Delegate = true;
					}
					
					FindLightsAffectingFrustum(csobj_camera);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_findLightsAffectingFrustum_void_CCamera(IntPtr pNativeObject, IntPtr camera);

				protected virtual void FindLightsAffectingFrustum(EarthView.World.Graphic.Camera camera)
				{
					EarthView_World_Graphic_CSceneManager_findLightsAffectingFrustum_void_CCamera(this.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void initShadowVolumeMaterials_CallBack_void();

				protected initShadowVolumeMaterials_CallBack_void m_initShadowVolumeMaterials_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_initShadowVolumeMaterials_void_NoVirtual(IntPtr pNativeObject);

				protected virtual void InitShadowVolumeMaterials_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_initShadowVolumeMaterials_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_initShadowVolumeMaterials_void_Function()
				{
					InitShadowVolumeMaterials();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_initShadowVolumeMaterials_void(IntPtr pNativeObject);

				protected virtual void InitShadowVolumeMaterials()
				{
					EarthView_World_Graphic_CSceneManager_initShadowVolumeMaterials_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void ensureShadowTexturesCreated_CallBack_void();

				protected ensureShadowTexturesCreated_CallBack_void m_ensureShadowTexturesCreated_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_ensureShadowTexturesCreated_void_NoVirtual(IntPtr pNativeObject);

				protected virtual void EnsureShadowTexturesCreated_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_ensureShadowTexturesCreated_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_ensureShadowTexturesCreated_void_Function()
				{
					EnsureShadowTexturesCreated();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_ensureShadowTexturesCreated_void(IntPtr pNativeObject);

				protected virtual void EnsureShadowTexturesCreated()
				{
					EarthView_World_Graphic_CSceneManager_ensureShadowTexturesCreated_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyShadowTextures_CallBack_void();

				protected destroyShadowTextures_CallBack_void m_destroyShadowTextures_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyShadowTextures_void_NoVirtual(IntPtr pNativeObject);

				protected virtual void DestroyShadowTextures_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_destroyShadowTextures_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyShadowTextures_void_Function()
				{
					DestroyShadowTextures();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyShadowTextures_void(IntPtr pNativeObject);

				protected virtual void DestroyShadowTextures()
				{
					EarthView_World_Graphic_CSceneManager_destroyShadowTextures_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void prepareShadowTextures_CallBack_void_CCamera_CViewport_LightList(IntPtr cam, IntPtr vp, IntPtr lightList);

				protected prepareShadowTextures_CallBack_void_CCamera_CViewport_LightList m_prepareShadowTextures_CallBack_void_CCamera_CViewport_LightList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_prepareShadowTextures_void_CCamera_CViewport_LightList_NoVirtual(IntPtr pNativeObject, IntPtr cam, IntPtr vp, IntPtr lightList);

				/// <summary>
				/// 准备阴影纹理                
				/// </summary>
				/// <param name="cam">摄像机</param>
				/// <param name="vp">视口</param>
				/// <param name="lightList">光源列表，默认为空</param>
				/// <returns></returns>
				public virtual void PrepareShadowTextures_NoVirtual(EarthView.World.Graphic.Camera cam, EarthView.World.Graphic.Viewport vp, EarthView.World.Graphic.LightList lightList)
				{
					EarthView_World_Graphic_CSceneManager_prepareShadowTextures_void_CCamera_CViewport_LightList_NoVirtual(this.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, object.Equals(lightList, null) ? IntPtr.Zero : lightList.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_prepareShadowTextures_void_CCamera_CViewport_LightList_Function(IntPtr cam, IntPtr vp, IntPtr lightList)
				{
					EarthView.World.Graphic.Camera csobj_cam = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_cam.BindNativeObject(cam,"CCamera");
					csobj_cam.Delegate = true;
					IClassFactory csobj_camClassFactory = GlobalClassFactoryMap.Get(csobj_cam.GetCppInstanceTypeName());
					if (csobj_camClassFactory != null)
					{
						csobj_cam.Delegate = true;
						csobj_cam = csobj_camClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_cam.BindNativeObject(cam, "CCamera");
						csobj_cam.Delegate = true;
					}
					EarthView.World.Graphic.Viewport csobj_vp = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_vp.BindNativeObject(vp,"CViewport");
					csobj_vp.Delegate = true;
					IClassFactory csobj_vpClassFactory = GlobalClassFactoryMap.Get(csobj_vp.GetCppInstanceTypeName());
					if (csobj_vpClassFactory != null)
					{
						csobj_vp.Delegate = true;
						csobj_vp = csobj_vpClassFactory.Create() as EarthView.World.Graphic.Viewport;
						csobj_vp.BindNativeObject(vp, "CViewport");
						csobj_vp.Delegate = true;
					}
					EarthView.World.Graphic.LightList csobj_lightList = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_lightList.BindNativeObject(lightList,"LightList");
					csobj_lightList.Delegate = true;
					IClassFactory csobj_lightListClassFactory = GlobalClassFactoryMap.Get(csobj_lightList.GetCppInstanceTypeName());
					if (csobj_lightListClassFactory != null)
					{
						csobj_lightList.Delegate = true;
						csobj_lightList = csobj_lightListClassFactory.Create() as EarthView.World.Graphic.LightList;
						csobj_lightList.BindNativeObject(lightList, "LightList");
						csobj_lightList.Delegate = true;
					}
					
					PrepareShadowTextures(csobj_cam, csobj_vp, csobj_lightList);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_prepareShadowTextures_void_CCamera_CViewport_LightList(IntPtr pNativeObject, IntPtr cam, IntPtr vp, IntPtr lightList);

				/// <summary>
				/// 准备阴影纹理                
				/// </summary>
				/// <param name="cam">摄像机</param>
				/// <param name="vp">视口</param>
				/// <param name="lightList">光源列表，默认为空</param>
				/// <returns></returns>
				public virtual void PrepareShadowTextures(EarthView.World.Graphic.Camera cam, EarthView.World.Graphic.Viewport vp, EarthView.World.Graphic.LightList lightList)
				{
					EarthView_World_Graphic_CSceneManager_prepareShadowTextures_void_CCamera_CViewport_LightList(this.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, object.Equals(lightList, null) ? IntPtr.Zero : lightList.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void prepareShadowTextures_CallBack_void_CCamera_CViewport(IntPtr cam, IntPtr vp);

				protected prepareShadowTextures_CallBack_void_CCamera_CViewport m_prepareShadowTextures_CallBack_void_CCamera_CViewport;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_prepareShadowTextures_void_CCamera_CViewport_NoVirtual(IntPtr pNativeObject, IntPtr cam, IntPtr vp);

				public virtual void PrepareShadowTextures_NoVirtual(EarthView.World.Graphic.Camera cam, EarthView.World.Graphic.Viewport vp)
				{
					EarthView_World_Graphic_CSceneManager_prepareShadowTextures_void_CCamera_CViewport_NoVirtual(this.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_prepareShadowTextures_void_CCamera_CViewport_Function(IntPtr cam, IntPtr vp)
				{
					EarthView.World.Graphic.Camera csobj_cam = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_cam.BindNativeObject(cam,"CCamera");
					csobj_cam.Delegate = true;
					IClassFactory csobj_camClassFactory = GlobalClassFactoryMap.Get(csobj_cam.GetCppInstanceTypeName());
					if (csobj_camClassFactory != null)
					{
						csobj_cam.Delegate = true;
						csobj_cam = csobj_camClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_cam.BindNativeObject(cam, "CCamera");
						csobj_cam.Delegate = true;
					}
					EarthView.World.Graphic.Viewport csobj_vp = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_vp.BindNativeObject(vp,"CViewport");
					csobj_vp.Delegate = true;
					IClassFactory csobj_vpClassFactory = GlobalClassFactoryMap.Get(csobj_vp.GetCppInstanceTypeName());
					if (csobj_vpClassFactory != null)
					{
						csobj_vp.Delegate = true;
						csobj_vp = csobj_vpClassFactory.Create() as EarthView.World.Graphic.Viewport;
						csobj_vp.BindNativeObject(vp, "CViewport");
						csobj_vp.Delegate = true;
					}
					
					PrepareShadowTextures(csobj_cam, csobj_vp);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_prepareShadowTextures_void_CCamera_CViewport(IntPtr pNativeObject, IntPtr cam, IntPtr vp);

				public virtual void PrepareShadowTextures(EarthView.World.Graphic.Camera cam, EarthView.World.Graphic.Viewport vp)
				{
					EarthView_World_Graphic_CSceneManager_prepareShadowTextures_void_CCamera_CViewport(this.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setImageDefaultMaterial_CallBack_void_CMaterialPtr(IntPtr matPtr);

				protected setImageDefaultMaterial_CallBack_void_CMaterialPtr m_setImageDefaultMaterial_CallBack_void_CMaterialPtr;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setImageDefaultMaterial_void_CMaterialPtr_NoVirtual(IntPtr pNativeObject, IntPtr matPtr);

				public virtual void SetImageDefaultMaterial_NoVirtual(EarthView.World.Graphic.MaterialPtr matPtr)
				{
					EarthView_World_Graphic_CSceneManager_setImageDefaultMaterial_void_CMaterialPtr_NoVirtual(this.NativeObject, object.Equals(matPtr, null) ? IntPtr.Zero : matPtr.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setImageDefaultMaterial_void_CMaterialPtr_Function(IntPtr matPtr)
				{
					EarthView.World.Graphic.MaterialPtr csobj_matPtr = new EarthView.World.Graphic.MaterialPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_matPtr.BindNativeObject(matPtr,"CMaterialPtr");
					csobj_matPtr.Delegate = true;
					IClassFactory csobj_matPtrClassFactory = GlobalClassFactoryMap.Get(csobj_matPtr.GetCppInstanceTypeName());
					if (csobj_matPtrClassFactory != null)
					{
						csobj_matPtr.Delegate = true;
						csobj_matPtr = csobj_matPtrClassFactory.Create() as EarthView.World.Graphic.MaterialPtr;
						csobj_matPtr.BindNativeObject(matPtr, "CMaterialPtr");
						csobj_matPtr.Delegate = true;
					}
					
					SetImageDefaultMaterial(csobj_matPtr);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setImageDefaultMaterial_void_CMaterialPtr(IntPtr pNativeObject, IntPtr matPtr);

				public virtual void SetImageDefaultMaterial(EarthView.World.Graphic.MaterialPtr matPtr)
				{
					EarthView_World_Graphic_CSceneManager_setImageDefaultMaterial_void_CMaterialPtr(this.NativeObject, object.Equals(matPtr, null) ? IntPtr.Zero : matPtr.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setImageUseDefaultMaterial_CallBack_void_ev_bool(ref byte useDefaultMat);

				protected setImageUseDefaultMaterial_CallBack_void_ev_bool m_setImageUseDefaultMaterial_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setImageUseDefaultMaterial_void_ev_bool_NoVirtual(IntPtr pNativeObject, ref bool useDefaultMat);

				public virtual void SetImageUseDefaultMaterial_NoVirtual(bool useDefaultMat)
				{
					EarthView_World_Graphic_CSceneManager_setImageUseDefaultMaterial_void_ev_bool_NoVirtual(this.NativeObject, ref useDefaultMat);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setImageUseDefaultMaterial_void_ev_bool_Function(ref byte useDefaultMat)
				{
					bool useDefaultMatBool = Convert.ToBoolean(useDefaultMat);
					
					SetImageUseDefaultMaterial(useDefaultMatBool);
					
					useDefaultMat = Convert.ToByte(useDefaultMatBool);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setImageUseDefaultMaterial_void_ev_bool(IntPtr pNativeObject, ref bool useDefaultMat);

				public virtual void SetImageUseDefaultMaterial(bool useDefaultMat)
				{
					EarthView_World_Graphic_CSceneManager_setImageUseDefaultMaterial_void_ev_bool(this.NativeObject, ref useDefaultMat);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getSunPosition_CallBack_CVector3();

				protected getSunPosition_CallBack_CVector3 m_getSunPosition_CallBack_CVector3;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSunPosition_CVector3_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Spatial.Math.Vector3 GetSunPosition_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSunPosition_CVector3_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Spatial.Math.Vector3 csObj = new EarthView.World.Spatial.Math.Vector3(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CVector3");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.Vector3;
						csObj.BindNativeObject(__ptr, "CVector3");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getSunPosition_CVector3_Function()
				{
					EarthView.World.Spatial.Math.Vector3 csret=GetSunPosition();
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSunPosition_CVector3(IntPtr pNativeObject);

				public virtual EarthView.World.Spatial.Math.Vector3 GetSunPosition()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSunPosition_CVector3(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Spatial.Math.Vector3 csObj = new EarthView.World.Spatial.Math.Vector3(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CVector3");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.Vector3;
						csObj.BindNativeObject(__ptr, "CVector3");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setAtmosphereVisible_CallBack_void_ev_bool(ref byte visible);

				protected setAtmosphereVisible_CallBack_void_ev_bool m_setAtmosphereVisible_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setAtmosphereVisible_void_ev_bool_NoVirtual(IntPtr pNativeObject, ref bool visible);

				public virtual void SetAtmosphereVisible_NoVirtual(bool visible)
				{
					EarthView_World_Graphic_CSceneManager_setAtmosphereVisible_void_ev_bool_NoVirtual(this.NativeObject, ref visible);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setAtmosphereVisible_void_ev_bool_Function(ref byte visible)
				{
					bool visibleBool = Convert.ToBoolean(visible);
					
					SetAtmosphereVisible(visibleBool);
					
					visible = Convert.ToByte(visibleBool);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setAtmosphereVisible_void_ev_bool(IntPtr pNativeObject, ref bool visible);

				public virtual void SetAtmosphereVisible(bool visible)
				{
					EarthView_World_Graphic_CSceneManager_setAtmosphereVisible_void_ev_bool(this.NativeObject, ref visible);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void storeAtmosphereVisibleState_CallBack_void();

				protected storeAtmosphereVisibleState_CallBack_void m_storeAtmosphereVisibleState_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_storeAtmosphereVisibleState_void_NoVirtual(IntPtr pNativeObject);

				public virtual void StoreAtmosphereVisibleState_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_storeAtmosphereVisibleState_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_storeAtmosphereVisibleState_void_Function()
				{
					StoreAtmosphereVisibleState();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_storeAtmosphereVisibleState_void(IntPtr pNativeObject);

				public virtual void StoreAtmosphereVisibleState()
				{
					EarthView_World_Graphic_CSceneManager_storeAtmosphereVisibleState_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void restoreAtmosphereVisibleState_CallBack_void();

				protected restoreAtmosphereVisibleState_CallBack_void m_restoreAtmosphereVisibleState_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_restoreAtmosphereVisibleState_void_NoVirtual(IntPtr pNativeObject);

				public virtual void RestoreAtmosphereVisibleState_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_restoreAtmosphereVisibleState_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_restoreAtmosphereVisibleState_void_Function()
				{
					RestoreAtmosphereVisibleState();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_restoreAtmosphereVisibleState_void(IntPtr pNativeObject);

				public virtual void RestoreAtmosphereVisibleState()
				{
					EarthView_World_Graphic_CSceneManager_restoreAtmosphereVisibleState_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSunVisible_CallBack_void_ev_bool(bool flag);

				protected setSunVisible_CallBack_void_ev_bool m_setSunVisible_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSunVisible_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte flag);

				public virtual void SetSunVisible_NoVirtual(bool flag)
				{
					EarthView_World_Graphic_CSceneManager_setSunVisible_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(flag));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSunVisible_void_ev_bool_Function(bool flag)
				{
					SetSunVisible(flag);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSunVisible_void_ev_bool(IntPtr pNativeObject, byte flag);

				public virtual void SetSunVisible(bool flag)
				{
					EarthView_World_Graphic_CSceneManager_setSunVisible_void_ev_bool(this.NativeObject, Convert.ToByte(flag));
					
				}

				/// <summary>
				/// 内部环境类
				/// 存储内部数据来暂停或者恢复渲染
				/// 原来为struct
				/// </summary>
				public class RenderContext : EarthView.World.Core.BaseObject
				{
					public RenderContext() : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						Create("RenderContext",  null);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}
					private EarthView.World.Graphic.RenderQueue renderQueueField;
					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr Get_EarthView_World_Graphic_CSceneManager_RenderContext_renderQueue(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_RenderContext_renderQueue( IntPtr pObject, IntPtr value );

					public 					EarthView.World.Graphic.RenderQueue RenderQueue
					{
						get
						{
							IntPtr __ptr = Get_EarthView_World_Graphic_CSceneManager_RenderContext_renderQueue(this.NativeObject);
							
							if(__ptr==IntPtr.Zero)
							{
							return null;
							}
							if(!object.Equals(renderQueueField, null)){
								renderQueueField.NativeObject = __ptr;
								return renderQueueField;
							}
							EarthView.World.Graphic.RenderQueue csObj = new EarthView.World.Graphic.RenderQueue(CreatedWhenConstruct.CWC_NotToCreate);
							csObj.BindNativeObject(__ptr, "CRenderQueue");
							csObj.Delegate = true;
							IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
							if (csObjClassFactory != null)
							{
								csObj.Delegate = true;
								csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderQueue;
								csObj.BindNativeObject(__ptr, "CRenderQueue");
								csObj.Delegate = true;
							}
							return csObj;
							
						}

						set
						{
							renderQueueField = value;
							Set_EarthView_World_Graphic_CSceneManager_RenderContext_renderQueue( this.NativeObject,object.Equals(value, null) ? IntPtr.Zero : value.NativeObject );
						}
					}

					private EarthView.World.Graphic.Viewport viewportField;
					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr Get_EarthView_World_Graphic_CSceneManager_RenderContext_viewport(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_RenderContext_viewport( IntPtr pObject, IntPtr value );

					public 					EarthView.World.Graphic.Viewport Viewport
					{
						get
						{
							IntPtr __ptr = Get_EarthView_World_Graphic_CSceneManager_RenderContext_viewport(this.NativeObject);
							
							if(__ptr==IntPtr.Zero)
							{
							return null;
							}
							if(!object.Equals(viewportField, null)){
								viewportField.NativeObject = __ptr;
								return viewportField;
							}
							EarthView.World.Graphic.Viewport csObj = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
							csObj.BindNativeObject(__ptr, "CViewport");
							csObj.Delegate = true;
							IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
							if (csObjClassFactory != null)
							{
								csObj.Delegate = true;
								csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Viewport;
								csObj.BindNativeObject(__ptr, "CViewport");
								csObj.Delegate = true;
							}
							return csObj;
							
						}

						set
						{
							viewportField = value;
							Set_EarthView_World_Graphic_CSceneManager_RenderContext_viewport( this.NativeObject,object.Equals(value, null) ? IntPtr.Zero : value.NativeObject );
						}
					}

					private EarthView.World.Graphic.Camera cameraField;
					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr Get_EarthView_World_Graphic_CSceneManager_RenderContext_camera(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_RenderContext_camera( IntPtr pObject, IntPtr value );

					public 					EarthView.World.Graphic.Camera Camera
					{
						get
						{
							IntPtr __ptr = Get_EarthView_World_Graphic_CSceneManager_RenderContext_camera(this.NativeObject);
							
							if(__ptr==IntPtr.Zero)
							{
							return null;
							}
							if(!object.Equals(cameraField, null)){
								cameraField.NativeObject = __ptr;
								return cameraField;
							}
							EarthView.World.Graphic.Camera csObj = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
							csObj.BindNativeObject(__ptr, "CCamera");
							csObj.Delegate = true;
							IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
							if (csObjClassFactory != null)
							{
								csObj.Delegate = true;
								csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Camera;
								csObj.BindNativeObject(__ptr, "CCamera");
								csObj.Delegate = true;
							}
							return csObj;
							
						}

						set
						{
							cameraField = value;
							Set_EarthView_World_Graphic_CSceneManager_RenderContext_camera( this.NativeObject,object.Equals(value, null) ? IntPtr.Zero : value.NativeObject );
						}
					}

					private EarthView.World.Graphic.CompositorChain activeChainField;
					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr Get_EarthView_World_Graphic_CSceneManager_RenderContext_activeChain(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_RenderContext_activeChain( IntPtr pObject, IntPtr value );

					public 					EarthView.World.Graphic.CompositorChain ActiveChain
					{
						get
						{
							IntPtr __ptr = Get_EarthView_World_Graphic_CSceneManager_RenderContext_activeChain(this.NativeObject);
							
							if(__ptr==IntPtr.Zero)
							{
							return null;
							}
							if(!object.Equals(activeChainField, null)){
								activeChainField.NativeObject = __ptr;
								return activeChainField;
							}
							EarthView.World.Graphic.CompositorChain csObj = new EarthView.World.Graphic.CompositorChain(CreatedWhenConstruct.CWC_NotToCreate);
							csObj.BindNativeObject(__ptr, "CCompositorChain");
							csObj.Delegate = true;
							IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
							if (csObjClassFactory != null)
							{
								csObj.Delegate = true;
								csObj = csObjClassFactory.Create() as EarthView.World.Graphic.CompositorChain;
								csObj.BindNativeObject(__ptr, "CCompositorChain");
								csObj.Delegate = true;
							}
							return csObj;
							
						}

						set
						{
							activeChainField = value;
							Set_EarthView_World_Graphic_CSceneManager_RenderContext_activeChain( this.NativeObject,object.Equals(value, null) ? IntPtr.Zero : value.NativeObject );
						}
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern EarthView.World.Graphic.RenderSystem.RENDERSYSTEMCONTEXT[] Get_EarthView_World_Graphic_CSceneManager_RenderContext_rsContext(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_RenderContext_rsContext( IntPtr pObject, EarthView.World.Graphic.RenderSystem.RENDERSYSTEMCONTEXT[] value );

					public 					EarthView.World.Graphic.RenderSystem.RENDERSYSTEMCONTEXT[] RsContext
					{
						get
						{
							EarthView.World.Graphic.RenderSystem.RENDERSYSTEMCONTEXT[] ret=Get_EarthView_World_Graphic_CSceneManager_RenderContext_rsContext(this.NativeObject);
							
							return ret;
							
						}

						set
						{
							Set_EarthView_World_Graphic_CSceneManager_RenderContext_rsContext(this.NativeObject,value);
						}
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadRenderContext = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadRenderContext = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadRenderContext = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadRenderContext = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadRenderContext = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadRenderContext = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadRenderContext = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadRenderContext = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadRenderContext = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadRenderContext = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadRenderContext = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadRenderContext = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::RenderContext", new RenderContextClassFactory());

					public RenderContext(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
						}
					}
					public static RenderContext FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						RenderContext obj = baseObj as  RenderContext;
						if (object.Equals(obj, null))
						{
							obj = new RenderContext(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "RenderContext");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class RenderContextClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						RenderContext emptyInstance = new RenderContext(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr _pauseRendering_CallBack_RenderContext();

				protected _pauseRendering_CallBack_RenderContext m__pauseRendering_CallBack_RenderContext;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager__pauseRendering_RenderContext_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 暂停渲染                
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.SceneManager.RenderContext _pauseRendering_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager__pauseRendering_RenderContext_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneManager.RenderContext csObj = new EarthView.World.Graphic.SceneManager.RenderContext(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "RenderContext");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.RenderContext;
						csObj.BindNativeObject(__ptr, "RenderContext");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager__pauseRendering_RenderContext_Function()
				{
					EarthView.World.Graphic.SceneManager.RenderContext csret=_pauseRendering();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager__pauseRendering_RenderContext(IntPtr pNativeObject);

				/// <summary>
				/// 暂停渲染                
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.SceneManager.RenderContext _pauseRendering()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager__pauseRendering_RenderContext(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneManager.RenderContext csObj = new EarthView.World.Graphic.SceneManager.RenderContext(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "RenderContext");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.RenderContext;
						csObj.BindNativeObject(__ptr, "RenderContext");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _resumeRendering_CallBack_void_RenderContext(IntPtr context);

				protected _resumeRendering_CallBack_void_RenderContext m__resumeRendering_CallBack_void_RenderContext;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__resumeRendering_void_RenderContext_NoVirtual(IntPtr pNativeObject, IntPtr context);

				/// <summary>
				/// 继续渲染                
				/// </summary>
				/// <param name="context">渲染环境</param>
				/// <returns></returns>
				public virtual void _resumeRendering_NoVirtual(EarthView.World.Graphic.SceneManager.RenderContext context)
				{
					EarthView_World_Graphic_CSceneManager__resumeRendering_void_RenderContext_NoVirtual(this.NativeObject, object.Equals(context, null) ? IntPtr.Zero : context.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__resumeRendering_void_RenderContext_Function(IntPtr context)
				{
					EarthView.World.Graphic.SceneManager.RenderContext csobj_context = new EarthView.World.Graphic.SceneManager.RenderContext(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_context.BindNativeObject(context,"RenderContext");
					csobj_context.Delegate = true;
					IClassFactory csobj_contextClassFactory = GlobalClassFactoryMap.Get(csobj_context.GetCppInstanceTypeName());
					if (csobj_contextClassFactory != null)
					{
						csobj_context.Delegate = true;
						csobj_context = csobj_contextClassFactory.Create() as EarthView.World.Graphic.SceneManager.RenderContext;
						csobj_context.BindNativeObject(context, "RenderContext");
						csobj_context.Delegate = true;
					}
					
					_resumeRendering(csobj_context);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__resumeRendering_void_RenderContext(IntPtr pNativeObject, IntPtr context);

				/// <summary>
				/// 继续渲染                
				/// </summary>
				/// <param name="context">渲染环境</param>
				/// <returns></returns>
				public virtual void _resumeRendering(EarthView.World.Graphic.SceneManager.RenderContext context)
				{
					EarthView_World_Graphic_CSceneManager__resumeRendering_void_RenderContext(this.NativeObject, object.Equals(context, null) ? IntPtr.Zero : context.NativeObject);
					
				}

				public class ShadowCasterList : EarthView.World.Core.BaseObject
				{
					public ShadowCasterList() : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						Create("ShadowCasterList",  null);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_ShadowCasterList_push_back_void_CShadowCaster(IntPtr pNativeObject, ref IntPtr ref_t);

					public void Push_back(EarthView.World.Graphic.ShadowCaster ref_t)
					{
						EarthView_World_Graphic_CSceneManager_ShadowCasterList_push_back_void_CShadowCaster(this.NativeObject, ref ref_t.NativeObject);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_ShadowCasterList_remove_void_ev_size_t(IntPtr pNativeObject, ulong pos);

					public void Remove(ulong pos)
					{
						EarthView_World_Graphic_CSceneManager_ShadowCasterList_remove_void_ev_size_t(this.NativeObject, pos);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_ShadowCasterList_empty_ev_bool(IntPtr pNativeObject);

					public bool Empty()
					{
						byte ret=EarthView_World_Graphic_CSceneManager_ShadowCasterList_empty_ev_bool(this.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_ShadowCasterList_at_CShadowCaster_ev_size_t(IntPtr pNativeObject, ulong n);

					public EarthView.World.Graphic.ShadowCaster At(ulong n)
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_ShadowCasterList_at_CShadowCaster_ev_size_t(this.NativeObject, n);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.ShadowCaster csObj = new EarthView.World.Graphic.ShadowCaster(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CShadowCaster");
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ShadowCaster;
							csObj.BindNativeObject(__ptr, "CShadowCaster");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern ulong EarthView_World_Graphic_CSceneManager_ShadowCasterList_size_ev_size_t(IntPtr pNativeObject);

					public ulong Size()
					{
						ulong ret=EarthView_World_Graphic_CSceneManager_ShadowCasterList_size_ev_size_t(this.NativeObject);
						
						return ret;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_ShadowCasterList_resize_void_ev_size_t(IntPtr pNativeObject, ulong newSize);

					public void Resize(ulong newSize)
					{
						EarthView_World_Graphic_CSceneManager_ShadowCasterList_resize_void_ev_size_t(this.NativeObject, newSize);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_ShadowCasterList_reserve_void_ev_size_t(IntPtr pNativeObject, ulong count);

					public void Reserve(ulong count)
					{
						EarthView_World_Graphic_CSceneManager_ShadowCasterList_reserve_void_ev_size_t(this.NativeObject, count);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_ShadowCasterList_clear_void(IntPtr pNativeObject);

					public void Clear()
					{
						EarthView_World_Graphic_CSceneManager_ShadowCasterList_clear_void(this.NativeObject);
						
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadShadowCasterList = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadShadowCasterList = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadShadowCasterList = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadShadowCasterList = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadShadowCasterList = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadShadowCasterList = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadShadowCasterList = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadShadowCasterList = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadShadowCasterList = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadShadowCasterList = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadShadowCasterList = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadShadowCasterList = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::ShadowCasterList", new ShadowCasterListClassFactory());

					public ShadowCasterList(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
						}
					}
					public static ShadowCasterList FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						ShadowCasterList obj = baseObj as  ShadowCasterList;
						if (object.Equals(obj, null))
						{
							obj = new ShadowCasterList(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "ShadowCasterList");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class ShadowCasterListClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						ShadowCasterList emptyInstance = new ShadowCasterList(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				/// <summary>
				/// 阴影投射场景询问监听器
				/// 内部类
				/// </summary>
				public class ShadowCasterSceneQueryListener : EarthView.World.Graphic.SceneQueryListener
				{
					public ShadowCasterSceneQueryListener(EarthView.World.Graphic.SceneManager sm) : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						NameValuePairList list = new NameValuePairList();
						BasePtr valuesm = new BasePtr(sm);
						list.Add("sm", valuesm.PtrVal);
						Create("CShadowCasterSceneQueryListenerProxy", list);
						if (!"EarthView.World.Graphic.SceneManager+ShadowCasterSceneQueryListener".Equals(((Object)this).GetType().ToString()))
						{
							this.SetCustomExtend(true);
						}
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CShadowCasterSceneQueryListener_prepare_void_ev_bool_PlaneBoundedVolumeList_CLight_CCamera_ShadowCasterList_Real(IntPtr pNativeObject, byte lightInFrustum, IntPtr lightClipVolumes, IntPtr light, IntPtr cam, IntPtr casterList, double farDistSquared);

					public void Prepare(bool lightInFrustum, EarthView.World.Spatial.Math.PlaneBoundedVolumeList lightClipVolumes, EarthView.World.Graphic.Light light, EarthView.World.Graphic.Camera cam, EarthView.World.Graphic.SceneManager.ShadowCasterList casterList, double farDistSquared)
					{
						EarthView_World_Graphic_CSceneManager_CShadowCasterSceneQueryListener_prepare_void_ev_bool_PlaneBoundedVolumeList_CLight_CCamera_ShadowCasterList_Real(this.NativeObject, Convert.ToByte(lightInFrustum), object.Equals(lightClipVolumes, null) ? IntPtr.Zero : lightClipVolumes.NativeObject, object.Equals(light, null) ? IntPtr.Zero : light.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject, object.Equals(casterList, null) ? IntPtr.Zero : casterList.NativeObject, farDistSquared);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_CShadowCasterSceneQueryListener_queryResult_ev_bool_CMovableObject_NoVirtual(IntPtr pNativeObject, IntPtr EVobject);

					public new bool QueryResult_NoVirtual(EarthView.World.Graphic.MovableObject EVobject)
					{
						byte ret=EarthView_World_Graphic_CSceneManager_CShadowCasterSceneQueryListener_queryResult_ev_bool_CMovableObject_NoVirtual(this.NativeObject, object.Equals(EVobject, null) ? IntPtr.Zero : EVobject.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_CShadowCasterSceneQueryListener_queryResult_ev_bool_CMovableObject(IntPtr pNativeObject, IntPtr EVobject);

					public override bool QueryResult(EarthView.World.Graphic.MovableObject EVobject)
					{
						byte ret=EarthView_World_Graphic_CSceneManager_CShadowCasterSceneQueryListener_queryResult_ev_bool_CMovableObject(this.NativeObject, object.Equals(EVobject, null) ? IntPtr.Zero : EVobject.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_CShadowCasterSceneQueryListener_queryResult_ev_bool_WorldFragment_NoVirtual(IntPtr pNativeObject, IntPtr fragment);

					public new bool QueryResult_NoVirtual(EarthView.World.Graphic.SceneQuery.WorldFragment fragment)
					{
						byte ret=EarthView_World_Graphic_CSceneManager_CShadowCasterSceneQueryListener_queryResult_ev_bool_WorldFragment_NoVirtual(this.NativeObject, object.Equals(fragment, null) ? IntPtr.Zero : fragment.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_CShadowCasterSceneQueryListener_queryResult_ev_bool_WorldFragment(IntPtr pNativeObject, IntPtr fragment);

					public override bool QueryResult(EarthView.World.Graphic.SceneQuery.WorldFragment fragment)
					{
						byte ret=EarthView_World_Graphic_CSceneManager_CShadowCasterSceneQueryListener_queryResult_ev_bool_WorldFragment(this.NativeObject, object.Equals(fragment, null) ? IntPtr.Zero : fragment.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadShadowCasterSceneQueryListener = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadShadowCasterSceneQueryListener = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadShadowCasterSceneQueryListener = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadShadowCasterSceneQueryListener = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadShadowCasterSceneQueryListener = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadShadowCasterSceneQueryListener = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadShadowCasterSceneQueryListener = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadShadowCasterSceneQueryListener = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadShadowCasterSceneQueryListener = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadShadowCasterSceneQueryListener = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadShadowCasterSceneQueryListener = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadShadowCasterSceneQueryListener = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListener", new ShadowCasterSceneQueryListenerClassFactory());

					private static bool registerProxyStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::CShadowCasterSceneQueryListenerProxy", new ShadowCasterSceneQueryListenerClassFactory());

					public ShadowCasterSceneQueryListener(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CShadowCasterSceneQueryListener_queryResult_ev_bool_CMovableObject(IntPtr pObject, queryResult_CallBack_ev_bool_CMovableObject pCallback);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CShadowCasterSceneQueryListener_queryResult_ev_bool_CMovableObject_IntVector(IntPtr pObject, queryResult_CallBack_ev_bool_CMovableObject_IntVector pCallback);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CShadowCasterSceneQueryListener_queryResult_ev_bool_WorldFragment(IntPtr pObject, queryResult_CallBack_ev_bool_WorldFragment pCallback);

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
							m_queryResult_CallBack_ev_bool_CMovableObject = EarthView_World_Graphic_CSceneQueryListener_queryResult_ev_bool_CMovableObject_Function;
							GC.KeepAlive(m_queryResult_CallBack_ev_bool_CMovableObject);
							EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CShadowCasterSceneQueryListener_queryResult_ev_bool_CMovableObject(this.NativeObject, m_queryResult_CallBack_ev_bool_CMovableObject);
							m_queryResult_CallBack_ev_bool_CMovableObject_IntVector = EarthView_World_Graphic_CSceneQueryListener_queryResult_ev_bool_CMovableObject_IntVector_Function;
							GC.KeepAlive(m_queryResult_CallBack_ev_bool_CMovableObject_IntVector);
							EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CShadowCasterSceneQueryListener_queryResult_ev_bool_CMovableObject_IntVector(this.NativeObject, m_queryResult_CallBack_ev_bool_CMovableObject_IntVector);
							m_queryResult_CallBack_ev_bool_WorldFragment = EarthView_World_Graphic_CSceneQueryListener_queryResult_ev_bool_WorldFragment_Function;
							GC.KeepAlive(m_queryResult_CallBack_ev_bool_WorldFragment);
							EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_CShadowCasterSceneQueryListener_queryResult_ev_bool_WorldFragment(this.NativeObject, m_queryResult_CallBack_ev_bool_WorldFragment);
						}
					}
					public override bool QueryResult(EarthView.World.Graphic.MovableObject EVobject, ref EarthView.World.Core.IntVector indexVec)
					{
						return base.QueryResult_NoVirtual(EVobject,ref indexVec);
					}
					public static ShadowCasterSceneQueryListener FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						ShadowCasterSceneQueryListener obj = baseObj as  ShadowCasterSceneQueryListener;
						if (object.Equals(obj, null))
						{
							obj = new ShadowCasterSceneQueryListener(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "CShadowCasterSceneQueryListener");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class ShadowCasterSceneQueryListenerClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						ShadowCasterSceneQueryListener emptyInstance = new ShadowCasterSceneQueryListener(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void renderShadowVolumesToStencil_CallBack_void_CLight_CCamera_ev_bool(IntPtr light, IntPtr cam, bool calcScissor);

				protected renderShadowVolumesToStencil_CallBack_void_CLight_CCamera_ev_bool m_renderShadowVolumesToStencil_CallBack_void_CLight_CCamera_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderShadowVolumesToStencil_void_CLight_CCamera_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr light, IntPtr cam, byte calcScissor);

				/// <summary>
				/// 将阴影锥绘制到模板缓冲
				/// 内部方法
				/// </summary>
				/// <param name="light">光源</param>
				/// <param name="cam">摄像机</param>
				/// <param name="calcScissor">是否对方法进行修改，如果为false，则已经被修改</param>
				/// <returns></returns>
				protected virtual void RenderShadowVolumesToStencil_NoVirtual(EarthView.World.Graphic.Light light, EarthView.World.Graphic.Camera cam, bool calcScissor)
				{
					EarthView_World_Graphic_CSceneManager_renderShadowVolumesToStencil_void_CLight_CCamera_ev_bool_NoVirtual(this.NativeObject, object.Equals(light, null) ? IntPtr.Zero : light.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject, Convert.ToByte(calcScissor));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_renderShadowVolumesToStencil_void_CLight_CCamera_ev_bool_Function(IntPtr light, IntPtr cam, bool calcScissor)
				{
					EarthView.World.Graphic.Light csobj_light = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_light.BindNativeObject(light,"CLight");
					csobj_light.Delegate = true;
					IClassFactory csobj_lightClassFactory = GlobalClassFactoryMap.Get(csobj_light.GetCppInstanceTypeName());
					if (csobj_lightClassFactory != null)
					{
						csobj_light.Delegate = true;
						csobj_light = csobj_lightClassFactory.Create() as EarthView.World.Graphic.Light;
						csobj_light.BindNativeObject(light, "CLight");
						csobj_light.Delegate = true;
					}
					EarthView.World.Graphic.Camera csobj_cam = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_cam.BindNativeObject(cam,"CCamera");
					csobj_cam.Delegate = true;
					IClassFactory csobj_camClassFactory = GlobalClassFactoryMap.Get(csobj_cam.GetCppInstanceTypeName());
					if (csobj_camClassFactory != null)
					{
						csobj_cam.Delegate = true;
						csobj_cam = csobj_camClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_cam.BindNativeObject(cam, "CCamera");
						csobj_cam.Delegate = true;
					}
					
					RenderShadowVolumesToStencil(csobj_light, csobj_cam, calcScissor);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderShadowVolumesToStencil_void_CLight_CCamera_ev_bool(IntPtr pNativeObject, IntPtr light, IntPtr cam, byte calcScissor);

				/// <summary>
				/// 将阴影锥绘制到模板缓冲
				/// 内部方法
				/// </summary>
				/// <param name="light">光源</param>
				/// <param name="cam">摄像机</param>
				/// <param name="calcScissor">是否对方法进行修改，如果为false，则已经被修改</param>
				/// <returns></returns>
				protected virtual void RenderShadowVolumesToStencil(EarthView.World.Graphic.Light light, EarthView.World.Graphic.Camera cam, bool calcScissor)
				{
					EarthView_World_Graphic_CSceneManager_renderShadowVolumesToStencil_void_CLight_CCamera_ev_bool(this.NativeObject, object.Equals(light, null) ? IntPtr.Zero : light.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject, Convert.ToByte(calcScissor));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowVolumeStencilState_CallBack_void_ev_bool_ev_bool_ev_bool(bool secondpass, bool zfail, bool twosided);

				protected setShadowVolumeStencilState_CallBack_void_ev_bool_ev_bool_ev_bool m_setShadowVolumeStencilState_CallBack_void_ev_bool_ev_bool_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowVolumeStencilState_void_ev_bool_ev_bool_ev_bool_NoVirtual(IntPtr pNativeObject, byte secondpass, byte zfail, byte twosided);

				/// <summary>
				/// 设置阴影锥使用模板缓冲的参数                
				/// </summary>
				/// <param name="context">渲染环境</param>
				/// <returns></returns>
				protected virtual void SetShadowVolumeStencilState_NoVirtual(bool secondpass, bool zfail, bool twosided)
				{
					EarthView_World_Graphic_CSceneManager_setShadowVolumeStencilState_void_ev_bool_ev_bool_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(secondpass), Convert.ToByte(zfail), Convert.ToByte(twosided));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowVolumeStencilState_void_ev_bool_ev_bool_ev_bool_Function(bool secondpass, bool zfail, bool twosided)
				{
					SetShadowVolumeStencilState(secondpass, zfail, twosided);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowVolumeStencilState_void_ev_bool_ev_bool_ev_bool(IntPtr pNativeObject, byte secondpass, byte zfail, byte twosided);

				/// <summary>
				/// 设置阴影锥使用模板缓冲的参数                
				/// </summary>
				/// <param name="context">渲染环境</param>
				/// <returns></returns>
				protected virtual void SetShadowVolumeStencilState(bool secondpass, bool zfail, bool twosided)
				{
					EarthView_World_Graphic_CSceneManager_setShadowVolumeStencilState_void_ev_bool_ev_bool_ev_bool(this.NativeObject, Convert.ToByte(secondpass), Convert.ToByte(zfail), Convert.ToByte(twosided));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr findShadowCastersForLight_CallBack_ShadowCasterList_CLight_CCamera(IntPtr light, IntPtr camera);

				protected findShadowCastersForLight_CallBack_ShadowCasterList_CLight_CCamera m_findShadowCastersForLight_CallBack_ShadowCasterList_CLight_CCamera;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_findShadowCastersForLight_ShadowCasterList_CLight_CCamera_NoVirtual(IntPtr pNativeObject, IntPtr light, IntPtr camera);

				protected virtual EarthView.World.Graphic.SceneManager.ShadowCasterList FindShadowCastersForLight_NoVirtual(EarthView.World.Graphic.Light light, EarthView.World.Graphic.Camera camera)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_findShadowCastersForLight_ShadowCasterList_CLight_CCamera_NoVirtual(this.NativeObject, object.Equals(light, null) ? IntPtr.Zero : light.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneManager.ShadowCasterList csObj = new EarthView.World.Graphic.SceneManager.ShadowCasterList(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "ShadowCasterList");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.ShadowCasterList;
						csObj.BindNativeObject(__ptr, "ShadowCasterList");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_findShadowCastersForLight_ShadowCasterList_CLight_CCamera_Function(IntPtr light, IntPtr camera)
				{
					EarthView.World.Graphic.Light csobj_light = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_light.BindNativeObject(light,"CLight");
					csobj_light.Delegate = true;
					IClassFactory csobj_lightClassFactory = GlobalClassFactoryMap.Get(csobj_light.GetCppInstanceTypeName());
					if (csobj_lightClassFactory != null)
					{
						csobj_light.Delegate = true;
						csobj_light = csobj_lightClassFactory.Create() as EarthView.World.Graphic.Light;
						csobj_light.BindNativeObject(light, "CLight");
						csobj_light.Delegate = true;
					}
					EarthView.World.Graphic.Camera csobj_camera = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_camera.BindNativeObject(camera,"CCamera");
					csobj_camera.Delegate = true;
					IClassFactory csobj_cameraClassFactory = GlobalClassFactoryMap.Get(csobj_camera.GetCppInstanceTypeName());
					if (csobj_cameraClassFactory != null)
					{
						csobj_camera.Delegate = true;
						csobj_camera = csobj_cameraClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_camera.BindNativeObject(camera, "CCamera");
						csobj_camera.Delegate = true;
					}
					
					EarthView.World.Graphic.SceneManager.ShadowCasterList csret=FindShadowCastersForLight(csobj_light, csobj_camera);
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_findShadowCastersForLight_ShadowCasterList_CLight_CCamera(IntPtr pNativeObject, IntPtr light, IntPtr camera);

				protected virtual EarthView.World.Graphic.SceneManager.ShadowCasterList FindShadowCastersForLight(EarthView.World.Graphic.Light light, EarthView.World.Graphic.Camera camera)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_findShadowCastersForLight_ShadowCasterList_CLight_CCamera(this.NativeObject, object.Equals(light, null) ? IntPtr.Zero : light.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneManager.ShadowCasterList csObj = new EarthView.World.Graphic.SceneManager.ShadowCasterList(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "ShadowCasterList");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.ShadowCasterList;
						csObj.BindNativeObject(__ptr, "ShadowCasterList");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void renderBasicQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode(IntPtr pGroup, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected renderBasicQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode m_renderBasicQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderBasicQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_NoVirtual(IntPtr pNativeObject, IntPtr pGroup, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected virtual void RenderBasicQueueGroupObjects_NoVirtual(EarthView.World.Graphic.RenderQueueGroup pGroup, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView_World_Graphic_CSceneManager_renderBasicQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_NoVirtual(this.NativeObject, object.Equals(pGroup, null) ? IntPtr.Zero : pGroup.NativeObject, om);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_renderBasicQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_Function(IntPtr pGroup, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView.World.Graphic.RenderQueueGroup csobj_pGroup = new EarthView.World.Graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pGroup.BindNativeObject(pGroup,"CRenderQueueGroup");
					csobj_pGroup.Delegate = true;
					IClassFactory csobj_pGroupClassFactory = GlobalClassFactoryMap.Get(csobj_pGroup.GetCppInstanceTypeName());
					if (csobj_pGroupClassFactory != null)
					{
						csobj_pGroup.Delegate = true;
						csobj_pGroup = csobj_pGroupClassFactory.Create() as EarthView.World.Graphic.RenderQueueGroup;
						csobj_pGroup.BindNativeObject(pGroup, "CRenderQueueGroup");
						csobj_pGroup.Delegate = true;
					}
					
					RenderBasicQueueGroupObjects(csobj_pGroup, om);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderBasicQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(IntPtr pNativeObject, IntPtr pGroup, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected virtual void RenderBasicQueueGroupObjects(EarthView.World.Graphic.RenderQueueGroup pGroup, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView_World_Graphic_CSceneManager_renderBasicQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(this.NativeObject, object.Equals(pGroup, null) ? IntPtr.Zero : pGroup.NativeObject, om);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void renderAdditiveStencilShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode(IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected renderAdditiveStencilShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode m_renderAdditiveStencilShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderAdditiveStencilShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_NoVirtual(IntPtr pNativeObject, IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected virtual void RenderAdditiveStencilShadowedQueueGroupObjects_NoVirtual(EarthView.World.Graphic.RenderQueueGroup group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView_World_Graphic_CSceneManager_renderAdditiveStencilShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_NoVirtual(this.NativeObject, object.Equals(group, null) ? IntPtr.Zero : group.NativeObject, om);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_renderAdditiveStencilShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_Function(IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView.World.Graphic.RenderQueueGroup csobj_group = new EarthView.World.Graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_group.BindNativeObject(group,"CRenderQueueGroup");
					csobj_group.Delegate = true;
					IClassFactory csobj_groupClassFactory = GlobalClassFactoryMap.Get(csobj_group.GetCppInstanceTypeName());
					if (csobj_groupClassFactory != null)
					{
						csobj_group.Delegate = true;
						csobj_group = csobj_groupClassFactory.Create() as EarthView.World.Graphic.RenderQueueGroup;
						csobj_group.BindNativeObject(group, "CRenderQueueGroup");
						csobj_group.Delegate = true;
					}
					
					RenderAdditiveStencilShadowedQueueGroupObjects(csobj_group, om);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderAdditiveStencilShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(IntPtr pNativeObject, IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected virtual void RenderAdditiveStencilShadowedQueueGroupObjects(EarthView.World.Graphic.RenderQueueGroup group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView_World_Graphic_CSceneManager_renderAdditiveStencilShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(this.NativeObject, object.Equals(group, null) ? IntPtr.Zero : group.NativeObject, om);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void renderModulativeStencilShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode(IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected renderModulativeStencilShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode m_renderModulativeStencilShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderModulativeStencilShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_NoVirtual(IntPtr pNativeObject, IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected virtual void RenderModulativeStencilShadowedQueueGroupObjects_NoVirtual(EarthView.World.Graphic.RenderQueueGroup group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView_World_Graphic_CSceneManager_renderModulativeStencilShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_NoVirtual(this.NativeObject, object.Equals(group, null) ? IntPtr.Zero : group.NativeObject, om);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_renderModulativeStencilShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_Function(IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView.World.Graphic.RenderQueueGroup csobj_group = new EarthView.World.Graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_group.BindNativeObject(group,"CRenderQueueGroup");
					csobj_group.Delegate = true;
					IClassFactory csobj_groupClassFactory = GlobalClassFactoryMap.Get(csobj_group.GetCppInstanceTypeName());
					if (csobj_groupClassFactory != null)
					{
						csobj_group.Delegate = true;
						csobj_group = csobj_groupClassFactory.Create() as EarthView.World.Graphic.RenderQueueGroup;
						csobj_group.BindNativeObject(group, "CRenderQueueGroup");
						csobj_group.Delegate = true;
					}
					
					RenderModulativeStencilShadowedQueueGroupObjects(csobj_group, om);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderModulativeStencilShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(IntPtr pNativeObject, IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected virtual void RenderModulativeStencilShadowedQueueGroupObjects(EarthView.World.Graphic.RenderQueueGroup group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView_World_Graphic_CSceneManager_renderModulativeStencilShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(this.NativeObject, object.Equals(group, null) ? IntPtr.Zero : group.NativeObject, om);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void renderTextureShadowCasterQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode(IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected renderTextureShadowCasterQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode m_renderTextureShadowCasterQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderTextureShadowCasterQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_NoVirtual(IntPtr pNativeObject, IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected virtual void RenderTextureShadowCasterQueueGroupObjects_NoVirtual(EarthView.World.Graphic.RenderQueueGroup group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView_World_Graphic_CSceneManager_renderTextureShadowCasterQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_NoVirtual(this.NativeObject, object.Equals(group, null) ? IntPtr.Zero : group.NativeObject, om);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_renderTextureShadowCasterQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_Function(IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView.World.Graphic.RenderQueueGroup csobj_group = new EarthView.World.Graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_group.BindNativeObject(group,"CRenderQueueGroup");
					csobj_group.Delegate = true;
					IClassFactory csobj_groupClassFactory = GlobalClassFactoryMap.Get(csobj_group.GetCppInstanceTypeName());
					if (csobj_groupClassFactory != null)
					{
						csobj_group.Delegate = true;
						csobj_group = csobj_groupClassFactory.Create() as EarthView.World.Graphic.RenderQueueGroup;
						csobj_group.BindNativeObject(group, "CRenderQueueGroup");
						csobj_group.Delegate = true;
					}
					
					RenderTextureShadowCasterQueueGroupObjects(csobj_group, om);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderTextureShadowCasterQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(IntPtr pNativeObject, IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected virtual void RenderTextureShadowCasterQueueGroupObjects(EarthView.World.Graphic.RenderQueueGroup group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView_World_Graphic_CSceneManager_renderTextureShadowCasterQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(this.NativeObject, object.Equals(group, null) ? IntPtr.Zero : group.NativeObject, om);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void renderTextureShadowReceiverQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode(IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected renderTextureShadowReceiverQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode m_renderTextureShadowReceiverQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderTextureShadowReceiverQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_NoVirtual(IntPtr pNativeObject, IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected virtual void RenderTextureShadowReceiverQueueGroupObjects_NoVirtual(EarthView.World.Graphic.RenderQueueGroup group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView_World_Graphic_CSceneManager_renderTextureShadowReceiverQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_NoVirtual(this.NativeObject, object.Equals(group, null) ? IntPtr.Zero : group.NativeObject, om);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_renderTextureShadowReceiverQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_Function(IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView.World.Graphic.RenderQueueGroup csobj_group = new EarthView.World.Graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_group.BindNativeObject(group,"CRenderQueueGroup");
					csobj_group.Delegate = true;
					IClassFactory csobj_groupClassFactory = GlobalClassFactoryMap.Get(csobj_group.GetCppInstanceTypeName());
					if (csobj_groupClassFactory != null)
					{
						csobj_group.Delegate = true;
						csobj_group = csobj_groupClassFactory.Create() as EarthView.World.Graphic.RenderQueueGroup;
						csobj_group.BindNativeObject(group, "CRenderQueueGroup");
						csobj_group.Delegate = true;
					}
					
					RenderTextureShadowReceiverQueueGroupObjects(csobj_group, om);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderTextureShadowReceiverQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(IntPtr pNativeObject, IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected virtual void RenderTextureShadowReceiverQueueGroupObjects(EarthView.World.Graphic.RenderQueueGroup group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView_World_Graphic_CSceneManager_renderTextureShadowReceiverQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(this.NativeObject, object.Equals(group, null) ? IntPtr.Zero : group.NativeObject, om);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void renderModulativeTextureShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode(IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected renderModulativeTextureShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode m_renderModulativeTextureShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderModulativeTextureShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_NoVirtual(IntPtr pNativeObject, IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected virtual void RenderModulativeTextureShadowedQueueGroupObjects_NoVirtual(EarthView.World.Graphic.RenderQueueGroup group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView_World_Graphic_CSceneManager_renderModulativeTextureShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_NoVirtual(this.NativeObject, object.Equals(group, null) ? IntPtr.Zero : group.NativeObject, om);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_renderModulativeTextureShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_Function(IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView.World.Graphic.RenderQueueGroup csobj_group = new EarthView.World.Graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_group.BindNativeObject(group,"CRenderQueueGroup");
					csobj_group.Delegate = true;
					IClassFactory csobj_groupClassFactory = GlobalClassFactoryMap.Get(csobj_group.GetCppInstanceTypeName());
					if (csobj_groupClassFactory != null)
					{
						csobj_group.Delegate = true;
						csobj_group = csobj_groupClassFactory.Create() as EarthView.World.Graphic.RenderQueueGroup;
						csobj_group.BindNativeObject(group, "CRenderQueueGroup");
						csobj_group.Delegate = true;
					}
					
					RenderModulativeTextureShadowedQueueGroupObjects(csobj_group, om);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderModulativeTextureShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(IntPtr pNativeObject, IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected virtual void RenderModulativeTextureShadowedQueueGroupObjects(EarthView.World.Graphic.RenderQueueGroup group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView_World_Graphic_CSceneManager_renderModulativeTextureShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(this.NativeObject, object.Equals(group, null) ? IntPtr.Zero : group.NativeObject, om);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void renderAdditiveTextureShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode(IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected renderAdditiveTextureShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode m_renderAdditiveTextureShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderAdditiveTextureShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_NoVirtual(IntPtr pNativeObject, IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected virtual void RenderAdditiveTextureShadowedQueueGroupObjects_NoVirtual(EarthView.World.Graphic.RenderQueueGroup group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView_World_Graphic_CSceneManager_renderAdditiveTextureShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_NoVirtual(this.NativeObject, object.Equals(group, null) ? IntPtr.Zero : group.NativeObject, om);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_renderAdditiveTextureShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_Function(IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView.World.Graphic.RenderQueueGroup csobj_group = new EarthView.World.Graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_group.BindNativeObject(group,"CRenderQueueGroup");
					csobj_group.Delegate = true;
					IClassFactory csobj_groupClassFactory = GlobalClassFactoryMap.Get(csobj_group.GetCppInstanceTypeName());
					if (csobj_groupClassFactory != null)
					{
						csobj_group.Delegate = true;
						csobj_group = csobj_groupClassFactory.Create() as EarthView.World.Graphic.RenderQueueGroup;
						csobj_group.BindNativeObject(group, "CRenderQueueGroup");
						csobj_group.Delegate = true;
					}
					
					RenderAdditiveTextureShadowedQueueGroupObjects(csobj_group, om);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderAdditiveTextureShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(IntPtr pNativeObject, IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected virtual void RenderAdditiveTextureShadowedQueueGroupObjects(EarthView.World.Graphic.RenderQueueGroup group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView_World_Graphic_CSceneManager_renderAdditiveTextureShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(this.NativeObject, object.Equals(group, null) ? IntPtr.Zero : group.NativeObject, om);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void renderObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(IntPtr objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, bool lightScissoringClipping, bool doLightIteration, IntPtr manualLightList);

				protected renderObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList m_renderObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_NoVirtual(IntPtr pNativeObject, IntPtr objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, byte lightScissoringClipping, byte doLightIteration, IntPtr manualLightList);

				protected virtual void RenderObjects_NoVirtual(EarthView.World.Graphic.QueuedRenderableCollection objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, bool lightScissoringClipping, bool doLightIteration, EarthView.World.Graphic.LightList manualLightList)
				{
					EarthView_World_Graphic_CSceneManager_renderObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_NoVirtual(this.NativeObject, object.Equals(objs, null) ? IntPtr.Zero : objs.NativeObject, om, Convert.ToByte(lightScissoringClipping), Convert.ToByte(doLightIteration), object.Equals(manualLightList, null) ? IntPtr.Zero : manualLightList.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_renderObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_Function(IntPtr objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, bool lightScissoringClipping, bool doLightIteration, IntPtr manualLightList)
				{
					EarthView.World.Graphic.QueuedRenderableCollection csobj_objs = new EarthView.World.Graphic.QueuedRenderableCollection(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_objs.BindNativeObject(objs,"CQueuedRenderableCollection");
					csobj_objs.Delegate = true;
					IClassFactory csobj_objsClassFactory = GlobalClassFactoryMap.Get(csobj_objs.GetCppInstanceTypeName());
					if (csobj_objsClassFactory != null)
					{
						csobj_objs.Delegate = true;
						csobj_objs = csobj_objsClassFactory.Create() as EarthView.World.Graphic.QueuedRenderableCollection;
						csobj_objs.BindNativeObject(objs, "CQueuedRenderableCollection");
						csobj_objs.Delegate = true;
					}
					EarthView.World.Graphic.LightList csobj_manualLightList = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_manualLightList.BindNativeObject(manualLightList,"LightList");
					csobj_manualLightList.Delegate = true;
					IClassFactory csobj_manualLightListClassFactory = GlobalClassFactoryMap.Get(csobj_manualLightList.GetCppInstanceTypeName());
					if (csobj_manualLightListClassFactory != null)
					{
						csobj_manualLightList.Delegate = true;
						csobj_manualLightList = csobj_manualLightListClassFactory.Create() as EarthView.World.Graphic.LightList;
						csobj_manualLightList.BindNativeObject(manualLightList, "LightList");
						csobj_manualLightList.Delegate = true;
					}
					
					RenderObjects(csobj_objs, om, lightScissoringClipping, doLightIteration, csobj_manualLightList);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(IntPtr pNativeObject, IntPtr objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, byte lightScissoringClipping, byte doLightIteration, IntPtr manualLightList);

				protected virtual void RenderObjects(EarthView.World.Graphic.QueuedRenderableCollection objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, bool lightScissoringClipping, bool doLightIteration, EarthView.World.Graphic.LightList manualLightList)
				{
					EarthView_World_Graphic_CSceneManager_renderObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(this.NativeObject, object.Equals(objs, null) ? IntPtr.Zero : objs.NativeObject, om, Convert.ToByte(lightScissoringClipping), Convert.ToByte(doLightIteration), object.Equals(manualLightList, null) ? IntPtr.Zero : manualLightList.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void renderObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(IntPtr objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, bool lightScissoringClipping, bool doLightIteration);

				protected renderObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool m_renderObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, byte lightScissoringClipping, byte doLightIteration);

				protected virtual void RenderObjects_NoVirtual(EarthView.World.Graphic.QueuedRenderableCollection objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, bool lightScissoringClipping, bool doLightIteration)
				{
					EarthView_World_Graphic_CSceneManager_renderObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_NoVirtual(this.NativeObject, object.Equals(objs, null) ? IntPtr.Zero : objs.NativeObject, om, Convert.ToByte(lightScissoringClipping), Convert.ToByte(doLightIteration));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_renderObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_Function(IntPtr objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, bool lightScissoringClipping, bool doLightIteration)
				{
					EarthView.World.Graphic.QueuedRenderableCollection csobj_objs = new EarthView.World.Graphic.QueuedRenderableCollection(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_objs.BindNativeObject(objs,"CQueuedRenderableCollection");
					csobj_objs.Delegate = true;
					IClassFactory csobj_objsClassFactory = GlobalClassFactoryMap.Get(csobj_objs.GetCppInstanceTypeName());
					if (csobj_objsClassFactory != null)
					{
						csobj_objs.Delegate = true;
						csobj_objs = csobj_objsClassFactory.Create() as EarthView.World.Graphic.QueuedRenderableCollection;
						csobj_objs.BindNativeObject(objs, "CQueuedRenderableCollection");
						csobj_objs.Delegate = true;
					}
					
					RenderObjects(csobj_objs, om, lightScissoringClipping, doLightIteration);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(IntPtr pNativeObject, IntPtr objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, byte lightScissoringClipping, byte doLightIteration);

				protected virtual void RenderObjects(EarthView.World.Graphic.QueuedRenderableCollection objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, bool lightScissoringClipping, bool doLightIteration)
				{
					EarthView_World_Graphic_CSceneManager_renderObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(this.NativeObject, object.Equals(objs, null) ? IntPtr.Zero : objs.NativeObject, om, Convert.ToByte(lightScissoringClipping), Convert.ToByte(doLightIteration));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void renderTransparentShadowCasterObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(IntPtr objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, bool lightScissoringClipping, bool doLightIteration, IntPtr manualLightList);

				protected renderTransparentShadowCasterObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList m_renderTransparentShadowCasterObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderTransparentShadowCasterObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_NoVirtual(IntPtr pNativeObject, IntPtr objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, byte lightScissoringClipping, byte doLightIteration, IntPtr manualLightList);

				protected virtual void RenderTransparentShadowCasterObjects_NoVirtual(EarthView.World.Graphic.QueuedRenderableCollection objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, bool lightScissoringClipping, bool doLightIteration, EarthView.World.Graphic.LightList manualLightList)
				{
					EarthView_World_Graphic_CSceneManager_renderTransparentShadowCasterObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_NoVirtual(this.NativeObject, object.Equals(objs, null) ? IntPtr.Zero : objs.NativeObject, om, Convert.ToByte(lightScissoringClipping), Convert.ToByte(doLightIteration), object.Equals(manualLightList, null) ? IntPtr.Zero : manualLightList.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_renderTransparentShadowCasterObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_Function(IntPtr objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, bool lightScissoringClipping, bool doLightIteration, IntPtr manualLightList)
				{
					EarthView.World.Graphic.QueuedRenderableCollection csobj_objs = new EarthView.World.Graphic.QueuedRenderableCollection(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_objs.BindNativeObject(objs,"CQueuedRenderableCollection");
					csobj_objs.Delegate = true;
					IClassFactory csobj_objsClassFactory = GlobalClassFactoryMap.Get(csobj_objs.GetCppInstanceTypeName());
					if (csobj_objsClassFactory != null)
					{
						csobj_objs.Delegate = true;
						csobj_objs = csobj_objsClassFactory.Create() as EarthView.World.Graphic.QueuedRenderableCollection;
						csobj_objs.BindNativeObject(objs, "CQueuedRenderableCollection");
						csobj_objs.Delegate = true;
					}
					EarthView.World.Graphic.LightList csobj_manualLightList = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_manualLightList.BindNativeObject(manualLightList,"LightList");
					csobj_manualLightList.Delegate = true;
					IClassFactory csobj_manualLightListClassFactory = GlobalClassFactoryMap.Get(csobj_manualLightList.GetCppInstanceTypeName());
					if (csobj_manualLightListClassFactory != null)
					{
						csobj_manualLightList.Delegate = true;
						csobj_manualLightList = csobj_manualLightListClassFactory.Create() as EarthView.World.Graphic.LightList;
						csobj_manualLightList.BindNativeObject(manualLightList, "LightList");
						csobj_manualLightList.Delegate = true;
					}
					
					RenderTransparentShadowCasterObjects(csobj_objs, om, lightScissoringClipping, doLightIteration, csobj_manualLightList);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderTransparentShadowCasterObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(IntPtr pNativeObject, IntPtr objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, byte lightScissoringClipping, byte doLightIteration, IntPtr manualLightList);

				protected virtual void RenderTransparentShadowCasterObjects(EarthView.World.Graphic.QueuedRenderableCollection objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, bool lightScissoringClipping, bool doLightIteration, EarthView.World.Graphic.LightList manualLightList)
				{
					EarthView_World_Graphic_CSceneManager_renderTransparentShadowCasterObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(this.NativeObject, object.Equals(objs, null) ? IntPtr.Zero : objs.NativeObject, om, Convert.ToByte(lightScissoringClipping), Convert.ToByte(doLightIteration), object.Equals(manualLightList, null) ? IntPtr.Zero : manualLightList.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void renderTransparentShadowCasterObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(IntPtr objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, bool lightScissoringClipping, bool doLightIteration);

				protected renderTransparentShadowCasterObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool m_renderTransparentShadowCasterObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderTransparentShadowCasterObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, byte lightScissoringClipping, byte doLightIteration);

				protected virtual void RenderTransparentShadowCasterObjects_NoVirtual(EarthView.World.Graphic.QueuedRenderableCollection objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, bool lightScissoringClipping, bool doLightIteration)
				{
					EarthView_World_Graphic_CSceneManager_renderTransparentShadowCasterObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_NoVirtual(this.NativeObject, object.Equals(objs, null) ? IntPtr.Zero : objs.NativeObject, om, Convert.ToByte(lightScissoringClipping), Convert.ToByte(doLightIteration));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_renderTransparentShadowCasterObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_Function(IntPtr objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, bool lightScissoringClipping, bool doLightIteration)
				{
					EarthView.World.Graphic.QueuedRenderableCollection csobj_objs = new EarthView.World.Graphic.QueuedRenderableCollection(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_objs.BindNativeObject(objs,"CQueuedRenderableCollection");
					csobj_objs.Delegate = true;
					IClassFactory csobj_objsClassFactory = GlobalClassFactoryMap.Get(csobj_objs.GetCppInstanceTypeName());
					if (csobj_objsClassFactory != null)
					{
						csobj_objs.Delegate = true;
						csobj_objs = csobj_objsClassFactory.Create() as EarthView.World.Graphic.QueuedRenderableCollection;
						csobj_objs.BindNativeObject(objs, "CQueuedRenderableCollection");
						csobj_objs.Delegate = true;
					}
					
					RenderTransparentShadowCasterObjects(csobj_objs, om, lightScissoringClipping, doLightIteration);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_renderTransparentShadowCasterObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(IntPtr pNativeObject, IntPtr objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, byte lightScissoringClipping, byte doLightIteration);

				protected virtual void RenderTransparentShadowCasterObjects(EarthView.World.Graphic.QueuedRenderableCollection objs, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om, bool lightScissoringClipping, bool doLightIteration)
				{
					EarthView_World_Graphic_CSceneManager_renderTransparentShadowCasterObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(this.NativeObject, object.Equals(objs, null) ? IntPtr.Zero : objs.NativeObject, om, Convert.ToByte(lightScissoringClipping), Convert.ToByte(doLightIteration));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void updateRenderQueueSplitOptions_CallBack_void();

				protected updateRenderQueueSplitOptions_CallBack_void m_updateRenderQueueSplitOptions_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_updateRenderQueueSplitOptions_void_NoVirtual(IntPtr pNativeObject);

				protected virtual void UpdateRenderQueueSplitOptions_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_updateRenderQueueSplitOptions_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_updateRenderQueueSplitOptions_void_Function()
				{
					UpdateRenderQueueSplitOptions();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_updateRenderQueueSplitOptions_void(IntPtr pNativeObject);

				protected virtual void UpdateRenderQueueSplitOptions()
				{
					EarthView_World_Graphic_CSceneManager_updateRenderQueueSplitOptions_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void updateRenderQueueGroupSplitOptions_CallBack_void_CRenderQueueGroup_ev_bool_ev_bool(IntPtr group, bool suppressShadows, bool suppressRenderState);

				protected updateRenderQueueGroupSplitOptions_CallBack_void_CRenderQueueGroup_ev_bool_ev_bool m_updateRenderQueueGroupSplitOptions_CallBack_void_CRenderQueueGroup_ev_bool_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_updateRenderQueueGroupSplitOptions_void_CRenderQueueGroup_ev_bool_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr group, byte suppressShadows, byte suppressRenderState);

				protected virtual void UpdateRenderQueueGroupSplitOptions_NoVirtual(EarthView.World.Graphic.RenderQueueGroup group, bool suppressShadows, bool suppressRenderState)
				{
					EarthView_World_Graphic_CSceneManager_updateRenderQueueGroupSplitOptions_void_CRenderQueueGroup_ev_bool_ev_bool_NoVirtual(this.NativeObject, object.Equals(group, null) ? IntPtr.Zero : group.NativeObject, Convert.ToByte(suppressShadows), Convert.ToByte(suppressRenderState));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_updateRenderQueueGroupSplitOptions_void_CRenderQueueGroup_ev_bool_ev_bool_Function(IntPtr group, bool suppressShadows, bool suppressRenderState)
				{
					EarthView.World.Graphic.RenderQueueGroup csobj_group = new EarthView.World.Graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_group.BindNativeObject(group,"CRenderQueueGroup");
					csobj_group.Delegate = true;
					IClassFactory csobj_groupClassFactory = GlobalClassFactoryMap.Get(csobj_group.GetCppInstanceTypeName());
					if (csobj_groupClassFactory != null)
					{
						csobj_group.Delegate = true;
						csobj_group = csobj_groupClassFactory.Create() as EarthView.World.Graphic.RenderQueueGroup;
						csobj_group.BindNativeObject(group, "CRenderQueueGroup");
						csobj_group.Delegate = true;
					}
					
					UpdateRenderQueueGroupSplitOptions(csobj_group, suppressShadows, suppressRenderState);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_updateRenderQueueGroupSplitOptions_void_CRenderQueueGroup_ev_bool_ev_bool(IntPtr pNativeObject, IntPtr group, byte suppressShadows, byte suppressRenderState);

				protected virtual void UpdateRenderQueueGroupSplitOptions(EarthView.World.Graphic.RenderQueueGroup group, bool suppressShadows, bool suppressRenderState)
				{
					EarthView_World_Graphic_CSceneManager_updateRenderQueueGroupSplitOptions_void_CRenderQueueGroup_ev_bool_ev_bool(this.NativeObject, object.Equals(group, null) ? IntPtr.Zero : group.NativeObject, Convert.ToByte(suppressShadows), Convert.ToByte(suppressRenderState));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate int buildAndSetScissor_CallBack_ClipResult_LightList_CCamera(IntPtr ll, IntPtr cam);

				protected buildAndSetScissor_CallBack_ClipResult_LightList_CCamera m_buildAndSetScissor_CallBack_ClipResult_LightList_CCamera;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CSceneManager_buildAndSetScissor_ClipResult_LightList_CCamera_NoVirtual(IntPtr pNativeObject, IntPtr ll, IntPtr cam);

				protected virtual EarthView.World.Graphic.CLIPRESULT BuildAndSetScissor_NoVirtual(EarthView.World.Graphic.LightList ll, EarthView.World.Graphic.Camera cam)
				{
					int ret=EarthView_World_Graphic_CSceneManager_buildAndSetScissor_ClipResult_LightList_CCamera_NoVirtual(this.NativeObject, object.Equals(ll, null) ? IntPtr.Zero : ll.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject);
					
					return (EarthView.World.Graphic.CLIPRESULT)ret;
					
				}

				protected  int EarthView_World_Graphic_CSceneManager_buildAndSetScissor_ClipResult_LightList_CCamera_Function(IntPtr ll, IntPtr cam)
				{
					EarthView.World.Graphic.LightList csobj_ll = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_ll.BindNativeObject(ll,"LightList");
					csobj_ll.Delegate = true;
					IClassFactory csobj_llClassFactory = GlobalClassFactoryMap.Get(csobj_ll.GetCppInstanceTypeName());
					if (csobj_llClassFactory != null)
					{
						csobj_ll.Delegate = true;
						csobj_ll = csobj_llClassFactory.Create() as EarthView.World.Graphic.LightList;
						csobj_ll.BindNativeObject(ll, "LightList");
						csobj_ll.Delegate = true;
					}
					EarthView.World.Graphic.Camera csobj_cam = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_cam.BindNativeObject(cam,"CCamera");
					csobj_cam.Delegate = true;
					IClassFactory csobj_camClassFactory = GlobalClassFactoryMap.Get(csobj_cam.GetCppInstanceTypeName());
					if (csobj_camClassFactory != null)
					{
						csobj_cam.Delegate = true;
						csobj_cam = csobj_camClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_cam.BindNativeObject(cam, "CCamera");
						csobj_cam.Delegate = true;
					}
					
					EarthView.World.Graphic.CLIPRESULT csret=BuildAndSetScissor(csobj_ll, csobj_cam);
					
					return (int)csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CSceneManager_buildAndSetScissor_ClipResult_LightList_CCamera(IntPtr pNativeObject, IntPtr ll, IntPtr cam);

				protected virtual EarthView.World.Graphic.CLIPRESULT BuildAndSetScissor(EarthView.World.Graphic.LightList ll, EarthView.World.Graphic.Camera cam)
				{
					int ret=EarthView_World_Graphic_CSceneManager_buildAndSetScissor_ClipResult_LightList_CCamera(this.NativeObject, object.Equals(ll, null) ? IntPtr.Zero : ll.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject);
					
					return (EarthView.World.Graphic.CLIPRESULT)ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void buildScissor_CallBack_void_CLight_CCamera_RealRect(IntPtr l, IntPtr cam, IntPtr rect);

				protected buildScissor_CallBack_void_CLight_CCamera_RealRect m_buildScissor_CallBack_void_CLight_CCamera_RealRect;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_buildScissor_void_CLight_CCamera_RealRect_NoVirtual(IntPtr pNativeObject, IntPtr l, IntPtr cam, IntPtr rect);

				protected virtual void BuildScissor_NoVirtual(EarthView.World.Graphic.Light l, EarthView.World.Graphic.Camera cam, ref EarthView.World.Graphic.RealRect rect)
				{
					EarthView_World_Graphic_CSceneManager_buildScissor_void_CLight_CCamera_RealRect_NoVirtual(this.NativeObject, object.Equals(l, null) ? IntPtr.Zero : l.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject, object.Equals(rect, null) ? IntPtr.Zero : rect.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_buildScissor_void_CLight_CCamera_RealRect_Function(IntPtr l, IntPtr cam, IntPtr rect)
				{
					EarthView.World.Graphic.Light csobj_l = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_l.BindNativeObject(l,"CLight");
					csobj_l.Delegate = true;
					IClassFactory csobj_lClassFactory = GlobalClassFactoryMap.Get(csobj_l.GetCppInstanceTypeName());
					if (csobj_lClassFactory != null)
					{
						csobj_l.Delegate = true;
						csobj_l = csobj_lClassFactory.Create() as EarthView.World.Graphic.Light;
						csobj_l.BindNativeObject(l, "CLight");
						csobj_l.Delegate = true;
					}
					EarthView.World.Graphic.Camera csobj_cam = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_cam.BindNativeObject(cam,"CCamera");
					csobj_cam.Delegate = true;
					IClassFactory csobj_camClassFactory = GlobalClassFactoryMap.Get(csobj_cam.GetCppInstanceTypeName());
					if (csobj_camClassFactory != null)
					{
						csobj_cam.Delegate = true;
						csobj_cam = csobj_camClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_cam.BindNativeObject(cam, "CCamera");
						csobj_cam.Delegate = true;
					}
					EarthView.World.Graphic.RealRect csobj_rect = new EarthView.World.Graphic.RealRect(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_rect.BindNativeObject(rect,"RealRect");
					csobj_rect.Delegate = true;
					IClassFactory csobj_rectClassFactory = GlobalClassFactoryMap.Get(csobj_rect.GetCppInstanceTypeName());
					if (csobj_rectClassFactory != null)
					{
						csobj_rect.Delegate = true;
						csobj_rect = csobj_rectClassFactory.Create() as EarthView.World.Graphic.RealRect;
						csobj_rect.BindNativeObject(rect, "RealRect");
						csobj_rect.Delegate = true;
					}
					
					BuildScissor(csobj_l, csobj_cam, ref csobj_rect);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_buildScissor_void_CLight_CCamera_RealRect(IntPtr pNativeObject, IntPtr l, IntPtr cam, IntPtr rect);

				protected virtual void BuildScissor(EarthView.World.Graphic.Light l, EarthView.World.Graphic.Camera cam, ref EarthView.World.Graphic.RealRect rect)
				{
					EarthView_World_Graphic_CSceneManager_buildScissor_void_CLight_CCamera_RealRect(this.NativeObject, object.Equals(l, null) ? IntPtr.Zero : l.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject, object.Equals(rect, null) ? IntPtr.Zero : rect.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void resetScissor_CallBack_void();

				protected resetScissor_CallBack_void m_resetScissor_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_resetScissor_void_NoVirtual(IntPtr pNativeObject);

				protected virtual void ResetScissor_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_resetScissor_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_resetScissor_void_Function()
				{
					ResetScissor();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_resetScissor_void(IntPtr pNativeObject);

				protected virtual void ResetScissor()
				{
					EarthView_World_Graphic_CSceneManager_resetScissor_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate int buildAndSetLightClip_CallBack_ClipResult_LightList(IntPtr ll);

				protected buildAndSetLightClip_CallBack_ClipResult_LightList m_buildAndSetLightClip_CallBack_ClipResult_LightList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CSceneManager_buildAndSetLightClip_ClipResult_LightList_NoVirtual(IntPtr pNativeObject, IntPtr ll);

				protected virtual EarthView.World.Graphic.CLIPRESULT BuildAndSetLightClip_NoVirtual(EarthView.World.Graphic.LightList ll)
				{
					int ret=EarthView_World_Graphic_CSceneManager_buildAndSetLightClip_ClipResult_LightList_NoVirtual(this.NativeObject, object.Equals(ll, null) ? IntPtr.Zero : ll.NativeObject);
					
					return (EarthView.World.Graphic.CLIPRESULT)ret;
					
				}

				protected  int EarthView_World_Graphic_CSceneManager_buildAndSetLightClip_ClipResult_LightList_Function(IntPtr ll)
				{
					EarthView.World.Graphic.LightList csobj_ll = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_ll.BindNativeObject(ll,"LightList");
					csobj_ll.Delegate = true;
					IClassFactory csobj_llClassFactory = GlobalClassFactoryMap.Get(csobj_ll.GetCppInstanceTypeName());
					if (csobj_llClassFactory != null)
					{
						csobj_ll.Delegate = true;
						csobj_ll = csobj_llClassFactory.Create() as EarthView.World.Graphic.LightList;
						csobj_ll.BindNativeObject(ll, "LightList");
						csobj_ll.Delegate = true;
					}
					
					EarthView.World.Graphic.CLIPRESULT csret=BuildAndSetLightClip(csobj_ll);
					
					return (int)csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CSceneManager_buildAndSetLightClip_ClipResult_LightList(IntPtr pNativeObject, IntPtr ll);

				protected virtual EarthView.World.Graphic.CLIPRESULT BuildAndSetLightClip(EarthView.World.Graphic.LightList ll)
				{
					int ret=EarthView_World_Graphic_CSceneManager_buildAndSetLightClip_ClipResult_LightList(this.NativeObject, object.Equals(ll, null) ? IntPtr.Zero : ll.NativeObject);
					
					return (EarthView.World.Graphic.CLIPRESULT)ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void buildLightClip_CallBack_void_CLight_PlaneList(IntPtr l, IntPtr planes);

				protected buildLightClip_CallBack_void_CLight_PlaneList m_buildLightClip_CallBack_void_CLight_PlaneList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_buildLightClip_void_CLight_PlaneList_NoVirtual(IntPtr pNativeObject, IntPtr l, IntPtr planes);

				protected virtual void BuildLightClip_NoVirtual(EarthView.World.Graphic.Light l, ref EarthView.World.Spatial.Math.PlaneList planes)
				{
					EarthView_World_Graphic_CSceneManager_buildLightClip_void_CLight_PlaneList_NoVirtual(this.NativeObject, object.Equals(l, null) ? IntPtr.Zero : l.NativeObject, object.Equals(planes, null) ? IntPtr.Zero : planes.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_buildLightClip_void_CLight_PlaneList_Function(IntPtr l, IntPtr planes)
				{
					EarthView.World.Graphic.Light csobj_l = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_l.BindNativeObject(l,"CLight");
					csobj_l.Delegate = true;
					IClassFactory csobj_lClassFactory = GlobalClassFactoryMap.Get(csobj_l.GetCppInstanceTypeName());
					if (csobj_lClassFactory != null)
					{
						csobj_l.Delegate = true;
						csobj_l = csobj_lClassFactory.Create() as EarthView.World.Graphic.Light;
						csobj_l.BindNativeObject(l, "CLight");
						csobj_l.Delegate = true;
					}
					EarthView.World.Spatial.Math.PlaneList csobj_planes = new EarthView.World.Spatial.Math.PlaneList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_planes.BindNativeObject(planes,"PlaneList");
					csobj_planes.Delegate = true;
					IClassFactory csobj_planesClassFactory = GlobalClassFactoryMap.Get(csobj_planes.GetCppInstanceTypeName());
					if (csobj_planesClassFactory != null)
					{
						csobj_planes.Delegate = true;
						csobj_planes = csobj_planesClassFactory.Create() as EarthView.World.Spatial.Math.PlaneList;
						csobj_planes.BindNativeObject(planes, "PlaneList");
						csobj_planes.Delegate = true;
					}
					
					BuildLightClip(csobj_l, ref csobj_planes);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_buildLightClip_void_CLight_PlaneList(IntPtr pNativeObject, IntPtr l, IntPtr planes);

				protected virtual void BuildLightClip(EarthView.World.Graphic.Light l, ref EarthView.World.Spatial.Math.PlaneList planes)
				{
					EarthView_World_Graphic_CSceneManager_buildLightClip_void_CLight_PlaneList(this.NativeObject, object.Equals(l, null) ? IntPtr.Zero : l.NativeObject, object.Equals(planes, null) ? IntPtr.Zero : planes.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void resetLightClip_CallBack_void();

				protected resetLightClip_CallBack_void m_resetLightClip_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_resetLightClip_void_NoVirtual(IntPtr pNativeObject);

				protected virtual void ResetLightClip_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_resetLightClip_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_resetLightClip_void_Function()
				{
					ResetLightClip();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_resetLightClip_void(IntPtr pNativeObject);

				protected virtual void ResetLightClip()
				{
					EarthView_World_Graphic_CSceneManager_resetLightClip_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void checkCachedLightClippingInfo_CallBack_void();

				protected checkCachedLightClippingInfo_CallBack_void m_checkCachedLightClippingInfo_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_checkCachedLightClippingInfo_void_NoVirtual(IntPtr pNativeObject);

				protected virtual void CheckCachedLightClippingInfo_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_checkCachedLightClippingInfo_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_checkCachedLightClippingInfo_void_Function()
				{
					CheckCachedLightClippingInfo();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_checkCachedLightClippingInfo_void(IntPtr pNativeObject);

				protected virtual void CheckCachedLightClippingInfo()
				{
					EarthView_World_Graphic_CSceneManager_checkCachedLightClippingInfo_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void useLights_CallBack_void_LightList_ev_uint16(IntPtr lights, ushort limit);

				protected useLights_CallBack_void_LightList_ev_uint16 m_useLights_CallBack_void_LightList_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_useLights_void_LightList_ev_uint16_NoVirtual(IntPtr pNativeObject, IntPtr lights, ushort limit);

				protected virtual void UseLights_NoVirtual(EarthView.World.Graphic.LightList lights, ushort limit)
				{
					EarthView_World_Graphic_CSceneManager_useLights_void_LightList_ev_uint16_NoVirtual(this.NativeObject, object.Equals(lights, null) ? IntPtr.Zero : lights.NativeObject, limit);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_useLights_void_LightList_ev_uint16_Function(IntPtr lights, ushort limit)
				{
					EarthView.World.Graphic.LightList csobj_lights = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_lights.BindNativeObject(lights,"LightList");
					csobj_lights.Delegate = true;
					IClassFactory csobj_lightsClassFactory = GlobalClassFactoryMap.Get(csobj_lights.GetCppInstanceTypeName());
					if (csobj_lightsClassFactory != null)
					{
						csobj_lights.Delegate = true;
						csobj_lights = csobj_lightsClassFactory.Create() as EarthView.World.Graphic.LightList;
						csobj_lights.BindNativeObject(lights, "LightList");
						csobj_lights.Delegate = true;
					}
					
					UseLights(csobj_lights, limit);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_useLights_void_LightList_ev_uint16(IntPtr pNativeObject, IntPtr lights, ushort limit);

				protected virtual void UseLights(EarthView.World.Graphic.LightList lights, ushort limit)
				{
					EarthView_World_Graphic_CSceneManager_useLights_void_LightList_ev_uint16(this.NativeObject, object.Equals(lights, null) ? IntPtr.Zero : lights.NativeObject, limit);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setViewMatrix_CallBack_void_CMatrix4(IntPtr m);

				protected setViewMatrix_CallBack_void_CMatrix4 m_setViewMatrix_CallBack_void_CMatrix4;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setViewMatrix_void_CMatrix4_NoVirtual(IntPtr pNativeObject, IntPtr m);

				protected virtual void SetViewMatrix_NoVirtual(EarthView.World.Spatial.Math.Matrix4 m)
				{
					EarthView_World_Graphic_CSceneManager_setViewMatrix_void_CMatrix4_NoVirtual(this.NativeObject, object.Equals(m, null) ? IntPtr.Zero : m.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setViewMatrix_void_CMatrix4_Function(IntPtr m)
				{
					EarthView.World.Spatial.Math.Matrix4 csobj_m = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_m.BindNativeObject(m,"CMatrix4");
					csobj_m.Delegate = true;
					IClassFactory csobj_mClassFactory = GlobalClassFactoryMap.Get(csobj_m.GetCppInstanceTypeName());
					if (csobj_mClassFactory != null)
					{
						csobj_m.Delegate = true;
						csobj_m = csobj_mClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_m.BindNativeObject(m, "CMatrix4");
						csobj_m.Delegate = true;
					}
					
					SetViewMatrix(csobj_m);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setViewMatrix_void_CMatrix4(IntPtr pNativeObject, IntPtr m);

				protected virtual void SetViewMatrix(EarthView.World.Spatial.Math.Matrix4 m)
				{
					EarthView_World_Graphic_CSceneManager_setViewMatrix_void_CMatrix4(this.NativeObject, object.Equals(m, null) ? IntPtr.Zero : m.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void useLightsGpuProgram_CallBack_void_CPass_LightList(IntPtr pass, IntPtr lights);

				protected useLightsGpuProgram_CallBack_void_CPass_LightList m_useLightsGpuProgram_CallBack_void_CPass_LightList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_useLightsGpuProgram_void_CPass_LightList_NoVirtual(IntPtr pNativeObject, IntPtr pass, IntPtr lights);

				protected virtual void UseLightsGpuProgram_NoVirtual(EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.LightList lights)
				{
					EarthView_World_Graphic_CSceneManager_useLightsGpuProgram_void_CPass_LightList_NoVirtual(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(lights, null) ? IntPtr.Zero : lights.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_useLightsGpuProgram_void_CPass_LightList_Function(IntPtr pass, IntPtr lights)
				{
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					EarthView.World.Graphic.LightList csobj_lights = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_lights.BindNativeObject(lights,"LightList");
					csobj_lights.Delegate = true;
					IClassFactory csobj_lightsClassFactory = GlobalClassFactoryMap.Get(csobj_lights.GetCppInstanceTypeName());
					if (csobj_lightsClassFactory != null)
					{
						csobj_lights.Delegate = true;
						csobj_lights = csobj_lightsClassFactory.Create() as EarthView.World.Graphic.LightList;
						csobj_lights.BindNativeObject(lights, "LightList");
						csobj_lights.Delegate = true;
					}
					
					UseLightsGpuProgram(csobj_pass, csobj_lights);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_useLightsGpuProgram_void_CPass_LightList(IntPtr pNativeObject, IntPtr pass, IntPtr lights);

				protected virtual void UseLightsGpuProgram(EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.LightList lights)
				{
					EarthView_World_Graphic_CSceneManager_useLightsGpuProgram_void_CPass_LightList(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(lights, null) ? IntPtr.Zero : lights.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void bindGpuProgram_CallBack_void_CGpuProgram(IntPtr prog);

				protected bindGpuProgram_CallBack_void_CGpuProgram m_bindGpuProgram_CallBack_void_CGpuProgram;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_bindGpuProgram_void_CGpuProgram_NoVirtual(IntPtr pNativeObject, IntPtr prog);

				protected virtual void BindGpuProgram_NoVirtual(EarthView.World.Graphic.GpuProgram prog)
				{
					EarthView_World_Graphic_CSceneManager_bindGpuProgram_void_CGpuProgram_NoVirtual(this.NativeObject, object.Equals(prog, null) ? IntPtr.Zero : prog.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_bindGpuProgram_void_CGpuProgram_Function(IntPtr prog)
				{
					EarthView.World.Graphic.GpuProgram csobj_prog = new EarthView.World.Graphic.GpuProgram(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_prog.BindNativeObject(prog,"CGpuProgram");
					csobj_prog.Delegate = true;
					IClassFactory csobj_progClassFactory = GlobalClassFactoryMap.Get(csobj_prog.GetCppInstanceTypeName());
					if (csobj_progClassFactory != null)
					{
						csobj_prog.Delegate = true;
						csobj_prog = csobj_progClassFactory.Create() as EarthView.World.Graphic.GpuProgram;
						csobj_prog.BindNativeObject(prog, "CGpuProgram");
						csobj_prog.Delegate = true;
					}
					
					BindGpuProgram(csobj_prog);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_bindGpuProgram_void_CGpuProgram(IntPtr pNativeObject, IntPtr prog);

				protected virtual void BindGpuProgram(EarthView.World.Graphic.GpuProgram prog)
				{
					EarthView_World_Graphic_CSceneManager_bindGpuProgram_void_CGpuProgram(this.NativeObject, object.Equals(prog, null) ? IntPtr.Zero : prog.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void updateGpuProgramParameters_CallBack_void_CPass(IntPtr p);

				protected updateGpuProgramParameters_CallBack_void_CPass m_updateGpuProgramParameters_CallBack_void_CPass;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_updateGpuProgramParameters_void_CPass_NoVirtual(IntPtr pNativeObject, IntPtr p);

				protected virtual void UpdateGpuProgramParameters_NoVirtual(EarthView.World.Graphic.Pass p)
				{
					EarthView_World_Graphic_CSceneManager_updateGpuProgramParameters_void_CPass_NoVirtual(this.NativeObject, object.Equals(p, null) ? IntPtr.Zero : p.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_updateGpuProgramParameters_void_CPass_Function(IntPtr p)
				{
					EarthView.World.Graphic.Pass csobj_p = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_p.BindNativeObject(p,"CPass");
					csobj_p.Delegate = true;
					IClassFactory csobj_pClassFactory = GlobalClassFactoryMap.Get(csobj_p.GetCppInstanceTypeName());
					if (csobj_pClassFactory != null)
					{
						csobj_p.Delegate = true;
						csobj_p = csobj_pClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_p.BindNativeObject(p, "CPass");
						csobj_p.Delegate = true;
					}
					
					UpdateGpuProgramParameters(csobj_p);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_updateGpuProgramParameters_void_CPass(IntPtr pNativeObject, IntPtr p);

				protected virtual void UpdateGpuProgramParameters(EarthView.World.Graphic.Pass p)
				{
					EarthView_World_Graphic_CSceneManager_updateGpuProgramParameters_void_CPass(this.NativeObject, object.Equals(p, null) ? IntPtr.Zero : p.NativeObject);
					
				}

				/// <summary>
				/// 构造函数
				/// </summary>
				/// <param name="instanceName">实例名称</param>
				/// <returns></returns>
				public SceneManager(string instanceName) : base(CreatedWhenConstruct.CWC_NotToCreate)
				{
					NameValuePairList list = new NameValuePairList();
					BasePtr valueinstanceName = new BasePtr(instanceName);
					list.Add("instanceName", valueinstanceName.PtrVal);
					Create("CSceneManagerProxy", list);
					if (!"EarthView.World.Graphic.SceneManager".Equals(((Object)this).GetType().ToString()))
					{
						this.SetCustomExtend(true);
					}
					RegisterCallBack();
					this.needDispose = true;
					GlobalTraceInfoMap.Put(this);
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getName_EVString(IntPtr pNativeObject);

				/// <summary>
				/// 获取场景管理中的实例名称
				/// </summary>
				/// <param name=""></param>
				/// <returns>名称值</returns>
				public string GetName()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getName_EVString(this.NativeObject);
					
					string ret = Marshal.PtrToStringAnsi(__ptr);
					ClassFactory.FreeString(ref __ptr);
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate string getTypeName_CallBack_EVString();

				protected getTypeName_CallBack_EVString m_getTypeName_CallBack_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getTypeName_EVString_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获取场景管理器的类型名称
				/// </summary>
				/// <param name=""></param>
				/// <returns>名称值</returns>
				public virtual string GetTypeName_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getTypeName_EVString_NoVirtual(this.NativeObject);
					
					string ret = Marshal.PtrToStringAnsi(__ptr);
					ClassFactory.FreeString(ref __ptr);
					return ret;
					
				}

				protected  string EarthView_World_Graphic_CSceneManager_getTypeName_EVString_Function()
				{
					string csret=GetTypeName();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getTypeName_EVString(IntPtr pNativeObject);

				/// <summary>
				/// 获取场景管理器的类型名称
				/// </summary>
				/// <param name=""></param>
				/// <returns>名称值</returns>
				public virtual string GetTypeName()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getTypeName_EVString(this.NativeObject);
					
					string ret = Marshal.PtrToStringAnsi(__ptr);
					ClassFactory.FreeString(ref __ptr);
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createCamera_CallBack_CCamera_EVString(ref IntPtr name);

				protected createCamera_CallBack_CCamera_EVString m_createCamera_CallBack_CCamera_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createCamera_CCamera_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 创建摄像机                
				/// </summary>
				/// <param name="name">新名称</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Camera CreateCamera_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createCamera_CCamera_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Camera csObj = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CCamera");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Camera;
						csObj.BindNativeObject(__ptr, "CCamera");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createCamera_CCamera_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.Camera csret=CreateCamera(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createCamera_CCamera_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 创建摄像机                
				/// </summary>
				/// <param name="name">新名称</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Camera CreateCamera(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createCamera_CCamera_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Camera csObj = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CCamera");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Camera;
						csObj.BindNativeObject(__ptr, "CCamera");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getCamera_CallBack_CCamera_EVString(ref IntPtr name);

				protected getCamera_CallBack_CCamera_EVString m_getCamera_CallBack_CCamera_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getCamera_CCamera_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 通过摄像机名称获得摄像机
				/// </summary>
				/// <param name="name">名称</param>
				/// <returns>名称值</returns>
				public virtual EarthView.World.Graphic.Camera GetCamera_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getCamera_CCamera_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Camera csObj = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CCamera");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Camera;
						csObj.BindNativeObject(__ptr, "CCamera");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getCamera_CCamera_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.Camera csret=GetCamera(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getCamera_CCamera_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 通过摄像机名称获得摄像机
				/// </summary>
				/// <param name="name">名称</param>
				/// <returns>名称值</returns>
				public virtual EarthView.World.Graphic.Camera GetCamera(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getCamera_CCamera_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Camera csObj = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CCamera");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Camera;
						csObj.BindNativeObject(__ptr, "CCamera");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte hasCamera_CallBack_ev_bool_EVString(ref IntPtr name);

				protected hasCamera_CallBack_ev_bool_EVString m_hasCamera_CallBack_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasCamera_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 判断指定名称的摄像机是否存在
				/// </summary>
				/// <param name="name">名称</param>
				/// <returns>成功，返回此名称，不成功，返回空</returns>
				public virtual bool HasCamera_NoVirtual(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasCamera_ev_bool_EVString_NoVirtual(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_hasCamera_ev_bool_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					bool csret=HasCamera(strname);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasCamera_ev_bool_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 判断指定名称的摄像机是否存在
				/// </summary>
				/// <param name="name">名称</param>
				/// <returns>成功，返回此名称，不成功，返回空</returns>
				public virtual bool HasCamera(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasCamera_ev_bool_EVString(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyCamera_CallBack_void_CCamera(IntPtr cam);

				protected destroyCamera_CallBack_void_CCamera m_destroyCamera_CallBack_void_CCamera;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyCamera_void_CCamera_NoVirtual(IntPtr pNativeObject, IntPtr cam);

				/// <summary>
				/// 通过指针删除场景中的摄像机
				/// </summary>
				/// <param name="cam">指向摄像机的指针</param>
				/// <returns></returns>
				public virtual void DestroyCamera_NoVirtual(EarthView.World.Graphic.Camera cam)
				{
					EarthView_World_Graphic_CSceneManager_destroyCamera_void_CCamera_NoVirtual(this.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyCamera_void_CCamera_Function(IntPtr cam)
				{
					EarthView.World.Graphic.Camera csobj_cam = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_cam.BindNativeObject(cam,"CCamera");
					csobj_cam.Delegate = true;
					IClassFactory csobj_camClassFactory = GlobalClassFactoryMap.Get(csobj_cam.GetCppInstanceTypeName());
					if (csobj_camClassFactory != null)
					{
						csobj_cam.Delegate = true;
						csobj_cam = csobj_camClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_cam.BindNativeObject(cam, "CCamera");
						csobj_cam.Delegate = true;
					}
					
					DestroyCamera(csobj_cam);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyCamera_void_CCamera(IntPtr pNativeObject, IntPtr cam);

				/// <summary>
				/// 通过指针删除场景中的摄像机
				/// </summary>
				/// <param name="cam">指向摄像机的指针</param>
				/// <returns></returns>
				public virtual void DestroyCamera(EarthView.World.Graphic.Camera cam)
				{
					EarthView_World_Graphic_CSceneManager_destroyCamera_void_CCamera(this.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyCamera_CallBack_void_EVString(ref IntPtr name);

				protected destroyCamera_CallBack_void_EVString m_destroyCamera_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyCamera_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 通过名称删除场景中的摄像机
				/// </summary>
				/// <param name="name">名称</param>
				/// <returns></returns>
				public virtual void DestroyCamera_NoVirtual(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyCamera_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyCamera_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroyCamera(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyCamera_void_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 通过名称删除场景中的摄像机
				/// </summary>
				/// <param name="name">名称</param>
				/// <returns></returns>
				public virtual void DestroyCamera(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyCamera_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyAllCameras_CallBack_void();

				protected destroyAllCameras_CallBack_void m_destroyAllCameras_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllCameras_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 删除场景中的所有摄像机
				/// </summary>
				/// <param name="">名称</param>
				/// <returns></returns>
				public virtual void DestroyAllCameras_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllCameras_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyAllCameras_void_Function()
				{
					DestroyAllCameras();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllCameras_void(IntPtr pNativeObject);

				/// <summary>
				/// 删除场景中的所有摄像机
				/// </summary>
				/// <param name="">名称</param>
				/// <returns></returns>
				public virtual void DestroyAllCameras()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllCameras_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createLight_CallBack_CLight_EVString(ref IntPtr name);

				protected createLight_CallBack_CLight_EVString m_createLight_CallBack_CLight_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createLight_CLight_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 创建光源
				/// 光源可以创建在固定点，或者挂接在场景节点
				/// </summary>
				/// <param name="name">新创建的光源名称</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Light CreateLight_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createLight_CLight_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Light csObj = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CLight");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Light;
						csObj.BindNativeObject(__ptr, "CLight");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createLight_CLight_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.Light csret=CreateLight(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createLight_CLight_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 创建光源
				/// 光源可以创建在固定点，或者挂接在场景节点
				/// </summary>
				/// <param name="name">新创建的光源名称</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Light CreateLight(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createLight_CLight_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Light csObj = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CLight");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Light;
						csObj.BindNativeObject(__ptr, "CLight");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createLight_CallBack_CLight();

				protected createLight_CallBack_CLight m_createLight_CallBack_CLight;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createLight_CLight_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 创建光源
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Light CreateLight_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createLight_CLight_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Light csObj = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CLight");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Light;
						csObj.BindNativeObject(__ptr, "CLight");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createLight_CLight_Function()
				{
					EarthView.World.Graphic.Light csret=CreateLight();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createLight_CLight(IntPtr pNativeObject);

				/// <summary>
				/// 创建光源
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Light CreateLight()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createLight_CLight(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Light csObj = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CLight");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Light;
						csObj.BindNativeObject(__ptr, "CLight");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate ushort getLightCount_CallBack_ev_uint16();

				protected getLightCount_CallBack_ev_uint16 m_getLightCount_CallBack_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ushort EarthView_World_Graphic_CSceneManager_getLightCount_ev_uint16_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获取由场景管理器创建的光源的数量
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual ushort GetLightCount_NoVirtual()
				{
					ushort ret=EarthView_World_Graphic_CSceneManager_getLightCount_ev_uint16_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  ushort EarthView_World_Graphic_CSceneManager_getLightCount_ev_uint16_Function()
				{
					ushort csret=GetLightCount();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ushort EarthView_World_Graphic_CSceneManager_getLightCount_ev_uint16(IntPtr pNativeObject);

				/// <summary>
				/// 获取由场景管理器创建的光源的数量
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual ushort GetLightCount()
				{
					ushort ret=EarthView_World_Graphic_CSceneManager_getLightCount_ev_uint16(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getLight_CallBack_CLight_ev_uint16(ushort index);

				protected getLight_CallBack_CLight_ev_uint16 m_getLight_CallBack_CLight_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getLight_CLight_ev_uint16_NoVirtual(IntPtr pNativeObject, ushort index);

				/// <summary>
				/// 通过序号获取光源
				/// </summary>
				/// <param name="index">序号</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Light GetLight_NoVirtual(ushort index)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getLight_CLight_ev_uint16_NoVirtual(this.NativeObject, index);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Light csObj = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CLight");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Light;
						csObj.BindNativeObject(__ptr, "CLight");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getLight_CLight_ev_uint16_Function(ushort index)
				{
					EarthView.World.Graphic.Light csret=GetLight(index);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getLight_CLight_ev_uint16(IntPtr pNativeObject, ushort index);

				/// <summary>
				/// 通过序号获取光源
				/// </summary>
				/// <param name="index">序号</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Light GetLight(ushort index)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getLight_CLight_ev_uint16(this.NativeObject, index);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Light csObj = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CLight");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Light;
						csObj.BindNativeObject(__ptr, "CLight");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getLight_CallBack_CLight_EVString(ref IntPtr name);

				protected getLight_CallBack_CLight_EVString m_getLight_CallBack_CLight_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getLight_CLight_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 通过名称获取光源
				/// </summary>
				/// <param name="name">光源名称</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Light GetLight_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getLight_CLight_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Light csObj = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CLight");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Light;
						csObj.BindNativeObject(__ptr, "CLight");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getLight_CLight_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.Light csret=GetLight(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getLight_CLight_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 通过名称获取光源
				/// </summary>
				/// <param name="name">光源名称</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Light GetLight(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getLight_CLight_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Light csObj = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CLight");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Light;
						csObj.BindNativeObject(__ptr, "CLight");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte hasLight_CallBack_ev_bool_EVString(ref IntPtr name);

				protected hasLight_CallBack_ev_bool_EVString m_hasLight_CallBack_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasLight_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 判断是否存在给定名称的光源
				/// </summary>
				/// <param name="name">光源名称</param>
				/// <returns></returns>
				public virtual bool HasLight_NoVirtual(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasLight_ev_bool_EVString_NoVirtual(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_hasLight_ev_bool_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					bool csret=HasLight(strname);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasLight_ev_bool_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 判断是否存在给定名称的光源
				/// </summary>
				/// <param name="name">光源名称</param>
				/// <returns></returns>
				public virtual bool HasLight(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasLight_ev_bool_EVString(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getLightClippingPlanes_CallBack_PlaneList_CLight(IntPtr l);

				protected getLightClippingPlanes_CallBack_PlaneList_CLight m_getLightClippingPlanes_CallBack_PlaneList_CLight;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getLightClippingPlanes_PlaneList_CLight_NoVirtual(IntPtr pNativeObject, IntPtr l);

				/// <summary>
				/// 获取光源有效照射区域的裁剪面
				/// </summary>
				/// <param name="l">光源</param>
				/// <returns></returns>
				public virtual EarthView.World.Spatial.Math.PlaneList GetLightClippingPlanes_NoVirtual(EarthView.World.Graphic.Light l)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getLightClippingPlanes_PlaneList_CLight_NoVirtual(this.NativeObject, object.Equals(l, null) ? IntPtr.Zero : l.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Spatial.Math.PlaneList csObj = new EarthView.World.Spatial.Math.PlaneList(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "PlaneList");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.PlaneList;
						csObj.BindNativeObject(__ptr, "PlaneList");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getLightClippingPlanes_PlaneList_CLight_Function(IntPtr l)
				{
					EarthView.World.Graphic.Light csobj_l = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_l.BindNativeObject(l,"CLight");
					csobj_l.Delegate = true;
					IClassFactory csobj_lClassFactory = GlobalClassFactoryMap.Get(csobj_l.GetCppInstanceTypeName());
					if (csobj_lClassFactory != null)
					{
						csobj_l.Delegate = true;
						csobj_l = csobj_lClassFactory.Create() as EarthView.World.Graphic.Light;
						csobj_l.BindNativeObject(l, "CLight");
						csobj_l.Delegate = true;
					}
					
					EarthView.World.Spatial.Math.PlaneList csret=GetLightClippingPlanes(csobj_l);
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getLightClippingPlanes_PlaneList_CLight(IntPtr pNativeObject, IntPtr l);

				/// <summary>
				/// 获取光源有效照射区域的裁剪面
				/// </summary>
				/// <param name="l">光源</param>
				/// <returns></returns>
				public virtual EarthView.World.Spatial.Math.PlaneList GetLightClippingPlanes(EarthView.World.Graphic.Light l)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getLightClippingPlanes_PlaneList_CLight(this.NativeObject, object.Equals(l, null) ? IntPtr.Zero : l.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Spatial.Math.PlaneList csObj = new EarthView.World.Spatial.Math.PlaneList(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "PlaneList");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.PlaneList;
						csObj.BindNativeObject(__ptr, "PlaneList");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getLightScissorRect_CallBack_RealRect_CLight_CCamera(IntPtr l, IntPtr cam);

				protected getLightScissorRect_CallBack_RealRect_CLight_CCamera m_getLightScissorRect_CallBack_RealRect_CLight_CCamera;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getLightScissorRect_RealRect_CLight_CCamera_NoVirtual(IntPtr pNativeObject, IntPtr l, IntPtr cam);

				/// <summary>
				/// 设置光源和相机作用的裁剪矩形
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RealRect GetLightScissorRect_NoVirtual(EarthView.World.Graphic.Light l, EarthView.World.Graphic.Camera cam)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getLightScissorRect_RealRect_CLight_CCamera_NoVirtual(this.NativeObject, object.Equals(l, null) ? IntPtr.Zero : l.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RealRect csObj = new EarthView.World.Graphic.RealRect(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "RealRect");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RealRect;
						csObj.BindNativeObject(__ptr, "RealRect");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getLightScissorRect_RealRect_CLight_CCamera_Function(IntPtr l, IntPtr cam)
				{
					EarthView.World.Graphic.Light csobj_l = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_l.BindNativeObject(l,"CLight");
					csobj_l.Delegate = true;
					IClassFactory csobj_lClassFactory = GlobalClassFactoryMap.Get(csobj_l.GetCppInstanceTypeName());
					if (csobj_lClassFactory != null)
					{
						csobj_l.Delegate = true;
						csobj_l = csobj_lClassFactory.Create() as EarthView.World.Graphic.Light;
						csobj_l.BindNativeObject(l, "CLight");
						csobj_l.Delegate = true;
					}
					EarthView.World.Graphic.Camera csobj_cam = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_cam.BindNativeObject(cam,"CCamera");
					csobj_cam.Delegate = true;
					IClassFactory csobj_camClassFactory = GlobalClassFactoryMap.Get(csobj_cam.GetCppInstanceTypeName());
					if (csobj_camClassFactory != null)
					{
						csobj_cam.Delegate = true;
						csobj_cam = csobj_camClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_cam.BindNativeObject(cam, "CCamera");
						csobj_cam.Delegate = true;
					}
					
					EarthView.World.Graphic.RealRect csret=GetLightScissorRect(csobj_l, csobj_cam);
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getLightScissorRect_RealRect_CLight_CCamera(IntPtr pNativeObject, IntPtr l, IntPtr cam);

				/// <summary>
				/// 设置光源和相机作用的裁剪矩形
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RealRect GetLightScissorRect(EarthView.World.Graphic.Light l, EarthView.World.Graphic.Camera cam)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getLightScissorRect_RealRect_CLight_CCamera(this.NativeObject, object.Equals(l, null) ? IntPtr.Zero : l.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RealRect csObj = new EarthView.World.Graphic.RealRect(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "RealRect");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RealRect;
						csObj.BindNativeObject(__ptr, "RealRect");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyLight_CallBack_void_EVString(ref IntPtr name);

				protected destroyLight_CallBack_void_EVString m_destroyLight_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyLight_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 销毁指定的光源
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void DestroyLight_NoVirtual(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyLight_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyLight_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroyLight(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyLight_void_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 销毁指定的光源
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void DestroyLight(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyLight_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyLight_CallBack_void_CLight(IntPtr light);

				protected destroyLight_CallBack_void_CLight m_destroyLight_CallBack_void_CLight;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyLight_void_CLight_NoVirtual(IntPtr pNativeObject, IntPtr light);

				public virtual void DestroyLight_NoVirtual(EarthView.World.Graphic.Light light)
				{
					EarthView_World_Graphic_CSceneManager_destroyLight_void_CLight_NoVirtual(this.NativeObject, object.Equals(light, null) ? IntPtr.Zero : light.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyLight_void_CLight_Function(IntPtr light)
				{
					EarthView.World.Graphic.Light csobj_light = new EarthView.World.Graphic.Light(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_light.BindNativeObject(light,"CLight");
					csobj_light.Delegate = true;
					IClassFactory csobj_lightClassFactory = GlobalClassFactoryMap.Get(csobj_light.GetCppInstanceTypeName());
					if (csobj_lightClassFactory != null)
					{
						csobj_light.Delegate = true;
						csobj_light = csobj_lightClassFactory.Create() as EarthView.World.Graphic.Light;
						csobj_light.BindNativeObject(light, "CLight");
						csobj_light.Delegate = true;
					}
					
					DestroyLight(csobj_light);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyLight_void_CLight(IntPtr pNativeObject, IntPtr light);

				public virtual void DestroyLight(EarthView.World.Graphic.Light light)
				{
					EarthView_World_Graphic_CSceneManager_destroyLight_void_CLight(this.NativeObject, object.Equals(light, null) ? IntPtr.Zero : light.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyAllLights_CallBack_void();

				protected destroyAllLights_CallBack_void m_destroyAllLights_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllLights_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 销毁所有光源
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void DestroyAllLights_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllLights_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyAllLights_void_Function()
				{
					DestroyAllLights();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllLights_void(IntPtr pNativeObject);

				/// <summary>
				/// 销毁所有光源
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void DestroyAllLights()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllLights_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate string getSoftShadowTexName_CallBack_EVString();

				protected getSoftShadowTexName_CallBack_EVString m_getSoftShadowTexName_CallBack_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSoftShadowTexName_EVString_NoVirtual(IntPtr pNativeObject);

				public virtual string GetSoftShadowTexName_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSoftShadowTexName_EVString_NoVirtual(this.NativeObject);
					
					string ret = Marshal.PtrToStringAnsi(__ptr);
					ClassFactory.FreeString(ref __ptr);
					return ret;
					
				}

				protected  string EarthView_World_Graphic_CSceneManager_getSoftShadowTexName_EVString_Function()
				{
					string csret=GetSoftShadowTexName();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSoftShadowTexName_EVString(IntPtr pNativeObject);

				public virtual string GetSoftShadowTexName()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSoftShadowTexName_EVString(this.NativeObject);
					
					string ret = Marshal.PtrToStringAnsi(__ptr);
					ClassFactory.FreeString(ref __ptr);
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getShadowTexCam_CallBack_CCamera();

				protected getShadowTexCam_CallBack_CCamera m_getShadowTexCam_CallBack_CCamera;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getShadowTexCam_CCamera_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.Camera GetShadowTexCam_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getShadowTexCam_CCamera_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Camera csObj = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CCamera");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Camera;
						csObj.BindNativeObject(__ptr, "CCamera");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getShadowTexCam_CCamera_Function()
				{
					EarthView.World.Graphic.Camera csret=GetShadowTexCam();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getShadowTexCam_CCamera(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.Camera GetShadowTexCam()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getShadowTexCam_CCamera(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Camera csObj = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CCamera");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Camera;
						csObj.BindNativeObject(__ptr, "CCamera");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getSoftShadowProjMatrix_CallBack_CMatrix4_ev_uint16(ushort index);

				protected getSoftShadowProjMatrix_CallBack_CMatrix4_ev_uint16 m_getSoftShadowProjMatrix_CallBack_CMatrix4_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSoftShadowProjMatrix_CMatrix4_ev_uint16_NoVirtual(IntPtr pNativeObject, ushort index);

				public virtual EarthView.World.Spatial.Math.Matrix4 GetSoftShadowProjMatrix_NoVirtual(ushort index)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSoftShadowProjMatrix_CMatrix4_ev_uint16_NoVirtual(this.NativeObject, index);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Spatial.Math.Matrix4 csObj = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMatrix4");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csObj.BindNativeObject(__ptr, "CMatrix4");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getSoftShadowProjMatrix_CMatrix4_ev_uint16_Function(ushort index)
				{
					EarthView.World.Spatial.Math.Matrix4 csret=GetSoftShadowProjMatrix(index);
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSoftShadowProjMatrix_CMatrix4_ev_uint16(IntPtr pNativeObject, ushort index);

				public virtual EarthView.World.Spatial.Math.Matrix4 GetSoftShadowProjMatrix(ushort index)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSoftShadowProjMatrix_CMatrix4_ev_uint16(this.NativeObject, index);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Spatial.Math.Matrix4 csObj = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMatrix4");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csObj.BindNativeObject(__ptr, "CMatrix4");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getCascadeEyeSpaceDepthArray_CallBack_CVector4();

				protected getCascadeEyeSpaceDepthArray_CallBack_CVector4 m_getCascadeEyeSpaceDepthArray_CallBack_CVector4;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getCascadeEyeSpaceDepthArray_CVector4_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Spatial.Math.Vector4 GetCascadeEyeSpaceDepthArray_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getCascadeEyeSpaceDepthArray_CVector4_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Spatial.Math.Vector4 csObj = new EarthView.World.Spatial.Math.Vector4(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CVector4");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.Vector4;
						csObj.BindNativeObject(__ptr, "CVector4");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getCascadeEyeSpaceDepthArray_CVector4_Function()
				{
					EarthView.World.Spatial.Math.Vector4 csret=GetCascadeEyeSpaceDepthArray();
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getCascadeEyeSpaceDepthArray_CVector4(IntPtr pNativeObject);

				public virtual EarthView.World.Spatial.Math.Vector4 GetCascadeEyeSpaceDepthArray()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getCascadeEyeSpaceDepthArray_CVector4(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Spatial.Math.Vector4 csObj = new EarthView.World.Spatial.Math.Vector4(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CVector4");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Spatial.Math.Vector4;
						csObj.BindNativeObject(__ptr, "CVector4");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate float getSoftShadowNearClip_CallBack_float_ev_uint8(byte index);

				protected getSoftShadowNearClip_CallBack_float_ev_uint8 m_getSoftShadowNearClip_CallBack_float_ev_uint8;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern float EarthView_World_Graphic_CSceneManager_getSoftShadowNearClip_float_ev_uint8_NoVirtual(IntPtr pNativeObject, byte index);

				public virtual float GetSoftShadowNearClip_NoVirtual(byte index)
				{
					float ret=EarthView_World_Graphic_CSceneManager_getSoftShadowNearClip_float_ev_uint8_NoVirtual(this.NativeObject, index);
					
					return ret;
					
				}

				protected  float EarthView_World_Graphic_CSceneManager_getSoftShadowNearClip_float_ev_uint8_Function(byte index)
				{
					float csret=GetSoftShadowNearClip(index);
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern float EarthView_World_Graphic_CSceneManager_getSoftShadowNearClip_float_ev_uint8(IntPtr pNativeObject, byte index);

				public virtual float GetSoftShadowNearClip(byte index)
				{
					float ret=EarthView_World_Graphic_CSceneManager_getSoftShadowNearClip_float_ev_uint8(this.NativeObject, index);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate float getSoftShadowFarClip_CallBack_float_ev_uint8(byte index);

				protected getSoftShadowFarClip_CallBack_float_ev_uint8 m_getSoftShadowFarClip_CallBack_float_ev_uint8;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern float EarthView_World_Graphic_CSceneManager_getSoftShadowFarClip_float_ev_uint8_NoVirtual(IntPtr pNativeObject, byte index);

				public virtual float GetSoftShadowFarClip_NoVirtual(byte index)
				{
					float ret=EarthView_World_Graphic_CSceneManager_getSoftShadowFarClip_float_ev_uint8_NoVirtual(this.NativeObject, index);
					
					return ret;
					
				}

				protected  float EarthView_World_Graphic_CSceneManager_getSoftShadowFarClip_float_ev_uint8_Function(byte index)
				{
					float csret=GetSoftShadowFarClip(index);
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern float EarthView_World_Graphic_CSceneManager_getSoftShadowFarClip_float_ev_uint8(IntPtr pNativeObject, byte index);

				public virtual float GetSoftShadowFarClip(byte index)
				{
					float ret=EarthView_World_Graphic_CSceneManager_getSoftShadowFarClip_float_ev_uint8(this.NativeObject, index);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getIsUseSoftShadowFitToCascadesMode_CallBack_bool();

				protected getIsUseSoftShadowFitToCascadesMode_CallBack_bool m_getIsUseSoftShadowFitToCascadesMode_CallBack_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getIsUseSoftShadowFitToCascadesMode_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool GetIsUseSoftShadowFitToCascadesMode_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getIsUseSoftShadowFitToCascadesMode_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getIsUseSoftShadowFitToCascadesMode_bool_Function()
				{
					bool csret=GetIsUseSoftShadowFitToCascadesMode();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getIsUseSoftShadowFitToCascadesMode_bool(IntPtr pNativeObject);

				public virtual bool GetIsUseSoftShadowFitToCascadesMode()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getIsUseSoftShadowFitToCascadesMode_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setIsUseSoftShadowFitToCascadesMode_CallBack_void_bool(bool flag);

				protected setIsUseSoftShadowFitToCascadesMode_CallBack_void_bool m_setIsUseSoftShadowFitToCascadesMode_CallBack_void_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setIsUseSoftShadowFitToCascadesMode_void_bool_NoVirtual(IntPtr pNativeObject, byte flag);

				public virtual void SetIsUseSoftShadowFitToCascadesMode_NoVirtual(bool flag)
				{
					EarthView_World_Graphic_CSceneManager_setIsUseSoftShadowFitToCascadesMode_void_bool_NoVirtual(this.NativeObject, Convert.ToByte(flag));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setIsUseSoftShadowFitToCascadesMode_void_bool_Function(bool flag)
				{
					SetIsUseSoftShadowFitToCascadesMode(flag);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setIsUseSoftShadowFitToCascadesMode_void_bool(IntPtr pNativeObject, byte flag);

				public virtual void SetIsUseSoftShadowFitToCascadesMode(bool flag)
				{
					EarthView_World_Graphic_CSceneManager_setIsUseSoftShadowFitToCascadesMode_void_bool(this.NativeObject, Convert.ToByte(flag));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getCurrentClipIndex_CallBack_ev_uint8();

				protected getCurrentClipIndex_CallBack_ev_uint8 m_getCurrentClipIndex_CallBack_ev_uint8;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getCurrentClipIndex_ev_uint8_NoVirtual(IntPtr pNativeObject);

				public virtual byte GetCurrentClipIndex_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getCurrentClipIndex_ev_uint8_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getCurrentClipIndex_ev_uint8_Function()
				{
					byte csret=GetCurrentClipIndex();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getCurrentClipIndex_ev_uint8(IntPtr pNativeObject);

				public virtual byte GetCurrentClipIndex()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getCurrentClipIndex_ev_uint8(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getIsUseSoftShadowTechnique_CallBack_bool();

				protected getIsUseSoftShadowTechnique_CallBack_bool m_getIsUseSoftShadowTechnique_CallBack_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getIsUseSoftShadowTechnique_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool GetIsUseSoftShadowTechnique_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getIsUseSoftShadowTechnique_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getIsUseSoftShadowTechnique_bool_Function()
				{
					bool csret=GetIsUseSoftShadowTechnique();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getIsUseSoftShadowTechnique_bool(IntPtr pNativeObject);

				public virtual bool GetIsUseSoftShadowTechnique()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getIsUseSoftShadowTechnique_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setIsUseSoftShadowTechnique_CallBack_void_bool(bool flag);

				protected setIsUseSoftShadowTechnique_CallBack_void_bool m_setIsUseSoftShadowTechnique_CallBack_void_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setIsUseSoftShadowTechnique_void_bool_NoVirtual(IntPtr pNativeObject, byte flag);

				public virtual void SetIsUseSoftShadowTechnique_NoVirtual(bool flag)
				{
					EarthView_World_Graphic_CSceneManager_setIsUseSoftShadowTechnique_void_bool_NoVirtual(this.NativeObject, Convert.ToByte(flag));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setIsUseSoftShadowTechnique_void_bool_Function(bool flag)
				{
					SetIsUseSoftShadowTechnique(flag);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setIsUseSoftShadowTechnique_void_bool(IntPtr pNativeObject, byte flag);

				public virtual void SetIsUseSoftShadowTechnique(bool flag)
				{
					EarthView_World_Graphic_CSceneManager_setIsUseSoftShadowTechnique_void_bool(this.NativeObject, Convert.ToByte(flag));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate float getCascadePartitionsPercent_CallBack_float();

				protected getCascadePartitionsPercent_CallBack_float m_getCascadePartitionsPercent_CallBack_float;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern float EarthView_World_Graphic_CSceneManager_getCascadePartitionsPercent_float_NoVirtual(IntPtr pNativeObject);

				public virtual float GetCascadePartitionsPercent_NoVirtual()
				{
					float ret=EarthView_World_Graphic_CSceneManager_getCascadePartitionsPercent_float_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  float EarthView_World_Graphic_CSceneManager_getCascadePartitionsPercent_float_Function()
				{
					float csret=GetCascadePartitionsPercent();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern float EarthView_World_Graphic_CSceneManager_getCascadePartitionsPercent_float(IntPtr pNativeObject);

				public virtual float GetCascadePartitionsPercent()
				{
					float ret=EarthView_World_Graphic_CSceneManager_getCascadePartitionsPercent_float(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setCascadePartitionsPercent_CallBack_void_float(float percent);

				protected setCascadePartitionsPercent_CallBack_void_float m_setCascadePartitionsPercent_CallBack_void_float;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setCascadePartitionsPercent_void_float_NoVirtual(IntPtr pNativeObject, float percent);

				public virtual void SetCascadePartitionsPercent_NoVirtual(float percent)
				{
					EarthView_World_Graphic_CSceneManager_setCascadePartitionsPercent_void_float_NoVirtual(this.NativeObject, percent);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setCascadePartitionsPercent_void_float_Function(float percent)
				{
					SetCascadePartitionsPercent(percent);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setCascadePartitionsPercent_void_float(IntPtr pNativeObject, float percent);

				public virtual void SetCascadePartitionsPercent(float percent)
				{
					EarthView_World_Graphic_CSceneManager_setCascadePartitionsPercent_void_float(this.NativeObject, percent);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate int getCascadePartitionsDistance_CallBack_int_ev_uint8(byte index);

				protected getCascadePartitionsDistance_CallBack_int_ev_uint8 m_getCascadePartitionsDistance_CallBack_int_ev_uint8;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CSceneManager_getCascadePartitionsDistance_int_ev_uint8_NoVirtual(IntPtr pNativeObject, byte index);

				public virtual int GetCascadePartitionsDistance_NoVirtual(byte index)
				{
					int ret=EarthView_World_Graphic_CSceneManager_getCascadePartitionsDistance_int_ev_uint8_NoVirtual(this.NativeObject, index);
					
					return ret;
					
				}

				protected  int EarthView_World_Graphic_CSceneManager_getCascadePartitionsDistance_int_ev_uint8_Function(byte index)
				{
					int csret=GetCascadePartitionsDistance(index);
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CSceneManager_getCascadePartitionsDistance_int_ev_uint8(IntPtr pNativeObject, byte index);

				public virtual int GetCascadePartitionsDistance(byte index)
				{
					int ret=EarthView_World_Graphic_CSceneManager_getCascadePartitionsDistance_int_ev_uint8(this.NativeObject, index);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setCascadePartitionsDistance_CallBack_void_ev_uint8_ev_uint8(byte index, byte distance);

				protected setCascadePartitionsDistance_CallBack_void_ev_uint8_ev_uint8 m_setCascadePartitionsDistance_CallBack_void_ev_uint8_ev_uint8;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setCascadePartitionsDistance_void_ev_uint8_ev_uint8_NoVirtual(IntPtr pNativeObject, byte index, byte distance);

				public virtual void SetCascadePartitionsDistance_NoVirtual(byte index, byte distance)
				{
					EarthView_World_Graphic_CSceneManager_setCascadePartitionsDistance_void_ev_uint8_ev_uint8_NoVirtual(this.NativeObject, index, distance);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setCascadePartitionsDistance_void_ev_uint8_ev_uint8_Function(byte index, byte distance)
				{
					SetCascadePartitionsDistance(index, distance);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setCascadePartitionsDistance_void_ev_uint8_ev_uint8(IntPtr pNativeObject, byte index, byte distance);

				public virtual void SetCascadePartitionsDistance(byte index, byte distance)
				{
					EarthView_World_Graphic_CSceneManager_setCascadePartitionsDistance_void_ev_uint8_ev_uint8(this.NativeObject, index, distance);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate int getSoftShadowOffsetFormat_CallBack_PixelFormat();

				protected getSoftShadowOffsetFormat_CallBack_PixelFormat m_getSoftShadowOffsetFormat_CallBack_PixelFormat;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CSceneManager_getSoftShadowOffsetFormat_PixelFormat_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.PIXELFORMAT GetSoftShadowOffsetFormat_NoVirtual()
				{
					int ret=EarthView_World_Graphic_CSceneManager_getSoftShadowOffsetFormat_PixelFormat_NoVirtual(this.NativeObject);
					
					return (EarthView.World.Graphic.PIXELFORMAT)ret;
					
				}

				protected  int EarthView_World_Graphic_CSceneManager_getSoftShadowOffsetFormat_PixelFormat_Function()
				{
					EarthView.World.Graphic.PIXELFORMAT csret=GetSoftShadowOffsetFormat();
					
					return (int)csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CSceneManager_getSoftShadowOffsetFormat_PixelFormat(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.PIXELFORMAT GetSoftShadowOffsetFormat()
				{
					int ret=EarthView_World_Graphic_CSceneManager_getSoftShadowOffsetFormat_PixelFormat(this.NativeObject);
					
					return (EarthView.World.Graphic.PIXELFORMAT)ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void checkShadowCasterInFrustum_CallBack_void_CCamera(IntPtr camera);

				protected checkShadowCasterInFrustum_CallBack_void_CCamera m_checkShadowCasterInFrustum_CallBack_void_CCamera;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_checkShadowCasterInFrustum_void_CCamera_NoVirtual(IntPtr pNativeObject, IntPtr camera);

				public virtual void CheckShadowCasterInFrustum_NoVirtual(EarthView.World.Graphic.Camera camera)
				{
					EarthView_World_Graphic_CSceneManager_checkShadowCasterInFrustum_void_CCamera_NoVirtual(this.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_checkShadowCasterInFrustum_void_CCamera_Function(IntPtr camera)
				{
					EarthView.World.Graphic.Camera csobj_camera = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_camera.BindNativeObject(camera,"CCamera");
					csobj_camera.Delegate = true;
					IClassFactory csobj_cameraClassFactory = GlobalClassFactoryMap.Get(csobj_camera.GetCppInstanceTypeName());
					if (csobj_cameraClassFactory != null)
					{
						csobj_camera.Delegate = true;
						csobj_camera = csobj_cameraClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_camera.BindNativeObject(camera, "CCamera");
						csobj_camera.Delegate = true;
					}
					
					CheckShadowCasterInFrustum(csobj_camera);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_checkShadowCasterInFrustum_void_CCamera(IntPtr pNativeObject, IntPtr camera);

				public virtual void CheckShadowCasterInFrustum(EarthView.World.Graphic.Camera camera)
				{
					EarthView_World_Graphic_CSceneManager_checkShadowCasterInFrustum_void_CCamera(this.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte hasShadowCasterInFrustum_CallBack_bool();

				protected hasShadowCasterInFrustum_CallBack_bool m_hasShadowCasterInFrustum_CallBack_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasShadowCasterInFrustum_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool HasShadowCasterInFrustum_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasShadowCasterInFrustum_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_hasShadowCasterInFrustum_bool_Function()
				{
					bool csret=HasShadowCasterInFrustum();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasShadowCasterInFrustum_bool(IntPtr pNativeObject);

				public virtual bool HasShadowCasterInFrustum()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasShadowCasterInFrustum_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getSoftShadowLightBleedPower_CallBack_Real();

				protected getSoftShadowLightBleedPower_CallBack_Real m_getSoftShadowLightBleedPower_CallBack_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getSoftShadowLightBleedPower_Real_NoVirtual(IntPtr pNativeObject);

				public virtual double GetSoftShadowLightBleedPower_NoVirtual()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getSoftShadowLightBleedPower_Real_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CSceneManager_getSoftShadowLightBleedPower_Real_Function()
				{
					double csret=GetSoftShadowLightBleedPower();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getSoftShadowLightBleedPower_Real(IntPtr pNativeObject);

				public virtual double GetSoftShadowLightBleedPower()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getSoftShadowLightBleedPower_Real(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSoftShadowLightBleedPower_CallBack_void_Real(double power);

				protected setSoftShadowLightBleedPower_CallBack_void_Real m_setSoftShadowLightBleedPower_CallBack_void_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSoftShadowLightBleedPower_void_Real_NoVirtual(IntPtr pNativeObject, double power);

				public virtual void SetSoftShadowLightBleedPower_NoVirtual(double power)
				{
					EarthView_World_Graphic_CSceneManager_setSoftShadowLightBleedPower_void_Real_NoVirtual(this.NativeObject, power);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSoftShadowLightBleedPower_void_Real_Function(double power)
				{
					SetSoftShadowLightBleedPower(power);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSoftShadowLightBleedPower_void_Real(IntPtr pNativeObject, double power);

				public virtual void SetSoftShadowLightBleedPower(double power)
				{
					EarthView_World_Graphic_CSceneManager_setSoftShadowLightBleedPower_void_Real(this.NativeObject, power);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getSoftShadowDepthOffset_CallBack_Real();

				protected getSoftShadowDepthOffset_CallBack_Real m_getSoftShadowDepthOffset_CallBack_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getSoftShadowDepthOffset_Real_NoVirtual(IntPtr pNativeObject);

				public virtual double GetSoftShadowDepthOffset_NoVirtual()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getSoftShadowDepthOffset_Real_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CSceneManager_getSoftShadowDepthOffset_Real_Function()
				{
					double csret=GetSoftShadowDepthOffset();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getSoftShadowDepthOffset_Real(IntPtr pNativeObject);

				public virtual double GetSoftShadowDepthOffset()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getSoftShadowDepthOffset_Real(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSoftShadowDepthOffset_CallBack_void_Real(double offset);

				protected setSoftShadowDepthOffset_CallBack_void_Real m_setSoftShadowDepthOffset_CallBack_void_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSoftShadowDepthOffset_void_Real_NoVirtual(IntPtr pNativeObject, double offset);

				public virtual void SetSoftShadowDepthOffset_NoVirtual(double offset)
				{
					EarthView_World_Graphic_CSceneManager_setSoftShadowDepthOffset_void_Real_NoVirtual(this.NativeObject, offset);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSoftShadowDepthOffset_void_Real_Function(double offset)
				{
					SetSoftShadowDepthOffset(offset);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSoftShadowDepthOffset_void_Real(IntPtr pNativeObject, double offset);

				public virtual void SetSoftShadowDepthOffset(double offset)
				{
					EarthView_World_Graphic_CSceneManager_setSoftShadowDepthOffset_void_Real(this.NativeObject, offset);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate float getSoftShadowNormalFactor_CallBack_float();

				protected getSoftShadowNormalFactor_CallBack_float m_getSoftShadowNormalFactor_CallBack_float;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern float EarthView_World_Graphic_CSceneManager_getSoftShadowNormalFactor_float_NoVirtual(IntPtr pNativeObject);

				public virtual float GetSoftShadowNormalFactor_NoVirtual()
				{
					float ret=EarthView_World_Graphic_CSceneManager_getSoftShadowNormalFactor_float_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  float EarthView_World_Graphic_CSceneManager_getSoftShadowNormalFactor_float_Function()
				{
					float csret=GetSoftShadowNormalFactor();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern float EarthView_World_Graphic_CSceneManager_getSoftShadowNormalFactor_float(IntPtr pNativeObject);

				public virtual float GetSoftShadowNormalFactor()
				{
					float ret=EarthView_World_Graphic_CSceneManager_getSoftShadowNormalFactor_float(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSoftShadowNormalFactor_CallBack_void_float(float factor);

				protected setSoftShadowNormalFactor_CallBack_void_float m_setSoftShadowNormalFactor_CallBack_void_float;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSoftShadowNormalFactor_void_float_NoVirtual(IntPtr pNativeObject, float factor);

				public virtual void SetSoftShadowNormalFactor_NoVirtual(float factor)
				{
					EarthView_World_Graphic_CSceneManager_setSoftShadowNormalFactor_void_float_NoVirtual(this.NativeObject, factor);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSoftShadowNormalFactor_void_float_Function(float factor)
				{
					SetSoftShadowNormalFactor(factor);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSoftShadowNormalFactor_void_float(IntPtr pNativeObject, float factor);

				public virtual void SetSoftShadowNormalFactor(float factor)
				{
					EarthView_World_Graphic_CSceneManager_setSoftShadowNormalFactor_void_float(this.NativeObject, factor);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _notifyLightsDirty_CallBack_void();

				protected _notifyLightsDirty_CallBack_void m__notifyLightsDirty_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__notifyLightsDirty_void_NoVirtual(IntPtr pNativeObject);

				public virtual void _notifyLightsDirty_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager__notifyLightsDirty_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__notifyLightsDirty_void_Function()
				{
					_notifyLightsDirty();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__notifyLightsDirty_void(IntPtr pNativeObject);

				public virtual void _notifyLightsDirty()
				{
					EarthView_World_Graphic_CSceneManager__notifyLightsDirty_void(this.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint EarthView_World_Graphic_CSceneManager__getLightsDirtyCounter_ev_uint32(IntPtr pNativeObject);

				public uint _getLightsDirtyCounter()
				{
					uint ret=EarthView_World_Graphic_CSceneManager__getLightsDirtyCounter_ev_uint32(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr _getLightsAffectingFrustum_CallBack_LightList();

				protected _getLightsAffectingFrustum_CallBack_LightList m__getLightsAffectingFrustum_CallBack_LightList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager__getLightsAffectingFrustum_LightList_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.LightList _getLightsAffectingFrustum_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager__getLightsAffectingFrustum_LightList_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.LightList csObj = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "LightList");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.LightList;
						csObj.BindNativeObject(__ptr, "LightList");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager__getLightsAffectingFrustum_LightList_Function()
				{
					EarthView.World.Graphic.LightList csret=_getLightsAffectingFrustum();
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager__getLightsAffectingFrustum_LightList(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.LightList _getLightsAffectingFrustum()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager__getLightsAffectingFrustum_LightList(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.LightList csObj = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "LightList");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.LightList;
						csObj.BindNativeObject(__ptr, "LightList");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _populateLightList_CallBack_void_CVector3_Real_LightList_ev_uint32(IntPtr position, double radius, IntPtr destList, uint lightMask);

				protected _populateLightList_CallBack_void_CVector3_Real_LightList_ev_uint32 m__populateLightList_CallBack_void_CVector3_Real_LightList_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__populateLightList_void_CVector3_Real_LightList_ev_uint32_NoVirtual(IntPtr pNativeObject, IntPtr position, double radius, IntPtr destList, uint lightMask);

				public virtual void _populateLightList_NoVirtual(EarthView.World.Spatial.Math.Vector3 position, double radius, ref EarthView.World.Graphic.LightList destList, uint lightMask)
				{
					EarthView_World_Graphic_CSceneManager__populateLightList_void_CVector3_Real_LightList_ev_uint32_NoVirtual(this.NativeObject, object.Equals(position, null) ? IntPtr.Zero : position.NativeObject, radius, object.Equals(destList, null) ? IntPtr.Zero : destList.NativeObject, lightMask);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__populateLightList_void_CVector3_Real_LightList_ev_uint32_Function(IntPtr position, double radius, IntPtr destList, uint lightMask)
				{
					EarthView.World.Spatial.Math.Vector3 csobj_position = new EarthView.World.Spatial.Math.Vector3(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_position.BindNativeObject(position,"CVector3");
					csobj_position.Delegate = true;
					IClassFactory csobj_positionClassFactory = GlobalClassFactoryMap.Get(csobj_position.GetCppInstanceTypeName());
					if (csobj_positionClassFactory != null)
					{
						csobj_position.Delegate = true;
						csobj_position = csobj_positionClassFactory.Create() as EarthView.World.Spatial.Math.Vector3;
						csobj_position.BindNativeObject(position, "CVector3");
						csobj_position.Delegate = true;
					}
					EarthView.World.Graphic.LightList csobj_destList = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_destList.BindNativeObject(destList,"LightList");
					csobj_destList.Delegate = true;
					IClassFactory csobj_destListClassFactory = GlobalClassFactoryMap.Get(csobj_destList.GetCppInstanceTypeName());
					if (csobj_destListClassFactory != null)
					{
						csobj_destList.Delegate = true;
						csobj_destList = csobj_destListClassFactory.Create() as EarthView.World.Graphic.LightList;
						csobj_destList.BindNativeObject(destList, "LightList");
						csobj_destList.Delegate = true;
					}
					
					_populateLightList(csobj_position, radius, ref csobj_destList, lightMask);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__populateLightList_void_CVector3_Real_LightList_ev_uint32(IntPtr pNativeObject, IntPtr position, double radius, IntPtr destList, uint lightMask);

				public virtual void _populateLightList(EarthView.World.Spatial.Math.Vector3 position, double radius, ref EarthView.World.Graphic.LightList destList, uint lightMask)
				{
					EarthView_World_Graphic_CSceneManager__populateLightList_void_CVector3_Real_LightList_ev_uint32(this.NativeObject, object.Equals(position, null) ? IntPtr.Zero : position.NativeObject, radius, object.Equals(destList, null) ? IntPtr.Zero : destList.NativeObject, lightMask);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _populateLightList_CallBack_void_CVector3_Real_LightList(IntPtr position, double radius, IntPtr destList);

				protected _populateLightList_CallBack_void_CVector3_Real_LightList m__populateLightList_CallBack_void_CVector3_Real_LightList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__populateLightList_void_CVector3_Real_LightList_NoVirtual(IntPtr pNativeObject, IntPtr position, double radius, IntPtr destList);

				public virtual void _populateLightList_NoVirtual(EarthView.World.Spatial.Math.Vector3 position, double radius, ref EarthView.World.Graphic.LightList destList)
				{
					EarthView_World_Graphic_CSceneManager__populateLightList_void_CVector3_Real_LightList_NoVirtual(this.NativeObject, object.Equals(position, null) ? IntPtr.Zero : position.NativeObject, radius, object.Equals(destList, null) ? IntPtr.Zero : destList.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__populateLightList_void_CVector3_Real_LightList_Function(IntPtr position, double radius, IntPtr destList)
				{
					EarthView.World.Spatial.Math.Vector3 csobj_position = new EarthView.World.Spatial.Math.Vector3(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_position.BindNativeObject(position,"CVector3");
					csobj_position.Delegate = true;
					IClassFactory csobj_positionClassFactory = GlobalClassFactoryMap.Get(csobj_position.GetCppInstanceTypeName());
					if (csobj_positionClassFactory != null)
					{
						csobj_position.Delegate = true;
						csobj_position = csobj_positionClassFactory.Create() as EarthView.World.Spatial.Math.Vector3;
						csobj_position.BindNativeObject(position, "CVector3");
						csobj_position.Delegate = true;
					}
					EarthView.World.Graphic.LightList csobj_destList = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_destList.BindNativeObject(destList,"LightList");
					csobj_destList.Delegate = true;
					IClassFactory csobj_destListClassFactory = GlobalClassFactoryMap.Get(csobj_destList.GetCppInstanceTypeName());
					if (csobj_destListClassFactory != null)
					{
						csobj_destList.Delegate = true;
						csobj_destList = csobj_destListClassFactory.Create() as EarthView.World.Graphic.LightList;
						csobj_destList.BindNativeObject(destList, "LightList");
						csobj_destList.Delegate = true;
					}
					
					_populateLightList(csobj_position, radius, ref csobj_destList);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__populateLightList_void_CVector3_Real_LightList(IntPtr pNativeObject, IntPtr position, double radius, IntPtr destList);

				public virtual void _populateLightList(EarthView.World.Spatial.Math.Vector3 position, double radius, ref EarthView.World.Graphic.LightList destList)
				{
					EarthView_World_Graphic_CSceneManager__populateLightList_void_CVector3_Real_LightList(this.NativeObject, object.Equals(position, null) ? IntPtr.Zero : position.NativeObject, radius, object.Equals(destList, null) ? IntPtr.Zero : destList.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void showImage_CallBack_void_ev_bool(bool visible);

				protected showImage_CallBack_void_ev_bool m_showImage_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_showImage_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte visible);

				public virtual void ShowImage_NoVirtual(bool visible)
				{
					EarthView_World_Graphic_CSceneManager_showImage_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(visible));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_showImage_void_ev_bool_Function(bool visible)
				{
					ShowImage(visible);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_showImage_void_ev_bool(IntPtr pNativeObject, byte visible);

				public virtual void ShowImage(bool visible)
				{
					EarthView_World_Graphic_CSceneManager_showImage_void_ev_bool(this.NativeObject, Convert.ToByte(visible));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getImageVisible_CallBack_ev_bool();

				protected getImageVisible_CallBack_ev_bool m_getImageVisible_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getImageVisible_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool GetImageVisible_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getImageVisible_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getImageVisible_ev_bool_Function()
				{
					bool csret=GetImageVisible();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getImageVisible_ev_bool(IntPtr pNativeObject);

				public virtual bool GetImageVisible()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getImageVisible_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void showOcean_CallBack_void_ev_bool(bool visible);

				protected showOcean_CallBack_void_ev_bool m_showOcean_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_showOcean_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte visible);

				public virtual void ShowOcean_NoVirtual(bool visible)
				{
					EarthView_World_Graphic_CSceneManager_showOcean_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(visible));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_showOcean_void_ev_bool_Function(bool visible)
				{
					ShowOcean(visible);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_showOcean_void_ev_bool(IntPtr pNativeObject, byte visible);

				public virtual void ShowOcean(bool visible)
				{
					EarthView_World_Graphic_CSceneManager_showOcean_void_ev_bool(this.NativeObject, Convert.ToByte(visible));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getOceanVisible_CallBack_ev_bool();

				protected getOceanVisible_CallBack_ev_bool m_getOceanVisible_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getOceanVisible_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool GetOceanVisible_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getOceanVisible_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getOceanVisible_ev_bool_Function()
				{
					bool csret=GetOceanVisible();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getOceanVisible_ev_bool(IntPtr pNativeObject);

				public virtual bool GetOceanVisible()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getOceanVisible_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _populateLightList_CallBack_void_CSceneNode_Real_LightList_ev_uint32(IntPtr sn, double radius, IntPtr destList, uint lightMask);

				protected _populateLightList_CallBack_void_CSceneNode_Real_LightList_ev_uint32 m__populateLightList_CallBack_void_CSceneNode_Real_LightList_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__populateLightList_void_CSceneNode_Real_LightList_ev_uint32_NoVirtual(IntPtr pNativeObject, IntPtr sn, double radius, IntPtr destList, uint lightMask);

				public virtual void _populateLightList_NoVirtual(EarthView.World.Graphic.SceneNode sn, double radius, ref EarthView.World.Graphic.LightList destList, uint lightMask)
				{
					EarthView_World_Graphic_CSceneManager__populateLightList_void_CSceneNode_Real_LightList_ev_uint32_NoVirtual(this.NativeObject, object.Equals(sn, null) ? IntPtr.Zero : sn.NativeObject, radius, object.Equals(destList, null) ? IntPtr.Zero : destList.NativeObject, lightMask);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__populateLightList_void_CSceneNode_Real_LightList_ev_uint32_Function(IntPtr sn, double radius, IntPtr destList, uint lightMask)
				{
					EarthView.World.Graphic.SceneNode csobj_sn = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_sn.BindNativeObject(sn,"CSceneNode");
					csobj_sn.Delegate = true;
					IClassFactory csobj_snClassFactory = GlobalClassFactoryMap.Get(csobj_sn.GetCppInstanceTypeName());
					if (csobj_snClassFactory != null)
					{
						csobj_sn.Delegate = true;
						csobj_sn = csobj_snClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csobj_sn.BindNativeObject(sn, "CSceneNode");
						csobj_sn.Delegate = true;
					}
					EarthView.World.Graphic.LightList csobj_destList = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_destList.BindNativeObject(destList,"LightList");
					csobj_destList.Delegate = true;
					IClassFactory csobj_destListClassFactory = GlobalClassFactoryMap.Get(csobj_destList.GetCppInstanceTypeName());
					if (csobj_destListClassFactory != null)
					{
						csobj_destList.Delegate = true;
						csobj_destList = csobj_destListClassFactory.Create() as EarthView.World.Graphic.LightList;
						csobj_destList.BindNativeObject(destList, "LightList");
						csobj_destList.Delegate = true;
					}
					
					_populateLightList(csobj_sn, radius, ref csobj_destList, lightMask);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__populateLightList_void_CSceneNode_Real_LightList_ev_uint32(IntPtr pNativeObject, IntPtr sn, double radius, IntPtr destList, uint lightMask);

				public virtual void _populateLightList(EarthView.World.Graphic.SceneNode sn, double radius, ref EarthView.World.Graphic.LightList destList, uint lightMask)
				{
					EarthView_World_Graphic_CSceneManager__populateLightList_void_CSceneNode_Real_LightList_ev_uint32(this.NativeObject, object.Equals(sn, null) ? IntPtr.Zero : sn.NativeObject, radius, object.Equals(destList, null) ? IntPtr.Zero : destList.NativeObject, lightMask);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _populateLightList_CallBack_void_CSceneNode_Real_LightList(IntPtr sn, double radius, IntPtr destList);

				protected _populateLightList_CallBack_void_CSceneNode_Real_LightList m__populateLightList_CallBack_void_CSceneNode_Real_LightList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__populateLightList_void_CSceneNode_Real_LightList_NoVirtual(IntPtr pNativeObject, IntPtr sn, double radius, IntPtr destList);

				public virtual void _populateLightList_NoVirtual(EarthView.World.Graphic.SceneNode sn, double radius, ref EarthView.World.Graphic.LightList destList)
				{
					EarthView_World_Graphic_CSceneManager__populateLightList_void_CSceneNode_Real_LightList_NoVirtual(this.NativeObject, object.Equals(sn, null) ? IntPtr.Zero : sn.NativeObject, radius, object.Equals(destList, null) ? IntPtr.Zero : destList.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__populateLightList_void_CSceneNode_Real_LightList_Function(IntPtr sn, double radius, IntPtr destList)
				{
					EarthView.World.Graphic.SceneNode csobj_sn = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_sn.BindNativeObject(sn,"CSceneNode");
					csobj_sn.Delegate = true;
					IClassFactory csobj_snClassFactory = GlobalClassFactoryMap.Get(csobj_sn.GetCppInstanceTypeName());
					if (csobj_snClassFactory != null)
					{
						csobj_sn.Delegate = true;
						csobj_sn = csobj_snClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csobj_sn.BindNativeObject(sn, "CSceneNode");
						csobj_sn.Delegate = true;
					}
					EarthView.World.Graphic.LightList csobj_destList = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_destList.BindNativeObject(destList,"LightList");
					csobj_destList.Delegate = true;
					IClassFactory csobj_destListClassFactory = GlobalClassFactoryMap.Get(csobj_destList.GetCppInstanceTypeName());
					if (csobj_destListClassFactory != null)
					{
						csobj_destList.Delegate = true;
						csobj_destList = csobj_destListClassFactory.Create() as EarthView.World.Graphic.LightList;
						csobj_destList.BindNativeObject(destList, "LightList");
						csobj_destList.Delegate = true;
					}
					
					_populateLightList(csobj_sn, radius, ref csobj_destList);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__populateLightList_void_CSceneNode_Real_LightList(IntPtr pNativeObject, IntPtr sn, double radius, IntPtr destList);

				public virtual void _populateLightList(EarthView.World.Graphic.SceneNode sn, double radius, ref EarthView.World.Graphic.LightList destList)
				{
					EarthView_World_Graphic_CSceneManager__populateLightList_void_CSceneNode_Real_LightList(this.NativeObject, object.Equals(sn, null) ? IntPtr.Zero : sn.NativeObject, radius, object.Equals(destList, null) ? IntPtr.Zero : destList.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createSceneNode_CallBack_CSceneNode();

				protected createSceneNode_CallBack_CSceneNode m_createSceneNode_CallBack_CSceneNode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createSceneNode_CSceneNode_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 创建场景节点
				/// 如果不传递名称，则场景管理器会自动对其命名
				/// </summary>
				/// <param name="name">节点名称</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.SceneNode CreateSceneNode_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createSceneNode_CSceneNode_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createSceneNode_CSceneNode_Function()
				{
					EarthView.World.Graphic.SceneNode csret=CreateSceneNode();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createSceneNode_CSceneNode(IntPtr pNativeObject);

				/// <summary>
				/// 创建场景节点
				/// 如果不传递名称，则场景管理器会自动对其命名
				/// </summary>
				/// <param name="name">节点名称</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.SceneNode CreateSceneNode()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createSceneNode_CSceneNode(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createSceneNode_CallBack_CSceneNode_EVString(ref IntPtr name);

				protected createSceneNode_CallBack_CSceneNode_EVString m_createSceneNode_CallBack_CSceneNode_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createSceneNode_CSceneNode_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.SceneNode CreateSceneNode_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createSceneNode_CSceneNode_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createSceneNode_CSceneNode_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.SceneNode csret=CreateSceneNode(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createSceneNode_CSceneNode_EVString(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.SceneNode CreateSceneNode(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createSceneNode_CSceneNode_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroySceneNode_CallBack_void_EVString(ref IntPtr name);

				protected destroySceneNode_CallBack_void_EVString m_destroySceneNode_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroySceneNode_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 销毁场景节点				
				/// </summary>
				/// <param name="name">节点名称</param>
				/// <returns></returns>
				public virtual void DestroySceneNode_NoVirtual(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroySceneNode_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroySceneNode_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroySceneNode(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroySceneNode_void_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 销毁场景节点				
				/// </summary>
				/// <param name="name">节点名称</param>
				/// <returns></returns>
				public virtual void DestroySceneNode(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroySceneNode_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroySceneNode_CallBack_void_CSceneNode(IntPtr sn);

				protected destroySceneNode_CallBack_void_CSceneNode m_destroySceneNode_CallBack_void_CSceneNode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroySceneNode_void_CSceneNode_NoVirtual(IntPtr pNativeObject, IntPtr sn);

				public virtual void DestroySceneNode_NoVirtual(EarthView.World.Graphic.SceneNode sn)
				{
					EarthView_World_Graphic_CSceneManager_destroySceneNode_void_CSceneNode_NoVirtual(this.NativeObject, object.Equals(sn, null) ? IntPtr.Zero : sn.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroySceneNode_void_CSceneNode_Function(IntPtr sn)
				{
					EarthView.World.Graphic.SceneNode csobj_sn = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_sn.BindNativeObject(sn,"CSceneNode");
					csobj_sn.Delegate = true;
					IClassFactory csobj_snClassFactory = GlobalClassFactoryMap.Get(csobj_sn.GetCppInstanceTypeName());
					if (csobj_snClassFactory != null)
					{
						csobj_sn.Delegate = true;
						csobj_sn = csobj_snClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csobj_sn.BindNativeObject(sn, "CSceneNode");
						csobj_sn.Delegate = true;
					}
					
					DestroySceneNode(csobj_sn);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroySceneNode_void_CSceneNode(IntPtr pNativeObject, IntPtr sn);

				public virtual void DestroySceneNode(EarthView.World.Graphic.SceneNode sn)
				{
					EarthView_World_Graphic_CSceneManager_destroySceneNode_void_CSceneNode(this.NativeObject, object.Equals(sn, null) ? IntPtr.Zero : sn.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getRootSceneNode_CallBack_CSceneNode();

				protected getRootSceneNode_CallBack_CSceneNode m_getRootSceneNode_CallBack_CSceneNode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getRootSceneNode_CSceneNode_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获取根节点				
				/// </summary>
				/// <param name="name">节点名称</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.SceneNode GetRootSceneNode_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getRootSceneNode_CSceneNode_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getRootSceneNode_CSceneNode_Function()
				{
					EarthView.World.Graphic.SceneNode csret=GetRootSceneNode();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getRootSceneNode_CSceneNode(IntPtr pNativeObject);

				/// <summary>
				/// 获取根节点				
				/// </summary>
				/// <param name="name">节点名称</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.SceneNode GetRootSceneNode()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getRootSceneNode_CSceneNode(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getSceneNode_CallBack_CSceneNode_EVString(ref IntPtr name);

				protected getSceneNode_CallBack_CSceneNode_EVString m_getSceneNode_CallBack_CSceneNode_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSceneNode_CSceneNode_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 获取节点				
				/// </summary>
				/// <param name="name">节点名称</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.SceneNode GetSceneNode_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSceneNode_CSceneNode_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getSceneNode_CSceneNode_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.SceneNode csret=GetSceneNode(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSceneNode_CSceneNode_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 获取节点				
				/// </summary>
				/// <param name="name">节点名称</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.SceneNode GetSceneNode(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSceneNode_CSceneNode_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte hasSceneNode_CallBack_ev_bool_EVString(ref IntPtr name);

				protected hasSceneNode_CallBack_ev_bool_EVString m_hasSceneNode_CallBack_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasSceneNode_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 判断是否存在给定名称的节点				
				/// </summary>
				/// <param name="name">节点名称</param>
				/// <returns></returns>
				public virtual bool HasSceneNode_NoVirtual(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasSceneNode_ev_bool_EVString_NoVirtual(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_hasSceneNode_ev_bool_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					bool csret=HasSceneNode(strname);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasSceneNode_ev_bool_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 判断是否存在给定名称的节点				
				/// </summary>
				/// <param name="name">节点名称</param>
				/// <returns></returns>
				public virtual bool HasSceneNode(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasSceneNode_ev_bool_EVString(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createEntity_CallBack_CEntity_EVString_EVString_IntVector_EVString(ref IntPtr entityName, ref IntPtr meshName, IntPtr subentityIndics, ref IntPtr groupName);

				protected createEntity_CallBack_CEntity_EVString_EVString_IntVector_EVString m_createEntity_CallBack_CEntity_EVString_EVString_IntVector_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_IntVector_EVString_NoVirtual(IntPtr pNativeObject, string entityName, string meshName, IntPtr subentityIndics, string groupName);

				/// <summary>
				/// 创建模型实体				
				/// </summary>
				/// <param name="entityName">实体名称</param>
				/// <param name="meshName">mesh名称</param>
				/// <param name="subentityIndics">submesh部件序号集</param>
				/// <param name="groupName">mesh资源组名称</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Entity CreateEntity_NoVirtual(string entityName, string meshName, EarthView.World.Core.IntVector subentityIndics, string groupName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_IntVector_EVString_NoVirtual(this.NativeObject, entityName, meshName, object.Equals(subentityIndics, null) ? IntPtr.Zero : subentityIndics.NativeObject, groupName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_IntVector_EVString_Function(ref IntPtr entityName, ref IntPtr meshName, IntPtr subentityIndics, ref IntPtr groupName)
				{
					string strentityName= Marshal.PtrToStringAnsi(entityName);
					ClassFactory.FreeString(ref entityName);
					string strmeshName= Marshal.PtrToStringAnsi(meshName);
					ClassFactory.FreeString(ref meshName);
					EarthView.World.Core.IntVector csobj_subentityIndics = new EarthView.World.Core.IntVector(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_subentityIndics.BindNativeObject(subentityIndics,"IntVector");
					csobj_subentityIndics.Delegate = true;
					IClassFactory csobj_subentityIndicsClassFactory = GlobalClassFactoryMap.Get(csobj_subentityIndics.GetCppInstanceTypeName());
					if (csobj_subentityIndicsClassFactory != null)
					{
						csobj_subentityIndics.Delegate = true;
						csobj_subentityIndics = csobj_subentityIndicsClassFactory.Create() as EarthView.World.Core.IntVector;
						csobj_subentityIndics.BindNativeObject(subentityIndics, "IntVector");
						csobj_subentityIndics.Delegate = true;
					}
					string strgroupName= Marshal.PtrToStringAnsi(groupName);
					ClassFactory.FreeString(ref groupName);
					
					EarthView.World.Graphic.Entity csret=CreateEntity(strentityName,strmeshName,csobj_subentityIndics, strgroupName);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_IntVector_EVString(IntPtr pNativeObject, string entityName, string meshName, IntPtr subentityIndics, string groupName);

				/// <summary>
				/// 创建模型实体				
				/// </summary>
				/// <param name="entityName">实体名称</param>
				/// <param name="meshName">mesh名称</param>
				/// <param name="subentityIndics">submesh部件序号集</param>
				/// <param name="groupName">mesh资源组名称</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Entity CreateEntity(string entityName, string meshName, EarthView.World.Core.IntVector subentityIndics, string groupName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_IntVector_EVString(this.NativeObject, entityName, meshName, object.Equals(subentityIndics, null) ? IntPtr.Zero : subentityIndics.NativeObject, groupName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createEntity_CallBack_CEntity_EVString_EVString_EVString(ref IntPtr entityName, ref IntPtr meshName, ref IntPtr groupName);

				protected createEntity_CallBack_CEntity_EVString_EVString_EVString m_createEntity_CallBack_CEntity_EVString_EVString_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_EVString_NoVirtual(IntPtr pNativeObject, string entityName, string meshName, string groupName);

				public virtual EarthView.World.Graphic.Entity CreateEntity_NoVirtual(string entityName, string meshName, string groupName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_EVString_NoVirtual(this.NativeObject, entityName, meshName, groupName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_EVString_Function(ref IntPtr entityName, ref IntPtr meshName, ref IntPtr groupName)
				{
					string strentityName= Marshal.PtrToStringAnsi(entityName);
					ClassFactory.FreeString(ref entityName);
					string strmeshName= Marshal.PtrToStringAnsi(meshName);
					ClassFactory.FreeString(ref meshName);
					string strgroupName= Marshal.PtrToStringAnsi(groupName);
					ClassFactory.FreeString(ref groupName);
					
					EarthView.World.Graphic.Entity csret=CreateEntity(strentityName,strmeshName,strgroupName);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_EVString(IntPtr pNativeObject, string entityName, string meshName, string groupName);

				public virtual EarthView.World.Graphic.Entity CreateEntity(string entityName, string meshName, string groupName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_EVString(this.NativeObject, entityName, meshName, groupName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createEntity_CallBack_CEntity_EVString_EVString_IntVector(ref IntPtr entityName, ref IntPtr meshName, IntPtr subentityIndics);

				protected createEntity_CallBack_CEntity_EVString_EVString_IntVector m_createEntity_CallBack_CEntity_EVString_EVString_IntVector;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_IntVector_NoVirtual(IntPtr pNativeObject, string entityName, string meshName, IntPtr subentityIndics);

				public virtual EarthView.World.Graphic.Entity CreateEntity_NoVirtual(string entityName, string meshName, EarthView.World.Core.IntVector subentityIndics)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_IntVector_NoVirtual(this.NativeObject, entityName, meshName, object.Equals(subentityIndics, null) ? IntPtr.Zero : subentityIndics.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_IntVector_Function(ref IntPtr entityName, ref IntPtr meshName, IntPtr subentityIndics)
				{
					string strentityName= Marshal.PtrToStringAnsi(entityName);
					ClassFactory.FreeString(ref entityName);
					string strmeshName= Marshal.PtrToStringAnsi(meshName);
					ClassFactory.FreeString(ref meshName);
					EarthView.World.Core.IntVector csobj_subentityIndics = new EarthView.World.Core.IntVector(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_subentityIndics.BindNativeObject(subentityIndics,"IntVector");
					csobj_subentityIndics.Delegate = true;
					IClassFactory csobj_subentityIndicsClassFactory = GlobalClassFactoryMap.Get(csobj_subentityIndics.GetCppInstanceTypeName());
					if (csobj_subentityIndicsClassFactory != null)
					{
						csobj_subentityIndics.Delegate = true;
						csobj_subentityIndics = csobj_subentityIndicsClassFactory.Create() as EarthView.World.Core.IntVector;
						csobj_subentityIndics.BindNativeObject(subentityIndics, "IntVector");
						csobj_subentityIndics.Delegate = true;
					}
					
					EarthView.World.Graphic.Entity csret=CreateEntity(strentityName,strmeshName,csobj_subentityIndics);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_IntVector(IntPtr pNativeObject, string entityName, string meshName, IntPtr subentityIndics);

				public virtual EarthView.World.Graphic.Entity CreateEntity(string entityName, string meshName, EarthView.World.Core.IntVector subentityIndics)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_IntVector(this.NativeObject, entityName, meshName, object.Equals(subentityIndics, null) ? IntPtr.Zero : subentityIndics.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createEntity_CallBack_CEntity_EVString_EVString(ref IntPtr entityName, ref IntPtr meshName);

				protected createEntity_CallBack_CEntity_EVString_EVString m_createEntity_CallBack_CEntity_EVString_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_NoVirtual(IntPtr pNativeObject, string entityName, string meshName);

				public virtual EarthView.World.Graphic.Entity CreateEntity_NoVirtual(string entityName, string meshName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_NoVirtual(this.NativeObject, entityName, meshName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_Function(ref IntPtr entityName, ref IntPtr meshName)
				{
					string strentityName= Marshal.PtrToStringAnsi(entityName);
					ClassFactory.FreeString(ref entityName);
					string strmeshName= Marshal.PtrToStringAnsi(meshName);
					ClassFactory.FreeString(ref meshName);
					
					EarthView.World.Graphic.Entity csret=CreateEntity(strentityName,strmeshName);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString(IntPtr pNativeObject, string entityName, string meshName);

				public virtual EarthView.World.Graphic.Entity CreateEntity(string entityName, string meshName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString(this.NativeObject, entityName, meshName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createEntity_CallBack_CEntity_EVString_CMeshPtr_IntVector(ref IntPtr entityName, IntPtr pMesh, IntPtr subentityIndics);

				protected createEntity_CallBack_CEntity_EVString_CMeshPtr_IntVector m_createEntity_CallBack_CEntity_EVString_CMeshPtr_IntVector;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_CMeshPtr_IntVector_NoVirtual(IntPtr pNativeObject, string entityName, IntPtr pMesh, IntPtr subentityIndics);

				public virtual EarthView.World.Graphic.Entity CreateEntity_NoVirtual(string entityName, EarthView.World.Graphic.MeshPtr pMesh, EarthView.World.Core.IntVector subentityIndics)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_CMeshPtr_IntVector_NoVirtual(this.NativeObject, entityName, object.Equals(pMesh, null) ? IntPtr.Zero : pMesh.NativeObject, object.Equals(subentityIndics, null) ? IntPtr.Zero : subentityIndics.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_CMeshPtr_IntVector_Function(ref IntPtr entityName, IntPtr pMesh, IntPtr subentityIndics)
				{
					string strentityName= Marshal.PtrToStringAnsi(entityName);
					ClassFactory.FreeString(ref entityName);
					EarthView.World.Graphic.MeshPtr csobj_pMesh = new EarthView.World.Graphic.MeshPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pMesh.BindNativeObject(pMesh,"CMeshPtr");
					csobj_pMesh.Delegate = true;
					IClassFactory csobj_pMeshClassFactory = GlobalClassFactoryMap.Get(csobj_pMesh.GetCppInstanceTypeName());
					if (csobj_pMeshClassFactory != null)
					{
						csobj_pMesh.Delegate = true;
						csobj_pMesh = csobj_pMeshClassFactory.Create() as EarthView.World.Graphic.MeshPtr;
						csobj_pMesh.BindNativeObject(pMesh, "CMeshPtr");
						csobj_pMesh.Delegate = true;
					}
					EarthView.World.Core.IntVector csobj_subentityIndics = new EarthView.World.Core.IntVector(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_subentityIndics.BindNativeObject(subentityIndics,"IntVector");
					csobj_subentityIndics.Delegate = true;
					IClassFactory csobj_subentityIndicsClassFactory = GlobalClassFactoryMap.Get(csobj_subentityIndics.GetCppInstanceTypeName());
					if (csobj_subentityIndicsClassFactory != null)
					{
						csobj_subentityIndics.Delegate = true;
						csobj_subentityIndics = csobj_subentityIndicsClassFactory.Create() as EarthView.World.Core.IntVector;
						csobj_subentityIndics.BindNativeObject(subentityIndics, "IntVector");
						csobj_subentityIndics.Delegate = true;
					}
					
					EarthView.World.Graphic.Entity csret=CreateEntity(strentityName,csobj_pMesh, csobj_subentityIndics);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_CMeshPtr_IntVector(IntPtr pNativeObject, string entityName, IntPtr pMesh, IntPtr subentityIndics);

				public virtual EarthView.World.Graphic.Entity CreateEntity(string entityName, EarthView.World.Graphic.MeshPtr pMesh, EarthView.World.Core.IntVector subentityIndics)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_CMeshPtr_IntVector(this.NativeObject, entityName, object.Equals(pMesh, null) ? IntPtr.Zero : pMesh.NativeObject, object.Equals(subentityIndics, null) ? IntPtr.Zero : subentityIndics.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createEntity_CallBack_CEntity_EVString_CMeshPtr(ref IntPtr entityName, IntPtr pMesh);

				protected createEntity_CallBack_CEntity_EVString_CMeshPtr m_createEntity_CallBack_CEntity_EVString_CMeshPtr;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_CMeshPtr_NoVirtual(IntPtr pNativeObject, string entityName, IntPtr pMesh);

				public virtual EarthView.World.Graphic.Entity CreateEntity_NoVirtual(string entityName, EarthView.World.Graphic.MeshPtr pMesh)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_CMeshPtr_NoVirtual(this.NativeObject, entityName, object.Equals(pMesh, null) ? IntPtr.Zero : pMesh.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_CMeshPtr_Function(ref IntPtr entityName, IntPtr pMesh)
				{
					string strentityName= Marshal.PtrToStringAnsi(entityName);
					ClassFactory.FreeString(ref entityName);
					EarthView.World.Graphic.MeshPtr csobj_pMesh = new EarthView.World.Graphic.MeshPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pMesh.BindNativeObject(pMesh,"CMeshPtr");
					csobj_pMesh.Delegate = true;
					IClassFactory csobj_pMeshClassFactory = GlobalClassFactoryMap.Get(csobj_pMesh.GetCppInstanceTypeName());
					if (csobj_pMeshClassFactory != null)
					{
						csobj_pMesh.Delegate = true;
						csobj_pMesh = csobj_pMeshClassFactory.Create() as EarthView.World.Graphic.MeshPtr;
						csobj_pMesh.BindNativeObject(pMesh, "CMeshPtr");
						csobj_pMesh.Delegate = true;
					}
					
					EarthView.World.Graphic.Entity csret=CreateEntity(strentityName,csobj_pMesh);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_CMeshPtr(IntPtr pNativeObject, string entityName, IntPtr pMesh);

				public virtual EarthView.World.Graphic.Entity CreateEntity(string entityName, EarthView.World.Graphic.MeshPtr pMesh)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_CMeshPtr(this.NativeObject, entityName, object.Equals(pMesh, null) ? IntPtr.Zero : pMesh.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createEntity_CallBack_CEntity_CMeshPtr_IntVector(IntPtr pMesh, IntPtr subentityIndics);

				protected createEntity_CallBack_CEntity_CMeshPtr_IntVector m_createEntity_CallBack_CEntity_CMeshPtr_IntVector;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_CMeshPtr_IntVector_NoVirtual(IntPtr pNativeObject, IntPtr pMesh, IntPtr subentityIndics);

				public virtual EarthView.World.Graphic.Entity CreateEntity_NoVirtual(EarthView.World.Graphic.MeshPtr pMesh, EarthView.World.Core.IntVector subentityIndics)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_CMeshPtr_IntVector_NoVirtual(this.NativeObject, object.Equals(pMesh, null) ? IntPtr.Zero : pMesh.NativeObject, object.Equals(subentityIndics, null) ? IntPtr.Zero : subentityIndics.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_CMeshPtr_IntVector_Function(IntPtr pMesh, IntPtr subentityIndics)
				{
					EarthView.World.Graphic.MeshPtr csobj_pMesh = new EarthView.World.Graphic.MeshPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pMesh.BindNativeObject(pMesh,"CMeshPtr");
					csobj_pMesh.Delegate = true;
					IClassFactory csobj_pMeshClassFactory = GlobalClassFactoryMap.Get(csobj_pMesh.GetCppInstanceTypeName());
					if (csobj_pMeshClassFactory != null)
					{
						csobj_pMesh.Delegate = true;
						csobj_pMesh = csobj_pMeshClassFactory.Create() as EarthView.World.Graphic.MeshPtr;
						csobj_pMesh.BindNativeObject(pMesh, "CMeshPtr");
						csobj_pMesh.Delegate = true;
					}
					EarthView.World.Core.IntVector csobj_subentityIndics = new EarthView.World.Core.IntVector(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_subentityIndics.BindNativeObject(subentityIndics,"IntVector");
					csobj_subentityIndics.Delegate = true;
					IClassFactory csobj_subentityIndicsClassFactory = GlobalClassFactoryMap.Get(csobj_subentityIndics.GetCppInstanceTypeName());
					if (csobj_subentityIndicsClassFactory != null)
					{
						csobj_subentityIndics.Delegate = true;
						csobj_subentityIndics = csobj_subentityIndicsClassFactory.Create() as EarthView.World.Core.IntVector;
						csobj_subentityIndics.BindNativeObject(subentityIndics, "IntVector");
						csobj_subentityIndics.Delegate = true;
					}
					
					EarthView.World.Graphic.Entity csret=CreateEntity(csobj_pMesh, csobj_subentityIndics);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_CMeshPtr_IntVector(IntPtr pNativeObject, IntPtr pMesh, IntPtr subentityIndics);

				public virtual EarthView.World.Graphic.Entity CreateEntity(EarthView.World.Graphic.MeshPtr pMesh, EarthView.World.Core.IntVector subentityIndics)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_CMeshPtr_IntVector(this.NativeObject, object.Equals(pMesh, null) ? IntPtr.Zero : pMesh.NativeObject, object.Equals(subentityIndics, null) ? IntPtr.Zero : subentityIndics.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createEntity_CallBack_CEntity_CMeshPtr(IntPtr pMesh);

				protected createEntity_CallBack_CEntity_CMeshPtr m_createEntity_CallBack_CEntity_CMeshPtr;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_CMeshPtr_NoVirtual(IntPtr pNativeObject, IntPtr pMesh);

				public virtual EarthView.World.Graphic.Entity CreateEntity_NoVirtual(EarthView.World.Graphic.MeshPtr pMesh)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_CMeshPtr_NoVirtual(this.NativeObject, object.Equals(pMesh, null) ? IntPtr.Zero : pMesh.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_CMeshPtr_Function(IntPtr pMesh)
				{
					EarthView.World.Graphic.MeshPtr csobj_pMesh = new EarthView.World.Graphic.MeshPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pMesh.BindNativeObject(pMesh,"CMeshPtr");
					csobj_pMesh.Delegate = true;
					IClassFactory csobj_pMeshClassFactory = GlobalClassFactoryMap.Get(csobj_pMesh.GetCppInstanceTypeName());
					if (csobj_pMeshClassFactory != null)
					{
						csobj_pMesh.Delegate = true;
						csobj_pMesh = csobj_pMeshClassFactory.Create() as EarthView.World.Graphic.MeshPtr;
						csobj_pMesh.BindNativeObject(pMesh, "CMeshPtr");
						csobj_pMesh.Delegate = true;
					}
					
					EarthView.World.Graphic.Entity csret=CreateEntity(csobj_pMesh);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_CMeshPtr(IntPtr pNativeObject, IntPtr pMesh);

				public virtual EarthView.World.Graphic.Entity CreateEntity(EarthView.World.Graphic.MeshPtr pMesh)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_CMeshPtr(this.NativeObject, object.Equals(pMesh, null) ? IntPtr.Zero : pMesh.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createEntity_CallBack_CEntity_EVString_IntVector(ref IntPtr meshName, IntPtr subentityIndics);

				protected createEntity_CallBack_CEntity_EVString_IntVector m_createEntity_CallBack_CEntity_EVString_IntVector;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_IntVector_NoVirtual(IntPtr pNativeObject, string meshName, IntPtr subentityIndics);

				public virtual EarthView.World.Graphic.Entity CreateEntity_NoVirtual(string meshName, EarthView.World.Core.IntVector subentityIndics)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_IntVector_NoVirtual(this.NativeObject, meshName, object.Equals(subentityIndics, null) ? IntPtr.Zero : subentityIndics.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_IntVector_Function(ref IntPtr meshName, IntPtr subentityIndics)
				{
					string strmeshName= Marshal.PtrToStringAnsi(meshName);
					ClassFactory.FreeString(ref meshName);
					EarthView.World.Core.IntVector csobj_subentityIndics = new EarthView.World.Core.IntVector(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_subentityIndics.BindNativeObject(subentityIndics,"IntVector");
					csobj_subentityIndics.Delegate = true;
					IClassFactory csobj_subentityIndicsClassFactory = GlobalClassFactoryMap.Get(csobj_subentityIndics.GetCppInstanceTypeName());
					if (csobj_subentityIndicsClassFactory != null)
					{
						csobj_subentityIndics.Delegate = true;
						csobj_subentityIndics = csobj_subentityIndicsClassFactory.Create() as EarthView.World.Core.IntVector;
						csobj_subentityIndics.BindNativeObject(subentityIndics, "IntVector");
						csobj_subentityIndics.Delegate = true;
					}
					
					EarthView.World.Graphic.Entity csret=CreateEntity(strmeshName,csobj_subentityIndics);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_IntVector(IntPtr pNativeObject, string meshName, IntPtr subentityIndics);

				public virtual EarthView.World.Graphic.Entity CreateEntity(string meshName, EarthView.World.Core.IntVector subentityIndics)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_IntVector(this.NativeObject, meshName, object.Equals(subentityIndics, null) ? IntPtr.Zero : subentityIndics.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createEntity_CallBack_CEntity_EVString(ref IntPtr meshName);

				protected createEntity_CallBack_CEntity_EVString m_createEntity_CallBack_CEntity_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_NoVirtual(IntPtr pNativeObject, string meshName);

				public virtual EarthView.World.Graphic.Entity CreateEntity_NoVirtual(string meshName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_NoVirtual(this.NativeObject, meshName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_Function(ref IntPtr meshName)
				{
					string strmeshName= Marshal.PtrToStringAnsi(meshName);
					ClassFactory.FreeString(ref meshName);
					
					EarthView.World.Graphic.Entity csret=CreateEntity(strmeshName);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString(IntPtr pNativeObject, string meshName);

				public virtual EarthView.World.Graphic.Entity CreateEntity(string meshName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString(this.NativeObject, meshName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				/// <summary>
				/// 组合图形渲染模型
				/// </summary>
				/// <returns></returns>
				public enum PREFABTYPE
				{
								PT_PLANE,
								PT_CUBE,
								PT_SPHERE
				
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createEntity_CallBack_CEntity_EVString_PrefabType(ref IntPtr entityName, EarthView.World.Graphic.SceneManager.PREFABTYPE ptype);

				protected createEntity_CallBack_CEntity_EVString_PrefabType m_createEntity_CallBack_CEntity_EVString_PrefabType;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_PrefabType_NoVirtual(IntPtr pNativeObject, string entityName, EarthView.World.Graphic.SceneManager.PREFABTYPE ptype);

				/// <summary>
				/// 通过图形创建实体
				/// </summary>
				/// <param name="entityName">实体名称</param>
				/// <param name="ptype">几何类型</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Entity CreateEntity_NoVirtual(string entityName, EarthView.World.Graphic.SceneManager.PREFABTYPE ptype)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_PrefabType_NoVirtual(this.NativeObject, entityName, ptype);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_PrefabType_Function(ref IntPtr entityName, EarthView.World.Graphic.SceneManager.PREFABTYPE ptype)
				{
					string strentityName= Marshal.PtrToStringAnsi(entityName);
					ClassFactory.FreeString(ref entityName);
					
					EarthView.World.Graphic.Entity csret=CreateEntity(strentityName,ptype);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_PrefabType(IntPtr pNativeObject, string entityName, EarthView.World.Graphic.SceneManager.PREFABTYPE ptype);

				/// <summary>
				/// 通过图形创建实体
				/// </summary>
				/// <param name="entityName">实体名称</param>
				/// <param name="ptype">几何类型</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Entity CreateEntity(string entityName, EarthView.World.Graphic.SceneManager.PREFABTYPE ptype)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_PrefabType(this.NativeObject, entityName, ptype);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createEntity_CallBack_CEntity_PrefabType(EarthView.World.Graphic.SceneManager.PREFABTYPE ptype);

				protected createEntity_CallBack_CEntity_PrefabType m_createEntity_CallBack_CEntity_PrefabType;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_PrefabType_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.SceneManager.PREFABTYPE ptype);

				public virtual EarthView.World.Graphic.Entity CreateEntity_NoVirtual(EarthView.World.Graphic.SceneManager.PREFABTYPE ptype)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_PrefabType_NoVirtual(this.NativeObject, ptype);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_PrefabType_Function(EarthView.World.Graphic.SceneManager.PREFABTYPE ptype)
				{
					EarthView.World.Graphic.Entity csret=CreateEntity(ptype);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createEntity_CEntity_PrefabType(IntPtr pNativeObject, EarthView.World.Graphic.SceneManager.PREFABTYPE ptype);

				public virtual EarthView.World.Graphic.Entity CreateEntity(EarthView.World.Graphic.SceneManager.PREFABTYPE ptype)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_PrefabType(this.NativeObject, ptype);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getEntity_CallBack_CEntity_EVString(ref IntPtr name);

				protected getEntity_CallBack_CEntity_EVString m_getEntity_CallBack_CEntity_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getEntity_CEntity_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 获取给定名称的实体				
				/// </summary>
				/// <param name="name">实体名称</param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Entity GetEntity_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getEntity_CEntity_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getEntity_CEntity_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.Entity csret=GetEntity(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getEntity_CEntity_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 获取给定名称的实体				
				/// </summary>
				/// <param name="name">实体名称</param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Entity GetEntity(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getEntity_CEntity_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Entity csObj = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Entity;
						csObj.BindNativeObject(__ptr, "CEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte hasEntity_CallBack_ev_bool_EVString(ref IntPtr name);

				protected hasEntity_CallBack_ev_bool_EVString m_hasEntity_CallBack_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasEntity_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 判断给定名称的实体是否存在				
				/// </summary>
				/// <param name="name">实体名称</param>				
				/// <returns></returns>
				public virtual bool HasEntity_NoVirtual(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasEntity_ev_bool_EVString_NoVirtual(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_hasEntity_ev_bool_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					bool csret=HasEntity(strname);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasEntity_ev_bool_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 判断给定名称的实体是否存在				
				/// </summary>
				/// <param name="name">实体名称</param>				
				/// <returns></returns>
				public virtual bool HasEntity(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasEntity_ev_bool_EVString(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyEntity_CallBack_void_CEntity(IntPtr ent);

				protected destroyEntity_CallBack_void_CEntity m_destroyEntity_CallBack_void_CEntity;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyEntity_void_CEntity_NoVirtual(IntPtr pNativeObject, IntPtr ent);

				/// <summary>
				/// 销毁实体				
				/// </summary>
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void DestroyEntity_NoVirtual(EarthView.World.Graphic.Entity ent)
				{
					EarthView_World_Graphic_CSceneManager_destroyEntity_void_CEntity_NoVirtual(this.NativeObject, object.Equals(ent, null) ? IntPtr.Zero : ent.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyEntity_void_CEntity_Function(IntPtr ent)
				{
					EarthView.World.Graphic.Entity csobj_ent = new EarthView.World.Graphic.Entity(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_ent.BindNativeObject(ent,"CEntity");
					csobj_ent.Delegate = true;
					IClassFactory csobj_entClassFactory = GlobalClassFactoryMap.Get(csobj_ent.GetCppInstanceTypeName());
					if (csobj_entClassFactory != null)
					{
						csobj_ent.Delegate = true;
						csobj_ent = csobj_entClassFactory.Create() as EarthView.World.Graphic.Entity;
						csobj_ent.BindNativeObject(ent, "CEntity");
						csobj_ent.Delegate = true;
					}
					
					DestroyEntity(csobj_ent);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyEntity_void_CEntity(IntPtr pNativeObject, IntPtr ent);

				/// <summary>
				/// 销毁实体				
				/// </summary>
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void DestroyEntity(EarthView.World.Graphic.Entity ent)
				{
					EarthView_World_Graphic_CSceneManager_destroyEntity_void_CEntity(this.NativeObject, object.Equals(ent, null) ? IntPtr.Zero : ent.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyEntity_CallBack_void_EVString(ref IntPtr name);

				protected destroyEntity_CallBack_void_EVString m_destroyEntity_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyEntity_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual void DestroyEntity_NoVirtual(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyEntity_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyEntity_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroyEntity(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyEntity_void_EVString(IntPtr pNativeObject, string name);

				public virtual void DestroyEntity(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyEntity_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyAllEntities_CallBack_void();

				protected destroyAllEntities_CallBack_void m_destroyAllEntities_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllEntities_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 销毁所有实体				
				/// </summary>
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void DestroyAllEntities_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllEntities_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyAllEntities_void_Function()
				{
					DestroyAllEntities();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllEntities_void(IntPtr pNativeObject);

				/// <summary>
				/// 销毁所有实体				
				/// </summary>
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void DestroyAllEntities()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllEntities_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createManualObject_CallBack_CManualObject_EVString(ref IntPtr name);

				protected createManualObject_CallBack_CManualObject_EVString m_createManualObject_CallBack_CManualObject_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createManualObject_CManualObject_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.ManualObject CreateManualObject_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createManualObject_CManualObject_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ManualObject csObj = new EarthView.World.Graphic.ManualObject(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CManualObject");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ManualObject;
						csObj.BindNativeObject(__ptr, "CManualObject");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createManualObject_CManualObject_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.ManualObject csret=CreateManualObject(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createManualObject_CManualObject_EVString(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.ManualObject CreateManualObject(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createManualObject_CManualObject_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ManualObject csObj = new EarthView.World.Graphic.ManualObject(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CManualObject");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ManualObject;
						csObj.BindNativeObject(__ptr, "CManualObject");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createManualObject_CallBack_CManualObject();

				protected createManualObject_CallBack_CManualObject m_createManualObject_CallBack_CManualObject;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createManualObject_CManualObject_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.ManualObject CreateManualObject_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createManualObject_CManualObject_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ManualObject csObj = new EarthView.World.Graphic.ManualObject(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CManualObject");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ManualObject;
						csObj.BindNativeObject(__ptr, "CManualObject");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createManualObject_CManualObject_Function()
				{
					EarthView.World.Graphic.ManualObject csret=CreateManualObject();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createManualObject_CManualObject(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.ManualObject CreateManualObject()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createManualObject_CManualObject(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ManualObject csObj = new EarthView.World.Graphic.ManualObject(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CManualObject");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ManualObject;
						csObj.BindNativeObject(__ptr, "CManualObject");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getManualObject_CallBack_CManualObject_EVString(ref IntPtr name);

				protected getManualObject_CallBack_CManualObject_EVString m_getManualObject_CallBack_CManualObject_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getManualObject_CManualObject_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.ManualObject GetManualObject_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getManualObject_CManualObject_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ManualObject csObj = new EarthView.World.Graphic.ManualObject(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CManualObject");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ManualObject;
						csObj.BindNativeObject(__ptr, "CManualObject");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getManualObject_CManualObject_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.ManualObject csret=GetManualObject(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getManualObject_CManualObject_EVString(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.ManualObject GetManualObject(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getManualObject_CManualObject_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ManualObject csObj = new EarthView.World.Graphic.ManualObject(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CManualObject");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ManualObject;
						csObj.BindNativeObject(__ptr, "CManualObject");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte hasManualObject_CallBack_ev_bool_EVString(ref IntPtr name);

				protected hasManualObject_CallBack_ev_bool_EVString m_hasManualObject_CallBack_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasManualObject_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual bool HasManualObject_NoVirtual(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasManualObject_ev_bool_EVString_NoVirtual(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_hasManualObject_ev_bool_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					bool csret=HasManualObject(strname);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasManualObject_ev_bool_EVString(IntPtr pNativeObject, string name);

				public virtual bool HasManualObject(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasManualObject_ev_bool_EVString(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyManualObject_CallBack_void_CManualObject(IntPtr obj);

				protected destroyManualObject_CallBack_void_CManualObject m_destroyManualObject_CallBack_void_CManualObject;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyManualObject_void_CManualObject_NoVirtual(IntPtr pNativeObject, IntPtr obj);

				public virtual void DestroyManualObject_NoVirtual(EarthView.World.Graphic.ManualObject obj)
				{
					EarthView_World_Graphic_CSceneManager_destroyManualObject_void_CManualObject_NoVirtual(this.NativeObject, object.Equals(obj, null) ? IntPtr.Zero : obj.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyManualObject_void_CManualObject_Function(IntPtr obj)
				{
					EarthView.World.Graphic.ManualObject csobj_obj = new EarthView.World.Graphic.ManualObject(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_obj.BindNativeObject(obj,"CManualObject");
					csobj_obj.Delegate = true;
					IClassFactory csobj_objClassFactory = GlobalClassFactoryMap.Get(csobj_obj.GetCppInstanceTypeName());
					if (csobj_objClassFactory != null)
					{
						csobj_obj.Delegate = true;
						csobj_obj = csobj_objClassFactory.Create() as EarthView.World.Graphic.ManualObject;
						csobj_obj.BindNativeObject(obj, "CManualObject");
						csobj_obj.Delegate = true;
					}
					
					DestroyManualObject(csobj_obj);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyManualObject_void_CManualObject(IntPtr pNativeObject, IntPtr obj);

				public virtual void DestroyManualObject(EarthView.World.Graphic.ManualObject obj)
				{
					EarthView_World_Graphic_CSceneManager_destroyManualObject_void_CManualObject(this.NativeObject, object.Equals(obj, null) ? IntPtr.Zero : obj.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyManualObject_CallBack_void_EVString(ref IntPtr name);

				protected destroyManualObject_CallBack_void_EVString m_destroyManualObject_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyManualObject_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual void DestroyManualObject_NoVirtual(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyManualObject_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyManualObject_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroyManualObject(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyManualObject_void_EVString(IntPtr pNativeObject, string name);

				public virtual void DestroyManualObject(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyManualObject_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyAllManualObjects_CallBack_void();

				protected destroyAllManualObjects_CallBack_void m_destroyAllManualObjects_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllManualObjects_void_NoVirtual(IntPtr pNativeObject);

				public virtual void DestroyAllManualObjects_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllManualObjects_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyAllManualObjects_void_Function()
				{
					DestroyAllManualObjects();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllManualObjects_void(IntPtr pNativeObject);

				public virtual void DestroyAllManualObjects()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllManualObjects_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte usingWebMercator_CallBack_ev_bool();

				protected usingWebMercator_CallBack_ev_bool m_usingWebMercator_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_usingWebMercator_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool UsingWebMercator_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_usingWebMercator_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_usingWebMercator_ev_bool_Function()
				{
					bool csret=UsingWebMercator();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_usingWebMercator_ev_bool(IntPtr pNativeObject);

				public virtual bool UsingWebMercator()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_usingWebMercator_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createBillboardChain_CallBack_CBillboardChain_EVString(ref IntPtr name);

				protected createBillboardChain_CallBack_CBillboardChain_EVString m_createBillboardChain_CallBack_CBillboardChain_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createBillboardChain_CBillboardChain_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.BillboardChain CreateBillboardChain_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createBillboardChain_CBillboardChain_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.BillboardChain csObj = new EarthView.World.Graphic.BillboardChain(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CBillboardChain");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.BillboardChain;
						csObj.BindNativeObject(__ptr, "CBillboardChain");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createBillboardChain_CBillboardChain_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.BillboardChain csret=CreateBillboardChain(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createBillboardChain_CBillboardChain_EVString(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.BillboardChain CreateBillboardChain(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createBillboardChain_CBillboardChain_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.BillboardChain csObj = new EarthView.World.Graphic.BillboardChain(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CBillboardChain");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.BillboardChain;
						csObj.BindNativeObject(__ptr, "CBillboardChain");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createBillboardChain_CallBack_CBillboardChain();

				protected createBillboardChain_CallBack_CBillboardChain m_createBillboardChain_CallBack_CBillboardChain;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createBillboardChain_CBillboardChain_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.BillboardChain CreateBillboardChain_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createBillboardChain_CBillboardChain_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.BillboardChain csObj = new EarthView.World.Graphic.BillboardChain(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CBillboardChain");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.BillboardChain;
						csObj.BindNativeObject(__ptr, "CBillboardChain");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createBillboardChain_CBillboardChain_Function()
				{
					EarthView.World.Graphic.BillboardChain csret=CreateBillboardChain();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createBillboardChain_CBillboardChain(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.BillboardChain CreateBillboardChain()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createBillboardChain_CBillboardChain(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.BillboardChain csObj = new EarthView.World.Graphic.BillboardChain(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CBillboardChain");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.BillboardChain;
						csObj.BindNativeObject(__ptr, "CBillboardChain");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getBillboardChain_CallBack_CBillboardChain_EVString(ref IntPtr name);

				protected getBillboardChain_CallBack_CBillboardChain_EVString m_getBillboardChain_CallBack_CBillboardChain_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getBillboardChain_CBillboardChain_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.BillboardChain GetBillboardChain_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getBillboardChain_CBillboardChain_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.BillboardChain csObj = new EarthView.World.Graphic.BillboardChain(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CBillboardChain");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.BillboardChain;
						csObj.BindNativeObject(__ptr, "CBillboardChain");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getBillboardChain_CBillboardChain_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.BillboardChain csret=GetBillboardChain(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getBillboardChain_CBillboardChain_EVString(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.BillboardChain GetBillboardChain(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getBillboardChain_CBillboardChain_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.BillboardChain csObj = new EarthView.World.Graphic.BillboardChain(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CBillboardChain");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.BillboardChain;
						csObj.BindNativeObject(__ptr, "CBillboardChain");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte hasBillboardChain_CallBack_ev_bool_EVString(ref IntPtr name);

				protected hasBillboardChain_CallBack_ev_bool_EVString m_hasBillboardChain_CallBack_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasBillboardChain_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual bool HasBillboardChain_NoVirtual(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasBillboardChain_ev_bool_EVString_NoVirtual(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_hasBillboardChain_ev_bool_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					bool csret=HasBillboardChain(strname);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasBillboardChain_ev_bool_EVString(IntPtr pNativeObject, string name);

				public virtual bool HasBillboardChain(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasBillboardChain_ev_bool_EVString(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyBillboardChain_CallBack_void_CBillboardChain(IntPtr obj);

				protected destroyBillboardChain_CallBack_void_CBillboardChain m_destroyBillboardChain_CallBack_void_CBillboardChain;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyBillboardChain_void_CBillboardChain_NoVirtual(IntPtr pNativeObject, IntPtr obj);

				public virtual void DestroyBillboardChain_NoVirtual(EarthView.World.Graphic.BillboardChain obj)
				{
					EarthView_World_Graphic_CSceneManager_destroyBillboardChain_void_CBillboardChain_NoVirtual(this.NativeObject, object.Equals(obj, null) ? IntPtr.Zero : obj.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyBillboardChain_void_CBillboardChain_Function(IntPtr obj)
				{
					EarthView.World.Graphic.BillboardChain csobj_obj = new EarthView.World.Graphic.BillboardChain(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_obj.BindNativeObject(obj,"CBillboardChain");
					csobj_obj.Delegate = true;
					IClassFactory csobj_objClassFactory = GlobalClassFactoryMap.Get(csobj_obj.GetCppInstanceTypeName());
					if (csobj_objClassFactory != null)
					{
						csobj_obj.Delegate = true;
						csobj_obj = csobj_objClassFactory.Create() as EarthView.World.Graphic.BillboardChain;
						csobj_obj.BindNativeObject(obj, "CBillboardChain");
						csobj_obj.Delegate = true;
					}
					
					DestroyBillboardChain(csobj_obj);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyBillboardChain_void_CBillboardChain(IntPtr pNativeObject, IntPtr obj);

				public virtual void DestroyBillboardChain(EarthView.World.Graphic.BillboardChain obj)
				{
					EarthView_World_Graphic_CSceneManager_destroyBillboardChain_void_CBillboardChain(this.NativeObject, object.Equals(obj, null) ? IntPtr.Zero : obj.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyBillboardChain_CallBack_void_EVString(ref IntPtr name);

				protected destroyBillboardChain_CallBack_void_EVString m_destroyBillboardChain_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyBillboardChain_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual void DestroyBillboardChain_NoVirtual(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyBillboardChain_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyBillboardChain_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroyBillboardChain(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyBillboardChain_void_EVString(IntPtr pNativeObject, string name);

				public virtual void DestroyBillboardChain(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyBillboardChain_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyAllBillboardChains_CallBack_void();

				protected destroyAllBillboardChains_CallBack_void m_destroyAllBillboardChains_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllBillboardChains_void_NoVirtual(IntPtr pNativeObject);

				public virtual void DestroyAllBillboardChains_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllBillboardChains_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyAllBillboardChains_void_Function()
				{
					DestroyAllBillboardChains();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllBillboardChains_void(IntPtr pNativeObject);

				public virtual void DestroyAllBillboardChains()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllBillboardChains_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createRibbonTrail_CallBack_CRibbonTrail_EVString(ref IntPtr name);

				protected createRibbonTrail_CallBack_CRibbonTrail_EVString m_createRibbonTrail_CallBack_CRibbonTrail_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createRibbonTrail_CRibbonTrail_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.RibbonTrail CreateRibbonTrail_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createRibbonTrail_CRibbonTrail_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RibbonTrail csObj = new EarthView.World.Graphic.RibbonTrail(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRibbonTrail");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RibbonTrail;
						csObj.BindNativeObject(__ptr, "CRibbonTrail");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createRibbonTrail_CRibbonTrail_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.RibbonTrail csret=CreateRibbonTrail(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createRibbonTrail_CRibbonTrail_EVString(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.RibbonTrail CreateRibbonTrail(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createRibbonTrail_CRibbonTrail_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RibbonTrail csObj = new EarthView.World.Graphic.RibbonTrail(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRibbonTrail");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RibbonTrail;
						csObj.BindNativeObject(__ptr, "CRibbonTrail");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createRibbonTrail_CallBack_CRibbonTrail();

				protected createRibbonTrail_CallBack_CRibbonTrail m_createRibbonTrail_CallBack_CRibbonTrail;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createRibbonTrail_CRibbonTrail_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.RibbonTrail CreateRibbonTrail_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createRibbonTrail_CRibbonTrail_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RibbonTrail csObj = new EarthView.World.Graphic.RibbonTrail(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRibbonTrail");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RibbonTrail;
						csObj.BindNativeObject(__ptr, "CRibbonTrail");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createRibbonTrail_CRibbonTrail_Function()
				{
					EarthView.World.Graphic.RibbonTrail csret=CreateRibbonTrail();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createRibbonTrail_CRibbonTrail(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.RibbonTrail CreateRibbonTrail()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createRibbonTrail_CRibbonTrail(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RibbonTrail csObj = new EarthView.World.Graphic.RibbonTrail(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRibbonTrail");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RibbonTrail;
						csObj.BindNativeObject(__ptr, "CRibbonTrail");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getRibbonTrail_CallBack_CRibbonTrail_EVString(ref IntPtr name);

				protected getRibbonTrail_CallBack_CRibbonTrail_EVString m_getRibbonTrail_CallBack_CRibbonTrail_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getRibbonTrail_CRibbonTrail_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.RibbonTrail GetRibbonTrail_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getRibbonTrail_CRibbonTrail_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RibbonTrail csObj = new EarthView.World.Graphic.RibbonTrail(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRibbonTrail");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RibbonTrail;
						csObj.BindNativeObject(__ptr, "CRibbonTrail");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getRibbonTrail_CRibbonTrail_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.RibbonTrail csret=GetRibbonTrail(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getRibbonTrail_CRibbonTrail_EVString(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.RibbonTrail GetRibbonTrail(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getRibbonTrail_CRibbonTrail_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RibbonTrail csObj = new EarthView.World.Graphic.RibbonTrail(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRibbonTrail");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RibbonTrail;
						csObj.BindNativeObject(__ptr, "CRibbonTrail");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte hasRibbonTrail_CallBack_ev_bool_EVString(ref IntPtr name);

				protected hasRibbonTrail_CallBack_ev_bool_EVString m_hasRibbonTrail_CallBack_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasRibbonTrail_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual bool HasRibbonTrail_NoVirtual(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasRibbonTrail_ev_bool_EVString_NoVirtual(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_hasRibbonTrail_ev_bool_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					bool csret=HasRibbonTrail(strname);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasRibbonTrail_ev_bool_EVString(IntPtr pNativeObject, string name);

				public virtual bool HasRibbonTrail(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasRibbonTrail_ev_bool_EVString(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyRibbonTrail_CallBack_void_CRibbonTrail(IntPtr obj);

				protected destroyRibbonTrail_CallBack_void_CRibbonTrail m_destroyRibbonTrail_CallBack_void_CRibbonTrail;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyRibbonTrail_void_CRibbonTrail_NoVirtual(IntPtr pNativeObject, IntPtr obj);

				public virtual void DestroyRibbonTrail_NoVirtual(EarthView.World.Graphic.RibbonTrail obj)
				{
					EarthView_World_Graphic_CSceneManager_destroyRibbonTrail_void_CRibbonTrail_NoVirtual(this.NativeObject, object.Equals(obj, null) ? IntPtr.Zero : obj.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyRibbonTrail_void_CRibbonTrail_Function(IntPtr obj)
				{
					EarthView.World.Graphic.RibbonTrail csobj_obj = new EarthView.World.Graphic.RibbonTrail(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_obj.BindNativeObject(obj,"CRibbonTrail");
					csobj_obj.Delegate = true;
					IClassFactory csobj_objClassFactory = GlobalClassFactoryMap.Get(csobj_obj.GetCppInstanceTypeName());
					if (csobj_objClassFactory != null)
					{
						csobj_obj.Delegate = true;
						csobj_obj = csobj_objClassFactory.Create() as EarthView.World.Graphic.RibbonTrail;
						csobj_obj.BindNativeObject(obj, "CRibbonTrail");
						csobj_obj.Delegate = true;
					}
					
					DestroyRibbonTrail(csobj_obj);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyRibbonTrail_void_CRibbonTrail(IntPtr pNativeObject, IntPtr obj);

				public virtual void DestroyRibbonTrail(EarthView.World.Graphic.RibbonTrail obj)
				{
					EarthView_World_Graphic_CSceneManager_destroyRibbonTrail_void_CRibbonTrail(this.NativeObject, object.Equals(obj, null) ? IntPtr.Zero : obj.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyRibbonTrail_CallBack_void_EVString(ref IntPtr name);

				protected destroyRibbonTrail_CallBack_void_EVString m_destroyRibbonTrail_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyRibbonTrail_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual void DestroyRibbonTrail_NoVirtual(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyRibbonTrail_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyRibbonTrail_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroyRibbonTrail(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyRibbonTrail_void_EVString(IntPtr pNativeObject, string name);

				public virtual void DestroyRibbonTrail(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyRibbonTrail_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyAllRibbonTrails_CallBack_void();

				protected destroyAllRibbonTrails_CallBack_void m_destroyAllRibbonTrails_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllRibbonTrails_void_NoVirtual(IntPtr pNativeObject);

				public virtual void DestroyAllRibbonTrails_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllRibbonTrails_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyAllRibbonTrails_void_Function()
				{
					DestroyAllRibbonTrails();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllRibbonTrails_void(IntPtr pNativeObject);

				public virtual void DestroyAllRibbonTrails()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllRibbonTrails_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createParticleSystem_CallBack_CParticleSystem_EVString_EVString(ref IntPtr name, ref IntPtr templateName);

				protected createParticleSystem_CallBack_CParticleSystem_EVString_EVString m_createParticleSystem_CallBack_CParticleSystem_EVString_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_EVString_NoVirtual(IntPtr pNativeObject, string name, string templateName);

				public virtual EarthView.World.Graphic.ParticleSystem CreateParticleSystem_NoVirtual(string name, string templateName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_EVString_NoVirtual(this.NativeObject, name, templateName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ParticleSystem csObj = new EarthView.World.Graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CParticleSystem");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ParticleSystem;
						csObj.BindNativeObject(__ptr, "CParticleSystem");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_EVString_Function(ref IntPtr name, ref IntPtr templateName)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					string strtemplateName= Marshal.PtrToStringAnsi(templateName);
					ClassFactory.FreeString(ref templateName);
					
					EarthView.World.Graphic.ParticleSystem csret=CreateParticleSystem(strname,strtemplateName);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_EVString(IntPtr pNativeObject, string name, string templateName);

				public virtual EarthView.World.Graphic.ParticleSystem CreateParticleSystem(string name, string templateName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_EVString(this.NativeObject, name, templateName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ParticleSystem csObj = new EarthView.World.Graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CParticleSystem");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ParticleSystem;
						csObj.BindNativeObject(__ptr, "CParticleSystem");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createParticleSystem_CallBack_CParticleSystem_EVString_ev_size_t_EVString(ref IntPtr name, ulong quota, ref IntPtr resourceGroup);

				protected createParticleSystem_CallBack_CParticleSystem_EVString_ev_size_t_EVString m_createParticleSystem_CallBack_CParticleSystem_EVString_ev_size_t_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_ev_size_t_EVString_NoVirtual(IntPtr pNativeObject, string name, ulong quota, string resourceGroup);

				public virtual EarthView.World.Graphic.ParticleSystem CreateParticleSystem_NoVirtual(string name, ulong quota, string resourceGroup)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_ev_size_t_EVString_NoVirtual(this.NativeObject, name, quota, resourceGroup);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ParticleSystem csObj = new EarthView.World.Graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CParticleSystem");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ParticleSystem;
						csObj.BindNativeObject(__ptr, "CParticleSystem");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_ev_size_t_EVString_Function(ref IntPtr name, ulong quota, ref IntPtr resourceGroup)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					string strresourceGroup= Marshal.PtrToStringAnsi(resourceGroup);
					ClassFactory.FreeString(ref resourceGroup);
					
					EarthView.World.Graphic.ParticleSystem csret=CreateParticleSystem(strname,quota, strresourceGroup);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_ev_size_t_EVString(IntPtr pNativeObject, string name, ulong quota, string resourceGroup);

				public virtual EarthView.World.Graphic.ParticleSystem CreateParticleSystem(string name, ulong quota, string resourceGroup)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_ev_size_t_EVString(this.NativeObject, name, quota, resourceGroup);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ParticleSystem csObj = new EarthView.World.Graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CParticleSystem");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ParticleSystem;
						csObj.BindNativeObject(__ptr, "CParticleSystem");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createParticleSystem_CallBack_CParticleSystem_EVString_ev_size_t(ref IntPtr name, ulong quota);

				protected createParticleSystem_CallBack_CParticleSystem_EVString_ev_size_t m_createParticleSystem_CallBack_CParticleSystem_EVString_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_ev_size_t_NoVirtual(IntPtr pNativeObject, string name, ulong quota);

				public virtual EarthView.World.Graphic.ParticleSystem CreateParticleSystem_NoVirtual(string name, ulong quota)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_ev_size_t_NoVirtual(this.NativeObject, name, quota);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ParticleSystem csObj = new EarthView.World.Graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CParticleSystem");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ParticleSystem;
						csObj.BindNativeObject(__ptr, "CParticleSystem");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_ev_size_t_Function(ref IntPtr name, ulong quota)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.ParticleSystem csret=CreateParticleSystem(strname,quota);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_ev_size_t(IntPtr pNativeObject, string name, ulong quota);

				public virtual EarthView.World.Graphic.ParticleSystem CreateParticleSystem(string name, ulong quota)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_ev_size_t(this.NativeObject, name, quota);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ParticleSystem csObj = new EarthView.World.Graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CParticleSystem");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ParticleSystem;
						csObj.BindNativeObject(__ptr, "CParticleSystem");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createParticleSystem_CallBack_CParticleSystem_EVString(ref IntPtr name);

				protected createParticleSystem_CallBack_CParticleSystem_EVString m_createParticleSystem_CallBack_CParticleSystem_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.ParticleSystem CreateParticleSystem_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ParticleSystem csObj = new EarthView.World.Graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CParticleSystem");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ParticleSystem;
						csObj.BindNativeObject(__ptr, "CParticleSystem");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.ParticleSystem csret=CreateParticleSystem(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.ParticleSystem CreateParticleSystem(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ParticleSystem csObj = new EarthView.World.Graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CParticleSystem");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ParticleSystem;
						csObj.BindNativeObject(__ptr, "CParticleSystem");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createParticleSystem_CallBack_CParticleSystem_ev_size_t_EVString(ulong quota, ref IntPtr resourceGroup);

				protected createParticleSystem_CallBack_CParticleSystem_ev_size_t_EVString m_createParticleSystem_CallBack_CParticleSystem_ev_size_t_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_ev_size_t_EVString_NoVirtual(IntPtr pNativeObject, ulong quota, string resourceGroup);

				public virtual EarthView.World.Graphic.ParticleSystem CreateParticleSystem_NoVirtual(ulong quota, string resourceGroup)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_ev_size_t_EVString_NoVirtual(this.NativeObject, quota, resourceGroup);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ParticleSystem csObj = new EarthView.World.Graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CParticleSystem");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ParticleSystem;
						csObj.BindNativeObject(__ptr, "CParticleSystem");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_ev_size_t_EVString_Function(ulong quota, ref IntPtr resourceGroup)
				{
					string strresourceGroup= Marshal.PtrToStringAnsi(resourceGroup);
					ClassFactory.FreeString(ref resourceGroup);
					
					EarthView.World.Graphic.ParticleSystem csret=CreateParticleSystem(quota, strresourceGroup);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_ev_size_t_EVString(IntPtr pNativeObject, ulong quota, string resourceGroup);

				public virtual EarthView.World.Graphic.ParticleSystem CreateParticleSystem(ulong quota, string resourceGroup)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_ev_size_t_EVString(this.NativeObject, quota, resourceGroup);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ParticleSystem csObj = new EarthView.World.Graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CParticleSystem");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ParticleSystem;
						csObj.BindNativeObject(__ptr, "CParticleSystem");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createParticleSystem_CallBack_CParticleSystem_ev_size_t(ulong quota);

				protected createParticleSystem_CallBack_CParticleSystem_ev_size_t m_createParticleSystem_CallBack_CParticleSystem_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_ev_size_t_NoVirtual(IntPtr pNativeObject, ulong quota);

				public virtual EarthView.World.Graphic.ParticleSystem CreateParticleSystem_NoVirtual(ulong quota)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_ev_size_t_NoVirtual(this.NativeObject, quota);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ParticleSystem csObj = new EarthView.World.Graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CParticleSystem");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ParticleSystem;
						csObj.BindNativeObject(__ptr, "CParticleSystem");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_ev_size_t_Function(ulong quota)
				{
					EarthView.World.Graphic.ParticleSystem csret=CreateParticleSystem(quota);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_ev_size_t(IntPtr pNativeObject, ulong quota);

				public virtual EarthView.World.Graphic.ParticleSystem CreateParticleSystem(ulong quota)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_ev_size_t(this.NativeObject, quota);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ParticleSystem csObj = new EarthView.World.Graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CParticleSystem");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ParticleSystem;
						csObj.BindNativeObject(__ptr, "CParticleSystem");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createParticleSystem_CallBack_CParticleSystem();

				protected createParticleSystem_CallBack_CParticleSystem m_createParticleSystem_CallBack_CParticleSystem;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.ParticleSystem CreateParticleSystem_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ParticleSystem csObj = new EarthView.World.Graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CParticleSystem");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ParticleSystem;
						csObj.BindNativeObject(__ptr, "CParticleSystem");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_Function()
				{
					EarthView.World.Graphic.ParticleSystem csret=CreateParticleSystem();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.ParticleSystem CreateParticleSystem()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ParticleSystem csObj = new EarthView.World.Graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CParticleSystem");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ParticleSystem;
						csObj.BindNativeObject(__ptr, "CParticleSystem");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getParticleSystem_CallBack_CParticleSystem_EVString(ref IntPtr name);

				protected getParticleSystem_CallBack_CParticleSystem_EVString m_getParticleSystem_CallBack_CParticleSystem_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getParticleSystem_CParticleSystem_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.ParticleSystem GetParticleSystem_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getParticleSystem_CParticleSystem_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ParticleSystem csObj = new EarthView.World.Graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CParticleSystem");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ParticleSystem;
						csObj.BindNativeObject(__ptr, "CParticleSystem");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getParticleSystem_CParticleSystem_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.ParticleSystem csret=GetParticleSystem(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getParticleSystem_CParticleSystem_EVString(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.ParticleSystem GetParticleSystem(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getParticleSystem_CParticleSystem_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ParticleSystem csObj = new EarthView.World.Graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CParticleSystem");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ParticleSystem;
						csObj.BindNativeObject(__ptr, "CParticleSystem");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte hasParticleSystem_CallBack_ev_bool_EVString(ref IntPtr name);

				protected hasParticleSystem_CallBack_ev_bool_EVString m_hasParticleSystem_CallBack_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasParticleSystem_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual bool HasParticleSystem_NoVirtual(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasParticleSystem_ev_bool_EVString_NoVirtual(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_hasParticleSystem_ev_bool_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					bool csret=HasParticleSystem(strname);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasParticleSystem_ev_bool_EVString(IntPtr pNativeObject, string name);

				public virtual bool HasParticleSystem(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasParticleSystem_ev_bool_EVString(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyParticleSystem_CallBack_void_CParticleSystem(IntPtr obj);

				protected destroyParticleSystem_CallBack_void_CParticleSystem m_destroyParticleSystem_CallBack_void_CParticleSystem;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyParticleSystem_void_CParticleSystem_NoVirtual(IntPtr pNativeObject, IntPtr obj);

				public virtual void DestroyParticleSystem_NoVirtual(EarthView.World.Graphic.ParticleSystem obj)
				{
					EarthView_World_Graphic_CSceneManager_destroyParticleSystem_void_CParticleSystem_NoVirtual(this.NativeObject, object.Equals(obj, null) ? IntPtr.Zero : obj.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyParticleSystem_void_CParticleSystem_Function(IntPtr obj)
				{
					EarthView.World.Graphic.ParticleSystem csobj_obj = new EarthView.World.Graphic.ParticleSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_obj.BindNativeObject(obj,"CParticleSystem");
					csobj_obj.Delegate = true;
					IClassFactory csobj_objClassFactory = GlobalClassFactoryMap.Get(csobj_obj.GetCppInstanceTypeName());
					if (csobj_objClassFactory != null)
					{
						csobj_obj.Delegate = true;
						csobj_obj = csobj_objClassFactory.Create() as EarthView.World.Graphic.ParticleSystem;
						csobj_obj.BindNativeObject(obj, "CParticleSystem");
						csobj_obj.Delegate = true;
					}
					
					DestroyParticleSystem(csobj_obj);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyParticleSystem_void_CParticleSystem(IntPtr pNativeObject, IntPtr obj);

				public virtual void DestroyParticleSystem(EarthView.World.Graphic.ParticleSystem obj)
				{
					EarthView_World_Graphic_CSceneManager_destroyParticleSystem_void_CParticleSystem(this.NativeObject, object.Equals(obj, null) ? IntPtr.Zero : obj.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyParticleSystem_CallBack_void_EVString(ref IntPtr name);

				protected destroyParticleSystem_CallBack_void_EVString m_destroyParticleSystem_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyParticleSystem_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual void DestroyParticleSystem_NoVirtual(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyParticleSystem_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyParticleSystem_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroyParticleSystem(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyParticleSystem_void_EVString(IntPtr pNativeObject, string name);

				public virtual void DestroyParticleSystem(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyParticleSystem_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyAllParticleSystems_CallBack_void();

				protected destroyAllParticleSystems_CallBack_void m_destroyAllParticleSystems_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllParticleSystems_void_NoVirtual(IntPtr pNativeObject);

				public virtual void DestroyAllParticleSystems_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllParticleSystems_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyAllParticleSystems_void_Function()
				{
					DestroyAllParticleSystems();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllParticleSystems_void(IntPtr pNativeObject);

				public virtual void DestroyAllParticleSystems()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllParticleSystems_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void clearScene_CallBack_void();

				protected clearScene_CallBack_void m_clearScene_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_clearScene_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 清空场景
				/// 清空场景中场景节点，光源等
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void ClearScene_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_clearScene_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_clearScene_void_Function()
				{
					ClearScene();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_clearScene_void(IntPtr pNativeObject);

				/// <summary>
				/// 清空场景
				/// 清空场景中场景节点，光源等
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public virtual void ClearScene()
				{
					EarthView_World_Graphic_CSceneManager_clearScene_void(this.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setAmbientLight_void_CColourValue(IntPtr pNativeObject, IntPtr colour);

				/// <summary>
				/// 设置环境光
				/// 缺省的环境光是CColourValue::Black
				/// </summary>
				/// <param name="colour"></param>
				/// <returns></returns>
				public void SetAmbientLight(EarthView.World.Graphic.ColourValue colour)
				{
					EarthView_World_Graphic_CSceneManager_setAmbientLight_void_CColourValue(this.NativeObject, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getAmbientLight_CColourValue(IntPtr pNativeObject);

				/// <summary>
				/// 获取环境光
				/// </summary>
				/// <param name=""></param>
				/// <returns></returns>
				public EarthView.World.Graphic.ColourValue GetAmbientLight()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getAmbientLight_CColourValue(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ColourValue csObj = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CColourValue");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csObj.BindNativeObject(__ptr, "CColourValue");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void prepareWorldGeometry_CallBack_void_EVString(ref IntPtr filename);

				protected prepareWorldGeometry_CallBack_void_EVString m_prepareWorldGeometry_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_EVString_NoVirtual(IntPtr pNativeObject, string filename);

				public virtual void PrepareWorldGeometry_NoVirtual(string filename)
				{
					EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_EVString_NoVirtual(this.NativeObject, filename);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_EVString_Function(ref IntPtr filename)
				{
					string strfilename= Marshal.PtrToStringAnsi(filename);
					ClassFactory.FreeString(ref filename);
					
					PrepareWorldGeometry(strfilename);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_EVString(IntPtr pNativeObject, string filename);

				public virtual void PrepareWorldGeometry(string filename)
				{
					EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_EVString(this.NativeObject, filename);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void prepareWorldGeometry_CallBack_void_DataStreamPtr_EVString(IntPtr stream, ref IntPtr typeName);

				protected prepareWorldGeometry_CallBack_void_DataStreamPtr_EVString m_prepareWorldGeometry_CallBack_void_DataStreamPtr_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_DataStreamPtr_EVString_NoVirtual(IntPtr pNativeObject, IntPtr stream, string typeName);

				public virtual void PrepareWorldGeometry_NoVirtual(ref EarthView.World.Core.DataStreamPtr stream, string typeName)
				{
					EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_DataStreamPtr_EVString_NoVirtual(this.NativeObject, object.Equals(stream, null) ? IntPtr.Zero : stream.NativeObject, typeName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_DataStreamPtr_EVString_Function(IntPtr stream, ref IntPtr typeName)
				{
					EarthView.World.Core.DataStreamPtr csobj_stream = new EarthView.World.Core.DataStreamPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_stream.BindNativeObject(stream,"DataStreamPtr");
					csobj_stream.Delegate = true;
					IClassFactory csobj_streamClassFactory = GlobalClassFactoryMap.Get(csobj_stream.GetCppInstanceTypeName());
					if (csobj_streamClassFactory != null)
					{
						csobj_stream.Delegate = true;
						csobj_stream = csobj_streamClassFactory.Create() as EarthView.World.Core.DataStreamPtr;
						csobj_stream.BindNativeObject(stream, "DataStreamPtr");
						csobj_stream.Delegate = true;
					}
					string strtypeName= Marshal.PtrToStringAnsi(typeName);
					ClassFactory.FreeString(ref typeName);
					
					PrepareWorldGeometry(ref csobj_stream, strtypeName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_DataStreamPtr_EVString(IntPtr pNativeObject, IntPtr stream, string typeName);

				public virtual void PrepareWorldGeometry(ref EarthView.World.Core.DataStreamPtr stream, string typeName)
				{
					EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_DataStreamPtr_EVString(this.NativeObject, object.Equals(stream, null) ? IntPtr.Zero : stream.NativeObject, typeName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void prepareWorldGeometry_CallBack_void_DataStreamPtr(IntPtr stream);

				protected prepareWorldGeometry_CallBack_void_DataStreamPtr m_prepareWorldGeometry_CallBack_void_DataStreamPtr;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_DataStreamPtr_NoVirtual(IntPtr pNativeObject, IntPtr stream);

				public virtual void PrepareWorldGeometry_NoVirtual(ref EarthView.World.Core.DataStreamPtr stream)
				{
					EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_DataStreamPtr_NoVirtual(this.NativeObject, object.Equals(stream, null) ? IntPtr.Zero : stream.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_DataStreamPtr_Function(IntPtr stream)
				{
					EarthView.World.Core.DataStreamPtr csobj_stream = new EarthView.World.Core.DataStreamPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_stream.BindNativeObject(stream,"DataStreamPtr");
					csobj_stream.Delegate = true;
					IClassFactory csobj_streamClassFactory = GlobalClassFactoryMap.Get(csobj_stream.GetCppInstanceTypeName());
					if (csobj_streamClassFactory != null)
					{
						csobj_stream.Delegate = true;
						csobj_stream = csobj_streamClassFactory.Create() as EarthView.World.Core.DataStreamPtr;
						csobj_stream.BindNativeObject(stream, "DataStreamPtr");
						csobj_stream.Delegate = true;
					}
					
					PrepareWorldGeometry(ref csobj_stream);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_DataStreamPtr(IntPtr pNativeObject, IntPtr stream);

				public virtual void PrepareWorldGeometry(ref EarthView.World.Core.DataStreamPtr stream)
				{
					EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_DataStreamPtr(this.NativeObject, object.Equals(stream, null) ? IntPtr.Zero : stream.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setWorldGeometry_CallBack_void_EVString(ref IntPtr filename);

				protected setWorldGeometry_CallBack_void_EVString m_setWorldGeometry_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_EVString_NoVirtual(IntPtr pNativeObject, string filename);

				public virtual void SetWorldGeometry_NoVirtual(string filename)
				{
					EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_EVString_NoVirtual(this.NativeObject, filename);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_EVString_Function(ref IntPtr filename)
				{
					string strfilename= Marshal.PtrToStringAnsi(filename);
					ClassFactory.FreeString(ref filename);
					
					SetWorldGeometry(strfilename);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_EVString(IntPtr pNativeObject, string filename);

				public virtual void SetWorldGeometry(string filename)
				{
					EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_EVString(this.NativeObject, filename);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setWorldGeometry_CallBack_void_DataStreamPtr_EVString(IntPtr stream, ref IntPtr typeName);

				protected setWorldGeometry_CallBack_void_DataStreamPtr_EVString m_setWorldGeometry_CallBack_void_DataStreamPtr_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_DataStreamPtr_EVString_NoVirtual(IntPtr pNativeObject, IntPtr stream, string typeName);

				public virtual void SetWorldGeometry_NoVirtual(ref EarthView.World.Core.DataStreamPtr stream, string typeName)
				{
					EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_DataStreamPtr_EVString_NoVirtual(this.NativeObject, object.Equals(stream, null) ? IntPtr.Zero : stream.NativeObject, typeName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_DataStreamPtr_EVString_Function(IntPtr stream, ref IntPtr typeName)
				{
					EarthView.World.Core.DataStreamPtr csobj_stream = new EarthView.World.Core.DataStreamPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_stream.BindNativeObject(stream,"DataStreamPtr");
					csobj_stream.Delegate = true;
					IClassFactory csobj_streamClassFactory = GlobalClassFactoryMap.Get(csobj_stream.GetCppInstanceTypeName());
					if (csobj_streamClassFactory != null)
					{
						csobj_stream.Delegate = true;
						csobj_stream = csobj_streamClassFactory.Create() as EarthView.World.Core.DataStreamPtr;
						csobj_stream.BindNativeObject(stream, "DataStreamPtr");
						csobj_stream.Delegate = true;
					}
					string strtypeName= Marshal.PtrToStringAnsi(typeName);
					ClassFactory.FreeString(ref typeName);
					
					SetWorldGeometry(ref csobj_stream, strtypeName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_DataStreamPtr_EVString(IntPtr pNativeObject, IntPtr stream, string typeName);

				public virtual void SetWorldGeometry(ref EarthView.World.Core.DataStreamPtr stream, string typeName)
				{
					EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_DataStreamPtr_EVString(this.NativeObject, object.Equals(stream, null) ? IntPtr.Zero : stream.NativeObject, typeName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setWorldGeometry_CallBack_void_DataStreamPtr(IntPtr stream);

				protected setWorldGeometry_CallBack_void_DataStreamPtr m_setWorldGeometry_CallBack_void_DataStreamPtr;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_DataStreamPtr_NoVirtual(IntPtr pNativeObject, IntPtr stream);

				public virtual void SetWorldGeometry_NoVirtual(ref EarthView.World.Core.DataStreamPtr stream)
				{
					EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_DataStreamPtr_NoVirtual(this.NativeObject, object.Equals(stream, null) ? IntPtr.Zero : stream.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_DataStreamPtr_Function(IntPtr stream)
				{
					EarthView.World.Core.DataStreamPtr csobj_stream = new EarthView.World.Core.DataStreamPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_stream.BindNativeObject(stream,"DataStreamPtr");
					csobj_stream.Delegate = true;
					IClassFactory csobj_streamClassFactory = GlobalClassFactoryMap.Get(csobj_stream.GetCppInstanceTypeName());
					if (csobj_streamClassFactory != null)
					{
						csobj_stream.Delegate = true;
						csobj_stream = csobj_streamClassFactory.Create() as EarthView.World.Core.DataStreamPtr;
						csobj_stream.BindNativeObject(stream, "DataStreamPtr");
						csobj_stream.Delegate = true;
					}
					
					SetWorldGeometry(ref csobj_stream);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_DataStreamPtr(IntPtr pNativeObject, IntPtr stream);

				public virtual void SetWorldGeometry(ref EarthView.World.Core.DataStreamPtr stream)
				{
					EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_DataStreamPtr(this.NativeObject, object.Equals(stream, null) ? IntPtr.Zero : stream.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate ulong estimateWorldGeometry_CallBack_ev_size_t_EVString(ref IntPtr filename);

				protected estimateWorldGeometry_CallBack_ev_size_t_EVString m_estimateWorldGeometry_CallBack_ev_size_t_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_EVString_NoVirtual(IntPtr pNativeObject, string filename);

				public virtual ulong EstimateWorldGeometry_NoVirtual(string filename)
				{
					ulong ret=EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_EVString_NoVirtual(this.NativeObject, filename);
					
					return ret;
					
				}

				protected  ulong EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_EVString_Function(ref IntPtr filename)
				{
					string strfilename= Marshal.PtrToStringAnsi(filename);
					ClassFactory.FreeString(ref filename);
					
					ulong csret=EstimateWorldGeometry(strfilename);
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_EVString(IntPtr pNativeObject, string filename);

				public virtual ulong EstimateWorldGeometry(string filename)
				{
					ulong ret=EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_EVString(this.NativeObject, filename);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate ulong estimateWorldGeometry_CallBack_ev_size_t_DataStreamPtr_EVString(IntPtr stream, ref IntPtr typeName);

				protected estimateWorldGeometry_CallBack_ev_size_t_DataStreamPtr_EVString m_estimateWorldGeometry_CallBack_ev_size_t_DataStreamPtr_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_DataStreamPtr_EVString_NoVirtual(IntPtr pNativeObject, IntPtr stream, string typeName);

				public virtual ulong EstimateWorldGeometry_NoVirtual(ref EarthView.World.Core.DataStreamPtr stream, string typeName)
				{
					ulong ret=EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_DataStreamPtr_EVString_NoVirtual(this.NativeObject, object.Equals(stream, null) ? IntPtr.Zero : stream.NativeObject, typeName);
					
					return ret;
					
				}

				protected  ulong EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_DataStreamPtr_EVString_Function(IntPtr stream, ref IntPtr typeName)
				{
					EarthView.World.Core.DataStreamPtr csobj_stream = new EarthView.World.Core.DataStreamPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_stream.BindNativeObject(stream,"DataStreamPtr");
					csobj_stream.Delegate = true;
					IClassFactory csobj_streamClassFactory = GlobalClassFactoryMap.Get(csobj_stream.GetCppInstanceTypeName());
					if (csobj_streamClassFactory != null)
					{
						csobj_stream.Delegate = true;
						csobj_stream = csobj_streamClassFactory.Create() as EarthView.World.Core.DataStreamPtr;
						csobj_stream.BindNativeObject(stream, "DataStreamPtr");
						csobj_stream.Delegate = true;
					}
					string strtypeName= Marshal.PtrToStringAnsi(typeName);
					ClassFactory.FreeString(ref typeName);
					
					ulong csret=EstimateWorldGeometry(ref csobj_stream, strtypeName);
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_DataStreamPtr_EVString(IntPtr pNativeObject, IntPtr stream, string typeName);

				public virtual ulong EstimateWorldGeometry(ref EarthView.World.Core.DataStreamPtr stream, string typeName)
				{
					ulong ret=EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_DataStreamPtr_EVString(this.NativeObject, object.Equals(stream, null) ? IntPtr.Zero : stream.NativeObject, typeName);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate ulong estimateWorldGeometry_CallBack_ev_size_t_DataStreamPtr(IntPtr stream);

				protected estimateWorldGeometry_CallBack_ev_size_t_DataStreamPtr m_estimateWorldGeometry_CallBack_ev_size_t_DataStreamPtr;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_DataStreamPtr_NoVirtual(IntPtr pNativeObject, IntPtr stream);

				public virtual ulong EstimateWorldGeometry_NoVirtual(ref EarthView.World.Core.DataStreamPtr stream)
				{
					ulong ret=EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_DataStreamPtr_NoVirtual(this.NativeObject, object.Equals(stream, null) ? IntPtr.Zero : stream.NativeObject);
					
					return ret;
					
				}

				protected  ulong EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_DataStreamPtr_Function(IntPtr stream)
				{
					EarthView.World.Core.DataStreamPtr csobj_stream = new EarthView.World.Core.DataStreamPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_stream.BindNativeObject(stream,"DataStreamPtr");
					csobj_stream.Delegate = true;
					IClassFactory csobj_streamClassFactory = GlobalClassFactoryMap.Get(csobj_stream.GetCppInstanceTypeName());
					if (csobj_streamClassFactory != null)
					{
						csobj_stream.Delegate = true;
						csobj_stream = csobj_streamClassFactory.Create() as EarthView.World.Core.DataStreamPtr;
						csobj_stream.BindNativeObject(stream, "DataStreamPtr");
						csobj_stream.Delegate = true;
					}
					
					ulong csret=EstimateWorldGeometry(ref csobj_stream);
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_DataStreamPtr(IntPtr pNativeObject, IntPtr stream);

				public virtual ulong EstimateWorldGeometry(ref EarthView.World.Core.DataStreamPtr stream)
				{
					ulong ret=EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_DataStreamPtr(this.NativeObject, object.Equals(stream, null) ? IntPtr.Zero : stream.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getSuggestedViewpoint_CallBack_ViewPoint_ev_bool(bool random);

				protected getSuggestedViewpoint_CallBack_ViewPoint_ev_bool m_getSuggestedViewpoint_CallBack_ViewPoint_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSuggestedViewpoint_ViewPoint_ev_bool_NoVirtual(IntPtr pNativeObject, byte random);

				/// <summary>
				/// 从场景管理获取一个推荐的观察点
				/// 通常这个方法返回原点，除非设定了坐标系或者世界坐标系推荐了起始点，如果有多于一个的推荐点，返回第一个。
				/// </summary>
				/// <param name="random">如果为真，将随机返回一个</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.ViewPoint GetSuggestedViewpoint_NoVirtual(bool random)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSuggestedViewpoint_ViewPoint_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(random));
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ViewPoint csObj = new EarthView.World.Graphic.ViewPoint(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "ViewPoint");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ViewPoint;
						csObj.BindNativeObject(__ptr, "ViewPoint");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getSuggestedViewpoint_ViewPoint_ev_bool_Function(bool random)
				{
					EarthView.World.Graphic.ViewPoint csret=GetSuggestedViewpoint(random);
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSuggestedViewpoint_ViewPoint_ev_bool(IntPtr pNativeObject, byte random);

				/// <summary>
				/// 从场景管理获取一个推荐的观察点
				/// 通常这个方法返回原点，除非设定了坐标系或者世界坐标系推荐了起始点，如果有多于一个的推荐点，返回第一个。
				/// </summary>
				/// <param name="random">如果为真，将随机返回一个</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.ViewPoint GetSuggestedViewpoint(bool random)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSuggestedViewpoint_ViewPoint_ev_bool(this.NativeObject, Convert.ToByte(random));
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ViewPoint csObj = new EarthView.World.Graphic.ViewPoint(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "ViewPoint");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ViewPoint;
						csObj.BindNativeObject(__ptr, "ViewPoint");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getSuggestedViewpoint_CallBack_ViewPoint();

				protected getSuggestedViewpoint_CallBack_ViewPoint m_getSuggestedViewpoint_CallBack_ViewPoint;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSuggestedViewpoint_ViewPoint_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.ViewPoint GetSuggestedViewpoint_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSuggestedViewpoint_ViewPoint_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ViewPoint csObj = new EarthView.World.Graphic.ViewPoint(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "ViewPoint");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ViewPoint;
						csObj.BindNativeObject(__ptr, "ViewPoint");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getSuggestedViewpoint_ViewPoint_Function()
				{
					EarthView.World.Graphic.ViewPoint csret=GetSuggestedViewpoint();
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSuggestedViewpoint_ViewPoint(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.ViewPoint GetSuggestedViewpoint()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSuggestedViewpoint_ViewPoint(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ViewPoint csObj = new EarthView.World.Graphic.ViewPoint(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "ViewPoint");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ViewPoint;
						csObj.BindNativeObject(__ptr, "ViewPoint");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte setOption_CallBack_ev_bool_EVString_void(ref IntPtr strKey, IntPtr pValue);

				protected setOption_CallBack_ev_bool_EVString_void m_setOption_CallBack_ev_bool_EVString_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_setOption_ev_bool_EVString_void_NoVirtual(IntPtr pNativeObject, string strKey, IntPtr pValue);

				/// <summary>
				/// 为场景设定一个特殊实现的选项
				/// </summary>
				/// <param name="strKey">设置的名称</param>
				/// <param name="pValue">通过键值场景管理合理计算大小</param>
				/// <returns>成功返回true,失败返回false</returns>
				public virtual bool SetOption_NoVirtual(string strKey, IntPtr pValue)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_setOption_ev_bool_EVString_void_NoVirtual(this.NativeObject, strKey, pValue);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_setOption_ev_bool_EVString_void_Function(ref IntPtr strKey, IntPtr pValue)
				{
					string strstrKey= Marshal.PtrToStringAnsi(strKey);
					ClassFactory.FreeString(ref strKey);
					
					bool csret=SetOption(strstrKey,pValue);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_setOption_ev_bool_EVString_void(IntPtr pNativeObject, string strKey, IntPtr pValue);

				/// <summary>
				/// 为场景设定一个特殊实现的选项
				/// </summary>
				/// <param name="strKey">设置的名称</param>
				/// <param name="pValue">通过键值场景管理合理计算大小</param>
				/// <returns>成功返回true,失败返回false</returns>
				public virtual bool SetOption(string strKey, IntPtr pValue)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_setOption_ev_bool_EVString_void(this.NativeObject, strKey, pValue);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getOption_CallBack_ev_bool_EVString_void(ref IntPtr strKey, IntPtr pDestValue);

				protected getOption_CallBack_ev_bool_EVString_void m_getOption_CallBack_ev_bool_EVString_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getOption_ev_bool_EVString_void_NoVirtual(IntPtr pNativeObject, string strKey, IntPtr pDestValue);

				/// <summary>
				/// 确认场景是否有一个特殊实现的选项
				/// </summary>
				/// <param name="strKey">设置的名称</param>
				/// <param name="pValue">指针</param>
				/// <returns>成功返回设置的选项,失败返回pDestValue，其值设置为空</returns>
				public virtual bool GetOption_NoVirtual(string strKey, IntPtr pDestValue)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getOption_ev_bool_EVString_void_NoVirtual(this.NativeObject, strKey, pDestValue);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getOption_ev_bool_EVString_void_Function(ref IntPtr strKey, IntPtr pDestValue)
				{
					string strstrKey= Marshal.PtrToStringAnsi(strKey);
					ClassFactory.FreeString(ref strKey);
					
					bool csret=GetOption(strstrKey,pDestValue);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getOption_ev_bool_EVString_void(IntPtr pNativeObject, string strKey, IntPtr pDestValue);

				/// <summary>
				/// 确认场景是否有一个特殊实现的选项
				/// </summary>
				/// <param name="strKey">设置的名称</param>
				/// <param name="pValue">指针</param>
				/// <returns>成功返回设置的选项,失败返回pDestValue，其值设置为空</returns>
				public virtual bool GetOption(string strKey, IntPtr pDestValue)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getOption_ev_bool_EVString_void(this.NativeObject, strKey, pDestValue);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte hasOption_CallBack_ev_bool_EVString(ref IntPtr strKey);

				protected hasOption_CallBack_ev_bool_EVString m_hasOption_CallBack_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasOption_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, string strKey);

				public virtual bool HasOption_NoVirtual(string strKey)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasOption_ev_bool_EVString_NoVirtual(this.NativeObject, strKey);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_hasOption_ev_bool_EVString_Function(ref IntPtr strKey)
				{
					string strstrKey= Marshal.PtrToStringAnsi(strKey);
					ClassFactory.FreeString(ref strKey);
					
					bool csret=HasOption(strstrKey);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasOption_ev_bool_EVString(IntPtr pNativeObject, string strKey);

				public virtual bool HasOption(string strKey)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasOption_ev_bool_EVString(this.NativeObject, strKey);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getOptionValues_CallBack_ev_bool_EVString_StringVector(ref IntPtr strKey, IntPtr refValueList);

				protected getOptionValues_CallBack_ev_bool_EVString_StringVector m_getOptionValues_CallBack_ev_bool_EVString_StringVector;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getOptionValues_ev_bool_EVString_StringVector_NoVirtual(IntPtr pNativeObject, string strKey, IntPtr refValueList);

				public virtual bool GetOptionValues_NoVirtual(string strKey, ref EarthView.World.Core.StringVector refValueList)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getOptionValues_ev_bool_EVString_StringVector_NoVirtual(this.NativeObject, strKey, object.Equals(refValueList, null) ? IntPtr.Zero : refValueList.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getOptionValues_ev_bool_EVString_StringVector_Function(ref IntPtr strKey, IntPtr refValueList)
				{
					string strstrKey= Marshal.PtrToStringAnsi(strKey);
					ClassFactory.FreeString(ref strKey);
					EarthView.World.Core.StringVector csobj_refValueList = new EarthView.World.Core.StringVector(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_refValueList.BindNativeObject(refValueList,"StringVector");
					csobj_refValueList.Delegate = true;
					IClassFactory csobj_refValueListClassFactory = GlobalClassFactoryMap.Get(csobj_refValueList.GetCppInstanceTypeName());
					if (csobj_refValueListClassFactory != null)
					{
						csobj_refValueList.Delegate = true;
						csobj_refValueList = csobj_refValueListClassFactory.Create() as EarthView.World.Core.StringVector;
						csobj_refValueList.BindNativeObject(refValueList, "StringVector");
						csobj_refValueList.Delegate = true;
					}
					
					bool csret=GetOptionValues(strstrKey,ref csobj_refValueList);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getOptionValues_ev_bool_EVString_StringVector(IntPtr pNativeObject, string strKey, IntPtr refValueList);

				public virtual bool GetOptionValues(string strKey, ref EarthView.World.Core.StringVector refValueList)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getOptionValues_ev_bool_EVString_StringVector(this.NativeObject, strKey, object.Equals(refValueList, null) ? IntPtr.Zero : refValueList.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getOptionKeys_CallBack_ev_bool_StringVector(IntPtr refKeys);

				protected getOptionKeys_CallBack_ev_bool_StringVector m_getOptionKeys_CallBack_ev_bool_StringVector;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getOptionKeys_ev_bool_StringVector_NoVirtual(IntPtr pNativeObject, IntPtr refKeys);

				public virtual bool GetOptionKeys_NoVirtual(ref EarthView.World.Core.StringVector refKeys)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getOptionKeys_ev_bool_StringVector_NoVirtual(this.NativeObject, object.Equals(refKeys, null) ? IntPtr.Zero : refKeys.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getOptionKeys_ev_bool_StringVector_Function(IntPtr refKeys)
				{
					EarthView.World.Core.StringVector csobj_refKeys = new EarthView.World.Core.StringVector(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_refKeys.BindNativeObject(refKeys,"StringVector");
					csobj_refKeys.Delegate = true;
					IClassFactory csobj_refKeysClassFactory = GlobalClassFactoryMap.Get(csobj_refKeys.GetCppInstanceTypeName());
					if (csobj_refKeysClassFactory != null)
					{
						csobj_refKeys.Delegate = true;
						csobj_refKeys = csobj_refKeysClassFactory.Create() as EarthView.World.Core.StringVector;
						csobj_refKeys.BindNativeObject(refKeys, "StringVector");
						csobj_refKeys.Delegate = true;
					}
					
					bool csret=GetOptionKeys(ref csobj_refKeys);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getOptionKeys_ev_bool_StringVector(IntPtr pNativeObject, IntPtr refKeys);

				public virtual bool GetOptionKeys(ref EarthView.World.Core.StringVector refKeys)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getOptionKeys_ev_bool_StringVector(this.NativeObject, object.Equals(refKeys, null) ? IntPtr.Zero : refKeys.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _updateSceneGraph_CallBack_void_CCamera(IntPtr cam);

				protected _updateSceneGraph_CallBack_void_CCamera m__updateSceneGraph_CallBack_void_CCamera;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__updateSceneGraph_void_CCamera_NoVirtual(IntPtr pNativeObject, IntPtr cam);

				/// <summary>
				/// 更新场景图
				/// </summary>
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void _updateSceneGraph_NoVirtual(EarthView.World.Graphic.Camera cam)
				{
					EarthView_World_Graphic_CSceneManager__updateSceneGraph_void_CCamera_NoVirtual(this.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__updateSceneGraph_void_CCamera_Function(IntPtr cam)
				{
					EarthView.World.Graphic.Camera csobj_cam = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_cam.BindNativeObject(cam,"CCamera");
					csobj_cam.Delegate = true;
					IClassFactory csobj_camClassFactory = GlobalClassFactoryMap.Get(csobj_cam.GetCppInstanceTypeName());
					if (csobj_camClassFactory != null)
					{
						csobj_cam.Delegate = true;
						csobj_cam = csobj_camClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_cam.BindNativeObject(cam, "CCamera");
						csobj_cam.Delegate = true;
					}
					
					_updateSceneGraph(csobj_cam);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__updateSceneGraph_void_CCamera(IntPtr pNativeObject, IntPtr cam);

				/// <summary>
				/// 更新场景图
				/// </summary>
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void _updateSceneGraph(EarthView.World.Graphic.Camera cam)
				{
					EarthView_World_Graphic_CSceneManager__updateSceneGraph_void_CCamera(this.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _findVisibleObjects_CallBack_void_CCamera_VisibleObjectsBoundsInfo_ev_bool(IntPtr cam, IntPtr visibleBounds, bool onlyShadowCasters);

				protected _findVisibleObjects_CallBack_void_CCamera_VisibleObjectsBoundsInfo_ev_bool m__findVisibleObjects_CallBack_void_CCamera_VisibleObjectsBoundsInfo_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__findVisibleObjects_void_CCamera_VisibleObjectsBoundsInfo_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr cam, IntPtr visibleBounds, byte onlyShadowCasters);

				/// <summary>
				/// 查找可见对象
				/// </summary>
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void _findVisibleObjects_NoVirtual(EarthView.World.Graphic.Camera cam, EarthView.World.Graphic.VisibleObjectsBoundsInfo visibleBounds, bool onlyShadowCasters)
				{
					EarthView_World_Graphic_CSceneManager__findVisibleObjects_void_CCamera_VisibleObjectsBoundsInfo_ev_bool_NoVirtual(this.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject, object.Equals(visibleBounds, null) ? IntPtr.Zero : visibleBounds.NativeObject, Convert.ToByte(onlyShadowCasters));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__findVisibleObjects_void_CCamera_VisibleObjectsBoundsInfo_ev_bool_Function(IntPtr cam, IntPtr visibleBounds, bool onlyShadowCasters)
				{
					EarthView.World.Graphic.Camera csobj_cam = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_cam.BindNativeObject(cam,"CCamera");
					csobj_cam.Delegate = true;
					IClassFactory csobj_camClassFactory = GlobalClassFactoryMap.Get(csobj_cam.GetCppInstanceTypeName());
					if (csobj_camClassFactory != null)
					{
						csobj_cam.Delegate = true;
						csobj_cam = csobj_camClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_cam.BindNativeObject(cam, "CCamera");
						csobj_cam.Delegate = true;
					}
					EarthView.World.Graphic.VisibleObjectsBoundsInfo csobj_visibleBounds = new EarthView.World.Graphic.VisibleObjectsBoundsInfo(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_visibleBounds.BindNativeObject(visibleBounds,"VisibleObjectsBoundsInfo");
					csobj_visibleBounds.Delegate = true;
					IClassFactory csobj_visibleBoundsClassFactory = GlobalClassFactoryMap.Get(csobj_visibleBounds.GetCppInstanceTypeName());
					if (csobj_visibleBoundsClassFactory != null)
					{
						csobj_visibleBounds.Delegate = true;
						csobj_visibleBounds = csobj_visibleBoundsClassFactory.Create() as EarthView.World.Graphic.VisibleObjectsBoundsInfo;
						csobj_visibleBounds.BindNativeObject(visibleBounds, "VisibleObjectsBoundsInfo");
						csobj_visibleBounds.Delegate = true;
					}
					
					_findVisibleObjects(csobj_cam, csobj_visibleBounds, onlyShadowCasters);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__findVisibleObjects_void_CCamera_VisibleObjectsBoundsInfo_ev_bool(IntPtr pNativeObject, IntPtr cam, IntPtr visibleBounds, byte onlyShadowCasters);

				/// <summary>
				/// 查找可见对象
				/// </summary>
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void _findVisibleObjects(EarthView.World.Graphic.Camera cam, EarthView.World.Graphic.VisibleObjectsBoundsInfo visibleBounds, bool onlyShadowCasters)
				{
					EarthView_World_Graphic_CSceneManager__findVisibleObjects_void_CCamera_VisibleObjectsBoundsInfo_ev_bool(this.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject, object.Equals(visibleBounds, null) ? IntPtr.Zero : visibleBounds.NativeObject, Convert.ToByte(onlyShadowCasters));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _applySceneAnimations_CallBack_void();

				protected _applySceneAnimations_CallBack_void m__applySceneAnimations_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__applySceneAnimations_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 应用场景节点动画
				/// </summary>
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void _applySceneAnimations_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager__applySceneAnimations_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__applySceneAnimations_void_Function()
				{
					_applySceneAnimations();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__applySceneAnimations_void(IntPtr pNativeObject);

				/// <summary>
				/// 应用场景节点动画
				/// </summary>
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void _applySceneAnimations()
				{
					EarthView_World_Graphic_CSceneManager__applySceneAnimations_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _renderVisibleObjects_CallBack_void();

				protected _renderVisibleObjects_CallBack_void m__renderVisibleObjects_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__renderVisibleObjects_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 渲染可见对象
				/// </summary>
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void _renderVisibleObjects_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager__renderVisibleObjects_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__renderVisibleObjects_void_Function()
				{
					_renderVisibleObjects();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__renderVisibleObjects_void(IntPtr pNativeObject);

				/// <summary>
				/// 渲染可见对象
				/// </summary>
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void _renderVisibleObjects()
				{
					EarthView_World_Graphic_CSceneManager__renderVisibleObjects_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _renderScene_CallBack_void_CCamera_CViewport_ev_bool(IntPtr camera, IntPtr vp, bool includeOverlays);

				protected _renderScene_CallBack_void_CCamera_CViewport_ev_bool m__renderScene_CallBack_void_CCamera_CViewport_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__renderScene_void_CCamera_CViewport_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr camera, IntPtr vp, byte includeOverlays);

				/// <summary>
				/// 渲染场景
				/// </summary>
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void _renderScene_NoVirtual(EarthView.World.Graphic.Camera camera, EarthView.World.Graphic.Viewport vp, bool includeOverlays)
				{
					EarthView_World_Graphic_CSceneManager__renderScene_void_CCamera_CViewport_ev_bool_NoVirtual(this.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, Convert.ToByte(includeOverlays));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__renderScene_void_CCamera_CViewport_ev_bool_Function(IntPtr camera, IntPtr vp, bool includeOverlays)
				{
					EarthView.World.Graphic.Camera csobj_camera = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_camera.BindNativeObject(camera,"CCamera");
					csobj_camera.Delegate = true;
					IClassFactory csobj_cameraClassFactory = GlobalClassFactoryMap.Get(csobj_camera.GetCppInstanceTypeName());
					if (csobj_cameraClassFactory != null)
					{
						csobj_camera.Delegate = true;
						csobj_camera = csobj_cameraClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_camera.BindNativeObject(camera, "CCamera");
						csobj_camera.Delegate = true;
					}
					EarthView.World.Graphic.Viewport csobj_vp = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_vp.BindNativeObject(vp,"CViewport");
					csobj_vp.Delegate = true;
					IClassFactory csobj_vpClassFactory = GlobalClassFactoryMap.Get(csobj_vp.GetCppInstanceTypeName());
					if (csobj_vpClassFactory != null)
					{
						csobj_vp.Delegate = true;
						csobj_vp = csobj_vpClassFactory.Create() as EarthView.World.Graphic.Viewport;
						csobj_vp.BindNativeObject(vp, "CViewport");
						csobj_vp.Delegate = true;
					}
					
					_renderScene(csobj_camera, csobj_vp, includeOverlays);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__renderScene_void_CCamera_CViewport_ev_bool(IntPtr pNativeObject, IntPtr camera, IntPtr vp, byte includeOverlays);

				/// <summary>
				/// 渲染场景
				/// </summary>
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void _renderScene(EarthView.World.Graphic.Camera camera, EarthView.World.Graphic.Viewport vp, bool includeOverlays)
				{
					EarthView_World_Graphic_CSceneManager__renderScene_void_CCamera_CViewport_ev_bool(this.NativeObject, object.Equals(camera, null) ? IntPtr.Zero : camera.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, Convert.ToByte(includeOverlays));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _queueSkiesForRendering_CallBack_void_CCamera(IntPtr cam);

				protected _queueSkiesForRendering_CallBack_void_CCamera m__queueSkiesForRendering_CallBack_void_CCamera;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__queueSkiesForRendering_void_CCamera_NoVirtual(IntPtr pNativeObject, IntPtr cam);

				public virtual void _queueSkiesForRendering_NoVirtual(EarthView.World.Graphic.Camera cam)
				{
					EarthView_World_Graphic_CSceneManager__queueSkiesForRendering_void_CCamera_NoVirtual(this.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__queueSkiesForRendering_void_CCamera_Function(IntPtr cam)
				{
					EarthView.World.Graphic.Camera csobj_cam = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_cam.BindNativeObject(cam,"CCamera");
					csobj_cam.Delegate = true;
					IClassFactory csobj_camClassFactory = GlobalClassFactoryMap.Get(csobj_cam.GetCppInstanceTypeName());
					if (csobj_camClassFactory != null)
					{
						csobj_cam.Delegate = true;
						csobj_cam = csobj_camClassFactory.Create() as EarthView.World.Graphic.Camera;
						csobj_cam.BindNativeObject(cam, "CCamera");
						csobj_cam.Delegate = true;
					}
					
					_queueSkiesForRendering(csobj_cam);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__queueSkiesForRendering_void_CCamera(IntPtr pNativeObject, IntPtr cam);

				public virtual void _queueSkiesForRendering(EarthView.World.Graphic.Camera cam)
				{
					EarthView_World_Graphic_CSceneManager__queueSkiesForRendering_void_CCamera(this.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setDestinationRenderSystem_CallBack_void_CRenderSystem(IntPtr ref_sys);

				protected _setDestinationRenderSystem_CallBack_void_CRenderSystem m__setDestinationRenderSystem_CallBack_void_CRenderSystem;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setDestinationRenderSystem_void_CRenderSystem_NoVirtual(IntPtr pNativeObject, IntPtr ref_sys);

				public virtual void _setDestinationRenderSystem_NoVirtual(EarthView.World.Graphic.RenderSystem ref_sys)
				{
					EarthView_World_Graphic_CSceneManager__setDestinationRenderSystem_void_CRenderSystem_NoVirtual(this.NativeObject, object.Equals(ref_sys, null) ? IntPtr.Zero : ref_sys.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setDestinationRenderSystem_void_CRenderSystem_Function(IntPtr ref_sys)
				{
					EarthView.World.Graphic.RenderSystem csobj_ref_sys = new EarthView.World.Graphic.RenderSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_ref_sys.BindNativeObject(ref_sys,"CRenderSystem");
					csobj_ref_sys.Delegate = true;
					IClassFactory csobj_ref_sysClassFactory = GlobalClassFactoryMap.Get(csobj_ref_sys.GetCppInstanceTypeName());
					if (csobj_ref_sysClassFactory != null)
					{
						csobj_ref_sys.Delegate = true;
						csobj_ref_sys = csobj_ref_sysClassFactory.Create() as EarthView.World.Graphic.RenderSystem;
						csobj_ref_sys.BindNativeObject(ref_sys, "CRenderSystem");
						csobj_ref_sys.Delegate = true;
					}
					
					_setDestinationRenderSystem(csobj_ref_sys);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setDestinationRenderSystem_void_CRenderSystem(IntPtr pNativeObject, IntPtr ref_sys);

				public virtual void _setDestinationRenderSystem(EarthView.World.Graphic.RenderSystem ref_sys)
				{
					EarthView_World_Graphic_CSceneManager__setDestinationRenderSystem_void_CRenderSystem(this.NativeObject, object.Equals(ref_sys, null) ? IntPtr.Zero : ref_sys.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, bool drawFirst, double bow, int xsegments, int ysegments, ref IntPtr groupName);

				protected setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_NoVirtual(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte drawFirst, double bow, int xsegments, int ysegments, string groupName);

				/// <summary>
				/// 设置是否启用一个天空平面
				/// </summary>
				/// <param name="enable">ture为启用，false为不启用</param>
				/// <param name="plane">平面的细节描述，它到摄像机的距离</param>
				/// <param name="materialName">天空使用材质的名称</param>
				/// <param name="scale">比例变换以适应天空平面</param>
				/// <param name="tiling">指针</param>
				/// <param name="drawFirst">指针</param>
				/// <param name="bow">指针</param>
				/// <param name="xsegments">指针</param>
				/// <param name="ysegments">指针</param>
				/// <param name="groupName">指针</param>
				/// <returns></returns>
				public virtual void SetSkyPlane_NoVirtual(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, bool drawFirst, double bow, int xsegments, int ysegments, string groupName)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_NoVirtual(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, Convert.ToByte(drawFirst), bow, xsegments, ysegments, groupName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_Function(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, bool drawFirst, double bow, int xsegments, int ysegments, ref IntPtr groupName)
				{
					EarthView.World.Spatial.Math.Plane csobj_plane = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_plane.BindNativeObject(plane,"CPlane");
					csobj_plane.Delegate = true;
					IClassFactory csobj_planeClassFactory = GlobalClassFactoryMap.Get(csobj_plane.GetCppInstanceTypeName());
					if (csobj_planeClassFactory != null)
					{
						csobj_plane.Delegate = true;
						csobj_plane = csobj_planeClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_plane.BindNativeObject(plane, "CPlane");
						csobj_plane.Delegate = true;
					}
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					string strgroupName= Marshal.PtrToStringAnsi(groupName);
					ClassFactory.FreeString(ref groupName);
					
					SetSkyPlane(enable, csobj_plane, strmaterialName,scale, tiling, drawFirst, bow, xsegments, ysegments, strgroupName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte drawFirst, double bow, int xsegments, int ysegments, string groupName);

				/// <summary>
				/// 设置是否启用一个天空平面
				/// </summary>
				/// <param name="enable">ture为启用，false为不启用</param>
				/// <param name="plane">平面的细节描述，它到摄像机的距离</param>
				/// <param name="materialName">天空使用材质的名称</param>
				/// <param name="scale">比例变换以适应天空平面</param>
				/// <param name="tiling">指针</param>
				/// <param name="drawFirst">指针</param>
				/// <param name="bow">指针</param>
				/// <param name="xsegments">指针</param>
				/// <param name="ysegments">指针</param>
				/// <param name="groupName">指针</param>
				/// <returns></returns>
				public virtual void SetSkyPlane(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, bool drawFirst, double bow, int xsegments, int ysegments, string groupName)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, Convert.ToByte(drawFirst), bow, xsegments, ysegments, groupName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, bool drawFirst, double bow, int xsegments, int ysegments);

				protected setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32 m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_NoVirtual(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte drawFirst, double bow, int xsegments, int ysegments);

				public virtual void SetSkyPlane_NoVirtual(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, bool drawFirst, double bow, int xsegments, int ysegments)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_NoVirtual(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, Convert.ToByte(drawFirst), bow, xsegments, ysegments);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_Function(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, bool drawFirst, double bow, int xsegments, int ysegments)
				{
					EarthView.World.Spatial.Math.Plane csobj_plane = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_plane.BindNativeObject(plane,"CPlane");
					csobj_plane.Delegate = true;
					IClassFactory csobj_planeClassFactory = GlobalClassFactoryMap.Get(csobj_plane.GetCppInstanceTypeName());
					if (csobj_planeClassFactory != null)
					{
						csobj_plane.Delegate = true;
						csobj_plane = csobj_planeClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_plane.BindNativeObject(plane, "CPlane");
						csobj_plane.Delegate = true;
					}
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					SetSkyPlane(enable, csobj_plane, strmaterialName,scale, tiling, drawFirst, bow, xsegments, ysegments);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte drawFirst, double bow, int xsegments, int ysegments);

				public virtual void SetSkyPlane(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, bool drawFirst, double bow, int xsegments, int ysegments)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, Convert.ToByte(drawFirst), bow, xsegments, ysegments);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, bool drawFirst, double bow, int xsegments);

				protected setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32 m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_NoVirtual(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte drawFirst, double bow, int xsegments);

				public virtual void SetSkyPlane_NoVirtual(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, bool drawFirst, double bow, int xsegments)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_NoVirtual(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, Convert.ToByte(drawFirst), bow, xsegments);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_Function(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, bool drawFirst, double bow, int xsegments)
				{
					EarthView.World.Spatial.Math.Plane csobj_plane = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_plane.BindNativeObject(plane,"CPlane");
					csobj_plane.Delegate = true;
					IClassFactory csobj_planeClassFactory = GlobalClassFactoryMap.Get(csobj_plane.GetCppInstanceTypeName());
					if (csobj_planeClassFactory != null)
					{
						csobj_plane.Delegate = true;
						csobj_plane = csobj_planeClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_plane.BindNativeObject(plane, "CPlane");
						csobj_plane.Delegate = true;
					}
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					SetSkyPlane(enable, csobj_plane, strmaterialName,scale, tiling, drawFirst, bow, xsegments);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte drawFirst, double bow, int xsegments);

				public virtual void SetSkyPlane(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, bool drawFirst, double bow, int xsegments)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, Convert.ToByte(drawFirst), bow, xsegments);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, bool drawFirst, double bow);

				protected setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_NoVirtual(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte drawFirst, double bow);

				public virtual void SetSkyPlane_NoVirtual(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, bool drawFirst, double bow)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_NoVirtual(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, Convert.ToByte(drawFirst), bow);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_Function(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, bool drawFirst, double bow)
				{
					EarthView.World.Spatial.Math.Plane csobj_plane = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_plane.BindNativeObject(plane,"CPlane");
					csobj_plane.Delegate = true;
					IClassFactory csobj_planeClassFactory = GlobalClassFactoryMap.Get(csobj_plane.GetCppInstanceTypeName());
					if (csobj_planeClassFactory != null)
					{
						csobj_plane.Delegate = true;
						csobj_plane = csobj_planeClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_plane.BindNativeObject(plane, "CPlane");
						csobj_plane.Delegate = true;
					}
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					SetSkyPlane(enable, csobj_plane, strmaterialName,scale, tiling, drawFirst, bow);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte drawFirst, double bow);

				public virtual void SetSkyPlane(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, bool drawFirst, double bow)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, Convert.ToByte(drawFirst), bow);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, bool drawFirst);

				protected setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_NoVirtual(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte drawFirst);

				public virtual void SetSkyPlane_NoVirtual(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, bool drawFirst)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, Convert.ToByte(drawFirst));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Function(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, bool drawFirst)
				{
					EarthView.World.Spatial.Math.Plane csobj_plane = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_plane.BindNativeObject(plane,"CPlane");
					csobj_plane.Delegate = true;
					IClassFactory csobj_planeClassFactory = GlobalClassFactoryMap.Get(csobj_plane.GetCppInstanceTypeName());
					if (csobj_planeClassFactory != null)
					{
						csobj_plane.Delegate = true;
						csobj_plane = csobj_planeClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_plane.BindNativeObject(plane, "CPlane");
						csobj_plane.Delegate = true;
					}
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					SetSkyPlane(enable, csobj_plane, strmaterialName,scale, tiling, drawFirst);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte drawFirst);

				public virtual void SetSkyPlane(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, bool drawFirst)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, Convert.ToByte(drawFirst));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling);

				protected setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_NoVirtual(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling);

				public virtual void SetSkyPlane_NoVirtual(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_NoVirtual(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_Function(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling)
				{
					EarthView.World.Spatial.Math.Plane csobj_plane = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_plane.BindNativeObject(plane,"CPlane");
					csobj_plane.Delegate = true;
					IClassFactory csobj_planeClassFactory = GlobalClassFactoryMap.Get(csobj_plane.GetCppInstanceTypeName());
					if (csobj_planeClassFactory != null)
					{
						csobj_plane.Delegate = true;
						csobj_plane = csobj_planeClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_plane.BindNativeObject(plane, "CPlane");
						csobj_plane.Delegate = true;
					}
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					SetSkyPlane(enable, csobj_plane, strmaterialName,scale, tiling);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling);

				public virtual void SetSkyPlane(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real(bool enable, IntPtr plane, ref IntPtr materialName, double scale);

				protected setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_NoVirtual(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale);

				public virtual void SetSkyPlane_NoVirtual(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_NoVirtual(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Function(bool enable, IntPtr plane, ref IntPtr materialName, double scale)
				{
					EarthView.World.Spatial.Math.Plane csobj_plane = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_plane.BindNativeObject(plane,"CPlane");
					csobj_plane.Delegate = true;
					IClassFactory csobj_planeClassFactory = GlobalClassFactoryMap.Get(csobj_plane.GetCppInstanceTypeName());
					if (csobj_planeClassFactory != null)
					{
						csobj_plane.Delegate = true;
						csobj_plane = csobj_planeClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_plane.BindNativeObject(plane, "CPlane");
						csobj_plane.Delegate = true;
					}
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					SetSkyPlane(enable, csobj_plane, strmaterialName,scale);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale);

				public virtual void SetSkyPlane(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyPlane_CallBack_void_ev_bool_CPlane_EVString(bool enable, IntPtr plane, ref IntPtr materialName);

				protected setSkyPlane_CallBack_void_ev_bool_CPlane_EVString m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_NoVirtual(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName);

				public virtual void SetSkyPlane_NoVirtual(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_NoVirtual(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Function(bool enable, IntPtr plane, ref IntPtr materialName)
				{
					EarthView.World.Spatial.Math.Plane csobj_plane = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_plane.BindNativeObject(plane,"CPlane");
					csobj_plane.Delegate = true;
					IClassFactory csobj_planeClassFactory = GlobalClassFactoryMap.Get(csobj_plane.GetCppInstanceTypeName());
					if (csobj_planeClassFactory != null)
					{
						csobj_plane.Delegate = true;
						csobj_plane = csobj_planeClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_plane.BindNativeObject(plane, "CPlane");
						csobj_plane.Delegate = true;
					}
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					SetSkyPlane(enable, csobj_plane, strmaterialName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName);

				public virtual void SetSkyPlane(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments, int ysegments, ref IntPtr groupName);

				protected _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_NoVirtual(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments, int ysegments, string groupName);

				public virtual void _setSkyPlane_NoVirtual(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments, int ysegments, string groupName)
				{
					EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_NoVirtual(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, renderQueue, bow, xsegments, ysegments, groupName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_Function(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments, int ysegments, ref IntPtr groupName)
				{
					EarthView.World.Spatial.Math.Plane csobj_plane = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_plane.BindNativeObject(plane,"CPlane");
					csobj_plane.Delegate = true;
					IClassFactory csobj_planeClassFactory = GlobalClassFactoryMap.Get(csobj_plane.GetCppInstanceTypeName());
					if (csobj_planeClassFactory != null)
					{
						csobj_plane.Delegate = true;
						csobj_plane = csobj_planeClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_plane.BindNativeObject(plane, "CPlane");
						csobj_plane.Delegate = true;
					}
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					string strgroupName= Marshal.PtrToStringAnsi(groupName);
					ClassFactory.FreeString(ref groupName);
					
					_setSkyPlane(enable, csobj_plane, strmaterialName,scale, tiling, renderQueue, bow, xsegments, ysegments, strgroupName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments, int ysegments, string groupName);

				public virtual void _setSkyPlane(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments, int ysegments, string groupName)
				{
					EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, renderQueue, bow, xsegments, ysegments, groupName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments, int ysegments);

				protected _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32 m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_NoVirtual(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments, int ysegments);

				public virtual void _setSkyPlane_NoVirtual(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments, int ysegments)
				{
					EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_NoVirtual(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, renderQueue, bow, xsegments, ysegments);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_Function(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments, int ysegments)
				{
					EarthView.World.Spatial.Math.Plane csobj_plane = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_plane.BindNativeObject(plane,"CPlane");
					csobj_plane.Delegate = true;
					IClassFactory csobj_planeClassFactory = GlobalClassFactoryMap.Get(csobj_plane.GetCppInstanceTypeName());
					if (csobj_planeClassFactory != null)
					{
						csobj_plane.Delegate = true;
						csobj_plane = csobj_planeClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_plane.BindNativeObject(plane, "CPlane");
						csobj_plane.Delegate = true;
					}
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					_setSkyPlane(enable, csobj_plane, strmaterialName,scale, tiling, renderQueue, bow, xsegments, ysegments);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments, int ysegments);

				public virtual void _setSkyPlane(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments, int ysegments)
				{
					EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, renderQueue, bow, xsegments, ysegments);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments);

				protected _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32 m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_NoVirtual(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments);

				public virtual void _setSkyPlane_NoVirtual(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments)
				{
					EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_NoVirtual(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, renderQueue, bow, xsegments);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_Function(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments)
				{
					EarthView.World.Spatial.Math.Plane csobj_plane = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_plane.BindNativeObject(plane,"CPlane");
					csobj_plane.Delegate = true;
					IClassFactory csobj_planeClassFactory = GlobalClassFactoryMap.Get(csobj_plane.GetCppInstanceTypeName());
					if (csobj_planeClassFactory != null)
					{
						csobj_plane.Delegate = true;
						csobj_plane = csobj_planeClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_plane.BindNativeObject(plane, "CPlane");
						csobj_plane.Delegate = true;
					}
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					_setSkyPlane(enable, csobj_plane, strmaterialName,scale, tiling, renderQueue, bow, xsegments);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments);

				public virtual void _setSkyPlane(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, byte renderQueue, double bow, int xsegments)
				{
					EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, renderQueue, bow, xsegments);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, byte renderQueue, double bow);

				protected _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_NoVirtual(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte renderQueue, double bow);

				public virtual void _setSkyPlane_NoVirtual(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, byte renderQueue, double bow)
				{
					EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_NoVirtual(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, renderQueue, bow);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_Function(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, byte renderQueue, double bow)
				{
					EarthView.World.Spatial.Math.Plane csobj_plane = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_plane.BindNativeObject(plane,"CPlane");
					csobj_plane.Delegate = true;
					IClassFactory csobj_planeClassFactory = GlobalClassFactoryMap.Get(csobj_plane.GetCppInstanceTypeName());
					if (csobj_planeClassFactory != null)
					{
						csobj_plane.Delegate = true;
						csobj_plane = csobj_planeClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_plane.BindNativeObject(plane, "CPlane");
						csobj_plane.Delegate = true;
					}
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					_setSkyPlane(enable, csobj_plane, strmaterialName,scale, tiling, renderQueue, bow);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte renderQueue, double bow);

				public virtual void _setSkyPlane(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, byte renderQueue, double bow)
				{
					EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, renderQueue, bow);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, byte renderQueue);

				protected _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8 m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_NoVirtual(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte renderQueue);

				public virtual void _setSkyPlane_NoVirtual(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, byte renderQueue)
				{
					EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_NoVirtual(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, renderQueue);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Function(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling, byte renderQueue)
				{
					EarthView.World.Spatial.Math.Plane csobj_plane = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_plane.BindNativeObject(plane,"CPlane");
					csobj_plane.Delegate = true;
					IClassFactory csobj_planeClassFactory = GlobalClassFactoryMap.Get(csobj_plane.GetCppInstanceTypeName());
					if (csobj_planeClassFactory != null)
					{
						csobj_plane.Delegate = true;
						csobj_plane = csobj_planeClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_plane.BindNativeObject(plane, "CPlane");
						csobj_plane.Delegate = true;
					}
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					_setSkyPlane(enable, csobj_plane, strmaterialName,scale, tiling, renderQueue);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling, byte renderQueue);

				public virtual void _setSkyPlane(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling, byte renderQueue)
				{
					EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling, renderQueue);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling);

				protected _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_NoVirtual(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling);

				public virtual void _setSkyPlane_NoVirtual(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling)
				{
					EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_NoVirtual(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_Function(bool enable, IntPtr plane, ref IntPtr materialName, double scale, double tiling)
				{
					EarthView.World.Spatial.Math.Plane csobj_plane = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_plane.BindNativeObject(plane,"CPlane");
					csobj_plane.Delegate = true;
					IClassFactory csobj_planeClassFactory = GlobalClassFactoryMap.Get(csobj_plane.GetCppInstanceTypeName());
					if (csobj_planeClassFactory != null)
					{
						csobj_plane.Delegate = true;
						csobj_plane = csobj_planeClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_plane.BindNativeObject(plane, "CPlane");
						csobj_plane.Delegate = true;
					}
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					_setSkyPlane(enable, csobj_plane, strmaterialName,scale, tiling);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale, double tiling);

				public virtual void _setSkyPlane(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale, double tiling)
				{
					EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale, tiling);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real(bool enable, IntPtr plane, ref IntPtr materialName, double scale);

				protected _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_NoVirtual(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale);

				public virtual void _setSkyPlane_NoVirtual(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale)
				{
					EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_NoVirtual(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Function(bool enable, IntPtr plane, ref IntPtr materialName, double scale)
				{
					EarthView.World.Spatial.Math.Plane csobj_plane = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_plane.BindNativeObject(plane,"CPlane");
					csobj_plane.Delegate = true;
					IClassFactory csobj_planeClassFactory = GlobalClassFactoryMap.Get(csobj_plane.GetCppInstanceTypeName());
					if (csobj_planeClassFactory != null)
					{
						csobj_plane.Delegate = true;
						csobj_plane = csobj_planeClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_plane.BindNativeObject(plane, "CPlane");
						csobj_plane.Delegate = true;
					}
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					_setSkyPlane(enable, csobj_plane, strmaterialName,scale);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName, double scale);

				public virtual void _setSkyPlane(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName, double scale)
				{
					EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName, scale);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString(bool enable, IntPtr plane, ref IntPtr materialName);

				protected _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_NoVirtual(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName);

				public virtual void _setSkyPlane_NoVirtual(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName)
				{
					EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_NoVirtual(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Function(bool enable, IntPtr plane, ref IntPtr materialName)
				{
					EarthView.World.Spatial.Math.Plane csobj_plane = new EarthView.World.Spatial.Math.Plane(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_plane.BindNativeObject(plane,"CPlane");
					csobj_plane.Delegate = true;
					IClassFactory csobj_planeClassFactory = GlobalClassFactoryMap.Get(csobj_plane.GetCppInstanceTypeName());
					if (csobj_planeClassFactory != null)
					{
						csobj_plane.Delegate = true;
						csobj_plane = csobj_planeClassFactory.Create() as EarthView.World.Spatial.Math.Plane;
						csobj_plane.BindNativeObject(plane, "CPlane");
						csobj_plane.Delegate = true;
					}
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					_setSkyPlane(enable, csobj_plane, strmaterialName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString(IntPtr pNativeObject, byte enable, IntPtr plane, string materialName);

				public virtual void _setSkyPlane(bool enable, EarthView.World.Spatial.Math.Plane plane, string materialName)
				{
					EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString(this.NativeObject, Convert.ToByte(enable), object.Equals(plane, null) ? IntPtr.Zero : plane.NativeObject, materialName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyPlaneEnabled_CallBack_void_ev_bool(bool enable);

				protected setSkyPlaneEnabled_CallBack_void_ev_bool m_setSkyPlaneEnabled_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlaneEnabled_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte enable);

				public virtual void SetSkyPlaneEnabled_NoVirtual(bool enable)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlaneEnabled_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(enable));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyPlaneEnabled_void_ev_bool_Function(bool enable)
				{
					SetSkyPlaneEnabled(enable);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyPlaneEnabled_void_ev_bool(IntPtr pNativeObject, byte enable);

				public virtual void SetSkyPlaneEnabled(bool enable)
				{
					EarthView_World_Graphic_CSceneManager_setSkyPlaneEnabled_void_ev_bool(this.NativeObject, Convert.ToByte(enable));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte isSkyPlaneEnabled_CallBack_ev_bool();

				protected isSkyPlaneEnabled_CallBack_ev_bool m_isSkyPlaneEnabled_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isSkyPlaneEnabled_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool IsSkyPlaneEnabled_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isSkyPlaneEnabled_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_isSkyPlaneEnabled_ev_bool_Function()
				{
					bool csret=IsSkyPlaneEnabled();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isSkyPlaneEnabled_ev_bool(IntPtr pNativeObject);

				public virtual bool IsSkyPlaneEnabled()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isSkyPlaneEnabled_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getSkyPlaneNode_CallBack_CSceneNode();

				protected getSkyPlaneNode_CallBack_CSceneNode m_getSkyPlaneNode_CallBack_CSceneNode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSkyPlaneNode_CSceneNode_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.SceneNode GetSkyPlaneNode_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSkyPlaneNode_CSceneNode_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getSkyPlaneNode_CSceneNode_Function()
				{
					EarthView.World.Graphic.SceneNode csret=GetSkyPlaneNode();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSkyPlaneNode_CSceneNode(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.SceneNode GetSkyPlaneNode()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSkyPlaneNode_CSceneNode(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate EarthView.World.Graphic.SceneManager.SKYPLANEGENPARAMETERS getSkyPlaneGenParameters_CallBack_SkyPlaneGenParameters();

				protected getSkyPlaneGenParameters_CallBack_SkyPlaneGenParameters m_getSkyPlaneGenParameters_CallBack_SkyPlaneGenParameters;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern EarthView.World.Graphic.SceneManager.SKYPLANEGENPARAMETERS EarthView_World_Graphic_CSceneManager_getSkyPlaneGenParameters_SkyPlaneGenParameters_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.SceneManager.SKYPLANEGENPARAMETERS GetSkyPlaneGenParameters_NoVirtual()
				{
					EarthView.World.Graphic.SceneManager.SKYPLANEGENPARAMETERS ret=EarthView_World_Graphic_CSceneManager_getSkyPlaneGenParameters_SkyPlaneGenParameters_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  EarthView.World.Graphic.SceneManager.SKYPLANEGENPARAMETERS EarthView_World_Graphic_CSceneManager_getSkyPlaneGenParameters_SkyPlaneGenParameters_Function()
				{
					EarthView.World.Graphic.SceneManager.SKYPLANEGENPARAMETERS csret=GetSkyPlaneGenParameters();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern EarthView.World.Graphic.SceneManager.SKYPLANEGENPARAMETERS EarthView_World_Graphic_CSceneManager_getSkyPlaneGenParameters_SkyPlaneGenParameters(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.SceneManager.SKYPLANEGENPARAMETERS GetSkyPlaneGenParameters()
				{
					EarthView.World.Graphic.SceneManager.SKYPLANEGENPARAMETERS ret=EarthView_World_Graphic_CSceneManager_getSkyPlaneGenParameters_SkyPlaneGenParameters(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString(bool enable, ref IntPtr materialName, double distance, bool drawFirst, IntPtr orientation, ref IntPtr groupName);

				protected setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString m_setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double distance, byte drawFirst, IntPtr orientation, string groupName);

				public virtual void SetSkyBox_NoVirtual(bool enable, string materialName, double distance, bool drawFirst, EarthView.World.Spatial.Math.Quaternion orientation, string groupName)
				{
					EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, distance, Convert.ToByte(drawFirst), object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, groupName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_Function(bool enable, ref IntPtr materialName, double distance, bool drawFirst, IntPtr orientation, ref IntPtr groupName)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					EarthView.World.Spatial.Math.Quaternion csobj_orientation = new EarthView.World.Spatial.Math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_orientation.BindNativeObject(orientation,"CQuaternion");
					csobj_orientation.Delegate = true;
					IClassFactory csobj_orientationClassFactory = GlobalClassFactoryMap.Get(csobj_orientation.GetCppInstanceTypeName());
					if (csobj_orientationClassFactory != null)
					{
						csobj_orientation.Delegate = true;
						csobj_orientation = csobj_orientationClassFactory.Create() as EarthView.World.Spatial.Math.Quaternion;
						csobj_orientation.BindNativeObject(orientation, "CQuaternion");
						csobj_orientation.Delegate = true;
					}
					string strgroupName= Marshal.PtrToStringAnsi(groupName);
					ClassFactory.FreeString(ref groupName);
					
					SetSkyBox(enable, strmaterialName,distance, drawFirst, csobj_orientation, strgroupName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString(IntPtr pNativeObject, byte enable, string materialName, double distance, byte drawFirst, IntPtr orientation, string groupName);

				public virtual void SetSkyBox(bool enable, string materialName, double distance, bool drawFirst, EarthView.World.Spatial.Math.Quaternion orientation, string groupName)
				{
					EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString(this.NativeObject, Convert.ToByte(enable), materialName, distance, Convert.ToByte(drawFirst), object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, groupName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool_CQuaternion(bool enable, ref IntPtr materialName, double distance, bool drawFirst, IntPtr orientation);

				protected setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool_CQuaternion m_setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool_CQuaternion;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_CQuaternion_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double distance, byte drawFirst, IntPtr orientation);

				public virtual void SetSkyBox_NoVirtual(bool enable, string materialName, double distance, bool drawFirst, EarthView.World.Spatial.Math.Quaternion orientation)
				{
					EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_CQuaternion_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, distance, Convert.ToByte(drawFirst), object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_CQuaternion_Function(bool enable, ref IntPtr materialName, double distance, bool drawFirst, IntPtr orientation)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					EarthView.World.Spatial.Math.Quaternion csobj_orientation = new EarthView.World.Spatial.Math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_orientation.BindNativeObject(orientation,"CQuaternion");
					csobj_orientation.Delegate = true;
					IClassFactory csobj_orientationClassFactory = GlobalClassFactoryMap.Get(csobj_orientation.GetCppInstanceTypeName());
					if (csobj_orientationClassFactory != null)
					{
						csobj_orientation.Delegate = true;
						csobj_orientation = csobj_orientationClassFactory.Create() as EarthView.World.Spatial.Math.Quaternion;
						csobj_orientation.BindNativeObject(orientation, "CQuaternion");
						csobj_orientation.Delegate = true;
					}
					
					SetSkyBox(enable, strmaterialName,distance, drawFirst, csobj_orientation);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_CQuaternion(IntPtr pNativeObject, byte enable, string materialName, double distance, byte drawFirst, IntPtr orientation);

				public virtual void SetSkyBox(bool enable, string materialName, double distance, bool drawFirst, EarthView.World.Spatial.Math.Quaternion orientation)
				{
					EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_CQuaternion(this.NativeObject, Convert.ToByte(enable), materialName, distance, Convert.ToByte(drawFirst), object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool(bool enable, ref IntPtr materialName, double distance, bool drawFirst);

				protected setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool m_setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double distance, byte drawFirst);

				public virtual void SetSkyBox_NoVirtual(bool enable, string materialName, double distance, bool drawFirst)
				{
					EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, distance, Convert.ToByte(drawFirst));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_Function(bool enable, ref IntPtr materialName, double distance, bool drawFirst)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					SetSkyBox(enable, strmaterialName,distance, drawFirst);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool(IntPtr pNativeObject, byte enable, string materialName, double distance, byte drawFirst);

				public virtual void SetSkyBox(bool enable, string materialName, double distance, bool drawFirst)
				{
					EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool(this.NativeObject, Convert.ToByte(enable), materialName, distance, Convert.ToByte(drawFirst));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyBox_CallBack_void_ev_bool_EVString_Real(bool enable, ref IntPtr materialName, double distance);

				protected setSkyBox_CallBack_void_ev_bool_EVString_Real m_setSkyBox_CallBack_void_ev_bool_EVString_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double distance);

				public virtual void SetSkyBox_NoVirtual(bool enable, string materialName, double distance)
				{
					EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, distance);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_Function(bool enable, ref IntPtr materialName, double distance)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					SetSkyBox(enable, strmaterialName,distance);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real(IntPtr pNativeObject, byte enable, string materialName, double distance);

				public virtual void SetSkyBox(bool enable, string materialName, double distance)
				{
					EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real(this.NativeObject, Convert.ToByte(enable), materialName, distance);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyBox_CallBack_void_ev_bool_EVString(bool enable, ref IntPtr materialName);

				protected setSkyBox_CallBack_void_ev_bool_EVString m_setSkyBox_CallBack_void_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, byte enable, string materialName);

				public virtual void SetSkyBox_NoVirtual(bool enable, string materialName)
				{
					EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Function(bool enable, ref IntPtr materialName)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					SetSkyBox(enable, strmaterialName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString(IntPtr pNativeObject, byte enable, string materialName);

				public virtual void SetSkyBox(bool enable, string materialName)
				{
					EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString(this.NativeObject, Convert.ToByte(enable), materialName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString(bool enable, ref IntPtr materialName, double distance, byte renderQueue, IntPtr orientation, ref IntPtr groupName);

				protected _setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString m__setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double distance, byte renderQueue, IntPtr orientation, string groupName);

				public virtual void _setSkyBox_NoVirtual(bool enable, string materialName, double distance, byte renderQueue, EarthView.World.Spatial.Math.Quaternion orientation, string groupName)
				{
					EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, distance, renderQueue, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, groupName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_Function(bool enable, ref IntPtr materialName, double distance, byte renderQueue, IntPtr orientation, ref IntPtr groupName)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					EarthView.World.Spatial.Math.Quaternion csobj_orientation = new EarthView.World.Spatial.Math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_orientation.BindNativeObject(orientation,"CQuaternion");
					csobj_orientation.Delegate = true;
					IClassFactory csobj_orientationClassFactory = GlobalClassFactoryMap.Get(csobj_orientation.GetCppInstanceTypeName());
					if (csobj_orientationClassFactory != null)
					{
						csobj_orientation.Delegate = true;
						csobj_orientation = csobj_orientationClassFactory.Create() as EarthView.World.Spatial.Math.Quaternion;
						csobj_orientation.BindNativeObject(orientation, "CQuaternion");
						csobj_orientation.Delegate = true;
					}
					string strgroupName= Marshal.PtrToStringAnsi(groupName);
					ClassFactory.FreeString(ref groupName);
					
					_setSkyBox(enable, strmaterialName,distance, renderQueue, csobj_orientation, strgroupName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString(IntPtr pNativeObject, byte enable, string materialName, double distance, byte renderQueue, IntPtr orientation, string groupName);

				public virtual void _setSkyBox(bool enable, string materialName, double distance, byte renderQueue, EarthView.World.Spatial.Math.Quaternion orientation, string groupName)
				{
					EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString(this.NativeObject, Convert.ToByte(enable), materialName, distance, renderQueue, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, groupName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8_CQuaternion(bool enable, ref IntPtr materialName, double distance, byte renderQueue, IntPtr orientation);

				protected _setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8_CQuaternion m__setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8_CQuaternion;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double distance, byte renderQueue, IntPtr orientation);

				public virtual void _setSkyBox_NoVirtual(bool enable, string materialName, double distance, byte renderQueue, EarthView.World.Spatial.Math.Quaternion orientation)
				{
					EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, distance, renderQueue, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_Function(bool enable, ref IntPtr materialName, double distance, byte renderQueue, IntPtr orientation)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					EarthView.World.Spatial.Math.Quaternion csobj_orientation = new EarthView.World.Spatial.Math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_orientation.BindNativeObject(orientation,"CQuaternion");
					csobj_orientation.Delegate = true;
					IClassFactory csobj_orientationClassFactory = GlobalClassFactoryMap.Get(csobj_orientation.GetCppInstanceTypeName());
					if (csobj_orientationClassFactory != null)
					{
						csobj_orientation.Delegate = true;
						csobj_orientation = csobj_orientationClassFactory.Create() as EarthView.World.Spatial.Math.Quaternion;
						csobj_orientation.BindNativeObject(orientation, "CQuaternion");
						csobj_orientation.Delegate = true;
					}
					
					_setSkyBox(enable, strmaterialName,distance, renderQueue, csobj_orientation);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_CQuaternion(IntPtr pNativeObject, byte enable, string materialName, double distance, byte renderQueue, IntPtr orientation);

				public virtual void _setSkyBox(bool enable, string materialName, double distance, byte renderQueue, EarthView.World.Spatial.Math.Quaternion orientation)
				{
					EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_CQuaternion(this.NativeObject, Convert.ToByte(enable), materialName, distance, renderQueue, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8(bool enable, ref IntPtr materialName, double distance, byte renderQueue);

				protected _setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8 m__setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double distance, byte renderQueue);

				public virtual void _setSkyBox_NoVirtual(bool enable, string materialName, double distance, byte renderQueue)
				{
					EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, distance, renderQueue);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_Function(bool enable, ref IntPtr materialName, double distance, byte renderQueue)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					_setSkyBox(enable, strmaterialName,distance, renderQueue);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8(IntPtr pNativeObject, byte enable, string materialName, double distance, byte renderQueue);

				public virtual void _setSkyBox(bool enable, string materialName, double distance, byte renderQueue)
				{
					EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8(this.NativeObject, Convert.ToByte(enable), materialName, distance, renderQueue);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyBox_CallBack_void_ev_bool_EVString_Real(bool enable, ref IntPtr materialName, double distance);

				protected _setSkyBox_CallBack_void_ev_bool_EVString_Real m__setSkyBox_CallBack_void_ev_bool_EVString_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double distance);

				public virtual void _setSkyBox_NoVirtual(bool enable, string materialName, double distance)
				{
					EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, distance);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_Function(bool enable, ref IntPtr materialName, double distance)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					_setSkyBox(enable, strmaterialName,distance);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real(IntPtr pNativeObject, byte enable, string materialName, double distance);

				public virtual void _setSkyBox(bool enable, string materialName, double distance)
				{
					EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real(this.NativeObject, Convert.ToByte(enable), materialName, distance);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyBox_CallBack_void_ev_bool_EVString(bool enable, ref IntPtr materialName);

				protected _setSkyBox_CallBack_void_ev_bool_EVString m__setSkyBox_CallBack_void_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, byte enable, string materialName);

				public virtual void _setSkyBox_NoVirtual(bool enable, string materialName)
				{
					EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Function(bool enable, ref IntPtr materialName)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					_setSkyBox(enable, strmaterialName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString(IntPtr pNativeObject, byte enable, string materialName);

				public virtual void _setSkyBox(bool enable, string materialName)
				{
					EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString(this.NativeObject, Convert.ToByte(enable), materialName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyBoxEnabled_CallBack_void_ev_bool(bool enable);

				protected setSkyBoxEnabled_CallBack_void_ev_bool m_setSkyBoxEnabled_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyBoxEnabled_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte enable);

				public virtual void SetSkyBoxEnabled_NoVirtual(bool enable)
				{
					EarthView_World_Graphic_CSceneManager_setSkyBoxEnabled_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(enable));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyBoxEnabled_void_ev_bool_Function(bool enable)
				{
					SetSkyBoxEnabled(enable);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyBoxEnabled_void_ev_bool(IntPtr pNativeObject, byte enable);

				public virtual void SetSkyBoxEnabled(bool enable)
				{
					EarthView_World_Graphic_CSceneManager_setSkyBoxEnabled_void_ev_bool(this.NativeObject, Convert.ToByte(enable));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte isSkyBoxEnabled_CallBack_ev_bool();

				protected isSkyBoxEnabled_CallBack_ev_bool m_isSkyBoxEnabled_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isSkyBoxEnabled_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool IsSkyBoxEnabled_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isSkyBoxEnabled_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_isSkyBoxEnabled_ev_bool_Function()
				{
					bool csret=IsSkyBoxEnabled();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isSkyBoxEnabled_ev_bool(IntPtr pNativeObject);

				public virtual bool IsSkyBoxEnabled()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isSkyBoxEnabled_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getSkyBoxNode_CallBack_CSceneNode();

				protected getSkyBoxNode_CallBack_CSceneNode m_getSkyBoxNode_CallBack_CSceneNode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSkyBoxNode_CSceneNode_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.SceneNode GetSkyBoxNode_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSkyBoxNode_CSceneNode_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getSkyBoxNode_CSceneNode_Function()
				{
					EarthView.World.Graphic.SceneNode csret=GetSkyBoxNode();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSkyBoxNode_CSceneNode(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.SceneNode GetSkyBoxNode()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSkyBoxNode_CSceneNode(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate EarthView.World.Graphic.SceneManager.SKYBOXGENPARAMETERS getSkyBoxGenParameters_CallBack_SkyBoxGenParameters();

				protected getSkyBoxGenParameters_CallBack_SkyBoxGenParameters m_getSkyBoxGenParameters_CallBack_SkyBoxGenParameters;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern EarthView.World.Graphic.SceneManager.SKYBOXGENPARAMETERS EarthView_World_Graphic_CSceneManager_getSkyBoxGenParameters_SkyBoxGenParameters_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.SceneManager.SKYBOXGENPARAMETERS GetSkyBoxGenParameters_NoVirtual()
				{
					EarthView.World.Graphic.SceneManager.SKYBOXGENPARAMETERS ret=EarthView_World_Graphic_CSceneManager_getSkyBoxGenParameters_SkyBoxGenParameters_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  EarthView.World.Graphic.SceneManager.SKYBOXGENPARAMETERS EarthView_World_Graphic_CSceneManager_getSkyBoxGenParameters_SkyBoxGenParameters_Function()
				{
					EarthView.World.Graphic.SceneManager.SKYBOXGENPARAMETERS csret=GetSkyBoxGenParameters();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern EarthView.World.Graphic.SceneManager.SKYBOXGENPARAMETERS EarthView_World_Graphic_CSceneManager_getSkyBoxGenParameters_SkyBoxGenParameters(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.SceneManager.SKYBOXGENPARAMETERS GetSkyBoxGenParameters()
				{
					EarthView.World.Graphic.SceneManager.SKYBOXGENPARAMETERS ret=EarthView_World_Graphic_CSceneManager_getSkyBoxGenParameters_SkyBoxGenParameters(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, bool drawFirst, IntPtr orientation, int xsegments, int ysegments, int ysegments_keep, ref IntPtr groupName);

				protected setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte drawFirst, IntPtr orientation, int xsegments, int ysegments, int ysegments_keep, string groupName);

				///     virtual void setSkyDome(ev_bool enable, const EVString& materialName,
				///Real curvature = 10,
				///         Real tiling = 8, Real distance = 4000, ev_bool drawFirst = true,
				///         const EarthView::World::Spatial::Math::CQuaternion& orientation = EarthView::World::Spatial::Math::CQuaternion::IDENTITY,
				///         ev_int32 xsegments = 16, ev_int32 ysegments = 16, ev_int32 ysegments_keep = -1,
				///         const EVString& groupName = CResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME);
				/// <summary>
				/// 确认是否启用一个天空穹
				/// </summary>
				/// <param name="enable">ture为启用，false为不启用</param>
				/// <param name="plane">平面的细节描述，它到摄像机的距离</param>
				/// <param name="materialName">天空使用材质的名称</param>
				/// <param name="scale">比例变换以适应天空平面</param>
				/// <param name="tiling">指针</param>
				/// <param name="drawFirst">指针</param>
				/// <param name="bow">指针</param>
				/// <param name="xsegments">指针</param>
				/// <param name="ysegments">指针</param>
				/// <param name="groupName">指针</param>
				/// <returns></returns>
				public virtual void SetSkyDome_NoVirtual(bool enable, string materialName, double curvature, double tiling, double distance, bool drawFirst, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments, int ysegments, int ysegments_keep, string groupName)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, Convert.ToByte(drawFirst), object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments, ysegments, ysegments_keep, groupName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_Function(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, bool drawFirst, IntPtr orientation, int xsegments, int ysegments, int ysegments_keep, ref IntPtr groupName)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					EarthView.World.Spatial.Math.Quaternion csobj_orientation = new EarthView.World.Spatial.Math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_orientation.BindNativeObject(orientation,"CQuaternion");
					csobj_orientation.Delegate = true;
					IClassFactory csobj_orientationClassFactory = GlobalClassFactoryMap.Get(csobj_orientation.GetCppInstanceTypeName());
					if (csobj_orientationClassFactory != null)
					{
						csobj_orientation.Delegate = true;
						csobj_orientation = csobj_orientationClassFactory.Create() as EarthView.World.Spatial.Math.Quaternion;
						csobj_orientation.BindNativeObject(orientation, "CQuaternion");
						csobj_orientation.Delegate = true;
					}
					string strgroupName= Marshal.PtrToStringAnsi(groupName);
					ClassFactory.FreeString(ref groupName);
					
					SetSkyDome(enable, strmaterialName,curvature, tiling, distance, drawFirst, csobj_orientation, xsegments, ysegments, ysegments_keep, strgroupName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte drawFirst, IntPtr orientation, int xsegments, int ysegments, int ysegments_keep, string groupName);

				///     virtual void setSkyDome(ev_bool enable, const EVString& materialName,
				///Real curvature = 10,
				///         Real tiling = 8, Real distance = 4000, ev_bool drawFirst = true,
				///         const EarthView::World::Spatial::Math::CQuaternion& orientation = EarthView::World::Spatial::Math::CQuaternion::IDENTITY,
				///         ev_int32 xsegments = 16, ev_int32 ysegments = 16, ev_int32 ysegments_keep = -1,
				///         const EVString& groupName = CResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME);
				/// <summary>
				/// 确认是否启用一个天空穹
				/// </summary>
				/// <param name="enable">ture为启用，false为不启用</param>
				/// <param name="plane">平面的细节描述，它到摄像机的距离</param>
				/// <param name="materialName">天空使用材质的名称</param>
				/// <param name="scale">比例变换以适应天空平面</param>
				/// <param name="tiling">指针</param>
				/// <param name="drawFirst">指针</param>
				/// <param name="bow">指针</param>
				/// <param name="xsegments">指针</param>
				/// <param name="ysegments">指针</param>
				/// <param name="groupName">指针</param>
				/// <returns></returns>
				public virtual void SetSkyDome(bool enable, string materialName, double curvature, double tiling, double distance, bool drawFirst, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments, int ysegments, int ysegments_keep, string groupName)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, Convert.ToByte(drawFirst), object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments, ysegments, ysegments_keep, groupName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, bool drawFirst, IntPtr orientation, int xsegments, int ysegments, int ysegments_keep);

				protected setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32 m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte drawFirst, IntPtr orientation, int xsegments, int ysegments, int ysegments_keep);

				public virtual void SetSkyDome_NoVirtual(bool enable, string materialName, double curvature, double tiling, double distance, bool drawFirst, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments, int ysegments, int ysegments_keep)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, Convert.ToByte(drawFirst), object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments, ysegments, ysegments_keep);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_Function(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, bool drawFirst, IntPtr orientation, int xsegments, int ysegments, int ysegments_keep)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					EarthView.World.Spatial.Math.Quaternion csobj_orientation = new EarthView.World.Spatial.Math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_orientation.BindNativeObject(orientation,"CQuaternion");
					csobj_orientation.Delegate = true;
					IClassFactory csobj_orientationClassFactory = GlobalClassFactoryMap.Get(csobj_orientation.GetCppInstanceTypeName());
					if (csobj_orientationClassFactory != null)
					{
						csobj_orientation.Delegate = true;
						csobj_orientation = csobj_orientationClassFactory.Create() as EarthView.World.Spatial.Math.Quaternion;
						csobj_orientation.BindNativeObject(orientation, "CQuaternion");
						csobj_orientation.Delegate = true;
					}
					
					SetSkyDome(enable, strmaterialName,curvature, tiling, distance, drawFirst, csobj_orientation, xsegments, ysegments, ysegments_keep);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte drawFirst, IntPtr orientation, int xsegments, int ysegments, int ysegments_keep);

				public virtual void SetSkyDome(bool enable, string materialName, double curvature, double tiling, double distance, bool drawFirst, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments, int ysegments, int ysegments_keep)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, Convert.ToByte(drawFirst), object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments, ysegments, ysegments_keep);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, bool drawFirst, IntPtr orientation, int xsegments, int ysegments);

				protected setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32 m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte drawFirst, IntPtr orientation, int xsegments, int ysegments);

				public virtual void SetSkyDome_NoVirtual(bool enable, string materialName, double curvature, double tiling, double distance, bool drawFirst, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments, int ysegments)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, Convert.ToByte(drawFirst), object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments, ysegments);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_Function(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, bool drawFirst, IntPtr orientation, int xsegments, int ysegments)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					EarthView.World.Spatial.Math.Quaternion csobj_orientation = new EarthView.World.Spatial.Math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_orientation.BindNativeObject(orientation,"CQuaternion");
					csobj_orientation.Delegate = true;
					IClassFactory csobj_orientationClassFactory = GlobalClassFactoryMap.Get(csobj_orientation.GetCppInstanceTypeName());
					if (csobj_orientationClassFactory != null)
					{
						csobj_orientation.Delegate = true;
						csobj_orientation = csobj_orientationClassFactory.Create() as EarthView.World.Spatial.Math.Quaternion;
						csobj_orientation.BindNativeObject(orientation, "CQuaternion");
						csobj_orientation.Delegate = true;
					}
					
					SetSkyDome(enable, strmaterialName,curvature, tiling, distance, drawFirst, csobj_orientation, xsegments, ysegments);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte drawFirst, IntPtr orientation, int xsegments, int ysegments);

				public virtual void SetSkyDome(bool enable, string materialName, double curvature, double tiling, double distance, bool drawFirst, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments, int ysegments)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, Convert.ToByte(drawFirst), object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments, ysegments);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, bool drawFirst, IntPtr orientation, int xsegments);

				protected setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32 m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte drawFirst, IntPtr orientation, int xsegments);

				public virtual void SetSkyDome_NoVirtual(bool enable, string materialName, double curvature, double tiling, double distance, bool drawFirst, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, Convert.ToByte(drawFirst), object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_Function(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, bool drawFirst, IntPtr orientation, int xsegments)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					EarthView.World.Spatial.Math.Quaternion csobj_orientation = new EarthView.World.Spatial.Math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_orientation.BindNativeObject(orientation,"CQuaternion");
					csobj_orientation.Delegate = true;
					IClassFactory csobj_orientationClassFactory = GlobalClassFactoryMap.Get(csobj_orientation.GetCppInstanceTypeName());
					if (csobj_orientationClassFactory != null)
					{
						csobj_orientation.Delegate = true;
						csobj_orientation = csobj_orientationClassFactory.Create() as EarthView.World.Spatial.Math.Quaternion;
						csobj_orientation.BindNativeObject(orientation, "CQuaternion");
						csobj_orientation.Delegate = true;
					}
					
					SetSkyDome(enable, strmaterialName,curvature, tiling, distance, drawFirst, csobj_orientation, xsegments);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte drawFirst, IntPtr orientation, int xsegments);

				public virtual void SetSkyDome(bool enable, string materialName, double curvature, double tiling, double distance, bool drawFirst, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, Convert.ToByte(drawFirst), object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, bool drawFirst, IntPtr orientation);

				protected setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte drawFirst, IntPtr orientation);

				public virtual void SetSkyDome_NoVirtual(bool enable, string materialName, double curvature, double tiling, double distance, bool drawFirst, EarthView.World.Spatial.Math.Quaternion orientation)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, Convert.ToByte(drawFirst), object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_Function(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, bool drawFirst, IntPtr orientation)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					EarthView.World.Spatial.Math.Quaternion csobj_orientation = new EarthView.World.Spatial.Math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_orientation.BindNativeObject(orientation,"CQuaternion");
					csobj_orientation.Delegate = true;
					IClassFactory csobj_orientationClassFactory = GlobalClassFactoryMap.Get(csobj_orientation.GetCppInstanceTypeName());
					if (csobj_orientationClassFactory != null)
					{
						csobj_orientation.Delegate = true;
						csobj_orientation = csobj_orientationClassFactory.Create() as EarthView.World.Spatial.Math.Quaternion;
						csobj_orientation.BindNativeObject(orientation, "CQuaternion");
						csobj_orientation.Delegate = true;
					}
					
					SetSkyDome(enable, strmaterialName,curvature, tiling, distance, drawFirst, csobj_orientation);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte drawFirst, IntPtr orientation);

				public virtual void SetSkyDome(bool enable, string materialName, double curvature, double tiling, double distance, bool drawFirst, EarthView.World.Spatial.Math.Quaternion orientation)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, Convert.ToByte(drawFirst), object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, bool drawFirst);

				protected setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte drawFirst);

				public virtual void SetSkyDome_NoVirtual(bool enable, string materialName, double curvature, double tiling, double distance, bool drawFirst)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, Convert.ToByte(drawFirst));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_Function(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, bool drawFirst)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					SetSkyDome(enable, strmaterialName,curvature, tiling, distance, drawFirst);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte drawFirst);

				public virtual void SetSkyDome(bool enable, string materialName, double curvature, double tiling, double distance, bool drawFirst)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, Convert.ToByte(drawFirst));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance);

				protected setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance);

				public virtual void SetSkyDome_NoVirtual(bool enable, string materialName, double curvature, double tiling, double distance)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_Function(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					SetSkyDome(enable, strmaterialName,curvature, tiling, distance);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance);

				public virtual void SetSkyDome(bool enable, string materialName, double curvature, double tiling, double distance)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyDome_CallBack_void_ev_bool_EVString_Real_Real(bool enable, ref IntPtr materialName, double curvature, double tiling);

				protected setSkyDome_CallBack_void_ev_bool_EVString_Real_Real m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling);

				public virtual void SetSkyDome_NoVirtual(bool enable, string materialName, double curvature, double tiling)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Function(bool enable, ref IntPtr materialName, double curvature, double tiling)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					SetSkyDome(enable, strmaterialName,curvature, tiling);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling);

				public virtual void SetSkyDome(bool enable, string materialName, double curvature, double tiling)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyDome_CallBack_void_ev_bool_EVString_Real(bool enable, ref IntPtr materialName, double curvature);

				protected setSkyDome_CallBack_void_ev_bool_EVString_Real m_setSkyDome_CallBack_void_ev_bool_EVString_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature);

				public virtual void SetSkyDome_NoVirtual(bool enable, string materialName, double curvature)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Function(bool enable, ref IntPtr materialName, double curvature)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					SetSkyDome(enable, strmaterialName,curvature);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real(IntPtr pNativeObject, byte enable, string materialName, double curvature);

				public virtual void SetSkyDome(bool enable, string materialName, double curvature)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real(this.NativeObject, Convert.ToByte(enable), materialName, curvature);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyDome_CallBack_void_ev_bool_EVString(bool enable, ref IntPtr materialName);

				protected setSkyDome_CallBack_void_ev_bool_EVString m_setSkyDome_CallBack_void_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, byte enable, string materialName);

				public virtual void SetSkyDome_NoVirtual(bool enable, string materialName)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Function(bool enable, ref IntPtr materialName)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					SetSkyDome(enable, strmaterialName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString(IntPtr pNativeObject, byte enable, string materialName);

				public virtual void SetSkyDome(bool enable, string materialName)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString(this.NativeObject, Convert.ToByte(enable), materialName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation, int xsegments, int ysegments, int ysegments_keep, ref IntPtr groupName);

				protected _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation, int xsegments, int ysegments, int ysegments_keep, string groupName);

				public virtual void _setSkyDome_NoVirtual(bool enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments, int ysegments, int ysegments_keep, string groupName)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, renderQueue, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments, ysegments, ysegments_keep, groupName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_Function(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation, int xsegments, int ysegments, int ysegments_keep, ref IntPtr groupName)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					EarthView.World.Spatial.Math.Quaternion csobj_orientation = new EarthView.World.Spatial.Math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_orientation.BindNativeObject(orientation,"CQuaternion");
					csobj_orientation.Delegate = true;
					IClassFactory csobj_orientationClassFactory = GlobalClassFactoryMap.Get(csobj_orientation.GetCppInstanceTypeName());
					if (csobj_orientationClassFactory != null)
					{
						csobj_orientation.Delegate = true;
						csobj_orientation = csobj_orientationClassFactory.Create() as EarthView.World.Spatial.Math.Quaternion;
						csobj_orientation.BindNativeObject(orientation, "CQuaternion");
						csobj_orientation.Delegate = true;
					}
					string strgroupName= Marshal.PtrToStringAnsi(groupName);
					ClassFactory.FreeString(ref groupName);
					
					_setSkyDome(enable, strmaterialName,curvature, tiling, distance, renderQueue, csobj_orientation, xsegments, ysegments, ysegments_keep, strgroupName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation, int xsegments, int ysegments, int ysegments_keep, string groupName);

				public virtual void _setSkyDome(bool enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments, int ysegments, int ysegments_keep, string groupName)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, renderQueue, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments, ysegments, ysegments_keep, groupName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation, int xsegments, int ysegments, int ysegments_keep);

				protected _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32 m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation, int xsegments, int ysegments, int ysegments_keep);

				public virtual void _setSkyDome_NoVirtual(bool enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments, int ysegments, int ysegments_keep)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, renderQueue, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments, ysegments, ysegments_keep);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_Function(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation, int xsegments, int ysegments, int ysegments_keep)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					EarthView.World.Spatial.Math.Quaternion csobj_orientation = new EarthView.World.Spatial.Math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_orientation.BindNativeObject(orientation,"CQuaternion");
					csobj_orientation.Delegate = true;
					IClassFactory csobj_orientationClassFactory = GlobalClassFactoryMap.Get(csobj_orientation.GetCppInstanceTypeName());
					if (csobj_orientationClassFactory != null)
					{
						csobj_orientation.Delegate = true;
						csobj_orientation = csobj_orientationClassFactory.Create() as EarthView.World.Spatial.Math.Quaternion;
						csobj_orientation.BindNativeObject(orientation, "CQuaternion");
						csobj_orientation.Delegate = true;
					}
					
					_setSkyDome(enable, strmaterialName,curvature, tiling, distance, renderQueue, csobj_orientation, xsegments, ysegments, ysegments_keep);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation, int xsegments, int ysegments, int ysegments_keep);

				public virtual void _setSkyDome(bool enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments, int ysegments, int ysegments_keep)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, renderQueue, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments, ysegments, ysegments_keep);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation, int xsegments, int ysegments);

				protected _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32 m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation, int xsegments, int ysegments);

				public virtual void _setSkyDome_NoVirtual(bool enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments, int ysegments)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, renderQueue, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments, ysegments);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_Function(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation, int xsegments, int ysegments)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					EarthView.World.Spatial.Math.Quaternion csobj_orientation = new EarthView.World.Spatial.Math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_orientation.BindNativeObject(orientation,"CQuaternion");
					csobj_orientation.Delegate = true;
					IClassFactory csobj_orientationClassFactory = GlobalClassFactoryMap.Get(csobj_orientation.GetCppInstanceTypeName());
					if (csobj_orientationClassFactory != null)
					{
						csobj_orientation.Delegate = true;
						csobj_orientation = csobj_orientationClassFactory.Create() as EarthView.World.Spatial.Math.Quaternion;
						csobj_orientation.BindNativeObject(orientation, "CQuaternion");
						csobj_orientation.Delegate = true;
					}
					
					_setSkyDome(enable, strmaterialName,curvature, tiling, distance, renderQueue, csobj_orientation, xsegments, ysegments);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation, int xsegments, int ysegments);

				public virtual void _setSkyDome(bool enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments, int ysegments)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, renderQueue, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments, ysegments);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation, int xsegments);

				protected _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32 m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation, int xsegments);

				public virtual void _setSkyDome_NoVirtual(bool enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, renderQueue, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_Function(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation, int xsegments)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					EarthView.World.Spatial.Math.Quaternion csobj_orientation = new EarthView.World.Spatial.Math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_orientation.BindNativeObject(orientation,"CQuaternion");
					csobj_orientation.Delegate = true;
					IClassFactory csobj_orientationClassFactory = GlobalClassFactoryMap.Get(csobj_orientation.GetCppInstanceTypeName());
					if (csobj_orientationClassFactory != null)
					{
						csobj_orientation.Delegate = true;
						csobj_orientation = csobj_orientationClassFactory.Create() as EarthView.World.Spatial.Math.Quaternion;
						csobj_orientation.BindNativeObject(orientation, "CQuaternion");
						csobj_orientation.Delegate = true;
					}
					
					_setSkyDome(enable, strmaterialName,curvature, tiling, distance, renderQueue, csobj_orientation, xsegments);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation, int xsegments);

				public virtual void _setSkyDome(bool enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, EarthView.World.Spatial.Math.Quaternion orientation, int xsegments)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, renderQueue, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject, xsegments);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation);

				protected _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation);

				public virtual void _setSkyDome_NoVirtual(bool enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, EarthView.World.Spatial.Math.Quaternion orientation)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, renderQueue, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_Function(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					EarthView.World.Spatial.Math.Quaternion csobj_orientation = new EarthView.World.Spatial.Math.Quaternion(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_orientation.BindNativeObject(orientation,"CQuaternion");
					csobj_orientation.Delegate = true;
					IClassFactory csobj_orientationClassFactory = GlobalClassFactoryMap.Get(csobj_orientation.GetCppInstanceTypeName());
					if (csobj_orientationClassFactory != null)
					{
						csobj_orientation.Delegate = true;
						csobj_orientation = csobj_orientationClassFactory.Create() as EarthView.World.Spatial.Math.Quaternion;
						csobj_orientation.BindNativeObject(orientation, "CQuaternion");
						csobj_orientation.Delegate = true;
					}
					
					_setSkyDome(enable, strmaterialName,curvature, tiling, distance, renderQueue, csobj_orientation);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, IntPtr orientation);

				public virtual void _setSkyDome(bool enable, string materialName, double curvature, double tiling, double distance, byte renderQueue, EarthView.World.Spatial.Math.Quaternion orientation)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, renderQueue, object.Equals(orientation, null) ? IntPtr.Zero : orientation.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, byte renderQueue);

				protected _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8 m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte renderQueue);

				public virtual void _setSkyDome_NoVirtual(bool enable, string materialName, double curvature, double tiling, double distance, byte renderQueue)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, renderQueue);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_Function(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance, byte renderQueue)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					_setSkyDome(enable, strmaterialName,curvature, tiling, distance, renderQueue);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance, byte renderQueue);

				public virtual void _setSkyDome(bool enable, string materialName, double curvature, double tiling, double distance, byte renderQueue)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance, renderQueue);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance);

				protected _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance);

				public virtual void _setSkyDome_NoVirtual(bool enable, string materialName, double curvature, double tiling, double distance)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_Function(bool enable, ref IntPtr materialName, double curvature, double tiling, double distance)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					_setSkyDome(enable, strmaterialName,curvature, tiling, distance);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling, double distance);

				public virtual void _setSkyDome(bool enable, string materialName, double curvature, double tiling, double distance)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling, distance);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real(bool enable, ref IntPtr materialName, double curvature, double tiling);

				protected _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling);

				public virtual void _setSkyDome_NoVirtual(bool enable, string materialName, double curvature, double tiling)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Function(bool enable, ref IntPtr materialName, double curvature, double tiling)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					_setSkyDome(enable, strmaterialName,curvature, tiling);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real(IntPtr pNativeObject, byte enable, string materialName, double curvature, double tiling);

				public virtual void _setSkyDome(bool enable, string materialName, double curvature, double tiling)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real(this.NativeObject, Convert.ToByte(enable), materialName, curvature, tiling);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyDome_CallBack_void_ev_bool_EVString_Real(bool enable, ref IntPtr materialName, double curvature);

				protected _setSkyDome_CallBack_void_ev_bool_EVString_Real m__setSkyDome_CallBack_void_ev_bool_EVString_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_NoVirtual(IntPtr pNativeObject, byte enable, string materialName, double curvature);

				public virtual void _setSkyDome_NoVirtual(bool enable, string materialName, double curvature)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName, curvature);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Function(bool enable, ref IntPtr materialName, double curvature)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					_setSkyDome(enable, strmaterialName,curvature);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real(IntPtr pNativeObject, byte enable, string materialName, double curvature);

				public virtual void _setSkyDome(bool enable, string materialName, double curvature)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real(this.NativeObject, Convert.ToByte(enable), materialName, curvature);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setSkyDome_CallBack_void_ev_bool_EVString(bool enable, ref IntPtr materialName);

				protected _setSkyDome_CallBack_void_ev_bool_EVString m__setSkyDome_CallBack_void_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, byte enable, string materialName);

				public virtual void _setSkyDome_NoVirtual(bool enable, string materialName)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_NoVirtual(this.NativeObject, Convert.ToByte(enable), materialName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Function(bool enable, ref IntPtr materialName)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					_setSkyDome(enable, strmaterialName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString(IntPtr pNativeObject, byte enable, string materialName);

				public virtual void _setSkyDome(bool enable, string materialName)
				{
					EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString(this.NativeObject, Convert.ToByte(enable), materialName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSkyDomeEnabled_CallBack_void_ev_bool(bool enable);

				protected setSkyDomeEnabled_CallBack_void_ev_bool m_setSkyDomeEnabled_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDomeEnabled_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte enable);

				public virtual void SetSkyDomeEnabled_NoVirtual(bool enable)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDomeEnabled_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(enable));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSkyDomeEnabled_void_ev_bool_Function(bool enable)
				{
					SetSkyDomeEnabled(enable);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSkyDomeEnabled_void_ev_bool(IntPtr pNativeObject, byte enable);

				public virtual void SetSkyDomeEnabled(bool enable)
				{
					EarthView_World_Graphic_CSceneManager_setSkyDomeEnabled_void_ev_bool(this.NativeObject, Convert.ToByte(enable));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte isSkyDomeEnabled_CallBack_ev_bool();

				protected isSkyDomeEnabled_CallBack_ev_bool m_isSkyDomeEnabled_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isSkyDomeEnabled_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool IsSkyDomeEnabled_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isSkyDomeEnabled_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_isSkyDomeEnabled_ev_bool_Function()
				{
					bool csret=IsSkyDomeEnabled();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isSkyDomeEnabled_ev_bool(IntPtr pNativeObject);

				public virtual bool IsSkyDomeEnabled()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isSkyDomeEnabled_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getSkyDomeNode_CallBack_CSceneNode();

				protected getSkyDomeNode_CallBack_CSceneNode m_getSkyDomeNode_CallBack_CSceneNode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSkyDomeNode_CSceneNode_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.SceneNode GetSkyDomeNode_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSkyDomeNode_CSceneNode_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getSkyDomeNode_CSceneNode_Function()
				{
					EarthView.World.Graphic.SceneNode csret=GetSkyDomeNode();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getSkyDomeNode_CSceneNode(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.SceneNode GetSkyDomeNode()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getSkyDomeNode_CSceneNode(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneNode csObj = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneNode");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csObj.BindNativeObject(__ptr, "CSceneNode");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate EarthView.World.Graphic.SceneManager.SKYDOMEGENPARAMETERS getSkyDomeGenParameters_CallBack_SkyDomeGenParameters();

				protected getSkyDomeGenParameters_CallBack_SkyDomeGenParameters m_getSkyDomeGenParameters_CallBack_SkyDomeGenParameters;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern EarthView.World.Graphic.SceneManager.SKYDOMEGENPARAMETERS EarthView_World_Graphic_CSceneManager_getSkyDomeGenParameters_SkyDomeGenParameters_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.SceneManager.SKYDOMEGENPARAMETERS GetSkyDomeGenParameters_NoVirtual()
				{
					EarthView.World.Graphic.SceneManager.SKYDOMEGENPARAMETERS ret=EarthView_World_Graphic_CSceneManager_getSkyDomeGenParameters_SkyDomeGenParameters_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  EarthView.World.Graphic.SceneManager.SKYDOMEGENPARAMETERS EarthView_World_Graphic_CSceneManager_getSkyDomeGenParameters_SkyDomeGenParameters_Function()
				{
					EarthView.World.Graphic.SceneManager.SKYDOMEGENPARAMETERS csret=GetSkyDomeGenParameters();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern EarthView.World.Graphic.SceneManager.SKYDOMEGENPARAMETERS EarthView_World_Graphic_CSceneManager_getSkyDomeGenParameters_SkyDomeGenParameters(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.SceneManager.SKYDOMEGENPARAMETERS GetSkyDomeGenParameters()
				{
					EarthView.World.Graphic.SceneManager.SKYDOMEGENPARAMETERS ret=EarthView_World_Graphic_CSceneManager_getSkyDomeGenParameters_SkyDomeGenParameters(this.NativeObject);
					
					return ret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setFog_void_FogMode_CColourValue_Real_Real_Real(IntPtr pNativeObject, EarthView.World.Graphic.FOGMODE mode, IntPtr colour, double expDensity, double linearStart, double linearEnd);

				public void SetFog(EarthView.World.Graphic.FOGMODE mode, EarthView.World.Graphic.ColourValue colour, double expDensity, double linearStart, double linearEnd)
				{
					EarthView_World_Graphic_CSceneManager_setFog_void_FogMode_CColourValue_Real_Real_Real(this.NativeObject, mode, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject, expDensity, linearStart, linearEnd);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setFog_void_FogMode_CColourValue_Real_Real(IntPtr pNativeObject, EarthView.World.Graphic.FOGMODE mode, IntPtr colour, double expDensity, double linearStart);

				public void SetFog(EarthView.World.Graphic.FOGMODE mode, EarthView.World.Graphic.ColourValue colour, double expDensity, double linearStart)
				{
					EarthView_World_Graphic_CSceneManager_setFog_void_FogMode_CColourValue_Real_Real(this.NativeObject, mode, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject, expDensity, linearStart);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setFog_void_FogMode_CColourValue_Real(IntPtr pNativeObject, EarthView.World.Graphic.FOGMODE mode, IntPtr colour, double expDensity);

				public void SetFog(EarthView.World.Graphic.FOGMODE mode, EarthView.World.Graphic.ColourValue colour, double expDensity)
				{
					EarthView_World_Graphic_CSceneManager_setFog_void_FogMode_CColourValue_Real(this.NativeObject, mode, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject, expDensity);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setFog_void_FogMode_CColourValue(IntPtr pNativeObject, EarthView.World.Graphic.FOGMODE mode, IntPtr colour);

				public void SetFog(EarthView.World.Graphic.FOGMODE mode, EarthView.World.Graphic.ColourValue colour)
				{
					EarthView_World_Graphic_CSceneManager_setFog_void_FogMode_CColourValue(this.NativeObject, mode, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setFog_void_FogMode(IntPtr pNativeObject, EarthView.World.Graphic.FOGMODE mode);

				public void SetFog(EarthView.World.Graphic.FOGMODE mode)
				{
					EarthView_World_Graphic_CSceneManager_setFog_void_FogMode(this.NativeObject, mode);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setFog_void(IntPtr pNativeObject);

				public void SetFog()
				{
					EarthView_World_Graphic_CSceneManager_setFog_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate int getFogMode_CallBack_FogMode();

				protected getFogMode_CallBack_FogMode m_getFogMode_CallBack_FogMode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CSceneManager_getFogMode_FogMode_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.FOGMODE GetFogMode_NoVirtual()
				{
					int ret=EarthView_World_Graphic_CSceneManager_getFogMode_FogMode_NoVirtual(this.NativeObject);
					
					return (EarthView.World.Graphic.FOGMODE)ret;
					
				}

				protected  int EarthView_World_Graphic_CSceneManager_getFogMode_FogMode_Function()
				{
					EarthView.World.Graphic.FOGMODE csret=GetFogMode();
					
					return (int)csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CSceneManager_getFogMode_FogMode(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.FOGMODE GetFogMode()
				{
					int ret=EarthView_World_Graphic_CSceneManager_getFogMode_FogMode(this.NativeObject);
					
					return (EarthView.World.Graphic.FOGMODE)ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getFogColour_CallBack_CColourValue();

				protected getFogColour_CallBack_CColourValue m_getFogColour_CallBack_CColourValue;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getFogColour_CColourValue_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.ColourValue GetFogColour_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getFogColour_CColourValue_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ColourValue csObj = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CColourValue");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csObj.BindNativeObject(__ptr, "CColourValue");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getFogColour_CColourValue_Function()
				{
					EarthView.World.Graphic.ColourValue csret=GetFogColour();
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getFogColour_CColourValue(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.ColourValue GetFogColour()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getFogColour_CColourValue(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ColourValue csObj = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CColourValue");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csObj.BindNativeObject(__ptr, "CColourValue");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getFogStart_CallBack_Real();

				protected getFogStart_CallBack_Real m_getFogStart_CallBack_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getFogStart_Real_NoVirtual(IntPtr pNativeObject);

				public virtual double GetFogStart_NoVirtual()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getFogStart_Real_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CSceneManager_getFogStart_Real_Function()
				{
					double csret=GetFogStart();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getFogStart_Real(IntPtr pNativeObject);

				public virtual double GetFogStart()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getFogStart_Real(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getFogEnd_CallBack_Real();

				protected getFogEnd_CallBack_Real m_getFogEnd_CallBack_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getFogEnd_Real_NoVirtual(IntPtr pNativeObject);

				public virtual double GetFogEnd_NoVirtual()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getFogEnd_Real_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CSceneManager_getFogEnd_Real_Function()
				{
					double csret=GetFogEnd();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getFogEnd_Real(IntPtr pNativeObject);

				public virtual double GetFogEnd()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getFogEnd_Real(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getFogDensity_CallBack_Real();

				protected getFogDensity_CallBack_Real m_getFogDensity_CallBack_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getFogDensity_Real_NoVirtual(IntPtr pNativeObject);

				public virtual double GetFogDensity_NoVirtual()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getFogDensity_Real_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CSceneManager_getFogDensity_Real_Function()
				{
					double csret=GetFogDensity();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getFogDensity_Real(IntPtr pNativeObject);

				public virtual double GetFogDensity()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getFogDensity_Real(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createBillboardSet_CallBack_CBillboardSet_EVString_ev_uint32(ref IntPtr name, uint poolSize);

				protected createBillboardSet_CallBack_CBillboardSet_EVString_ev_uint32 m_createBillboardSet_CallBack_CBillboardSet_EVString_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_EVString_ev_uint32_NoVirtual(IntPtr pNativeObject, string name, uint poolSize);

				public virtual EarthView.World.Graphic.BillboardSet CreateBillboardSet_NoVirtual(string name, uint poolSize)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_EVString_ev_uint32_NoVirtual(this.NativeObject, name, poolSize);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.BillboardSet csObj = new EarthView.World.Graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CBillboardSet");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.BillboardSet;
						csObj.BindNativeObject(__ptr, "CBillboardSet");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_EVString_ev_uint32_Function(ref IntPtr name, uint poolSize)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.BillboardSet csret=CreateBillboardSet(strname,poolSize);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_EVString_ev_uint32(IntPtr pNativeObject, string name, uint poolSize);

				public virtual EarthView.World.Graphic.BillboardSet CreateBillboardSet(string name, uint poolSize)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_EVString_ev_uint32(this.NativeObject, name, poolSize);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.BillboardSet csObj = new EarthView.World.Graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CBillboardSet");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.BillboardSet;
						csObj.BindNativeObject(__ptr, "CBillboardSet");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createBillboardSet_CallBack_CBillboardSet_EVString(ref IntPtr name);

				protected createBillboardSet_CallBack_CBillboardSet_EVString m_createBillboardSet_CallBack_CBillboardSet_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.BillboardSet CreateBillboardSet_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.BillboardSet csObj = new EarthView.World.Graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CBillboardSet");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.BillboardSet;
						csObj.BindNativeObject(__ptr, "CBillboardSet");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.BillboardSet csret=CreateBillboardSet(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_EVString(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.BillboardSet CreateBillboardSet(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.BillboardSet csObj = new EarthView.World.Graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CBillboardSet");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.BillboardSet;
						csObj.BindNativeObject(__ptr, "CBillboardSet");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createBillboardSet_CallBack_CBillboardSet_ev_uint32(uint poolSize);

				protected createBillboardSet_CallBack_CBillboardSet_ev_uint32 m_createBillboardSet_CallBack_CBillboardSet_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_ev_uint32_NoVirtual(IntPtr pNativeObject, uint poolSize);

				public virtual EarthView.World.Graphic.BillboardSet CreateBillboardSet_NoVirtual(uint poolSize)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_ev_uint32_NoVirtual(this.NativeObject, poolSize);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.BillboardSet csObj = new EarthView.World.Graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CBillboardSet");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.BillboardSet;
						csObj.BindNativeObject(__ptr, "CBillboardSet");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_ev_uint32_Function(uint poolSize)
				{
					EarthView.World.Graphic.BillboardSet csret=CreateBillboardSet(poolSize);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_ev_uint32(IntPtr pNativeObject, uint poolSize);

				public virtual EarthView.World.Graphic.BillboardSet CreateBillboardSet(uint poolSize)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_ev_uint32(this.NativeObject, poolSize);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.BillboardSet csObj = new EarthView.World.Graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CBillboardSet");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.BillboardSet;
						csObj.BindNativeObject(__ptr, "CBillboardSet");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createBillboardSet_CallBack_CBillboardSet();

				protected createBillboardSet_CallBack_CBillboardSet m_createBillboardSet_CallBack_CBillboardSet;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.BillboardSet CreateBillboardSet_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.BillboardSet csObj = new EarthView.World.Graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CBillboardSet");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.BillboardSet;
						csObj.BindNativeObject(__ptr, "CBillboardSet");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_Function()
				{
					EarthView.World.Graphic.BillboardSet csret=CreateBillboardSet();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.BillboardSet CreateBillboardSet()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.BillboardSet csObj = new EarthView.World.Graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CBillboardSet");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.BillboardSet;
						csObj.BindNativeObject(__ptr, "CBillboardSet");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getBillboardSet_CallBack_CBillboardSet_EVString(ref IntPtr name);

				protected getBillboardSet_CallBack_CBillboardSet_EVString m_getBillboardSet_CallBack_CBillboardSet_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getBillboardSet_CBillboardSet_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.BillboardSet GetBillboardSet_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getBillboardSet_CBillboardSet_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.BillboardSet csObj = new EarthView.World.Graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CBillboardSet");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.BillboardSet;
						csObj.BindNativeObject(__ptr, "CBillboardSet");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getBillboardSet_CBillboardSet_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.BillboardSet csret=GetBillboardSet(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getBillboardSet_CBillboardSet_EVString(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.BillboardSet GetBillboardSet(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getBillboardSet_CBillboardSet_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.BillboardSet csObj = new EarthView.World.Graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CBillboardSet");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.BillboardSet;
						csObj.BindNativeObject(__ptr, "CBillboardSet");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte hasBillboardSet_CallBack_ev_bool_EVString(ref IntPtr name);

				protected hasBillboardSet_CallBack_ev_bool_EVString m_hasBillboardSet_CallBack_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasBillboardSet_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual bool HasBillboardSet_NoVirtual(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasBillboardSet_ev_bool_EVString_NoVirtual(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_hasBillboardSet_ev_bool_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					bool csret=HasBillboardSet(strname);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasBillboardSet_ev_bool_EVString(IntPtr pNativeObject, string name);

				public virtual bool HasBillboardSet(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasBillboardSet_ev_bool_EVString(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyBillboardSet_CallBack_void_CBillboardSet(IntPtr set);

				protected destroyBillboardSet_CallBack_void_CBillboardSet m_destroyBillboardSet_CallBack_void_CBillboardSet;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyBillboardSet_void_CBillboardSet_NoVirtual(IntPtr pNativeObject, IntPtr set);

				public virtual void DestroyBillboardSet_NoVirtual(EarthView.World.Graphic.BillboardSet set)
				{
					EarthView_World_Graphic_CSceneManager_destroyBillboardSet_void_CBillboardSet_NoVirtual(this.NativeObject, object.Equals(set, null) ? IntPtr.Zero : set.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyBillboardSet_void_CBillboardSet_Function(IntPtr set)
				{
					EarthView.World.Graphic.BillboardSet csobj_set = new EarthView.World.Graphic.BillboardSet(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_set.BindNativeObject(set,"CBillboardSet");
					csobj_set.Delegate = true;
					IClassFactory csobj_setClassFactory = GlobalClassFactoryMap.Get(csobj_set.GetCppInstanceTypeName());
					if (csobj_setClassFactory != null)
					{
						csobj_set.Delegate = true;
						csobj_set = csobj_setClassFactory.Create() as EarthView.World.Graphic.BillboardSet;
						csobj_set.BindNativeObject(set, "CBillboardSet");
						csobj_set.Delegate = true;
					}
					
					DestroyBillboardSet(csobj_set);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyBillboardSet_void_CBillboardSet(IntPtr pNativeObject, IntPtr set);

				public virtual void DestroyBillboardSet(EarthView.World.Graphic.BillboardSet set)
				{
					EarthView_World_Graphic_CSceneManager_destroyBillboardSet_void_CBillboardSet(this.NativeObject, object.Equals(set, null) ? IntPtr.Zero : set.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyBillboardSet_CallBack_void_EVString(ref IntPtr name);

				protected destroyBillboardSet_CallBack_void_EVString m_destroyBillboardSet_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyBillboardSet_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual void DestroyBillboardSet_NoVirtual(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyBillboardSet_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyBillboardSet_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroyBillboardSet(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyBillboardSet_void_EVString(IntPtr pNativeObject, string name);

				public virtual void DestroyBillboardSet(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyBillboardSet_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyAllBillboardSets_CallBack_void();

				protected destroyAllBillboardSets_CallBack_void m_destroyAllBillboardSets_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllBillboardSets_void_NoVirtual(IntPtr pNativeObject);

				public virtual void DestroyAllBillboardSets_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllBillboardSets_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyAllBillboardSets_void_Function()
				{
					DestroyAllBillboardSets();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllBillboardSets_void(IntPtr pNativeObject);

				public virtual void DestroyAllBillboardSets()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllBillboardSets_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setDisplaySceneNodes_CallBack_void_ev_bool(bool display);

				protected setDisplaySceneNodes_CallBack_void_ev_bool m_setDisplaySceneNodes_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setDisplaySceneNodes_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte display);

				/// <summary>
				/// 设置是否显示场景节点的坐标轴
				/// </summary>				
				/// <returns></returns>
				public virtual void SetDisplaySceneNodes_NoVirtual(bool display)
				{
					EarthView_World_Graphic_CSceneManager_setDisplaySceneNodes_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(display));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setDisplaySceneNodes_void_ev_bool_Function(bool display)
				{
					SetDisplaySceneNodes(display);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setDisplaySceneNodes_void_ev_bool(IntPtr pNativeObject, byte display);

				/// <summary>
				/// 设置是否显示场景节点的坐标轴
				/// </summary>				
				/// <returns></returns>
				public virtual void SetDisplaySceneNodes(bool display)
				{
					EarthView_World_Graphic_CSceneManager_setDisplaySceneNodes_void_ev_bool(this.NativeObject, Convert.ToByte(display));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getDisplaySceneNodes_CallBack_ev_bool();

				protected getDisplaySceneNodes_CallBack_ev_bool m_getDisplaySceneNodes_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getDisplaySceneNodes_ev_bool_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 设置是否显示场景节点的坐标轴			
				/// </summary>				
				/// <returns></returns>
				public virtual bool GetDisplaySceneNodes_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getDisplaySceneNodes_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getDisplaySceneNodes_ev_bool_Function()
				{
					bool csret=GetDisplaySceneNodes();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getDisplaySceneNodes_ev_bool(IntPtr pNativeObject);

				/// <summary>
				/// 设置是否显示场景节点的坐标轴			
				/// </summary>				
				/// <returns></returns>
				public virtual bool GetDisplaySceneNodes()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getDisplaySceneNodes_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createAnimation_CallBack_CAnimation_EVString_Real(ref IntPtr name, double length);

				protected createAnimation_CallBack_CAnimation_EVString_Real m_createAnimation_CallBack_CAnimation_EVString_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createAnimation_CAnimation_EVString_Real_NoVirtual(IntPtr pNativeObject, string name, double length);

				/// <summary>
				/// 创建场景节点动画
				/// </summary>		
				/// <param name="name">动画名称</param>
				/// <param name="length">动画时长:单位为秒</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Animation CreateAnimation_NoVirtual(string name, double length)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createAnimation_CAnimation_EVString_Real_NoVirtual(this.NativeObject, name, length);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Animation csObj = new EarthView.World.Graphic.Animation(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CAnimation");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Animation;
						csObj.BindNativeObject(__ptr, "CAnimation");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createAnimation_CAnimation_EVString_Real_Function(ref IntPtr name, double length)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.Animation csret=CreateAnimation(strname,length);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createAnimation_CAnimation_EVString_Real(IntPtr pNativeObject, string name, double length);

				/// <summary>
				/// 创建场景节点动画
				/// </summary>		
				/// <param name="name">动画名称</param>
				/// <param name="length">动画时长:单位为秒</param>
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Animation CreateAnimation(string name, double length)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createAnimation_CAnimation_EVString_Real(this.NativeObject, name, length);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Animation csObj = new EarthView.World.Graphic.Animation(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CAnimation");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Animation;
						csObj.BindNativeObject(__ptr, "CAnimation");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getAnimation_CallBack_CAnimation_EVString(ref IntPtr name);

				protected getAnimation_CallBack_CAnimation_EVString m_getAnimation_CallBack_CAnimation_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getAnimation_CAnimation_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 获取给定名称的场景节点动画
				/// </summary>		
				/// <param name="name">动画名称</param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Animation GetAnimation_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getAnimation_CAnimation_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Animation csObj = new EarthView.World.Graphic.Animation(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CAnimation");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Animation;
						csObj.BindNativeObject(__ptr, "CAnimation");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getAnimation_CAnimation_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.Animation csret=GetAnimation(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getAnimation_CAnimation_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 获取给定名称的场景节点动画
				/// </summary>		
				/// <param name="name">动画名称</param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.Animation GetAnimation(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getAnimation_CAnimation_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Animation csObj = new EarthView.World.Graphic.Animation(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CAnimation");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Animation;
						csObj.BindNativeObject(__ptr, "CAnimation");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte hasAnimation_CallBack_ev_bool_EVString(ref IntPtr name);

				protected hasAnimation_CallBack_ev_bool_EVString m_hasAnimation_CallBack_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasAnimation_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 判断给定名称的场景节点动画是否存在
				/// </summary>		
				/// <param name="name">动画名称</param>				
				/// <returns></returns>
				public virtual bool HasAnimation_NoVirtual(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasAnimation_ev_bool_EVString_NoVirtual(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_hasAnimation_ev_bool_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					bool csret=HasAnimation(strname);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasAnimation_ev_bool_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 判断给定名称的场景节点动画是否存在
				/// </summary>		
				/// <param name="name">动画名称</param>				
				/// <returns></returns>
				public virtual bool HasAnimation(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasAnimation_ev_bool_EVString(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyAnimation_CallBack_void_EVString(ref IntPtr name);

				protected destroyAnimation_CallBack_void_EVString m_destroyAnimation_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAnimation_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 销毁给定名称的场景节点动画
				/// </summary>		
				/// <param name="name">动画名称</param>				
				/// <returns></returns>
				public virtual void DestroyAnimation_NoVirtual(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyAnimation_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyAnimation_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroyAnimation(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAnimation_void_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 销毁给定名称的场景节点动画
				/// </summary>		
				/// <param name="name">动画名称</param>				
				/// <returns></returns>
				public virtual void DestroyAnimation(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyAnimation_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyAllAnimations_CallBack_void();

				protected destroyAllAnimations_CallBack_void m_destroyAllAnimations_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllAnimations_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 销毁所有场景节点动画
				/// </summary>		
				/// <param name="name">动画名称</param>				
				/// <returns></returns>
				public virtual void DestroyAllAnimations_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllAnimations_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyAllAnimations_void_Function()
				{
					DestroyAllAnimations();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllAnimations_void(IntPtr pNativeObject);

				/// <summary>
				/// 销毁所有场景节点动画
				/// </summary>		
				/// <param name="name">动画名称</param>				
				/// <returns></returns>
				public virtual void DestroyAllAnimations()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllAnimations_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createAnimationState_CallBack_CAnimationState_EVString(ref IntPtr animName);

				protected createAnimationState_CallBack_CAnimationState_EVString m_createAnimationState_CallBack_CAnimationState_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createAnimationState_CAnimationState_EVString_NoVirtual(IntPtr pNativeObject, string animName);

				/// <summary>
				/// 为给定名称的场景节点动画创建一个动画状态类(播放控制类)
				/// </summary>		
				/// <param name="animName">动画名称</param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.AnimationState CreateAnimationState_NoVirtual(string animName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createAnimationState_CAnimationState_EVString_NoVirtual(this.NativeObject, animName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.AnimationState csObj = new EarthView.World.Graphic.AnimationState(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CAnimationState");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.AnimationState;
						csObj.BindNativeObject(__ptr, "CAnimationState");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createAnimationState_CAnimationState_EVString_Function(ref IntPtr animName)
				{
					string stranimName= Marshal.PtrToStringAnsi(animName);
					ClassFactory.FreeString(ref animName);
					
					EarthView.World.Graphic.AnimationState csret=CreateAnimationState(stranimName);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createAnimationState_CAnimationState_EVString(IntPtr pNativeObject, string animName);

				/// <summary>
				/// 为给定名称的场景节点动画创建一个动画状态类(播放控制类)
				/// </summary>		
				/// <param name="animName">动画名称</param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.AnimationState CreateAnimationState(string animName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createAnimationState_CAnimationState_EVString(this.NativeObject, animName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.AnimationState csObj = new EarthView.World.Graphic.AnimationState(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CAnimationState");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.AnimationState;
						csObj.BindNativeObject(__ptr, "CAnimationState");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getAnimationState_CallBack_CAnimationState_EVString(ref IntPtr animName);

				protected getAnimationState_CallBack_CAnimationState_EVString m_getAnimationState_CallBack_CAnimationState_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getAnimationState_CAnimationState_EVString_NoVirtual(IntPtr pNativeObject, string animName);

				/// <summary>
				/// 获取给定名称的场景节点动画对应的动画状态类(播放控制类)
				/// </summary>		
				/// <param name="animName">动画名称</param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.AnimationState GetAnimationState_NoVirtual(string animName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getAnimationState_CAnimationState_EVString_NoVirtual(this.NativeObject, animName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.AnimationState csObj = new EarthView.World.Graphic.AnimationState(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CAnimationState");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.AnimationState;
						csObj.BindNativeObject(__ptr, "CAnimationState");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getAnimationState_CAnimationState_EVString_Function(ref IntPtr animName)
				{
					string stranimName= Marshal.PtrToStringAnsi(animName);
					ClassFactory.FreeString(ref animName);
					
					EarthView.World.Graphic.AnimationState csret=GetAnimationState(stranimName);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getAnimationState_CAnimationState_EVString(IntPtr pNativeObject, string animName);

				/// <summary>
				/// 获取给定名称的场景节点动画对应的动画状态类(播放控制类)
				/// </summary>		
				/// <param name="animName">动画名称</param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.AnimationState GetAnimationState(string animName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getAnimationState_CAnimationState_EVString(this.NativeObject, animName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.AnimationState csObj = new EarthView.World.Graphic.AnimationState(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CAnimationState");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.AnimationState;
						csObj.BindNativeObject(__ptr, "CAnimationState");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte hasAnimationState_CallBack_ev_bool_EVString(ref IntPtr name);

				protected hasAnimationState_CallBack_ev_bool_EVString m_hasAnimationState_CallBack_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasAnimationState_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 判断给定名称的场景节点动画状态类是否存在
				/// </summary>		
				/// <param name="name">动画名称</param>				
				/// <returns></returns>
				public virtual bool HasAnimationState_NoVirtual(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasAnimationState_ev_bool_EVString_NoVirtual(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_hasAnimationState_ev_bool_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					bool csret=HasAnimationState(strname);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasAnimationState_ev_bool_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 判断给定名称的场景节点动画状态类是否存在
				/// </summary>		
				/// <param name="name">动画名称</param>				
				/// <returns></returns>
				public virtual bool HasAnimationState(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasAnimationState_ev_bool_EVString(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyAnimationState_CallBack_void_EVString(ref IntPtr name);

				protected destroyAnimationState_CallBack_void_EVString m_destroyAnimationState_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAnimationState_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 销毁给定名称的场景节点动画状态类(播放控制类)
				/// </summary>		
				/// <param name="name">动画名称</param>				
				/// <returns></returns>
				public virtual void DestroyAnimationState_NoVirtual(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyAnimationState_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyAnimationState_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroyAnimationState(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAnimationState_void_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 销毁给定名称的场景节点动画状态类(播放控制类)
				/// </summary>		
				/// <param name="name">动画名称</param>				
				/// <returns></returns>
				public virtual void DestroyAnimationState(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyAnimationState_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyAllAnimationStates_CallBack_void();

				protected destroyAllAnimationStates_CallBack_void m_destroyAllAnimationStates_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllAnimationStates_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 销毁所有场景节点动画状态类(播放控制类)
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void DestroyAllAnimationStates_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllAnimationStates_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyAllAnimationStates_void_Function()
				{
					DestroyAllAnimationStates();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllAnimationStates_void(IntPtr pNativeObject);

				/// <summary>
				/// 销毁所有场景节点动画状态类(播放控制类)
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void DestroyAllAnimationStates()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllAnimationStates_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void manualRender_CallBack_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool(IntPtr rend, IntPtr pass, IntPtr vp, IntPtr worldMatrix, IntPtr viewMatrix, IntPtr projMatrix, bool doBeginEndFrame);

				protected manualRender_CallBack_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool m_manualRender_CallBack_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr vp, IntPtr worldMatrix, IntPtr viewMatrix, IntPtr projMatrix, byte doBeginEndFrame);

				public virtual void ManualRender_NoVirtual(EarthView.World.Graphic.RenderOperation rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Viewport vp, EarthView.World.Spatial.Math.Matrix4 worldMatrix, EarthView.World.Spatial.Math.Matrix4 viewMatrix, EarthView.World.Spatial.Math.Matrix4 projMatrix, bool doBeginEndFrame)
				{
					EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_NoVirtual(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, object.Equals(worldMatrix, null) ? IntPtr.Zero : worldMatrix.NativeObject, object.Equals(viewMatrix, null) ? IntPtr.Zero : viewMatrix.NativeObject, object.Equals(projMatrix, null) ? IntPtr.Zero : projMatrix.NativeObject, Convert.ToByte(doBeginEndFrame));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_Function(IntPtr rend, IntPtr pass, IntPtr vp, IntPtr worldMatrix, IntPtr viewMatrix, IntPtr projMatrix, bool doBeginEndFrame)
				{
					EarthView.World.Graphic.RenderOperation csobj_rend = new EarthView.World.Graphic.RenderOperation(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_rend.BindNativeObject(rend,"CRenderOperation");
					csobj_rend.Delegate = true;
					IClassFactory csobj_rendClassFactory = GlobalClassFactoryMap.Get(csobj_rend.GetCppInstanceTypeName());
					if (csobj_rendClassFactory != null)
					{
						csobj_rend.Delegate = true;
						csobj_rend = csobj_rendClassFactory.Create() as EarthView.World.Graphic.RenderOperation;
						csobj_rend.BindNativeObject(rend, "CRenderOperation");
						csobj_rend.Delegate = true;
					}
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					EarthView.World.Graphic.Viewport csobj_vp = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_vp.BindNativeObject(vp,"CViewport");
					csobj_vp.Delegate = true;
					IClassFactory csobj_vpClassFactory = GlobalClassFactoryMap.Get(csobj_vp.GetCppInstanceTypeName());
					if (csobj_vpClassFactory != null)
					{
						csobj_vp.Delegate = true;
						csobj_vp = csobj_vpClassFactory.Create() as EarthView.World.Graphic.Viewport;
						csobj_vp.BindNativeObject(vp, "CViewport");
						csobj_vp.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_worldMatrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_worldMatrix.BindNativeObject(worldMatrix,"CMatrix4");
					csobj_worldMatrix.Delegate = true;
					IClassFactory csobj_worldMatrixClassFactory = GlobalClassFactoryMap.Get(csobj_worldMatrix.GetCppInstanceTypeName());
					if (csobj_worldMatrixClassFactory != null)
					{
						csobj_worldMatrix.Delegate = true;
						csobj_worldMatrix = csobj_worldMatrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_worldMatrix.BindNativeObject(worldMatrix, "CMatrix4");
						csobj_worldMatrix.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_viewMatrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_viewMatrix.BindNativeObject(viewMatrix,"CMatrix4");
					csobj_viewMatrix.Delegate = true;
					IClassFactory csobj_viewMatrixClassFactory = GlobalClassFactoryMap.Get(csobj_viewMatrix.GetCppInstanceTypeName());
					if (csobj_viewMatrixClassFactory != null)
					{
						csobj_viewMatrix.Delegate = true;
						csobj_viewMatrix = csobj_viewMatrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_viewMatrix.BindNativeObject(viewMatrix, "CMatrix4");
						csobj_viewMatrix.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_projMatrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_projMatrix.BindNativeObject(projMatrix,"CMatrix4");
					csobj_projMatrix.Delegate = true;
					IClassFactory csobj_projMatrixClassFactory = GlobalClassFactoryMap.Get(csobj_projMatrix.GetCppInstanceTypeName());
					if (csobj_projMatrixClassFactory != null)
					{
						csobj_projMatrix.Delegate = true;
						csobj_projMatrix = csobj_projMatrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_projMatrix.BindNativeObject(projMatrix, "CMatrix4");
						csobj_projMatrix.Delegate = true;
					}
					
					ManualRender(csobj_rend, csobj_pass, csobj_vp, csobj_worldMatrix, csobj_viewMatrix, csobj_projMatrix, doBeginEndFrame);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr vp, IntPtr worldMatrix, IntPtr viewMatrix, IntPtr projMatrix, byte doBeginEndFrame);

				public virtual void ManualRender(EarthView.World.Graphic.RenderOperation rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Viewport vp, EarthView.World.Spatial.Math.Matrix4 worldMatrix, EarthView.World.Spatial.Math.Matrix4 viewMatrix, EarthView.World.Spatial.Math.Matrix4 projMatrix, bool doBeginEndFrame)
				{
					EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, object.Equals(worldMatrix, null) ? IntPtr.Zero : worldMatrix.NativeObject, object.Equals(viewMatrix, null) ? IntPtr.Zero : viewMatrix.NativeObject, object.Equals(projMatrix, null) ? IntPtr.Zero : projMatrix.NativeObject, Convert.ToByte(doBeginEndFrame));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void manualRender_CallBack_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4(IntPtr rend, IntPtr pass, IntPtr vp, IntPtr worldMatrix, IntPtr viewMatrix, IntPtr projMatrix);

				protected manualRender_CallBack_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4 m_manualRender_CallBack_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_NoVirtual(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr vp, IntPtr worldMatrix, IntPtr viewMatrix, IntPtr projMatrix);

				public virtual void ManualRender_NoVirtual(EarthView.World.Graphic.RenderOperation rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Viewport vp, EarthView.World.Spatial.Math.Matrix4 worldMatrix, EarthView.World.Spatial.Math.Matrix4 viewMatrix, EarthView.World.Spatial.Math.Matrix4 projMatrix)
				{
					EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_NoVirtual(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, object.Equals(worldMatrix, null) ? IntPtr.Zero : worldMatrix.NativeObject, object.Equals(viewMatrix, null) ? IntPtr.Zero : viewMatrix.NativeObject, object.Equals(projMatrix, null) ? IntPtr.Zero : projMatrix.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_Function(IntPtr rend, IntPtr pass, IntPtr vp, IntPtr worldMatrix, IntPtr viewMatrix, IntPtr projMatrix)
				{
					EarthView.World.Graphic.RenderOperation csobj_rend = new EarthView.World.Graphic.RenderOperation(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_rend.BindNativeObject(rend,"CRenderOperation");
					csobj_rend.Delegate = true;
					IClassFactory csobj_rendClassFactory = GlobalClassFactoryMap.Get(csobj_rend.GetCppInstanceTypeName());
					if (csobj_rendClassFactory != null)
					{
						csobj_rend.Delegate = true;
						csobj_rend = csobj_rendClassFactory.Create() as EarthView.World.Graphic.RenderOperation;
						csobj_rend.BindNativeObject(rend, "CRenderOperation");
						csobj_rend.Delegate = true;
					}
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					EarthView.World.Graphic.Viewport csobj_vp = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_vp.BindNativeObject(vp,"CViewport");
					csobj_vp.Delegate = true;
					IClassFactory csobj_vpClassFactory = GlobalClassFactoryMap.Get(csobj_vp.GetCppInstanceTypeName());
					if (csobj_vpClassFactory != null)
					{
						csobj_vp.Delegate = true;
						csobj_vp = csobj_vpClassFactory.Create() as EarthView.World.Graphic.Viewport;
						csobj_vp.BindNativeObject(vp, "CViewport");
						csobj_vp.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_worldMatrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_worldMatrix.BindNativeObject(worldMatrix,"CMatrix4");
					csobj_worldMatrix.Delegate = true;
					IClassFactory csobj_worldMatrixClassFactory = GlobalClassFactoryMap.Get(csobj_worldMatrix.GetCppInstanceTypeName());
					if (csobj_worldMatrixClassFactory != null)
					{
						csobj_worldMatrix.Delegate = true;
						csobj_worldMatrix = csobj_worldMatrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_worldMatrix.BindNativeObject(worldMatrix, "CMatrix4");
						csobj_worldMatrix.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_viewMatrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_viewMatrix.BindNativeObject(viewMatrix,"CMatrix4");
					csobj_viewMatrix.Delegate = true;
					IClassFactory csobj_viewMatrixClassFactory = GlobalClassFactoryMap.Get(csobj_viewMatrix.GetCppInstanceTypeName());
					if (csobj_viewMatrixClassFactory != null)
					{
						csobj_viewMatrix.Delegate = true;
						csobj_viewMatrix = csobj_viewMatrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_viewMatrix.BindNativeObject(viewMatrix, "CMatrix4");
						csobj_viewMatrix.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_projMatrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_projMatrix.BindNativeObject(projMatrix,"CMatrix4");
					csobj_projMatrix.Delegate = true;
					IClassFactory csobj_projMatrixClassFactory = GlobalClassFactoryMap.Get(csobj_projMatrix.GetCppInstanceTypeName());
					if (csobj_projMatrixClassFactory != null)
					{
						csobj_projMatrix.Delegate = true;
						csobj_projMatrix = csobj_projMatrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_projMatrix.BindNativeObject(projMatrix, "CMatrix4");
						csobj_projMatrix.Delegate = true;
					}
					
					ManualRender(csobj_rend, csobj_pass, csobj_vp, csobj_worldMatrix, csobj_viewMatrix, csobj_projMatrix);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr vp, IntPtr worldMatrix, IntPtr viewMatrix, IntPtr projMatrix);

				public virtual void ManualRender(EarthView.World.Graphic.RenderOperation rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Viewport vp, EarthView.World.Spatial.Math.Matrix4 worldMatrix, EarthView.World.Spatial.Math.Matrix4 viewMatrix, EarthView.World.Spatial.Math.Matrix4 projMatrix)
				{
					EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, object.Equals(worldMatrix, null) ? IntPtr.Zero : worldMatrix.NativeObject, object.Equals(viewMatrix, null) ? IntPtr.Zero : viewMatrix.NativeObject, object.Equals(projMatrix, null) ? IntPtr.Zero : projMatrix.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList(IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix, bool doBeginEndFrame, bool lightScissoringClipping, bool doLightIteration, IntPtr manualLightList);

				protected manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_NoVirtual(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix, byte doBeginEndFrame, byte lightScissoringClipping, byte doLightIteration, IntPtr manualLightList);

				public virtual void ManualRender_NoVirtual(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Viewport vp, EarthView.World.Spatial.Math.Matrix4 viewMatrix, EarthView.World.Spatial.Math.Matrix4 projMatrix, bool doBeginEndFrame, bool lightScissoringClipping, bool doLightIteration, EarthView.World.Graphic.LightList manualLightList)
				{
					EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_NoVirtual(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, object.Equals(viewMatrix, null) ? IntPtr.Zero : viewMatrix.NativeObject, object.Equals(projMatrix, null) ? IntPtr.Zero : projMatrix.NativeObject, Convert.ToByte(doBeginEndFrame), Convert.ToByte(lightScissoringClipping), Convert.ToByte(doLightIteration), object.Equals(manualLightList, null) ? IntPtr.Zero : manualLightList.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_Function(IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix, bool doBeginEndFrame, bool lightScissoringClipping, bool doLightIteration, IntPtr manualLightList)
				{
					EarthView.World.Graphic.Renderable csobj_rend = new EarthView.World.Graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_rend.BindNativeObject(rend,"CRenderable");
					csobj_rend.Delegate = true;
					IClassFactory csobj_rendClassFactory = GlobalClassFactoryMap.Get(csobj_rend.GetCppInstanceTypeName());
					if (csobj_rendClassFactory != null)
					{
						csobj_rend.Delegate = true;
						csobj_rend = csobj_rendClassFactory.Create() as EarthView.World.Graphic.Renderable;
						csobj_rend.BindNativeObject(rend, "CRenderable");
						csobj_rend.Delegate = true;
					}
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					EarthView.World.Graphic.Viewport csobj_vp = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_vp.BindNativeObject(vp,"CViewport");
					csobj_vp.Delegate = true;
					IClassFactory csobj_vpClassFactory = GlobalClassFactoryMap.Get(csobj_vp.GetCppInstanceTypeName());
					if (csobj_vpClassFactory != null)
					{
						csobj_vp.Delegate = true;
						csobj_vp = csobj_vpClassFactory.Create() as EarthView.World.Graphic.Viewport;
						csobj_vp.BindNativeObject(vp, "CViewport");
						csobj_vp.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_viewMatrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_viewMatrix.BindNativeObject(viewMatrix,"CMatrix4");
					csobj_viewMatrix.Delegate = true;
					IClassFactory csobj_viewMatrixClassFactory = GlobalClassFactoryMap.Get(csobj_viewMatrix.GetCppInstanceTypeName());
					if (csobj_viewMatrixClassFactory != null)
					{
						csobj_viewMatrix.Delegate = true;
						csobj_viewMatrix = csobj_viewMatrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_viewMatrix.BindNativeObject(viewMatrix, "CMatrix4");
						csobj_viewMatrix.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_projMatrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_projMatrix.BindNativeObject(projMatrix,"CMatrix4");
					csobj_projMatrix.Delegate = true;
					IClassFactory csobj_projMatrixClassFactory = GlobalClassFactoryMap.Get(csobj_projMatrix.GetCppInstanceTypeName());
					if (csobj_projMatrixClassFactory != null)
					{
						csobj_projMatrix.Delegate = true;
						csobj_projMatrix = csobj_projMatrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_projMatrix.BindNativeObject(projMatrix, "CMatrix4");
						csobj_projMatrix.Delegate = true;
					}
					EarthView.World.Graphic.LightList csobj_manualLightList = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_manualLightList.BindNativeObject(manualLightList,"LightList");
					csobj_manualLightList.Delegate = true;
					IClassFactory csobj_manualLightListClassFactory = GlobalClassFactoryMap.Get(csobj_manualLightList.GetCppInstanceTypeName());
					if (csobj_manualLightListClassFactory != null)
					{
						csobj_manualLightList.Delegate = true;
						csobj_manualLightList = csobj_manualLightListClassFactory.Create() as EarthView.World.Graphic.LightList;
						csobj_manualLightList.BindNativeObject(manualLightList, "LightList");
						csobj_manualLightList.Delegate = true;
					}
					
					ManualRender(csobj_rend, csobj_pass, csobj_vp, csobj_viewMatrix, csobj_projMatrix, doBeginEndFrame, lightScissoringClipping, doLightIteration, csobj_manualLightList);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix, byte doBeginEndFrame, byte lightScissoringClipping, byte doLightIteration, IntPtr manualLightList);

				public virtual void ManualRender(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Viewport vp, EarthView.World.Spatial.Math.Matrix4 viewMatrix, EarthView.World.Spatial.Math.Matrix4 projMatrix, bool doBeginEndFrame, bool lightScissoringClipping, bool doLightIteration, EarthView.World.Graphic.LightList manualLightList)
				{
					EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, object.Equals(viewMatrix, null) ? IntPtr.Zero : viewMatrix.NativeObject, object.Equals(projMatrix, null) ? IntPtr.Zero : projMatrix.NativeObject, Convert.ToByte(doBeginEndFrame), Convert.ToByte(lightScissoringClipping), Convert.ToByte(doLightIteration), object.Equals(manualLightList, null) ? IntPtr.Zero : manualLightList.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool(IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix, bool doBeginEndFrame, bool lightScissoringClipping, bool doLightIteration);

				protected manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix, byte doBeginEndFrame, byte lightScissoringClipping, byte doLightIteration);

				public virtual void ManualRender_NoVirtual(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Viewport vp, EarthView.World.Spatial.Math.Matrix4 viewMatrix, EarthView.World.Spatial.Math.Matrix4 projMatrix, bool doBeginEndFrame, bool lightScissoringClipping, bool doLightIteration)
				{
					EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_NoVirtual(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, object.Equals(viewMatrix, null) ? IntPtr.Zero : viewMatrix.NativeObject, object.Equals(projMatrix, null) ? IntPtr.Zero : projMatrix.NativeObject, Convert.ToByte(doBeginEndFrame), Convert.ToByte(lightScissoringClipping), Convert.ToByte(doLightIteration));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_Function(IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix, bool doBeginEndFrame, bool lightScissoringClipping, bool doLightIteration)
				{
					EarthView.World.Graphic.Renderable csobj_rend = new EarthView.World.Graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_rend.BindNativeObject(rend,"CRenderable");
					csobj_rend.Delegate = true;
					IClassFactory csobj_rendClassFactory = GlobalClassFactoryMap.Get(csobj_rend.GetCppInstanceTypeName());
					if (csobj_rendClassFactory != null)
					{
						csobj_rend.Delegate = true;
						csobj_rend = csobj_rendClassFactory.Create() as EarthView.World.Graphic.Renderable;
						csobj_rend.BindNativeObject(rend, "CRenderable");
						csobj_rend.Delegate = true;
					}
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					EarthView.World.Graphic.Viewport csobj_vp = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_vp.BindNativeObject(vp,"CViewport");
					csobj_vp.Delegate = true;
					IClassFactory csobj_vpClassFactory = GlobalClassFactoryMap.Get(csobj_vp.GetCppInstanceTypeName());
					if (csobj_vpClassFactory != null)
					{
						csobj_vp.Delegate = true;
						csobj_vp = csobj_vpClassFactory.Create() as EarthView.World.Graphic.Viewport;
						csobj_vp.BindNativeObject(vp, "CViewport");
						csobj_vp.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_viewMatrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_viewMatrix.BindNativeObject(viewMatrix,"CMatrix4");
					csobj_viewMatrix.Delegate = true;
					IClassFactory csobj_viewMatrixClassFactory = GlobalClassFactoryMap.Get(csobj_viewMatrix.GetCppInstanceTypeName());
					if (csobj_viewMatrixClassFactory != null)
					{
						csobj_viewMatrix.Delegate = true;
						csobj_viewMatrix = csobj_viewMatrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_viewMatrix.BindNativeObject(viewMatrix, "CMatrix4");
						csobj_viewMatrix.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_projMatrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_projMatrix.BindNativeObject(projMatrix,"CMatrix4");
					csobj_projMatrix.Delegate = true;
					IClassFactory csobj_projMatrixClassFactory = GlobalClassFactoryMap.Get(csobj_projMatrix.GetCppInstanceTypeName());
					if (csobj_projMatrixClassFactory != null)
					{
						csobj_projMatrix.Delegate = true;
						csobj_projMatrix = csobj_projMatrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_projMatrix.BindNativeObject(projMatrix, "CMatrix4");
						csobj_projMatrix.Delegate = true;
					}
					
					ManualRender(csobj_rend, csobj_pass, csobj_vp, csobj_viewMatrix, csobj_projMatrix, doBeginEndFrame, lightScissoringClipping, doLightIteration);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix, byte doBeginEndFrame, byte lightScissoringClipping, byte doLightIteration);

				public virtual void ManualRender(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Viewport vp, EarthView.World.Spatial.Math.Matrix4 viewMatrix, EarthView.World.Spatial.Math.Matrix4 projMatrix, bool doBeginEndFrame, bool lightScissoringClipping, bool doLightIteration)
				{
					EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, object.Equals(viewMatrix, null) ? IntPtr.Zero : viewMatrix.NativeObject, object.Equals(projMatrix, null) ? IntPtr.Zero : projMatrix.NativeObject, Convert.ToByte(doBeginEndFrame), Convert.ToByte(lightScissoringClipping), Convert.ToByte(doLightIteration));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool(IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix, bool doBeginEndFrame, bool lightScissoringClipping);

				protected manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix, byte doBeginEndFrame, byte lightScissoringClipping);

				public virtual void ManualRender_NoVirtual(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Viewport vp, EarthView.World.Spatial.Math.Matrix4 viewMatrix, EarthView.World.Spatial.Math.Matrix4 projMatrix, bool doBeginEndFrame, bool lightScissoringClipping)
				{
					EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_NoVirtual(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, object.Equals(viewMatrix, null) ? IntPtr.Zero : viewMatrix.NativeObject, object.Equals(projMatrix, null) ? IntPtr.Zero : projMatrix.NativeObject, Convert.ToByte(doBeginEndFrame), Convert.ToByte(lightScissoringClipping));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_Function(IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix, bool doBeginEndFrame, bool lightScissoringClipping)
				{
					EarthView.World.Graphic.Renderable csobj_rend = new EarthView.World.Graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_rend.BindNativeObject(rend,"CRenderable");
					csobj_rend.Delegate = true;
					IClassFactory csobj_rendClassFactory = GlobalClassFactoryMap.Get(csobj_rend.GetCppInstanceTypeName());
					if (csobj_rendClassFactory != null)
					{
						csobj_rend.Delegate = true;
						csobj_rend = csobj_rendClassFactory.Create() as EarthView.World.Graphic.Renderable;
						csobj_rend.BindNativeObject(rend, "CRenderable");
						csobj_rend.Delegate = true;
					}
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					EarthView.World.Graphic.Viewport csobj_vp = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_vp.BindNativeObject(vp,"CViewport");
					csobj_vp.Delegate = true;
					IClassFactory csobj_vpClassFactory = GlobalClassFactoryMap.Get(csobj_vp.GetCppInstanceTypeName());
					if (csobj_vpClassFactory != null)
					{
						csobj_vp.Delegate = true;
						csobj_vp = csobj_vpClassFactory.Create() as EarthView.World.Graphic.Viewport;
						csobj_vp.BindNativeObject(vp, "CViewport");
						csobj_vp.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_viewMatrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_viewMatrix.BindNativeObject(viewMatrix,"CMatrix4");
					csobj_viewMatrix.Delegate = true;
					IClassFactory csobj_viewMatrixClassFactory = GlobalClassFactoryMap.Get(csobj_viewMatrix.GetCppInstanceTypeName());
					if (csobj_viewMatrixClassFactory != null)
					{
						csobj_viewMatrix.Delegate = true;
						csobj_viewMatrix = csobj_viewMatrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_viewMatrix.BindNativeObject(viewMatrix, "CMatrix4");
						csobj_viewMatrix.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_projMatrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_projMatrix.BindNativeObject(projMatrix,"CMatrix4");
					csobj_projMatrix.Delegate = true;
					IClassFactory csobj_projMatrixClassFactory = GlobalClassFactoryMap.Get(csobj_projMatrix.GetCppInstanceTypeName());
					if (csobj_projMatrixClassFactory != null)
					{
						csobj_projMatrix.Delegate = true;
						csobj_projMatrix = csobj_projMatrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_projMatrix.BindNativeObject(projMatrix, "CMatrix4");
						csobj_projMatrix.Delegate = true;
					}
					
					ManualRender(csobj_rend, csobj_pass, csobj_vp, csobj_viewMatrix, csobj_projMatrix, doBeginEndFrame, lightScissoringClipping);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix, byte doBeginEndFrame, byte lightScissoringClipping);

				public virtual void ManualRender(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Viewport vp, EarthView.World.Spatial.Math.Matrix4 viewMatrix, EarthView.World.Spatial.Math.Matrix4 projMatrix, bool doBeginEndFrame, bool lightScissoringClipping)
				{
					EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, object.Equals(viewMatrix, null) ? IntPtr.Zero : viewMatrix.NativeObject, object.Equals(projMatrix, null) ? IntPtr.Zero : projMatrix.NativeObject, Convert.ToByte(doBeginEndFrame), Convert.ToByte(lightScissoringClipping));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool(IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix, bool doBeginEndFrame);

				protected manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix, byte doBeginEndFrame);

				public virtual void ManualRender_NoVirtual(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Viewport vp, EarthView.World.Spatial.Math.Matrix4 viewMatrix, EarthView.World.Spatial.Math.Matrix4 projMatrix, bool doBeginEndFrame)
				{
					EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_NoVirtual(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, object.Equals(viewMatrix, null) ? IntPtr.Zero : viewMatrix.NativeObject, object.Equals(projMatrix, null) ? IntPtr.Zero : projMatrix.NativeObject, Convert.ToByte(doBeginEndFrame));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_Function(IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix, bool doBeginEndFrame)
				{
					EarthView.World.Graphic.Renderable csobj_rend = new EarthView.World.Graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_rend.BindNativeObject(rend,"CRenderable");
					csobj_rend.Delegate = true;
					IClassFactory csobj_rendClassFactory = GlobalClassFactoryMap.Get(csobj_rend.GetCppInstanceTypeName());
					if (csobj_rendClassFactory != null)
					{
						csobj_rend.Delegate = true;
						csobj_rend = csobj_rendClassFactory.Create() as EarthView.World.Graphic.Renderable;
						csobj_rend.BindNativeObject(rend, "CRenderable");
						csobj_rend.Delegate = true;
					}
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					EarthView.World.Graphic.Viewport csobj_vp = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_vp.BindNativeObject(vp,"CViewport");
					csobj_vp.Delegate = true;
					IClassFactory csobj_vpClassFactory = GlobalClassFactoryMap.Get(csobj_vp.GetCppInstanceTypeName());
					if (csobj_vpClassFactory != null)
					{
						csobj_vp.Delegate = true;
						csobj_vp = csobj_vpClassFactory.Create() as EarthView.World.Graphic.Viewport;
						csobj_vp.BindNativeObject(vp, "CViewport");
						csobj_vp.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_viewMatrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_viewMatrix.BindNativeObject(viewMatrix,"CMatrix4");
					csobj_viewMatrix.Delegate = true;
					IClassFactory csobj_viewMatrixClassFactory = GlobalClassFactoryMap.Get(csobj_viewMatrix.GetCppInstanceTypeName());
					if (csobj_viewMatrixClassFactory != null)
					{
						csobj_viewMatrix.Delegate = true;
						csobj_viewMatrix = csobj_viewMatrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_viewMatrix.BindNativeObject(viewMatrix, "CMatrix4");
						csobj_viewMatrix.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_projMatrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_projMatrix.BindNativeObject(projMatrix,"CMatrix4");
					csobj_projMatrix.Delegate = true;
					IClassFactory csobj_projMatrixClassFactory = GlobalClassFactoryMap.Get(csobj_projMatrix.GetCppInstanceTypeName());
					if (csobj_projMatrixClassFactory != null)
					{
						csobj_projMatrix.Delegate = true;
						csobj_projMatrix = csobj_projMatrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_projMatrix.BindNativeObject(projMatrix, "CMatrix4");
						csobj_projMatrix.Delegate = true;
					}
					
					ManualRender(csobj_rend, csobj_pass, csobj_vp, csobj_viewMatrix, csobj_projMatrix, doBeginEndFrame);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix, byte doBeginEndFrame);

				public virtual void ManualRender(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Viewport vp, EarthView.World.Spatial.Math.Matrix4 viewMatrix, EarthView.World.Spatial.Math.Matrix4 projMatrix, bool doBeginEndFrame)
				{
					EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, object.Equals(viewMatrix, null) ? IntPtr.Zero : viewMatrix.NativeObject, object.Equals(projMatrix, null) ? IntPtr.Zero : projMatrix.NativeObject, Convert.ToByte(doBeginEndFrame));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4(IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix);

				protected manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4 m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_NoVirtual(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix);

				public virtual void ManualRender_NoVirtual(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Viewport vp, EarthView.World.Spatial.Math.Matrix4 viewMatrix, EarthView.World.Spatial.Math.Matrix4 projMatrix)
				{
					EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_NoVirtual(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, object.Equals(viewMatrix, null) ? IntPtr.Zero : viewMatrix.NativeObject, object.Equals(projMatrix, null) ? IntPtr.Zero : projMatrix.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_Function(IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix)
				{
					EarthView.World.Graphic.Renderable csobj_rend = new EarthView.World.Graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_rend.BindNativeObject(rend,"CRenderable");
					csobj_rend.Delegate = true;
					IClassFactory csobj_rendClassFactory = GlobalClassFactoryMap.Get(csobj_rend.GetCppInstanceTypeName());
					if (csobj_rendClassFactory != null)
					{
						csobj_rend.Delegate = true;
						csobj_rend = csobj_rendClassFactory.Create() as EarthView.World.Graphic.Renderable;
						csobj_rend.BindNativeObject(rend, "CRenderable");
						csobj_rend.Delegate = true;
					}
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					EarthView.World.Graphic.Viewport csobj_vp = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_vp.BindNativeObject(vp,"CViewport");
					csobj_vp.Delegate = true;
					IClassFactory csobj_vpClassFactory = GlobalClassFactoryMap.Get(csobj_vp.GetCppInstanceTypeName());
					if (csobj_vpClassFactory != null)
					{
						csobj_vp.Delegate = true;
						csobj_vp = csobj_vpClassFactory.Create() as EarthView.World.Graphic.Viewport;
						csobj_vp.BindNativeObject(vp, "CViewport");
						csobj_vp.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_viewMatrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_viewMatrix.BindNativeObject(viewMatrix,"CMatrix4");
					csobj_viewMatrix.Delegate = true;
					IClassFactory csobj_viewMatrixClassFactory = GlobalClassFactoryMap.Get(csobj_viewMatrix.GetCppInstanceTypeName());
					if (csobj_viewMatrixClassFactory != null)
					{
						csobj_viewMatrix.Delegate = true;
						csobj_viewMatrix = csobj_viewMatrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_viewMatrix.BindNativeObject(viewMatrix, "CMatrix4");
						csobj_viewMatrix.Delegate = true;
					}
					EarthView.World.Spatial.Math.Matrix4 csobj_projMatrix = new EarthView.World.Spatial.Math.Matrix4(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_projMatrix.BindNativeObject(projMatrix,"CMatrix4");
					csobj_projMatrix.Delegate = true;
					IClassFactory csobj_projMatrixClassFactory = GlobalClassFactoryMap.Get(csobj_projMatrix.GetCppInstanceTypeName());
					if (csobj_projMatrixClassFactory != null)
					{
						csobj_projMatrix.Delegate = true;
						csobj_projMatrix = csobj_projMatrixClassFactory.Create() as EarthView.World.Spatial.Math.Matrix4;
						csobj_projMatrix.BindNativeObject(projMatrix, "CMatrix4");
						csobj_projMatrix.Delegate = true;
					}
					
					ManualRender(csobj_rend, csobj_pass, csobj_vp, csobj_viewMatrix, csobj_projMatrix);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4(IntPtr pNativeObject, IntPtr rend, IntPtr pass, IntPtr vp, IntPtr viewMatrix, IntPtr projMatrix);

				public virtual void ManualRender(EarthView.World.Graphic.Renderable rend, EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Viewport vp, EarthView.World.Spatial.Math.Matrix4 viewMatrix, EarthView.World.Spatial.Math.Matrix4 projMatrix)
				{
					EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4(this.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(vp, null) ? IntPtr.Zero : vp.NativeObject, object.Equals(viewMatrix, null) ? IntPtr.Zero : viewMatrix.NativeObject, object.Equals(projMatrix, null) ? IntPtr.Zero : projMatrix.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getRenderQueue_CallBack_CRenderQueue();

				protected getRenderQueue_CallBack_CRenderQueue m_getRenderQueue_CallBack_CRenderQueue;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getRenderQueue_CRenderQueue_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得渲染队列
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RenderQueue GetRenderQueue_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getRenderQueue_CRenderQueue_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderQueue csObj = new EarthView.World.Graphic.RenderQueue(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderQueue");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderQueue;
						csObj.BindNativeObject(__ptr, "CRenderQueue");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getRenderQueue_CRenderQueue_Function()
				{
					EarthView.World.Graphic.RenderQueue csret=GetRenderQueue();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getRenderQueue_CRenderQueue(IntPtr pNativeObject);

				/// <summary>
				/// 获得渲染队列
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RenderQueue GetRenderQueue()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getRenderQueue_CRenderQueue(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderQueue csObj = new EarthView.World.Graphic.RenderQueue(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderQueue");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderQueue;
						csObj.BindNativeObject(__ptr, "CRenderQueue");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void addRenderQueueListener_CallBack_void_CRenderQueueListener(IntPtr ref_newListener);

				protected addRenderQueueListener_CallBack_void_CRenderQueueListener m_addRenderQueueListener_CallBack_void_CRenderQueueListener;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_addRenderQueueListener_void_CRenderQueueListener_NoVirtual(IntPtr pNativeObject, IntPtr ref_newListener);

				/// <summary>
				/// 添加渲染队列监听者
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void AddRenderQueueListener_NoVirtual(EarthView.World.Graphic.RenderQueueListener ref_newListener)
				{
					EarthView_World_Graphic_CSceneManager_addRenderQueueListener_void_CRenderQueueListener_NoVirtual(this.NativeObject, object.Equals(ref_newListener, null) ? IntPtr.Zero : ref_newListener.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_addRenderQueueListener_void_CRenderQueueListener_Function(IntPtr ref_newListener)
				{
					EarthView.World.Graphic.RenderQueueListener csobj_ref_newListener = new EarthView.World.Graphic.RenderQueueListener(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_ref_newListener.BindNativeObject(ref_newListener,"CRenderQueueListener");
					csobj_ref_newListener.Delegate = true;
					IClassFactory csobj_ref_newListenerClassFactory = GlobalClassFactoryMap.Get(csobj_ref_newListener.GetCppInstanceTypeName());
					if (csobj_ref_newListenerClassFactory != null)
					{
						csobj_ref_newListener.Delegate = true;
						csobj_ref_newListener = csobj_ref_newListenerClassFactory.Create() as EarthView.World.Graphic.RenderQueueListener;
						csobj_ref_newListener.BindNativeObject(ref_newListener, "CRenderQueueListener");
						csobj_ref_newListener.Delegate = true;
					}
					
					AddRenderQueueListener(csobj_ref_newListener);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_addRenderQueueListener_void_CRenderQueueListener(IntPtr pNativeObject, IntPtr ref_newListener);

				/// <summary>
				/// 添加渲染队列监听者
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void AddRenderQueueListener(EarthView.World.Graphic.RenderQueueListener ref_newListener)
				{
					EarthView_World_Graphic_CSceneManager_addRenderQueueListener_void_CRenderQueueListener(this.NativeObject, object.Equals(ref_newListener, null) ? IntPtr.Zero : ref_newListener.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void removeRenderQueueListener_CallBack_void_CRenderQueueListener(IntPtr delListener);

				protected removeRenderQueueListener_CallBack_void_CRenderQueueListener m_removeRenderQueueListener_CallBack_void_CRenderQueueListener;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_removeRenderQueueListener_void_CRenderQueueListener_NoVirtual(IntPtr pNativeObject, IntPtr delListener);

				/// <summary>
				/// 移除渲染队列监听者
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void RemoveRenderQueueListener_NoVirtual(EarthView.World.Graphic.RenderQueueListener delListener)
				{
					EarthView_World_Graphic_CSceneManager_removeRenderQueueListener_void_CRenderQueueListener_NoVirtual(this.NativeObject, object.Equals(delListener, null) ? IntPtr.Zero : delListener.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_removeRenderQueueListener_void_CRenderQueueListener_Function(IntPtr delListener)
				{
					EarthView.World.Graphic.RenderQueueListener csobj_delListener = new EarthView.World.Graphic.RenderQueueListener(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_delListener.BindNativeObject(delListener,"CRenderQueueListener");
					csobj_delListener.Delegate = true;
					IClassFactory csobj_delListenerClassFactory = GlobalClassFactoryMap.Get(csobj_delListener.GetCppInstanceTypeName());
					if (csobj_delListenerClassFactory != null)
					{
						csobj_delListener.Delegate = true;
						csobj_delListener = csobj_delListenerClassFactory.Create() as EarthView.World.Graphic.RenderQueueListener;
						csobj_delListener.BindNativeObject(delListener, "CRenderQueueListener");
						csobj_delListener.Delegate = true;
					}
					
					RemoveRenderQueueListener(csobj_delListener);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_removeRenderQueueListener_void_CRenderQueueListener(IntPtr pNativeObject, IntPtr delListener);

				/// <summary>
				/// 移除渲染队列监听者
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void RemoveRenderQueueListener(EarthView.World.Graphic.RenderQueueListener delListener)
				{
					EarthView_World_Graphic_CSceneManager_removeRenderQueueListener_void_CRenderQueueListener(this.NativeObject, object.Equals(delListener, null) ? IntPtr.Zero : delListener.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void addRenderObjectListener_CallBack_void_CRenderObjectListener(IntPtr ref_newListener);

				protected addRenderObjectListener_CallBack_void_CRenderObjectListener m_addRenderObjectListener_CallBack_void_CRenderObjectListener;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_addRenderObjectListener_void_CRenderObjectListener_NoVirtual(IntPtr pNativeObject, IntPtr ref_newListener);

				/// <summary>
				/// 添加渲染对象监听者
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void AddRenderObjectListener_NoVirtual(EarthView.World.Graphic.RenderObjectListener ref_newListener)
				{
					EarthView_World_Graphic_CSceneManager_addRenderObjectListener_void_CRenderObjectListener_NoVirtual(this.NativeObject, object.Equals(ref_newListener, null) ? IntPtr.Zero : ref_newListener.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_addRenderObjectListener_void_CRenderObjectListener_Function(IntPtr ref_newListener)
				{
					EarthView.World.Graphic.RenderObjectListener csobj_ref_newListener = new EarthView.World.Graphic.RenderObjectListener(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_ref_newListener.BindNativeObject(ref_newListener,"CRenderObjectListener");
					csobj_ref_newListener.Delegate = true;
					IClassFactory csobj_ref_newListenerClassFactory = GlobalClassFactoryMap.Get(csobj_ref_newListener.GetCppInstanceTypeName());
					if (csobj_ref_newListenerClassFactory != null)
					{
						csobj_ref_newListener.Delegate = true;
						csobj_ref_newListener = csobj_ref_newListenerClassFactory.Create() as EarthView.World.Graphic.RenderObjectListener;
						csobj_ref_newListener.BindNativeObject(ref_newListener, "CRenderObjectListener");
						csobj_ref_newListener.Delegate = true;
					}
					
					AddRenderObjectListener(csobj_ref_newListener);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_addRenderObjectListener_void_CRenderObjectListener(IntPtr pNativeObject, IntPtr ref_newListener);

				/// <summary>
				/// 添加渲染对象监听者
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void AddRenderObjectListener(EarthView.World.Graphic.RenderObjectListener ref_newListener)
				{
					EarthView_World_Graphic_CSceneManager_addRenderObjectListener_void_CRenderObjectListener(this.NativeObject, object.Equals(ref_newListener, null) ? IntPtr.Zero : ref_newListener.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void removeRenderObjectListener_CallBack_void_CRenderObjectListener(IntPtr delListener);

				protected removeRenderObjectListener_CallBack_void_CRenderObjectListener m_removeRenderObjectListener_CallBack_void_CRenderObjectListener;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_removeRenderObjectListener_void_CRenderObjectListener_NoVirtual(IntPtr pNativeObject, IntPtr delListener);

				/// <summary>
				/// 移除渲染对象监听者
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void RemoveRenderObjectListener_NoVirtual(EarthView.World.Graphic.RenderObjectListener delListener)
				{
					EarthView_World_Graphic_CSceneManager_removeRenderObjectListener_void_CRenderObjectListener_NoVirtual(this.NativeObject, object.Equals(delListener, null) ? IntPtr.Zero : delListener.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_removeRenderObjectListener_void_CRenderObjectListener_Function(IntPtr delListener)
				{
					EarthView.World.Graphic.RenderObjectListener csobj_delListener = new EarthView.World.Graphic.RenderObjectListener(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_delListener.BindNativeObject(delListener,"CRenderObjectListener");
					csobj_delListener.Delegate = true;
					IClassFactory csobj_delListenerClassFactory = GlobalClassFactoryMap.Get(csobj_delListener.GetCppInstanceTypeName());
					if (csobj_delListenerClassFactory != null)
					{
						csobj_delListener.Delegate = true;
						csobj_delListener = csobj_delListenerClassFactory.Create() as EarthView.World.Graphic.RenderObjectListener;
						csobj_delListener.BindNativeObject(delListener, "CRenderObjectListener");
						csobj_delListener.Delegate = true;
					}
					
					RemoveRenderObjectListener(csobj_delListener);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_removeRenderObjectListener_void_CRenderObjectListener(IntPtr pNativeObject, IntPtr delListener);

				/// <summary>
				/// 移除渲染对象监听者
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void RemoveRenderObjectListener(EarthView.World.Graphic.RenderObjectListener delListener)
				{
					EarthView_World_Graphic_CSceneManager_removeRenderObjectListener_void_CRenderObjectListener(this.NativeObject, object.Equals(delListener, null) ? IntPtr.Zero : delListener.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void addSpecialCaseRenderQueue_CallBack_void_ev_uint8(byte qid);

				protected addSpecialCaseRenderQueue_CallBack_void_ev_uint8 m_addSpecialCaseRenderQueue_CallBack_void_ev_uint8;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_addSpecialCaseRenderQueue_void_ev_uint8_NoVirtual(IntPtr pNativeObject, byte qid);

				public virtual void AddSpecialCaseRenderQueue_NoVirtual(byte qid)
				{
					EarthView_World_Graphic_CSceneManager_addSpecialCaseRenderQueue_void_ev_uint8_NoVirtual(this.NativeObject, qid);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_addSpecialCaseRenderQueue_void_ev_uint8_Function(byte qid)
				{
					AddSpecialCaseRenderQueue(qid);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_addSpecialCaseRenderQueue_void_ev_uint8(IntPtr pNativeObject, byte qid);

				public virtual void AddSpecialCaseRenderQueue(byte qid)
				{
					EarthView_World_Graphic_CSceneManager_addSpecialCaseRenderQueue_void_ev_uint8(this.NativeObject, qid);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void removeSpecialCaseRenderQueue_CallBack_void_ev_uint8(byte qid);

				protected removeSpecialCaseRenderQueue_CallBack_void_ev_uint8 m_removeSpecialCaseRenderQueue_CallBack_void_ev_uint8;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_removeSpecialCaseRenderQueue_void_ev_uint8_NoVirtual(IntPtr pNativeObject, byte qid);

				public virtual void RemoveSpecialCaseRenderQueue_NoVirtual(byte qid)
				{
					EarthView_World_Graphic_CSceneManager_removeSpecialCaseRenderQueue_void_ev_uint8_NoVirtual(this.NativeObject, qid);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_removeSpecialCaseRenderQueue_void_ev_uint8_Function(byte qid)
				{
					RemoveSpecialCaseRenderQueue(qid);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_removeSpecialCaseRenderQueue_void_ev_uint8(IntPtr pNativeObject, byte qid);

				public virtual void RemoveSpecialCaseRenderQueue(byte qid)
				{
					EarthView_World_Graphic_CSceneManager_removeSpecialCaseRenderQueue_void_ev_uint8(this.NativeObject, qid);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void clearSpecialCaseRenderQueues_CallBack_void();

				protected clearSpecialCaseRenderQueues_CallBack_void m_clearSpecialCaseRenderQueues_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_clearSpecialCaseRenderQueues_void_NoVirtual(IntPtr pNativeObject);

				public virtual void ClearSpecialCaseRenderQueues_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_clearSpecialCaseRenderQueues_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_clearSpecialCaseRenderQueues_void_Function()
				{
					ClearSpecialCaseRenderQueues();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_clearSpecialCaseRenderQueues_void(IntPtr pNativeObject);

				public virtual void ClearSpecialCaseRenderQueues()
				{
					EarthView_World_Graphic_CSceneManager_clearSpecialCaseRenderQueues_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setSpecialCaseRenderQueueMode_CallBack_void_SpecialCaseRenderQueueMode(EarthView.World.Graphic.SceneManager.SPECIALCASERENDERQUEUEMODE mode);

				protected setSpecialCaseRenderQueueMode_CallBack_void_SpecialCaseRenderQueueMode m_setSpecialCaseRenderQueueMode_CallBack_void_SpecialCaseRenderQueueMode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSpecialCaseRenderQueueMode_void_SpecialCaseRenderQueueMode_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.SceneManager.SPECIALCASERENDERQUEUEMODE mode);

				public virtual void SetSpecialCaseRenderQueueMode_NoVirtual(EarthView.World.Graphic.SceneManager.SPECIALCASERENDERQUEUEMODE mode)
				{
					EarthView_World_Graphic_CSceneManager_setSpecialCaseRenderQueueMode_void_SpecialCaseRenderQueueMode_NoVirtual(this.NativeObject, mode);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setSpecialCaseRenderQueueMode_void_SpecialCaseRenderQueueMode_Function(EarthView.World.Graphic.SceneManager.SPECIALCASERENDERQUEUEMODE mode)
				{
					SetSpecialCaseRenderQueueMode(mode);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setSpecialCaseRenderQueueMode_void_SpecialCaseRenderQueueMode(IntPtr pNativeObject, EarthView.World.Graphic.SceneManager.SPECIALCASERENDERQUEUEMODE mode);

				public virtual void SetSpecialCaseRenderQueueMode(EarthView.World.Graphic.SceneManager.SPECIALCASERENDERQUEUEMODE mode)
				{
					EarthView_World_Graphic_CSceneManager_setSpecialCaseRenderQueueMode_void_SpecialCaseRenderQueueMode(this.NativeObject, mode);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate int getSpecialCaseRenderQueueMode_CallBack_SpecialCaseRenderQueueMode();

				protected getSpecialCaseRenderQueueMode_CallBack_SpecialCaseRenderQueueMode m_getSpecialCaseRenderQueueMode_CallBack_SpecialCaseRenderQueueMode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CSceneManager_getSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.SceneManager.SPECIALCASERENDERQUEUEMODE GetSpecialCaseRenderQueueMode_NoVirtual()
				{
					int ret=EarthView_World_Graphic_CSceneManager_getSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_NoVirtual(this.NativeObject);
					
					return (EarthView.World.Graphic.SceneManager.SPECIALCASERENDERQUEUEMODE)ret;
					
				}

				protected  int EarthView_World_Graphic_CSceneManager_getSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_Function()
				{
					EarthView.World.Graphic.SceneManager.SPECIALCASERENDERQUEUEMODE csret=GetSpecialCaseRenderQueueMode();
					
					return (int)csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CSceneManager_getSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.SceneManager.SPECIALCASERENDERQUEUEMODE GetSpecialCaseRenderQueueMode()
				{
					int ret=EarthView_World_Graphic_CSceneManager_getSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode(this.NativeObject);
					
					return (EarthView.World.Graphic.SceneManager.SPECIALCASERENDERQUEUEMODE)ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte isRenderQueueToBeProcessed_CallBack_ev_bool_ev_uint8(byte qid);

				protected isRenderQueueToBeProcessed_CallBack_ev_bool_ev_uint8 m_isRenderQueueToBeProcessed_CallBack_ev_bool_ev_uint8;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isRenderQueueToBeProcessed_ev_bool_ev_uint8_NoVirtual(IntPtr pNativeObject, byte qid);

				public virtual bool IsRenderQueueToBeProcessed_NoVirtual(byte qid)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isRenderQueueToBeProcessed_ev_bool_ev_uint8_NoVirtual(this.NativeObject, qid);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_isRenderQueueToBeProcessed_ev_bool_ev_uint8_Function(byte qid)
				{
					bool csret=IsRenderQueueToBeProcessed(qid);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isRenderQueueToBeProcessed_ev_bool_ev_uint8(IntPtr pNativeObject, byte qid);

				public virtual bool IsRenderQueueToBeProcessed(byte qid)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isRenderQueueToBeProcessed_ev_bool_ev_uint8(this.NativeObject, qid);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setWorldGeometryRenderQueue_CallBack_void_ev_uint8(byte qid);

				protected setWorldGeometryRenderQueue_CallBack_void_ev_uint8 m_setWorldGeometryRenderQueue_CallBack_void_ev_uint8;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setWorldGeometryRenderQueue_void_ev_uint8_NoVirtual(IntPtr pNativeObject, byte qid);

				public virtual void SetWorldGeometryRenderQueue_NoVirtual(byte qid)
				{
					EarthView_World_Graphic_CSceneManager_setWorldGeometryRenderQueue_void_ev_uint8_NoVirtual(this.NativeObject, qid);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setWorldGeometryRenderQueue_void_ev_uint8_Function(byte qid)
				{
					SetWorldGeometryRenderQueue(qid);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setWorldGeometryRenderQueue_void_ev_uint8(IntPtr pNativeObject, byte qid);

				public virtual void SetWorldGeometryRenderQueue(byte qid)
				{
					EarthView_World_Graphic_CSceneManager_setWorldGeometryRenderQueue_void_ev_uint8(this.NativeObject, qid);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getWorldGeometryRenderQueue_CallBack_ev_uint8();

				protected getWorldGeometryRenderQueue_CallBack_ev_uint8 m_getWorldGeometryRenderQueue_CallBack_ev_uint8;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getWorldGeometryRenderQueue_ev_uint8_NoVirtual(IntPtr pNativeObject);

				public virtual byte GetWorldGeometryRenderQueue_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getWorldGeometryRenderQueue_ev_uint8_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getWorldGeometryRenderQueue_ev_uint8_Function()
				{
					byte csret=GetWorldGeometryRenderQueue();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getWorldGeometryRenderQueue_ev_uint8(IntPtr pNativeObject);

				public virtual byte GetWorldGeometryRenderQueue()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getWorldGeometryRenderQueue_ev_uint8(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void showBoundingBoxes_CallBack_void_ev_bool(bool bShow);

				protected showBoundingBoxes_CallBack_void_ev_bool m_showBoundingBoxes_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_showBoundingBoxes_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte bShow);

				/// <summary>
				/// 设置是否显示节点的包围盒
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void ShowBoundingBoxes_NoVirtual(bool bShow)
				{
					EarthView_World_Graphic_CSceneManager_showBoundingBoxes_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(bShow));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_showBoundingBoxes_void_ev_bool_Function(bool bShow)
				{
					ShowBoundingBoxes(bShow);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_showBoundingBoxes_void_ev_bool(IntPtr pNativeObject, byte bShow);

				/// <summary>
				/// 设置是否显示节点的包围盒
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void ShowBoundingBoxes(bool bShow)
				{
					EarthView_World_Graphic_CSceneManager_showBoundingBoxes_void_ev_bool(this.NativeObject, Convert.ToByte(bShow));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getShowBoundingBoxes_CallBack_ev_bool();

				protected getShowBoundingBoxes_CallBack_ev_bool m_getShowBoundingBoxes_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getShowBoundingBoxes_ev_bool_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获取是否显示节点的包围盒
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual bool GetShowBoundingBoxes_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getShowBoundingBoxes_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getShowBoundingBoxes_ev_bool_Function()
				{
					bool csret=GetShowBoundingBoxes();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getShowBoundingBoxes_ev_bool(IntPtr pNativeObject);

				/// <summary>
				/// 获取是否显示节点的包围盒
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual bool GetShowBoundingBoxes()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getShowBoundingBoxes_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _notifyAutotrackingSceneNode_CallBack_void_CSceneNode_ev_bool(IntPtr node, bool autoTrack);

				protected _notifyAutotrackingSceneNode_CallBack_void_CSceneNode_ev_bool m__notifyAutotrackingSceneNode_CallBack_void_CSceneNode_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__notifyAutotrackingSceneNode_void_CSceneNode_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr node, byte autoTrack);

				/// <summary>
				/// 通知场景管理器存在某个节点正被跟踪
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void _notifyAutotrackingSceneNode_NoVirtual(EarthView.World.Graphic.SceneNode node, bool autoTrack)
				{
					EarthView_World_Graphic_CSceneManager__notifyAutotrackingSceneNode_void_CSceneNode_ev_bool_NoVirtual(this.NativeObject, object.Equals(node, null) ? IntPtr.Zero : node.NativeObject, Convert.ToByte(autoTrack));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__notifyAutotrackingSceneNode_void_CSceneNode_ev_bool_Function(IntPtr node, bool autoTrack)
				{
					EarthView.World.Graphic.SceneNode csobj_node = new EarthView.World.Graphic.SceneNode(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_node.BindNativeObject(node,"CSceneNode");
					csobj_node.Delegate = true;
					IClassFactory csobj_nodeClassFactory = GlobalClassFactoryMap.Get(csobj_node.GetCppInstanceTypeName());
					if (csobj_nodeClassFactory != null)
					{
						csobj_node.Delegate = true;
						csobj_node = csobj_nodeClassFactory.Create() as EarthView.World.Graphic.SceneNode;
						csobj_node.BindNativeObject(node, "CSceneNode");
						csobj_node.Delegate = true;
					}
					
					_notifyAutotrackingSceneNode(csobj_node, autoTrack);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__notifyAutotrackingSceneNode_void_CSceneNode_ev_bool(IntPtr pNativeObject, IntPtr node, byte autoTrack);

				/// <summary>
				/// 通知场景管理器存在某个节点正被跟踪
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void _notifyAutotrackingSceneNode(EarthView.World.Graphic.SceneNode node, bool autoTrack)
				{
					EarthView_World_Graphic_CSceneManager__notifyAutotrackingSceneNode_void_CSceneNode_ev_bool(this.NativeObject, object.Equals(node, null) ? IntPtr.Zero : node.NativeObject, Convert.ToByte(autoTrack));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createAABBQuery_CallBack_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_ev_uint32(IntPtr box, uint mask);

				protected createAABBQuery_CallBack_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_ev_uint32 m_createAABBQuery_CallBack_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createAABBQuery_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_ev_uint32_NoVirtual(IntPtr pNativeObject, IntPtr box, uint mask);

				/// <summary>
				/// 创建包围盒查询对象
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.AxisAlignedBoxSceneQuery CreateAABBQuery_NoVirtual(EarthView.World.Spatial.Math.AxisAlignedBox box, uint mask)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createAABBQuery_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_ev_uint32_NoVirtual(this.NativeObject, object.Equals(box, null) ? IntPtr.Zero : box.NativeObject, mask);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.AxisAlignedBoxSceneQuery csObj = new EarthView.World.Graphic.AxisAlignedBoxSceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CAxisAlignedBoxSceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.AxisAlignedBoxSceneQuery;
						csObj.BindNativeObject(__ptr, "CAxisAlignedBoxSceneQuery");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createAABBQuery_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_ev_uint32_Function(IntPtr box, uint mask)
				{
					EarthView.World.Spatial.Math.AxisAlignedBox csobj_box = new EarthView.World.Spatial.Math.AxisAlignedBox(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_box.BindNativeObject(box,"CAxisAlignedBox");
					csobj_box.Delegate = true;
					IClassFactory csobj_boxClassFactory = GlobalClassFactoryMap.Get(csobj_box.GetCppInstanceTypeName());
					if (csobj_boxClassFactory != null)
					{
						csobj_box.Delegate = true;
						csobj_box = csobj_boxClassFactory.Create() as EarthView.World.Spatial.Math.AxisAlignedBox;
						csobj_box.BindNativeObject(box, "CAxisAlignedBox");
						csobj_box.Delegate = true;
					}
					
					EarthView.World.Graphic.AxisAlignedBoxSceneQuery csret=CreateAABBQuery(csobj_box, mask);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createAABBQuery_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_ev_uint32(IntPtr pNativeObject, IntPtr box, uint mask);

				/// <summary>
				/// 创建包围盒查询对象
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.AxisAlignedBoxSceneQuery CreateAABBQuery(EarthView.World.Spatial.Math.AxisAlignedBox box, uint mask)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createAABBQuery_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_ev_uint32(this.NativeObject, object.Equals(box, null) ? IntPtr.Zero : box.NativeObject, mask);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.AxisAlignedBoxSceneQuery csObj = new EarthView.World.Graphic.AxisAlignedBoxSceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CAxisAlignedBoxSceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.AxisAlignedBoxSceneQuery;
						csObj.BindNativeObject(__ptr, "CAxisAlignedBoxSceneQuery");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createAABBQuery_CallBack_CAxisAlignedBoxSceneQuery_CAxisAlignedBox(IntPtr box);

				protected createAABBQuery_CallBack_CAxisAlignedBoxSceneQuery_CAxisAlignedBox m_createAABBQuery_CallBack_CAxisAlignedBoxSceneQuery_CAxisAlignedBox;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createAABBQuery_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_NoVirtual(IntPtr pNativeObject, IntPtr box);

				public virtual EarthView.World.Graphic.AxisAlignedBoxSceneQuery CreateAABBQuery_NoVirtual(EarthView.World.Spatial.Math.AxisAlignedBox box)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createAABBQuery_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_NoVirtual(this.NativeObject, object.Equals(box, null) ? IntPtr.Zero : box.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.AxisAlignedBoxSceneQuery csObj = new EarthView.World.Graphic.AxisAlignedBoxSceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CAxisAlignedBoxSceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.AxisAlignedBoxSceneQuery;
						csObj.BindNativeObject(__ptr, "CAxisAlignedBoxSceneQuery");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createAABBQuery_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_Function(IntPtr box)
				{
					EarthView.World.Spatial.Math.AxisAlignedBox csobj_box = new EarthView.World.Spatial.Math.AxisAlignedBox(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_box.BindNativeObject(box,"CAxisAlignedBox");
					csobj_box.Delegate = true;
					IClassFactory csobj_boxClassFactory = GlobalClassFactoryMap.Get(csobj_box.GetCppInstanceTypeName());
					if (csobj_boxClassFactory != null)
					{
						csobj_box.Delegate = true;
						csobj_box = csobj_boxClassFactory.Create() as EarthView.World.Spatial.Math.AxisAlignedBox;
						csobj_box.BindNativeObject(box, "CAxisAlignedBox");
						csobj_box.Delegate = true;
					}
					
					EarthView.World.Graphic.AxisAlignedBoxSceneQuery csret=CreateAABBQuery(csobj_box);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createAABBQuery_CAxisAlignedBoxSceneQuery_CAxisAlignedBox(IntPtr pNativeObject, IntPtr box);

				public virtual EarthView.World.Graphic.AxisAlignedBoxSceneQuery CreateAABBQuery(EarthView.World.Spatial.Math.AxisAlignedBox box)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createAABBQuery_CAxisAlignedBoxSceneQuery_CAxisAlignedBox(this.NativeObject, object.Equals(box, null) ? IntPtr.Zero : box.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.AxisAlignedBoxSceneQuery csObj = new EarthView.World.Graphic.AxisAlignedBoxSceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CAxisAlignedBoxSceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.AxisAlignedBoxSceneQuery;
						csObj.BindNativeObject(__ptr, "CAxisAlignedBoxSceneQuery");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createSphereQuery_CallBack_CSphereSceneQuery_CSphere_ev_uint32(IntPtr sphere, uint mask);

				protected createSphereQuery_CallBack_CSphereSceneQuery_CSphere_ev_uint32 m_createSphereQuery_CallBack_CSphereSceneQuery_CSphere_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createSphereQuery_CSphereSceneQuery_CSphere_ev_uint32_NoVirtual(IntPtr pNativeObject, IntPtr sphere, uint mask);

				/// <summary>
				/// 创建球查询对象
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.SphereSceneQuery CreateSphereQuery_NoVirtual(EarthView.World.Spatial.Math.Sphere sphere, uint mask)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createSphereQuery_CSphereSceneQuery_CSphere_ev_uint32_NoVirtual(this.NativeObject, object.Equals(sphere, null) ? IntPtr.Zero : sphere.NativeObject, mask);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SphereSceneQuery csObj = new EarthView.World.Graphic.SphereSceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSphereSceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SphereSceneQuery;
						csObj.BindNativeObject(__ptr, "CSphereSceneQuery");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createSphereQuery_CSphereSceneQuery_CSphere_ev_uint32_Function(IntPtr sphere, uint mask)
				{
					EarthView.World.Spatial.Math.Sphere csobj_sphere = new EarthView.World.Spatial.Math.Sphere(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_sphere.BindNativeObject(sphere,"CSphere");
					csobj_sphere.Delegate = true;
					IClassFactory csobj_sphereClassFactory = GlobalClassFactoryMap.Get(csobj_sphere.GetCppInstanceTypeName());
					if (csobj_sphereClassFactory != null)
					{
						csobj_sphere.Delegate = true;
						csobj_sphere = csobj_sphereClassFactory.Create() as EarthView.World.Spatial.Math.Sphere;
						csobj_sphere.BindNativeObject(sphere, "CSphere");
						csobj_sphere.Delegate = true;
					}
					
					EarthView.World.Graphic.SphereSceneQuery csret=CreateSphereQuery(csobj_sphere, mask);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createSphereQuery_CSphereSceneQuery_CSphere_ev_uint32(IntPtr pNativeObject, IntPtr sphere, uint mask);

				/// <summary>
				/// 创建球查询对象
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.SphereSceneQuery CreateSphereQuery(EarthView.World.Spatial.Math.Sphere sphere, uint mask)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createSphereQuery_CSphereSceneQuery_CSphere_ev_uint32(this.NativeObject, object.Equals(sphere, null) ? IntPtr.Zero : sphere.NativeObject, mask);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SphereSceneQuery csObj = new EarthView.World.Graphic.SphereSceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSphereSceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SphereSceneQuery;
						csObj.BindNativeObject(__ptr, "CSphereSceneQuery");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createSphereQuery_CallBack_CSphereSceneQuery_CSphere(IntPtr sphere);

				protected createSphereQuery_CallBack_CSphereSceneQuery_CSphere m_createSphereQuery_CallBack_CSphereSceneQuery_CSphere;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createSphereQuery_CSphereSceneQuery_CSphere_NoVirtual(IntPtr pNativeObject, IntPtr sphere);

				public virtual EarthView.World.Graphic.SphereSceneQuery CreateSphereQuery_NoVirtual(EarthView.World.Spatial.Math.Sphere sphere)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createSphereQuery_CSphereSceneQuery_CSphere_NoVirtual(this.NativeObject, object.Equals(sphere, null) ? IntPtr.Zero : sphere.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SphereSceneQuery csObj = new EarthView.World.Graphic.SphereSceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSphereSceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SphereSceneQuery;
						csObj.BindNativeObject(__ptr, "CSphereSceneQuery");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createSphereQuery_CSphereSceneQuery_CSphere_Function(IntPtr sphere)
				{
					EarthView.World.Spatial.Math.Sphere csobj_sphere = new EarthView.World.Spatial.Math.Sphere(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_sphere.BindNativeObject(sphere,"CSphere");
					csobj_sphere.Delegate = true;
					IClassFactory csobj_sphereClassFactory = GlobalClassFactoryMap.Get(csobj_sphere.GetCppInstanceTypeName());
					if (csobj_sphereClassFactory != null)
					{
						csobj_sphere.Delegate = true;
						csobj_sphere = csobj_sphereClassFactory.Create() as EarthView.World.Spatial.Math.Sphere;
						csobj_sphere.BindNativeObject(sphere, "CSphere");
						csobj_sphere.Delegate = true;
					}
					
					EarthView.World.Graphic.SphereSceneQuery csret=CreateSphereQuery(csobj_sphere);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createSphereQuery_CSphereSceneQuery_CSphere(IntPtr pNativeObject, IntPtr sphere);

				public virtual EarthView.World.Graphic.SphereSceneQuery CreateSphereQuery(EarthView.World.Spatial.Math.Sphere sphere)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createSphereQuery_CSphereSceneQuery_CSphere(this.NativeObject, object.Equals(sphere, null) ? IntPtr.Zero : sphere.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SphereSceneQuery csObj = new EarthView.World.Graphic.SphereSceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSphereSceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SphereSceneQuery;
						csObj.BindNativeObject(__ptr, "CSphereSceneQuery");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createPlaneBoundedVolumeQuery_CallBack_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_ev_uint32(IntPtr volumes, uint mask);

				protected createPlaneBoundedVolumeQuery_CallBack_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_ev_uint32 m_createPlaneBoundedVolumeQuery_CallBack_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createPlaneBoundedVolumeQuery_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_ev_uint32_NoVirtual(IntPtr pNativeObject, IntPtr volumes, uint mask);

				/// <summary>
				/// 创建平面包围体查询对象
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery CreatePlaneBoundedVolumeQuery_NoVirtual(EarthView.World.Spatial.Math.PlaneBoundedVolumeList volumes, uint mask)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createPlaneBoundedVolumeQuery_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_ev_uint32_NoVirtual(this.NativeObject, object.Equals(volumes, null) ? IntPtr.Zero : volumes.NativeObject, mask);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery csObj = new EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CPlaneBoundedVolumeListSceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery;
						csObj.BindNativeObject(__ptr, "CPlaneBoundedVolumeListSceneQuery");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createPlaneBoundedVolumeQuery_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_ev_uint32_Function(IntPtr volumes, uint mask)
				{
					EarthView.World.Spatial.Math.PlaneBoundedVolumeList csobj_volumes = new EarthView.World.Spatial.Math.PlaneBoundedVolumeList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_volumes.BindNativeObject(volumes,"PlaneBoundedVolumeList");
					csobj_volumes.Delegate = true;
					IClassFactory csobj_volumesClassFactory = GlobalClassFactoryMap.Get(csobj_volumes.GetCppInstanceTypeName());
					if (csobj_volumesClassFactory != null)
					{
						csobj_volumes.Delegate = true;
						csobj_volumes = csobj_volumesClassFactory.Create() as EarthView.World.Spatial.Math.PlaneBoundedVolumeList;
						csobj_volumes.BindNativeObject(volumes, "PlaneBoundedVolumeList");
						csobj_volumes.Delegate = true;
					}
					
					EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery csret=CreatePlaneBoundedVolumeQuery(csobj_volumes, mask);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createPlaneBoundedVolumeQuery_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_ev_uint32(IntPtr pNativeObject, IntPtr volumes, uint mask);

				/// <summary>
				/// 创建平面包围体查询对象
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery CreatePlaneBoundedVolumeQuery(EarthView.World.Spatial.Math.PlaneBoundedVolumeList volumes, uint mask)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createPlaneBoundedVolumeQuery_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_ev_uint32(this.NativeObject, object.Equals(volumes, null) ? IntPtr.Zero : volumes.NativeObject, mask);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery csObj = new EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CPlaneBoundedVolumeListSceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery;
						csObj.BindNativeObject(__ptr, "CPlaneBoundedVolumeListSceneQuery");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createPlaneBoundedVolumeQuery_CallBack_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList(IntPtr volumes);

				protected createPlaneBoundedVolumeQuery_CallBack_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList m_createPlaneBoundedVolumeQuery_CallBack_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createPlaneBoundedVolumeQuery_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_NoVirtual(IntPtr pNativeObject, IntPtr volumes);

				public virtual EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery CreatePlaneBoundedVolumeQuery_NoVirtual(EarthView.World.Spatial.Math.PlaneBoundedVolumeList volumes)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createPlaneBoundedVolumeQuery_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_NoVirtual(this.NativeObject, object.Equals(volumes, null) ? IntPtr.Zero : volumes.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery csObj = new EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CPlaneBoundedVolumeListSceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery;
						csObj.BindNativeObject(__ptr, "CPlaneBoundedVolumeListSceneQuery");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createPlaneBoundedVolumeQuery_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_Function(IntPtr volumes)
				{
					EarthView.World.Spatial.Math.PlaneBoundedVolumeList csobj_volumes = new EarthView.World.Spatial.Math.PlaneBoundedVolumeList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_volumes.BindNativeObject(volumes,"PlaneBoundedVolumeList");
					csobj_volumes.Delegate = true;
					IClassFactory csobj_volumesClassFactory = GlobalClassFactoryMap.Get(csobj_volumes.GetCppInstanceTypeName());
					if (csobj_volumesClassFactory != null)
					{
						csobj_volumes.Delegate = true;
						csobj_volumes = csobj_volumesClassFactory.Create() as EarthView.World.Spatial.Math.PlaneBoundedVolumeList;
						csobj_volumes.BindNativeObject(volumes, "PlaneBoundedVolumeList");
						csobj_volumes.Delegate = true;
					}
					
					EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery csret=CreatePlaneBoundedVolumeQuery(csobj_volumes);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createPlaneBoundedVolumeQuery_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList(IntPtr pNativeObject, IntPtr volumes);

				public virtual EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery CreatePlaneBoundedVolumeQuery(EarthView.World.Spatial.Math.PlaneBoundedVolumeList volumes)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createPlaneBoundedVolumeQuery_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList(this.NativeObject, object.Equals(volumes, null) ? IntPtr.Zero : volumes.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery csObj = new EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CPlaneBoundedVolumeListSceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.PlaneBoundedVolumeListSceneQuery;
						csObj.BindNativeObject(__ptr, "CPlaneBoundedVolumeListSceneQuery");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createRayQuery_CallBack_CRaySceneQuery_CRay_ev_uint32(IntPtr ray, uint mask);

				protected createRayQuery_CallBack_CRaySceneQuery_CRay_ev_uint32 m_createRayQuery_CallBack_CRaySceneQuery_CRay_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createRayQuery_CRaySceneQuery_CRay_ev_uint32_NoVirtual(IntPtr pNativeObject, IntPtr ray, uint mask);

				/// <summary>
				/// 创建射线查询对象
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RaySceneQuery CreateRayQuery_NoVirtual(EarthView.World.Spatial.Math.Ray ray, uint mask)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createRayQuery_CRaySceneQuery_CRay_ev_uint32_NoVirtual(this.NativeObject, object.Equals(ray, null) ? IntPtr.Zero : ray.NativeObject, mask);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RaySceneQuery csObj = new EarthView.World.Graphic.RaySceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRaySceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RaySceneQuery;
						csObj.BindNativeObject(__ptr, "CRaySceneQuery");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createRayQuery_CRaySceneQuery_CRay_ev_uint32_Function(IntPtr ray, uint mask)
				{
					EarthView.World.Spatial.Math.Ray csobj_ray = new EarthView.World.Spatial.Math.Ray(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_ray.BindNativeObject(ray,"CRay");
					csobj_ray.Delegate = true;
					IClassFactory csobj_rayClassFactory = GlobalClassFactoryMap.Get(csobj_ray.GetCppInstanceTypeName());
					if (csobj_rayClassFactory != null)
					{
						csobj_ray.Delegate = true;
						csobj_ray = csobj_rayClassFactory.Create() as EarthView.World.Spatial.Math.Ray;
						csobj_ray.BindNativeObject(ray, "CRay");
						csobj_ray.Delegate = true;
					}
					
					EarthView.World.Graphic.RaySceneQuery csret=CreateRayQuery(csobj_ray, mask);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createRayQuery_CRaySceneQuery_CRay_ev_uint32(IntPtr pNativeObject, IntPtr ray, uint mask);

				/// <summary>
				/// 创建射线查询对象
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.RaySceneQuery CreateRayQuery(EarthView.World.Spatial.Math.Ray ray, uint mask)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createRayQuery_CRaySceneQuery_CRay_ev_uint32(this.NativeObject, object.Equals(ray, null) ? IntPtr.Zero : ray.NativeObject, mask);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RaySceneQuery csObj = new EarthView.World.Graphic.RaySceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRaySceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RaySceneQuery;
						csObj.BindNativeObject(__ptr, "CRaySceneQuery");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createRayQuery_CallBack_CRaySceneQuery_CRay(IntPtr ray);

				protected createRayQuery_CallBack_CRaySceneQuery_CRay m_createRayQuery_CallBack_CRaySceneQuery_CRay;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createRayQuery_CRaySceneQuery_CRay_NoVirtual(IntPtr pNativeObject, IntPtr ray);

				public virtual EarthView.World.Graphic.RaySceneQuery CreateRayQuery_NoVirtual(EarthView.World.Spatial.Math.Ray ray)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createRayQuery_CRaySceneQuery_CRay_NoVirtual(this.NativeObject, object.Equals(ray, null) ? IntPtr.Zero : ray.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RaySceneQuery csObj = new EarthView.World.Graphic.RaySceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRaySceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RaySceneQuery;
						csObj.BindNativeObject(__ptr, "CRaySceneQuery");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createRayQuery_CRaySceneQuery_CRay_Function(IntPtr ray)
				{
					EarthView.World.Spatial.Math.Ray csobj_ray = new EarthView.World.Spatial.Math.Ray(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_ray.BindNativeObject(ray,"CRay");
					csobj_ray.Delegate = true;
					IClassFactory csobj_rayClassFactory = GlobalClassFactoryMap.Get(csobj_ray.GetCppInstanceTypeName());
					if (csobj_rayClassFactory != null)
					{
						csobj_ray.Delegate = true;
						csobj_ray = csobj_rayClassFactory.Create() as EarthView.World.Spatial.Math.Ray;
						csobj_ray.BindNativeObject(ray, "CRay");
						csobj_ray.Delegate = true;
					}
					
					EarthView.World.Graphic.RaySceneQuery csret=CreateRayQuery(csobj_ray);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createRayQuery_CRaySceneQuery_CRay(IntPtr pNativeObject, IntPtr ray);

				public virtual EarthView.World.Graphic.RaySceneQuery CreateRayQuery(EarthView.World.Spatial.Math.Ray ray)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createRayQuery_CRaySceneQuery_CRay(this.NativeObject, object.Equals(ray, null) ? IntPtr.Zero : ray.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RaySceneQuery csObj = new EarthView.World.Graphic.RaySceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRaySceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RaySceneQuery;
						csObj.BindNativeObject(__ptr, "CRaySceneQuery");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createIntersectionQuery_CallBack_CIntersectionSceneQuery_ev_uint32(uint mask);

				protected createIntersectionQuery_CallBack_CIntersectionSceneQuery_ev_uint32 m_createIntersectionQuery_CallBack_CIntersectionSceneQuery_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createIntersectionQuery_CIntersectionSceneQuery_ev_uint32_NoVirtual(IntPtr pNativeObject, uint mask);

				/// <summary>
				/// 创建相交查询对象
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.IntersectionSceneQuery CreateIntersectionQuery_NoVirtual(uint mask)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createIntersectionQuery_CIntersectionSceneQuery_ev_uint32_NoVirtual(this.NativeObject, mask);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.IntersectionSceneQuery csObj = new EarthView.World.Graphic.IntersectionSceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CIntersectionSceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.IntersectionSceneQuery;
						csObj.BindNativeObject(__ptr, "CIntersectionSceneQuery");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createIntersectionQuery_CIntersectionSceneQuery_ev_uint32_Function(uint mask)
				{
					EarthView.World.Graphic.IntersectionSceneQuery csret=CreateIntersectionQuery(mask);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createIntersectionQuery_CIntersectionSceneQuery_ev_uint32(IntPtr pNativeObject, uint mask);

				/// <summary>
				/// 创建相交查询对象
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.IntersectionSceneQuery CreateIntersectionQuery(uint mask)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createIntersectionQuery_CIntersectionSceneQuery_ev_uint32(this.NativeObject, mask);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.IntersectionSceneQuery csObj = new EarthView.World.Graphic.IntersectionSceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CIntersectionSceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.IntersectionSceneQuery;
						csObj.BindNativeObject(__ptr, "CIntersectionSceneQuery");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createIntersectionQuery_CallBack_CIntersectionSceneQuery();

				protected createIntersectionQuery_CallBack_CIntersectionSceneQuery m_createIntersectionQuery_CallBack_CIntersectionSceneQuery;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createIntersectionQuery_CIntersectionSceneQuery_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.IntersectionSceneQuery CreateIntersectionQuery_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createIntersectionQuery_CIntersectionSceneQuery_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.IntersectionSceneQuery csObj = new EarthView.World.Graphic.IntersectionSceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CIntersectionSceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.IntersectionSceneQuery;
						csObj.BindNativeObject(__ptr, "CIntersectionSceneQuery");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createIntersectionQuery_CIntersectionSceneQuery_Function()
				{
					EarthView.World.Graphic.IntersectionSceneQuery csret=CreateIntersectionQuery();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createIntersectionQuery_CIntersectionSceneQuery(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.IntersectionSceneQuery CreateIntersectionQuery()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createIntersectionQuery_CIntersectionSceneQuery(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.IntersectionSceneQuery csObj = new EarthView.World.Graphic.IntersectionSceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CIntersectionSceneQuery");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.IntersectionSceneQuery;
						csObj.BindNativeObject(__ptr, "CIntersectionSceneQuery");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyQuery_CallBack_void_CSceneQuery(IntPtr query);

				protected destroyQuery_CallBack_void_CSceneQuery m_destroyQuery_CallBack_void_CSceneQuery;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyQuery_void_CSceneQuery_NoVirtual(IntPtr pNativeObject, IntPtr query);

				/// <summary>
				/// 销毁查询对象
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>				
				public virtual void DestroyQuery_NoVirtual(EarthView.World.Graphic.SceneQuery query)
				{
					EarthView_World_Graphic_CSceneManager_destroyQuery_void_CSceneQuery_NoVirtual(this.NativeObject, object.Equals(query, null) ? IntPtr.Zero : query.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyQuery_void_CSceneQuery_Function(IntPtr query)
				{
					EarthView.World.Graphic.SceneQuery csobj_query = new EarthView.World.Graphic.SceneQuery(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_query.BindNativeObject(query,"CSceneQuery");
					csobj_query.Delegate = true;
					IClassFactory csobj_queryClassFactory = GlobalClassFactoryMap.Get(csobj_query.GetCppInstanceTypeName());
					if (csobj_queryClassFactory != null)
					{
						csobj_query.Delegate = true;
						csobj_query = csobj_queryClassFactory.Create() as EarthView.World.Graphic.SceneQuery;
						csobj_query.BindNativeObject(query, "CSceneQuery");
						csobj_query.Delegate = true;
					}
					
					DestroyQuery(csobj_query);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyQuery_void_CSceneQuery(IntPtr pNativeObject, IntPtr query);

				/// <summary>
				/// 销毁查询对象
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>				
				public virtual void DestroyQuery(EarthView.World.Graphic.SceneQuery query)
				{
					EarthView_World_Graphic_CSceneManager_destroyQuery_void_CSceneQuery(this.NativeObject, object.Equals(query, null) ? IntPtr.Zero : query.NativeObject);
					
				}

				public class CameraIteratorPair : EarthView.World.Core.BaseObject
				{
					private string firstField;
					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr Get_EarthView_World_Graphic_CSceneManager_CameraIteratorPair_first(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_CameraIteratorPair_first( IntPtr pObject, string value );

					public 					string First
					{
						get
						{
							IntPtr __ptr = Get_EarthView_World_Graphic_CSceneManager_CameraIteratorPair_first(this.NativeObject);
							
							string ret = Marshal.PtrToStringAnsi(__ptr);
							ClassFactory.FreeString(ref __ptr);
							return ret;
							
						}

						set
						{
							firstField = value;
							Set_EarthView_World_Graphic_CSceneManager_CameraIteratorPair_first( this.NativeObject,value );
						}
					}

					private EarthView.World.Graphic.Camera secondField;
					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr Get_EarthView_World_Graphic_CSceneManager_CameraIteratorPair_second(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_CameraIteratorPair_second( IntPtr pObject, IntPtr value );

					public 					EarthView.World.Graphic.Camera Second
					{
						get
						{
							IntPtr __ptr = Get_EarthView_World_Graphic_CSceneManager_CameraIteratorPair_second(this.NativeObject);
							
							if(__ptr==IntPtr.Zero)
							{
							return null;
							}
							if(!object.Equals(secondField, null)){
								secondField.NativeObject = __ptr;
								return secondField;
							}
							EarthView.World.Graphic.Camera csObj = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
							csObj.BindNativeObject(__ptr, "CCamera");
							csObj.Delegate = true;
							IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
							if (csObjClassFactory != null)
							{
								csObj.Delegate = true;
								csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Camera;
								csObj.BindNativeObject(__ptr, "CCamera");
								csObj.Delegate = true;
							}
							return csObj;
							
						}

						set
						{
							secondField = value;
							Set_EarthView_World_Graphic_CSceneManager_CameraIteratorPair_second( this.NativeObject,object.Equals(value, null) ? IntPtr.Zero : value.NativeObject );
						}
					}

					public CameraIteratorPair() : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						Create("CameraIteratorPair",  null);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}
					#if DEBUG 
						#if Windows 
							private static bool bLoadCameraIteratorPair = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadCameraIteratorPair = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadCameraIteratorPair = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadCameraIteratorPair = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadCameraIteratorPair = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadCameraIteratorPair = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadCameraIteratorPair = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadCameraIteratorPair = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadCameraIteratorPair = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadCameraIteratorPair = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadCameraIteratorPair = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadCameraIteratorPair = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::CameraIteratorPair", new CameraIteratorPairClassFactory());

					public CameraIteratorPair(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
						}
					}
					public static CameraIteratorPair FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						CameraIteratorPair obj = baseObj as  CameraIteratorPair;
						if (object.Equals(obj, null))
						{
							obj = new CameraIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "CameraIteratorPair");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class CameraIteratorPairClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						CameraIteratorPair emptyInstance = new CameraIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				public class CameraIterator : EarthView.World.Core.BaseObject
				{
					public CameraIterator(ref EarthView.World.Graphic.SceneManager.CameraList lst) : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						NameValuePairList list = new NameValuePairList();
						BasePtr valuelst = new BasePtr(lst);
						list.Add("lst", valuelst.PtrVal);
						Create("CameraIterator", list);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}
					public CameraIterator(EarthView.World.Graphic.SceneManager.CameraIterator other) : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						NameValuePairList list = new NameValuePairList();
						BasePtr valueother = new BasePtr(other);
						list.Add("other", valueother.PtrVal);
						Create("CameraIterator", list);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_CameraIterator_hasMoreElements_ev_bool(IntPtr pNativeObject);

					public bool HasMoreElements()
					{
						byte ret=EarthView_World_Graphic_CSceneManager_CameraIterator_hasMoreElements_ev_bool(this.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_CameraIterator_moveNext_void(IntPtr pNativeObject);

					public void MoveNext()
					{
						EarthView_World_Graphic_CSceneManager_CameraIterator_moveNext_void(this.NativeObject);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern ushort EarthView_World_Graphic_CSceneManager_CameraIterator_nextKey_ev_uint16(IntPtr pNativeObject);

					public ushort NextKey()
					{
						ushort ret=EarthView_World_Graphic_CSceneManager_CameraIterator_nextKey_ev_uint16(this.NativeObject);
						
						return ret;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_CameraIterator_nextValue_CCamera(IntPtr pNativeObject);

					public EarthView.World.Graphic.Camera NextValue()
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_CameraIterator_nextValue_CCamera(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.Camera csObj = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CCamera");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Camera;
							csObj.BindNativeObject(__ptr, "CCamera");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr[] EarthView_World_Graphic_CSceneManager_CameraIterator_nextValuePtr_CCamera(IntPtr pNativeObject);

					public EarthView.World.Graphic.Camera[] NextValuePtr()
					{
						IntPtr[] ret=EarthView_World_Graphic_CSceneManager_CameraIterator_nextValuePtr_CCamera(this.NativeObject);
						
						EarthView.World.Graphic.Camera[] csObjs=new EarthView.World.Graphic.Camera[ret.Length];
						for (int i = 0; i < ret.Length; i++)
						{
						EarthView.World.Graphic.Camera csObj = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(ret[i], "CCamera");
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Camera;
							csObj.BindNativeObject(ret[i], "CCamera");
						}
						csObjs[i]=csObj;
						}
						return csObjs;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_CameraIterator_next_CCamera(IntPtr pNativeObject);

					public EarthView.World.Graphic.Camera Next()
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_CameraIterator_next_CCamera(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.Camera csObj = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CCamera");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Camera;
							csObj.BindNativeObject(__ptr, "CCamera");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_CameraIterator_getBegin_CameraIteratorPair(IntPtr pNativeObject);

					public EarthView.World.Graphic.SceneManager.CameraIteratorPair GetBegin()
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_CameraIterator_getBegin_CameraIteratorPair(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.SceneManager.CameraIteratorPair csObj = new EarthView.World.Graphic.SceneManager.CameraIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CameraIteratorPair");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.CameraIteratorPair;
							csObj.BindNativeObject(__ptr, "CameraIteratorPair");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_CameraIterator_getEnd_CameraIteratorPair(IntPtr pNativeObject);

					public EarthView.World.Graphic.SceneManager.CameraIteratorPair GetEnd()
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_CameraIterator_getEnd_CameraIteratorPair(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.SceneManager.CameraIteratorPair csObj = new EarthView.World.Graphic.SceneManager.CameraIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CameraIteratorPair");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.CameraIteratorPair;
							csObj.BindNativeObject(__ptr, "CameraIteratorPair");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_CameraIterator_getCurrent_CameraIteratorPair(IntPtr pNativeObject);

					public EarthView.World.Graphic.SceneManager.CameraIteratorPair GetCurrent()
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_CameraIterator_getCurrent_CameraIteratorPair(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.SceneManager.CameraIteratorPair csObj = new EarthView.World.Graphic.SceneManager.CameraIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CameraIteratorPair");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.CameraIteratorPair;
							csObj.BindNativeObject(__ptr, "CameraIteratorPair");
							csObj.Delegate = true;
						}
						return csObj;
						
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadCameraIterator = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadCameraIterator = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadCameraIterator = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadCameraIterator = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadCameraIterator = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadCameraIterator = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadCameraIterator = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadCameraIterator = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadCameraIterator = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadCameraIterator = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadCameraIterator = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadCameraIterator = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::CameraIterator", new CameraIteratorClassFactory());

					public CameraIterator(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
						}
					}
					public static CameraIterator FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						CameraIterator obj = baseObj as  CameraIterator;
						if (object.Equals(obj, null))
						{
							obj = new CameraIterator(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "CameraIterator");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class CameraIteratorClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						CameraIterator emptyInstance = new CameraIterator(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				public class AnimationIteratorPair : EarthView.World.Core.BaseObject
				{
					public AnimationIteratorPair() : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						Create("AnimationIteratorPair",  null);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}
					private string firstField;
					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr Get_EarthView_World_Graphic_CSceneManager_AnimationIteratorPair_first(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_AnimationIteratorPair_first( IntPtr pObject, string value );

					public 					string First
					{
						get
						{
							IntPtr __ptr = Get_EarthView_World_Graphic_CSceneManager_AnimationIteratorPair_first(this.NativeObject);
							
							string ret = Marshal.PtrToStringAnsi(__ptr);
							ClassFactory.FreeString(ref __ptr);
							return ret;
							
						}

						set
						{
							firstField = value;
							Set_EarthView_World_Graphic_CSceneManager_AnimationIteratorPair_first( this.NativeObject,value );
						}
					}

					private EarthView.World.Graphic.Animation secondField;
					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr Get_EarthView_World_Graphic_CSceneManager_AnimationIteratorPair_second(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_AnimationIteratorPair_second( IntPtr pObject, IntPtr value );

					public 					EarthView.World.Graphic.Animation Second
					{
						get
						{
							IntPtr __ptr = Get_EarthView_World_Graphic_CSceneManager_AnimationIteratorPair_second(this.NativeObject);
							
							if(__ptr==IntPtr.Zero)
							{
							return null;
							}
							if(!object.Equals(secondField, null)){
								secondField.NativeObject = __ptr;
								return secondField;
							}
							EarthView.World.Graphic.Animation csObj = new EarthView.World.Graphic.Animation(CreatedWhenConstruct.CWC_NotToCreate);
							csObj.BindNativeObject(__ptr, "CAnimation");
							csObj.Delegate = true;
							IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
							if (csObjClassFactory != null)
							{
								csObj.Delegate = true;
								csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Animation;
								csObj.BindNativeObject(__ptr, "CAnimation");
								csObj.Delegate = true;
							}
							return csObj;
							
						}

						set
						{
							secondField = value;
							Set_EarthView_World_Graphic_CSceneManager_AnimationIteratorPair_second( this.NativeObject,object.Equals(value, null) ? IntPtr.Zero : value.NativeObject );
						}
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadAnimationIteratorPair = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadAnimationIteratorPair = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadAnimationIteratorPair = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadAnimationIteratorPair = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadAnimationIteratorPair = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadAnimationIteratorPair = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadAnimationIteratorPair = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadAnimationIteratorPair = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadAnimationIteratorPair = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadAnimationIteratorPair = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadAnimationIteratorPair = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadAnimationIteratorPair = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::AnimationIteratorPair", new AnimationIteratorPairClassFactory());

					public AnimationIteratorPair(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
						}
					}
					public static AnimationIteratorPair FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						AnimationIteratorPair obj = baseObj as  AnimationIteratorPair;
						if (object.Equals(obj, null))
						{
							obj = new AnimationIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "AnimationIteratorPair");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class AnimationIteratorPairClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						AnimationIteratorPair emptyInstance = new AnimationIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				public class AnimationIterator : EarthView.World.Core.BaseObject
				{
					public AnimationIterator(ref EarthView.World.Graphic.SceneManager.AnimationList lst) : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						NameValuePairList list = new NameValuePairList();
						BasePtr valuelst = new BasePtr(lst);
						list.Add("lst", valuelst.PtrVal);
						Create("AnimationIterator", list);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}
					public AnimationIterator(EarthView.World.Graphic.SceneManager.AnimationIterator other) : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						NameValuePairList list = new NameValuePairList();
						BasePtr valueother = new BasePtr(other);
						list.Add("other", valueother.PtrVal);
						Create("AnimationIterator", list);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_AnimationIterator_hasMoreElements_ev_bool(IntPtr pNativeObject);

					public bool HasMoreElements()
					{
						byte ret=EarthView_World_Graphic_CSceneManager_AnimationIterator_hasMoreElements_ev_bool(this.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_AnimationIterator_moveNext_void(IntPtr pNativeObject);

					public void MoveNext()
					{
						EarthView_World_Graphic_CSceneManager_AnimationIterator_moveNext_void(this.NativeObject);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern ushort EarthView_World_Graphic_CSceneManager_AnimationIterator_nextKey_ev_uint16(IntPtr pNativeObject);

					public ushort NextKey()
					{
						ushort ret=EarthView_World_Graphic_CSceneManager_AnimationIterator_nextKey_ev_uint16(this.NativeObject);
						
						return ret;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_AnimationIterator_nextValue_CAnimation(IntPtr pNativeObject);

					public EarthView.World.Graphic.Animation NextValue()
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_AnimationIterator_nextValue_CAnimation(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.Animation csObj = new EarthView.World.Graphic.Animation(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CAnimation");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Animation;
							csObj.BindNativeObject(__ptr, "CAnimation");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr[] EarthView_World_Graphic_CSceneManager_AnimationIterator_nextValuePtr_CAnimation(IntPtr pNativeObject);

					public EarthView.World.Graphic.Animation[] NextValuePtr()
					{
						IntPtr[] ret=EarthView_World_Graphic_CSceneManager_AnimationIterator_nextValuePtr_CAnimation(this.NativeObject);
						
						EarthView.World.Graphic.Animation[] csObjs=new EarthView.World.Graphic.Animation[ret.Length];
						for (int i = 0; i < ret.Length; i++)
						{
						EarthView.World.Graphic.Animation csObj = new EarthView.World.Graphic.Animation(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(ret[i], "CAnimation");
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Animation;
							csObj.BindNativeObject(ret[i], "CAnimation");
						}
						csObjs[i]=csObj;
						}
						return csObjs;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_AnimationIterator_next_CAnimation(IntPtr pNativeObject);

					public EarthView.World.Graphic.Animation Next()
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_AnimationIterator_next_CAnimation(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.Animation csObj = new EarthView.World.Graphic.Animation(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CAnimation");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Animation;
							csObj.BindNativeObject(__ptr, "CAnimation");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_AnimationIterator_getBegin_AnimationIteratorPair(IntPtr pNativeObject);

					public EarthView.World.Graphic.SceneManager.AnimationIteratorPair GetBegin()
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_AnimationIterator_getBegin_AnimationIteratorPair(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.SceneManager.AnimationIteratorPair csObj = new EarthView.World.Graphic.SceneManager.AnimationIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "AnimationIteratorPair");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.AnimationIteratorPair;
							csObj.BindNativeObject(__ptr, "AnimationIteratorPair");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_AnimationIterator_getEnd_AnimationIteratorPair(IntPtr pNativeObject);

					public EarthView.World.Graphic.SceneManager.AnimationIteratorPair GetEnd()
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_AnimationIterator_getEnd_AnimationIteratorPair(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.SceneManager.AnimationIteratorPair csObj = new EarthView.World.Graphic.SceneManager.AnimationIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "AnimationIteratorPair");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.AnimationIteratorPair;
							csObj.BindNativeObject(__ptr, "AnimationIteratorPair");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_AnimationIterator_getCurrent_AnimationIteratorPair(IntPtr pNativeObject);

					public EarthView.World.Graphic.SceneManager.AnimationIteratorPair GetCurrent()
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_AnimationIterator_getCurrent_AnimationIteratorPair(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.SceneManager.AnimationIteratorPair csObj = new EarthView.World.Graphic.SceneManager.AnimationIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "AnimationIteratorPair");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.AnimationIteratorPair;
							csObj.BindNativeObject(__ptr, "AnimationIteratorPair");
							csObj.Delegate = true;
						}
						return csObj;
						
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadAnimationIterator = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadAnimationIterator = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadAnimationIterator = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadAnimationIterator = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadAnimationIterator = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadAnimationIterator = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadAnimationIterator = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadAnimationIterator = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadAnimationIterator = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadAnimationIterator = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadAnimationIterator = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadAnimationIterator = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::AnimationIterator", new AnimationIteratorClassFactory());

					public AnimationIterator(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
						}
					}
					public static AnimationIterator FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						AnimationIterator obj = baseObj as  AnimationIterator;
						if (object.Equals(obj, null))
						{
							obj = new AnimationIterator(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "AnimationIterator");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class AnimationIteratorClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						AnimationIterator emptyInstance = new AnimationIterator(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getCameraIterator_CameraIterator(IntPtr pNativeObject);

				/// <summary>
				/// 获得相机迭代器
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public EarthView.World.Graphic.SceneManager.CameraIterator GetCameraIterator()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getCameraIterator_CameraIterator(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneManager.CameraIterator csObj = new EarthView.World.Graphic.SceneManager.CameraIterator(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CameraIterator");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.CameraIterator;
						csObj.BindNativeObject(__ptr, "CameraIterator");
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getCameras_CameraList(IntPtr pNativeObject);

				/// <summary>
				/// 获得相机列表
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public EarthView.World.Graphic.SceneManager.CameraList GetCameras()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getCameras_CameraList(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneManager.CameraList csObj = new EarthView.World.Graphic.SceneManager.CameraList(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CameraList");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.CameraList;
						csObj.BindNativeObject(__ptr, "CameraList");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getAnimationIterator_AnimationIterator(IntPtr pNativeObject);

				/// <summary>
				/// 获得节点动画迭代器
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public EarthView.World.Graphic.SceneManager.AnimationIterator GetAnimationIterator()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getAnimationIterator_AnimationIterator(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneManager.AnimationIterator csObj = new EarthView.World.Graphic.SceneManager.AnimationIterator(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "AnimationIterator");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.AnimationIterator;
						csObj.BindNativeObject(__ptr, "AnimationIterator");
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getAnimations_AnimationList(IntPtr pNativeObject);

				/// <summary>
				/// 获得节点动画列表
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public EarthView.World.Graphic.SceneManager.AnimationList GetAnimations()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getAnimations_AnimationList(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneManager.AnimationList csObj = new EarthView.World.Graphic.SceneManager.AnimationList(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "AnimationList");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.AnimationList;
						csObj.BindNativeObject(__ptr, "AnimationList");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getAnimationStateIterator_AnimationStateMapIterator(IntPtr pNativeObject);

				/// <summary>
				/// 获得节点动画状态类迭代器
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>                
				public EarthView.World.Graphic.AnimationStateMapIterator GetAnimationStateIterator()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getAnimationStateIterator_AnimationStateMapIterator(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.AnimationStateMapIterator csObj = new EarthView.World.Graphic.AnimationStateMapIterator(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "AnimationStateMapIterator");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.AnimationStateMapIterator;
						csObj.BindNativeObject(__ptr, "AnimationStateMapIterator");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTechnique_CallBack_void_ShadowTechnique(EarthView.World.Graphic.SHADOWTECHNIQUE technique);

				protected setShadowTechnique_CallBack_void_ShadowTechnique m_setShadowTechnique_CallBack_void_ShadowTechnique;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTechnique_void_ShadowTechnique_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.SHADOWTECHNIQUE technique);

				/// <summary>
				/// 设置阴影技术
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>   
				public virtual void SetShadowTechnique_NoVirtual(EarthView.World.Graphic.SHADOWTECHNIQUE technique)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTechnique_void_ShadowTechnique_NoVirtual(this.NativeObject, technique);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTechnique_void_ShadowTechnique_Function(EarthView.World.Graphic.SHADOWTECHNIQUE technique)
				{
					SetShadowTechnique(technique);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTechnique_void_ShadowTechnique(IntPtr pNativeObject, EarthView.World.Graphic.SHADOWTECHNIQUE technique);

				/// <summary>
				/// 设置阴影技术
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>   
				public virtual void SetShadowTechnique(EarthView.World.Graphic.SHADOWTECHNIQUE technique)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTechnique_void_ShadowTechnique(this.NativeObject, technique);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate int getShadowTechnique_CallBack_ShadowTechnique();

				protected getShadowTechnique_CallBack_ShadowTechnique m_getShadowTechnique_CallBack_ShadowTechnique;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CSceneManager_getShadowTechnique_ShadowTechnique_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得阴影技术
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>   
				public virtual EarthView.World.Graphic.SHADOWTECHNIQUE GetShadowTechnique_NoVirtual()
				{
					int ret=EarthView_World_Graphic_CSceneManager_getShadowTechnique_ShadowTechnique_NoVirtual(this.NativeObject);
					
					return (EarthView.World.Graphic.SHADOWTECHNIQUE)ret;
					
				}

				protected  int EarthView_World_Graphic_CSceneManager_getShadowTechnique_ShadowTechnique_Function()
				{
					EarthView.World.Graphic.SHADOWTECHNIQUE csret=GetShadowTechnique();
					
					return (int)csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern int EarthView_World_Graphic_CSceneManager_getShadowTechnique_ShadowTechnique(IntPtr pNativeObject);

				/// <summary>
				/// 获得阴影技术
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>   
				public virtual EarthView.World.Graphic.SHADOWTECHNIQUE GetShadowTechnique()
				{
					int ret=EarthView_World_Graphic_CSceneManager_getShadowTechnique_ShadowTechnique(this.NativeObject);
					
					return (EarthView.World.Graphic.SHADOWTECHNIQUE)ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShowDebugShadows_CallBack_void_ev_bool(bool debug);

				protected setShowDebugShadows_CallBack_void_ev_bool m_setShowDebugShadows_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShowDebugShadows_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte debug);

				public virtual void SetShowDebugShadows_NoVirtual(bool debug)
				{
					EarthView_World_Graphic_CSceneManager_setShowDebugShadows_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(debug));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShowDebugShadows_void_ev_bool_Function(bool debug)
				{
					SetShowDebugShadows(debug);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShowDebugShadows_void_ev_bool(IntPtr pNativeObject, byte debug);

				public virtual void SetShowDebugShadows(bool debug)
				{
					EarthView_World_Graphic_CSceneManager_setShowDebugShadows_void_ev_bool(this.NativeObject, Convert.ToByte(debug));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getShowDebugShadows_CallBack_ev_bool();

				protected getShowDebugShadows_CallBack_ev_bool m_getShowDebugShadows_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getShowDebugShadows_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool GetShowDebugShadows_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getShowDebugShadows_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getShowDebugShadows_ev_bool_Function()
				{
					bool csret=GetShowDebugShadows();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getShowDebugShadows_ev_bool(IntPtr pNativeObject);

				public virtual bool GetShowDebugShadows()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getShowDebugShadows_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowColour_CallBack_void_CColourValue(IntPtr colour);

				protected setShadowColour_CallBack_void_CColourValue m_setShadowColour_CallBack_void_CColourValue;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowColour_void_CColourValue_NoVirtual(IntPtr pNativeObject, IntPtr colour);

				/// <summary>
				/// 设置阴影颜色
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>   
				public virtual void SetShadowColour_NoVirtual(EarthView.World.Graphic.ColourValue colour)
				{
					EarthView_World_Graphic_CSceneManager_setShadowColour_void_CColourValue_NoVirtual(this.NativeObject, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowColour_void_CColourValue_Function(IntPtr colour)
				{
					EarthView.World.Graphic.ColourValue csobj_colour = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_colour.BindNativeObject(colour,"CColourValue");
					csobj_colour.Delegate = true;
					IClassFactory csobj_colourClassFactory = GlobalClassFactoryMap.Get(csobj_colour.GetCppInstanceTypeName());
					if (csobj_colourClassFactory != null)
					{
						csobj_colour.Delegate = true;
						csobj_colour = csobj_colourClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csobj_colour.BindNativeObject(colour, "CColourValue");
						csobj_colour.Delegate = true;
					}
					
					SetShadowColour(csobj_colour);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowColour_void_CColourValue(IntPtr pNativeObject, IntPtr colour);

				/// <summary>
				/// 设置阴影颜色
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>   
				public virtual void SetShadowColour(EarthView.World.Graphic.ColourValue colour)
				{
					EarthView_World_Graphic_CSceneManager_setShadowColour_void_CColourValue(this.NativeObject, object.Equals(colour, null) ? IntPtr.Zero : colour.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getShadowColour_CallBack_CColourValue();

				protected getShadowColour_CallBack_CColourValue m_getShadowColour_CallBack_CColourValue;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getShadowColour_CColourValue_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得阴影颜色
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>  
				public virtual EarthView.World.Graphic.ColourValue GetShadowColour_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getShadowColour_CColourValue_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ColourValue csObj = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CColourValue");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csObj.BindNativeObject(__ptr, "CColourValue");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getShadowColour_CColourValue_Function()
				{
					EarthView.World.Graphic.ColourValue csret=GetShadowColour();
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getShadowColour_CColourValue(IntPtr pNativeObject);

				/// <summary>
				/// 获得阴影颜色
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>  
				public virtual EarthView.World.Graphic.ColourValue GetShadowColour()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getShadowColour_CColourValue(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ColourValue csObj = new EarthView.World.Graphic.ColourValue(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CColourValue");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ColourValue;
						csObj.BindNativeObject(__ptr, "CColourValue");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowDirectionalLightExtrusionDistance_CallBack_void_Real(double dist);

				protected setShadowDirectionalLightExtrusionDistance_CallBack_void_Real m_setShadowDirectionalLightExtrusionDistance_CallBack_void_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowDirectionalLightExtrusionDistance_void_Real_NoVirtual(IntPtr pNativeObject, double dist);

				/// <summary>
				/// 获得方向光能够产生阴影的最大距离(离相机的距离)
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>   
				public virtual void SetShadowDirectionalLightExtrusionDistance_NoVirtual(double dist)
				{
					EarthView_World_Graphic_CSceneManager_setShadowDirectionalLightExtrusionDistance_void_Real_NoVirtual(this.NativeObject, dist);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowDirectionalLightExtrusionDistance_void_Real_Function(double dist)
				{
					SetShadowDirectionalLightExtrusionDistance(dist);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowDirectionalLightExtrusionDistance_void_Real(IntPtr pNativeObject, double dist);

				/// <summary>
				/// 获得方向光能够产生阴影的最大距离(离相机的距离)
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>   
				public virtual void SetShadowDirectionalLightExtrusionDistance(double dist)
				{
					EarthView_World_Graphic_CSceneManager_setShadowDirectionalLightExtrusionDistance_void_Real(this.NativeObject, dist);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getShadowDirectionalLightExtrusionDistance_CallBack_Real();

				protected getShadowDirectionalLightExtrusionDistance_CallBack_Real m_getShadowDirectionalLightExtrusionDistance_CallBack_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getShadowDirectionalLightExtrusionDistance_Real_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得方向光能够产生阴影的最大距离(离相机的距离)
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>   
				public virtual double GetShadowDirectionalLightExtrusionDistance_NoVirtual()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getShadowDirectionalLightExtrusionDistance_Real_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CSceneManager_getShadowDirectionalLightExtrusionDistance_Real_Function()
				{
					double csret=GetShadowDirectionalLightExtrusionDistance();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getShadowDirectionalLightExtrusionDistance_Real(IntPtr pNativeObject);

				/// <summary>
				/// 获得方向光能够产生阴影的最大距离(离相机的距离)
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>   
				public virtual double GetShadowDirectionalLightExtrusionDistance()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getShadowDirectionalLightExtrusionDistance_Real(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowColorRRatio_CallBack_void_Real(double rRatio);

				protected setShadowColorRRatio_CallBack_void_Real m_setShadowColorRRatio_CallBack_void_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowColorRRatio_void_Real_NoVirtual(IntPtr pNativeObject, double rRatio);

				/// <summary>
				/// 设置阴影颜色增益 (shadowcolor.r*rRatio, shadowcolor.g*gRatio, shadowcolor.b*bRatio)
				/// </summary>		
				/// <param name="rRatio">设置r通道增益</param>
				/// <param name="gRatio">设置g通道增益</param>
				/// <param name="bRatio">设置b通道增益</param>
				/// <returns></returns> 
				public virtual void SetShadowColorRRatio_NoVirtual(double rRatio)
				{
					EarthView_World_Graphic_CSceneManager_setShadowColorRRatio_void_Real_NoVirtual(this.NativeObject, rRatio);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowColorRRatio_void_Real_Function(double rRatio)
				{
					SetShadowColorRRatio(rRatio);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowColorRRatio_void_Real(IntPtr pNativeObject, double rRatio);

				/// <summary>
				/// 设置阴影颜色增益 (shadowcolor.r*rRatio, shadowcolor.g*gRatio, shadowcolor.b*bRatio)
				/// </summary>		
				/// <param name="rRatio">设置r通道增益</param>
				/// <param name="gRatio">设置g通道增益</param>
				/// <param name="bRatio">设置b通道增益</param>
				/// <returns></returns> 
				public virtual void SetShadowColorRRatio(double rRatio)
				{
					EarthView_World_Graphic_CSceneManager_setShadowColorRRatio_void_Real(this.NativeObject, rRatio);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowColorGRatio_CallBack_void_Real(double gRatio);

				protected setShadowColorGRatio_CallBack_void_Real m_setShadowColorGRatio_CallBack_void_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowColorGRatio_void_Real_NoVirtual(IntPtr pNativeObject, double gRatio);

				public virtual void SetShadowColorGRatio_NoVirtual(double gRatio)
				{
					EarthView_World_Graphic_CSceneManager_setShadowColorGRatio_void_Real_NoVirtual(this.NativeObject, gRatio);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowColorGRatio_void_Real_Function(double gRatio)
				{
					SetShadowColorGRatio(gRatio);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowColorGRatio_void_Real(IntPtr pNativeObject, double gRatio);

				public virtual void SetShadowColorGRatio(double gRatio)
				{
					EarthView_World_Graphic_CSceneManager_setShadowColorGRatio_void_Real(this.NativeObject, gRatio);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowColorBRatio_CallBack_void_Real(double bRatio);

				protected setShadowColorBRatio_CallBack_void_Real m_setShadowColorBRatio_CallBack_void_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowColorBRatio_void_Real_NoVirtual(IntPtr pNativeObject, double bRatio);

				public virtual void SetShadowColorBRatio_NoVirtual(double bRatio)
				{
					EarthView_World_Graphic_CSceneManager_setShadowColorBRatio_void_Real_NoVirtual(this.NativeObject, bRatio);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowColorBRatio_void_Real_Function(double bRatio)
				{
					SetShadowColorBRatio(bRatio);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowColorBRatio_void_Real(IntPtr pNativeObject, double bRatio);

				public virtual void SetShadowColorBRatio(double bRatio)
				{
					EarthView_World_Graphic_CSceneManager_setShadowColorBRatio_void_Real(this.NativeObject, bRatio);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getShadowColorRRatio_CallBack_Real();

				protected getShadowColorRRatio_CallBack_Real m_getShadowColorRRatio_CallBack_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getShadowColorRRatio_Real_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获取阴影颜色增益
				/// </summary>						
				/// <returns></returns> 
				public virtual double GetShadowColorRRatio_NoVirtual()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getShadowColorRRatio_Real_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CSceneManager_getShadowColorRRatio_Real_Function()
				{
					double csret=GetShadowColorRRatio();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getShadowColorRRatio_Real(IntPtr pNativeObject);

				/// <summary>
				/// 获取阴影颜色增益
				/// </summary>						
				/// <returns></returns> 
				public virtual double GetShadowColorRRatio()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getShadowColorRRatio_Real(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getShadowColorGRatio_CallBack_Real();

				protected getShadowColorGRatio_CallBack_Real m_getShadowColorGRatio_CallBack_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getShadowColorGRatio_Real_NoVirtual(IntPtr pNativeObject);

				public virtual double GetShadowColorGRatio_NoVirtual()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getShadowColorGRatio_Real_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CSceneManager_getShadowColorGRatio_Real_Function()
				{
					double csret=GetShadowColorGRatio();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getShadowColorGRatio_Real(IntPtr pNativeObject);

				public virtual double GetShadowColorGRatio()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getShadowColorGRatio_Real(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getShadowColorBRatio_CallBack_Real();

				protected getShadowColorBRatio_CallBack_Real m_getShadowColorBRatio_CallBack_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getShadowColorBRatio_Real_NoVirtual(IntPtr pNativeObject);

				public virtual double GetShadowColorBRatio_NoVirtual()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getShadowColorBRatio_Real_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CSceneManager_getShadowColorBRatio_Real_Function()
				{
					double csret=GetShadowColorBRatio();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getShadowColorBRatio_Real(IntPtr pNativeObject);

				public virtual double GetShadowColorBRatio()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getShadowColorBRatio_Real(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowFarDistance_CallBack_void_Real(double distance);

				protected setShadowFarDistance_CallBack_void_Real m_setShadowFarDistance_CallBack_void_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowFarDistance_void_Real_NoVirtual(IntPtr pNativeObject, double distance);

				/// <summary>
				/// 设置阴影的最大距离(离相机的距离)
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual void SetShadowFarDistance_NoVirtual(double distance)
				{
					EarthView_World_Graphic_CSceneManager_setShadowFarDistance_void_Real_NoVirtual(this.NativeObject, distance);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowFarDistance_void_Real_Function(double distance)
				{
					SetShadowFarDistance(distance);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowFarDistance_void_Real(IntPtr pNativeObject, double distance);

				/// <summary>
				/// 设置阴影的最大距离(离相机的距离)
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual void SetShadowFarDistance(double distance)
				{
					EarthView_World_Graphic_CSceneManager_setShadowFarDistance_void_Real(this.NativeObject, distance);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getShadowFarDistance_CallBack_Real();

				protected getShadowFarDistance_CallBack_Real m_getShadowFarDistance_CallBack_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getShadowFarDistance_Real_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得阴影的最大距离(离相机的距离)
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual double GetShadowFarDistance_NoVirtual()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getShadowFarDistance_Real_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CSceneManager_getShadowFarDistance_Real_Function()
				{
					double csret=GetShadowFarDistance();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getShadowFarDistance_Real(IntPtr pNativeObject);

				/// <summary>
				/// 获得阴影的最大距离(离相机的距离)
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual double GetShadowFarDistance()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getShadowFarDistance_Real(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getShadowFarDistanceSquared_CallBack_Real();

				protected getShadowFarDistanceSquared_CallBack_Real m_getShadowFarDistanceSquared_CallBack_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getShadowFarDistanceSquared_Real_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得阴影的最大距离(离相机的距离)的平方
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual double GetShadowFarDistanceSquared_NoVirtual()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getShadowFarDistanceSquared_Real_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CSceneManager_getShadowFarDistanceSquared_Real_Function()
				{
					double csret=GetShadowFarDistanceSquared();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getShadowFarDistanceSquared_Real(IntPtr pNativeObject);

				/// <summary>
				/// 获得阴影的最大距离(离相机的距离)的平方
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual double GetShadowFarDistanceSquared()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getShadowFarDistanceSquared_Real(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowIndexBufferSize_CallBack_void_ev_size_t(ulong size);

				protected setShadowIndexBufferSize_CallBack_void_ev_size_t m_setShadowIndexBufferSize_CallBack_void_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowIndexBufferSize_void_ev_size_t_NoVirtual(IntPtr pNativeObject, ulong size);

				/// <summary>
				/// 设置阴影锥的索引buffer的长度
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual void SetShadowIndexBufferSize_NoVirtual(ulong size)
				{
					EarthView_World_Graphic_CSceneManager_setShadowIndexBufferSize_void_ev_size_t_NoVirtual(this.NativeObject, size);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowIndexBufferSize_void_ev_size_t_Function(ulong size)
				{
					SetShadowIndexBufferSize(size);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowIndexBufferSize_void_ev_size_t(IntPtr pNativeObject, ulong size);

				/// <summary>
				/// 设置阴影锥的索引buffer的长度
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual void SetShadowIndexBufferSize(ulong size)
				{
					EarthView_World_Graphic_CSceneManager_setShadowIndexBufferSize_void_ev_size_t(this.NativeObject, size);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate ulong getShadowIndexBufferSize_CallBack_ev_size_t();

				protected getShadowIndexBufferSize_CallBack_ev_size_t m_getShadowIndexBufferSize_CallBack_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_CSceneManager_getShadowIndexBufferSize_ev_size_t_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得阴影锥的索引buffer的长度
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual ulong GetShadowIndexBufferSize_NoVirtual()
				{
					ulong ret=EarthView_World_Graphic_CSceneManager_getShadowIndexBufferSize_ev_size_t_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  ulong EarthView_World_Graphic_CSceneManager_getShadowIndexBufferSize_ev_size_t_Function()
				{
					ulong csret=GetShadowIndexBufferSize();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_CSceneManager_getShadowIndexBufferSize_ev_size_t(IntPtr pNativeObject);

				/// <summary>
				/// 获得阴影锥的索引buffer的长度
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual ulong GetShadowIndexBufferSize()
				{
					ulong ret=EarthView_World_Graphic_CSceneManager_getShadowIndexBufferSize_ev_size_t(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTextureSize_CallBack_void_ev_uint16(ushort size);

				protected setShadowTextureSize_CallBack_void_ev_uint16 m_setShadowTextureSize_CallBack_void_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureSize_void_ev_uint16_NoVirtual(IntPtr pNativeObject, ushort size);

				/// <summary>
				/// 设置阴影纹理图片的尺寸
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual void SetShadowTextureSize_NoVirtual(ushort size)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureSize_void_ev_uint16_NoVirtual(this.NativeObject, size);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTextureSize_void_ev_uint16_Function(ushort size)
				{
					SetShadowTextureSize(size);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureSize_void_ev_uint16(IntPtr pNativeObject, ushort size);

				/// <summary>
				/// 设置阴影纹理图片的尺寸
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual void SetShadowTextureSize(ushort size)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureSize_void_ev_uint16(this.NativeObject, size);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat(ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format);

				protected setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat m_setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_NoVirtual(IntPtr pNativeObject, ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format);

				/// <summary>
				/// 设置阴影纹理的相关参数
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual void SetShadowTextureConfig_NoVirtual(ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_NoVirtual(this.NativeObject, shadowIndex, width, height, format);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_Function(ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format)
				{
					SetShadowTextureConfig(shadowIndex, width, height, format);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat(IntPtr pNativeObject, ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format);

				/// <summary>
				/// 设置阴影纹理的相关参数
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual void SetShadowTextureConfig(ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat(this.NativeObject, shadowIndex, width, height, format);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16(ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format, ushort fsaa);

				protected setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16 m_setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_NoVirtual(IntPtr pNativeObject, ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format, ushort fsaa);

				public virtual void SetShadowTextureConfig_NoVirtual(ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format, ushort fsaa)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_NoVirtual(this.NativeObject, shadowIndex, width, height, format, fsaa);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_Function(ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format, ushort fsaa)
				{
					SetShadowTextureConfig(shadowIndex, width, height, format, fsaa);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16(IntPtr pNativeObject, ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format, ushort fsaa);

				public virtual void SetShadowTextureConfig(ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format, ushort fsaa)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16(this.NativeObject, shadowIndex, width, height, format, fsaa);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format, ushort fsaa, ushort depthBufferPoolId);

				protected setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16 m_setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_NoVirtual(IntPtr pNativeObject, ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format, ushort fsaa, ushort depthBufferPoolId);

				public virtual void SetShadowTextureConfig_NoVirtual(ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format, ushort fsaa, ushort depthBufferPoolId)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_NoVirtual(this.NativeObject, shadowIndex, width, height, format, fsaa, depthBufferPoolId);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_Function(ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format, ushort fsaa, ushort depthBufferPoolId)
				{
					SetShadowTextureConfig(shadowIndex, width, height, format, fsaa, depthBufferPoolId);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(IntPtr pNativeObject, ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format, ushort fsaa, ushort depthBufferPoolId);

				public virtual void SetShadowTextureConfig(ulong shadowIndex, ushort width, ushort height, EarthView.World.Graphic.PIXELFORMAT format, ushort fsaa, ushort depthBufferPoolId)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(this.NativeObject, shadowIndex, width, height, format, fsaa, depthBufferPoolId);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTextureConfig_CallBack_void_ev_size_t_ShadowTextureConfig(ulong shadowIndex, IntPtr config);

				protected setShadowTextureConfig_CallBack_void_ev_size_t_ShadowTextureConfig m_setShadowTextureConfig_CallBack_void_ev_size_t_ShadowTextureConfig;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ShadowTextureConfig_NoVirtual(IntPtr pNativeObject, ulong shadowIndex, IntPtr config);

				public virtual void SetShadowTextureConfig_NoVirtual(ulong shadowIndex, EarthView.World.Graphic.ShadowTextureConfig config)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ShadowTextureConfig_NoVirtual(this.NativeObject, shadowIndex, object.Equals(config, null) ? IntPtr.Zero : config.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ShadowTextureConfig_Function(ulong shadowIndex, IntPtr config)
				{
					EarthView.World.Graphic.ShadowTextureConfig csobj_config = new EarthView.World.Graphic.ShadowTextureConfig(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_config.BindNativeObject(config,"ShadowTextureConfig");
					csobj_config.Delegate = true;
					IClassFactory csobj_configClassFactory = GlobalClassFactoryMap.Get(csobj_config.GetCppInstanceTypeName());
					if (csobj_configClassFactory != null)
					{
						csobj_config.Delegate = true;
						csobj_config = csobj_configClassFactory.Create() as EarthView.World.Graphic.ShadowTextureConfig;
						csobj_config.BindNativeObject(config, "ShadowTextureConfig");
						csobj_config.Delegate = true;
					}
					
					SetShadowTextureConfig(shadowIndex, csobj_config);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ShadowTextureConfig(IntPtr pNativeObject, ulong shadowIndex, IntPtr config);

				public virtual void SetShadowTextureConfig(ulong shadowIndex, EarthView.World.Graphic.ShadowTextureConfig config)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ShadowTextureConfig(this.NativeObject, shadowIndex, object.Equals(config, null) ? IntPtr.Zero : config.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getShadowTextureConfigIterator_ConstShadowTextureConfigIterator(IntPtr pNativeObject);

				/// <summary>
				/// 获得阴影纹理的相关参数的迭代器
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public EarthView.World.Graphic.ConstShadowTextureConfigIterator GetShadowTextureConfigIterator()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getShadowTextureConfigIterator_ConstShadowTextureConfigIterator(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ConstShadowTextureConfigIterator csObj = new EarthView.World.Graphic.ConstShadowTextureConfigIterator(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "ConstShadowTextureConfigIterator");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ConstShadowTextureConfigIterator;
						csObj.BindNativeObject(__ptr, "ConstShadowTextureConfigIterator");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTexturePixelFormat_CallBack_void_PixelFormat(EarthView.World.Graphic.PIXELFORMAT fmt);

				protected setShadowTexturePixelFormat_CallBack_void_PixelFormat m_setShadowTexturePixelFormat_CallBack_void_PixelFormat;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTexturePixelFormat_void_PixelFormat_NoVirtual(IntPtr pNativeObject, EarthView.World.Graphic.PIXELFORMAT fmt);

				/// <summary>
				/// 设置阴影纹理的像素格式
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void SetShadowTexturePixelFormat_NoVirtual(EarthView.World.Graphic.PIXELFORMAT fmt)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTexturePixelFormat_void_PixelFormat_NoVirtual(this.NativeObject, fmt);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTexturePixelFormat_void_PixelFormat_Function(EarthView.World.Graphic.PIXELFORMAT fmt)
				{
					SetShadowTexturePixelFormat(fmt);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTexturePixelFormat_void_PixelFormat(IntPtr pNativeObject, EarthView.World.Graphic.PIXELFORMAT fmt);

				/// <summary>
				/// 设置阴影纹理的像素格式
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void SetShadowTexturePixelFormat(EarthView.World.Graphic.PIXELFORMAT fmt)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTexturePixelFormat_void_PixelFormat(this.NativeObject, fmt);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTextureFSAA_CallBack_void_ev_uint16(ushort fsaa);

				protected setShadowTextureFSAA_CallBack_void_ev_uint16 m_setShadowTextureFSAA_CallBack_void_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureFSAA_void_ev_uint16_NoVirtual(IntPtr pNativeObject, ushort fsaa);

				/// <summary>
				/// 设置阴影纹理的FSAA
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void SetShadowTextureFSAA_NoVirtual(ushort fsaa)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureFSAA_void_ev_uint16_NoVirtual(this.NativeObject, fsaa);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTextureFSAA_void_ev_uint16_Function(ushort fsaa)
				{
					SetShadowTextureFSAA(fsaa);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureFSAA_void_ev_uint16(IntPtr pNativeObject, ushort fsaa);

				/// <summary>
				/// 设置阴影纹理的FSAA
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void SetShadowTextureFSAA(ushort fsaa)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureFSAA_void_ev_uint16(this.NativeObject, fsaa);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTextureCount_CallBack_void_ev_size_t(ulong count);

				protected setShadowTextureCount_CallBack_void_ev_size_t m_setShadowTextureCount_CallBack_void_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureCount_void_ev_size_t_NoVirtual(IntPtr pNativeObject, ulong count);

				/// <summary>
				/// 设置阴影纹理的数量
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void SetShadowTextureCount_NoVirtual(ulong count)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureCount_void_ev_size_t_NoVirtual(this.NativeObject, count);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTextureCount_void_ev_size_t_Function(ulong count)
				{
					SetShadowTextureCount(count);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureCount_void_ev_size_t(IntPtr pNativeObject, ulong count);

				/// <summary>
				/// 设置阴影纹理的数量
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void SetShadowTextureCount(ulong count)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureCount_void_ev_size_t(this.NativeObject, count);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_CSceneManager_getShadowTextureCount_ev_size_t(IntPtr pNativeObject);

				/// <summary>
				/// 获得阴影纹理的数量
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public ulong GetShadowTextureCount()
				{
					ulong ret=EarthView_World_Graphic_CSceneManager_getShadowTextureCount_ev_size_t(this.NativeObject);
					
					return ret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureCountPerLightType_void_LightTypes_ev_size_t(IntPtr pNativeObject, EarthView.World.Graphic.Light.LIGHTTYPES type, ulong count);

				public void SetShadowTextureCountPerLightType(EarthView.World.Graphic.Light.LIGHTTYPES type, ulong count)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureCountPerLightType_void_LightTypes_ev_size_t(this.NativeObject, type, count);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_CSceneManager_getShadowTextureCountPerLightType_ev_size_t_LightTypes(IntPtr pNativeObject, EarthView.World.Graphic.Light.LIGHTTYPES type);

				public ulong GetShadowTextureCountPerLightType(EarthView.World.Graphic.Light.LIGHTTYPES type)
				{
					ulong ret=EarthView_World_Graphic_CSceneManager_getShadowTextureCountPerLightType_ev_size_t_LightTypes(this.NativeObject, type);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16(ushort size, ushort count);

				protected setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16 m_setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_NoVirtual(IntPtr pNativeObject, ushort size, ushort count);

				/// <summary>
				/// 设置阴影纹理的相关参数
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual void SetShadowTextureSettings_NoVirtual(ushort size, ushort count)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_NoVirtual(this.NativeObject, size, count);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_Function(ushort size, ushort count)
				{
					SetShadowTextureSettings(size, count);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16(IntPtr pNativeObject, ushort size, ushort count);

				/// <summary>
				/// 设置阴影纹理的相关参数
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual void SetShadowTextureSettings(ushort size, ushort count)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16(this.NativeObject, size, count);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat(ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt);

				protected setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat m_setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_NoVirtual(IntPtr pNativeObject, ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt);

				public virtual void SetShadowTextureSettings_NoVirtual(ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_NoVirtual(this.NativeObject, size, count, fmt);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_Function(ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt)
				{
					SetShadowTextureSettings(size, count, fmt);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat(IntPtr pNativeObject, ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt);

				public virtual void SetShadowTextureSettings(ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat(this.NativeObject, size, count, fmt);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16(ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt, ushort fsaa);

				protected setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16 m_setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_NoVirtual(IntPtr pNativeObject, ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt, ushort fsaa);

				public virtual void SetShadowTextureSettings_NoVirtual(ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt, ushort fsaa)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_NoVirtual(this.NativeObject, size, count, fmt, fsaa);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_Function(ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt, ushort fsaa)
				{
					SetShadowTextureSettings(size, count, fmt, fsaa);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16(IntPtr pNativeObject, ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt, ushort fsaa);

				public virtual void SetShadowTextureSettings(ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt, ushort fsaa)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16(this.NativeObject, size, count, fmt, fsaa);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt, ushort fsaa, ushort depthBufferPoolId);

				protected setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16 m_setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_NoVirtual(IntPtr pNativeObject, ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt, ushort fsaa, ushort depthBufferPoolId);

				public virtual void SetShadowTextureSettings_NoVirtual(ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt, ushort fsaa, ushort depthBufferPoolId)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_NoVirtual(this.NativeObject, size, count, fmt, fsaa, depthBufferPoolId);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_Function(ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt, ushort fsaa, ushort depthBufferPoolId)
				{
					SetShadowTextureSettings(size, count, fmt, fsaa, depthBufferPoolId);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(IntPtr pNativeObject, ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt, ushort fsaa, ushort depthBufferPoolId);

				public virtual void SetShadowTextureSettings(ushort size, ushort count, EarthView.World.Graphic.PIXELFORMAT fmt, ushort fsaa, ushort depthBufferPoolId)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(this.NativeObject, size, count, fmt, fsaa, depthBufferPoolId);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getShadowTexture_CallBack_CTexturePtr_ev_size_t(ulong shadowIndex);

				protected getShadowTexture_CallBack_CTexturePtr_ev_size_t m_getShadowTexture_CallBack_CTexturePtr_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getShadowTexture_CTexturePtr_ev_size_t_NoVirtual(IntPtr pNativeObject, ulong shadowIndex);

				/// <summary>
				/// 获得阴影纹理
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual EarthView.World.Graphic.TexturePtr GetShadowTexture_NoVirtual(ulong shadowIndex)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getShadowTexture_CTexturePtr_ev_size_t_NoVirtual(this.NativeObject, shadowIndex);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.TexturePtr csObj = new EarthView.World.Graphic.TexturePtr(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CTexturePtr");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.TexturePtr;
						csObj.BindNativeObject(__ptr, "CTexturePtr");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getShadowTexture_CTexturePtr_ev_size_t_Function(ulong shadowIndex)
				{
					EarthView.World.Graphic.TexturePtr csret=GetShadowTexture(shadowIndex);
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getShadowTexture_CTexturePtr_ev_size_t(IntPtr pNativeObject, ulong shadowIndex);

				/// <summary>
				/// 获得阴影纹理
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual EarthView.World.Graphic.TexturePtr GetShadowTexture(ulong shadowIndex)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getShadowTexture_CTexturePtr_ev_size_t(this.NativeObject, shadowIndex);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.TexturePtr csObj = new EarthView.World.Graphic.TexturePtr(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CTexturePtr");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.TexturePtr;
						csObj.BindNativeObject(__ptr, "CTexturePtr");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowDirLightTextureOffset_CallBack_void_Real(double offset);

				protected setShadowDirLightTextureOffset_CallBack_void_Real m_setShadowDirLightTextureOffset_CallBack_void_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowDirLightTextureOffset_void_Real_NoVirtual(IntPtr pNativeObject, double offset);

				/// <summary>
				/// 设置平行光对应的阴影纹理的偏移量
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual void SetShadowDirLightTextureOffset_NoVirtual(double offset)
				{
					EarthView_World_Graphic_CSceneManager_setShadowDirLightTextureOffset_void_Real_NoVirtual(this.NativeObject, offset);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowDirLightTextureOffset_void_Real_Function(double offset)
				{
					SetShadowDirLightTextureOffset(offset);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowDirLightTextureOffset_void_Real(IntPtr pNativeObject, double offset);

				/// <summary>
				/// 设置平行光对应的阴影纹理的偏移量
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual void SetShadowDirLightTextureOffset(double offset)
				{
					EarthView_World_Graphic_CSceneManager_setShadowDirLightTextureOffset_void_Real(this.NativeObject, offset);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getShadowDirLightTextureOffset_CallBack_Real();

				protected getShadowDirLightTextureOffset_CallBack_Real m_getShadowDirLightTextureOffset_CallBack_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getShadowDirLightTextureOffset_Real_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得平行光对应的阴影纹理的偏移量
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual double GetShadowDirLightTextureOffset_NoVirtual()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getShadowDirLightTextureOffset_Real_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CSceneManager_getShadowDirLightTextureOffset_Real_Function()
				{
					double csret=GetShadowDirLightTextureOffset();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getShadowDirLightTextureOffset_Real(IntPtr pNativeObject);

				/// <summary>
				/// 获得平行光对应的阴影纹理的偏移量
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual double GetShadowDirLightTextureOffset()
				{
					double ret=EarthView_World_Graphic_CSceneManager_getShadowDirLightTextureOffset_Real(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTextureFadeStart_CallBack_void_Real(double fadeStart);

				protected setShadowTextureFadeStart_CallBack_void_Real m_setShadowTextureFadeStart_CallBack_void_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureFadeStart_void_Real_NoVirtual(IntPtr pNativeObject, double fadeStart);

				/// <summary>
				/// 设置阴影纹理消退的起始点
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual void SetShadowTextureFadeStart_NoVirtual(double fadeStart)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureFadeStart_void_Real_NoVirtual(this.NativeObject, fadeStart);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTextureFadeStart_void_Real_Function(double fadeStart)
				{
					SetShadowTextureFadeStart(fadeStart);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureFadeStart_void_Real(IntPtr pNativeObject, double fadeStart);

				/// <summary>
				/// 设置阴影纹理消退的起始点
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual void SetShadowTextureFadeStart(double fadeStart)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureFadeStart_void_Real(this.NativeObject, fadeStart);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTextureFadeEnd_CallBack_void_Real(double fadeEnd);

				protected setShadowTextureFadeEnd_CallBack_void_Real m_setShadowTextureFadeEnd_CallBack_void_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureFadeEnd_void_Real_NoVirtual(IntPtr pNativeObject, double fadeEnd);

				/// <summary>
				/// 设置阴影纹理消退的截止点
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual void SetShadowTextureFadeEnd_NoVirtual(double fadeEnd)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureFadeEnd_void_Real_NoVirtual(this.NativeObject, fadeEnd);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTextureFadeEnd_void_Real_Function(double fadeEnd)
				{
					SetShadowTextureFadeEnd(fadeEnd);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureFadeEnd_void_Real(IntPtr pNativeObject, double fadeEnd);

				/// <summary>
				/// 设置阴影纹理消退的截止点
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns> 
				public virtual void SetShadowTextureFadeEnd(double fadeEnd)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureFadeEnd_void_Real(this.NativeObject, fadeEnd);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTextureSelfShadow_CallBack_void_ev_bool(bool selfShadow);

				protected setShadowTextureSelfShadow_CallBack_void_ev_bool m_setShadowTextureSelfShadow_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureSelfShadow_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte selfShadow);

				/// <summary>
				/// 设置纹理阴影是否启用自投影
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void SetShadowTextureSelfShadow_NoVirtual(bool selfShadow)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureSelfShadow_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(selfShadow));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTextureSelfShadow_void_ev_bool_Function(bool selfShadow)
				{
					SetShadowTextureSelfShadow(selfShadow);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureSelfShadow_void_ev_bool(IntPtr pNativeObject, byte selfShadow);

				/// <summary>
				/// 设置纹理阴影是否启用自投影
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void SetShadowTextureSelfShadow(bool selfShadow)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureSelfShadow_void_ev_bool(this.NativeObject, Convert.ToByte(selfShadow));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getShadowTextureSelfShadow_CallBack_ev_bool();

				protected getShadowTextureSelfShadow_CallBack_ev_bool m_getShadowTextureSelfShadow_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getShadowTextureSelfShadow_ev_bool_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得纹理阴影是否启用自投影
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual bool GetShadowTextureSelfShadow_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getShadowTextureSelfShadow_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getShadowTextureSelfShadow_ev_bool_Function()
				{
					bool csret=GetShadowTextureSelfShadow();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getShadowTextureSelfShadow_ev_bool(IntPtr pNativeObject);

				/// <summary>
				/// 获得纹理阴影是否启用自投影
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual bool GetShadowTextureSelfShadow()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getShadowTextureSelfShadow_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTextureCasterMaterial_CallBack_void_EVString(ref IntPtr name);

				protected setShadowTextureCasterMaterial_CallBack_void_EVString m_setShadowTextureCasterMaterial_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureCasterMaterial_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 设置纹理阴影技术下的投射阴影的材质
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void SetShadowTextureCasterMaterial_NoVirtual(string name)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureCasterMaterial_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTextureCasterMaterial_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					SetShadowTextureCasterMaterial(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureCasterMaterial_void_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 设置纹理阴影技术下的投射阴影的材质
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void SetShadowTextureCasterMaterial(string name)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureCasterMaterial_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowTextureReceiverMaterial_CallBack_void_EVString(ref IntPtr name);

				protected setShadowTextureReceiverMaterial_CallBack_void_EVString m_setShadowTextureReceiverMaterial_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureReceiverMaterial_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 设置纹理阴影技术下的接收阴影的材质
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void SetShadowTextureReceiverMaterial_NoVirtual(string name)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureReceiverMaterial_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowTextureReceiverMaterial_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					SetShadowTextureReceiverMaterial(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowTextureReceiverMaterial_void_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 设置纹理阴影技术下的接收阴影的材质
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void SetShadowTextureReceiverMaterial(string name)
				{
					EarthView_World_Graphic_CSceneManager_setShadowTextureReceiverMaterial_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowCasterRenderBackFaces_CallBack_void_ev_bool(bool bf);

				protected setShadowCasterRenderBackFaces_CallBack_void_ev_bool m_setShadowCasterRenderBackFaces_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowCasterRenderBackFaces_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte bf);

				/// <summary>
				/// 设置是否渲染阴影投射者的背面
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void SetShadowCasterRenderBackFaces_NoVirtual(bool bf)
				{
					EarthView_World_Graphic_CSceneManager_setShadowCasterRenderBackFaces_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(bf));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowCasterRenderBackFaces_void_ev_bool_Function(bool bf)
				{
					SetShadowCasterRenderBackFaces(bf);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowCasterRenderBackFaces_void_ev_bool(IntPtr pNativeObject, byte bf);

				/// <summary>
				/// 设置是否渲染阴影投射者的背面
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void SetShadowCasterRenderBackFaces(bool bf)
				{
					EarthView_World_Graphic_CSceneManager_setShadowCasterRenderBackFaces_void_ev_bool(this.NativeObject, Convert.ToByte(bf));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getShadowCasterRenderBackFaces_CallBack_ev_bool();

				protected getShadowCasterRenderBackFaces_CallBack_ev_bool m_getShadowCasterRenderBackFaces_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getShadowCasterRenderBackFaces_ev_bool_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获取是否渲染阴影投射者的背面
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual bool GetShadowCasterRenderBackFaces_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getShadowCasterRenderBackFaces_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getShadowCasterRenderBackFaces_ev_bool_Function()
				{
					bool csret=GetShadowCasterRenderBackFaces();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getShadowCasterRenderBackFaces_ev_bool(IntPtr pNativeObject);

				/// <summary>
				/// 获取是否渲染阴影投射者的背面
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual bool GetShadowCasterRenderBackFaces()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getShadowCasterRenderBackFaces_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowCameraSetup_CallBack_void_ShadowCameraSetupPtr(IntPtr shadowSetup);

				protected setShadowCameraSetup_CallBack_void_ShadowCameraSetupPtr m_setShadowCameraSetup_CallBack_void_ShadowCameraSetupPtr;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowCameraSetup_void_ShadowCameraSetupPtr_NoVirtual(IntPtr pNativeObject, IntPtr shadowSetup);

				/// <summary>
				/// 设置阴影相机
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void SetShadowCameraSetup_NoVirtual(EarthView.World.Graphic.ShadowCameraSetupPtr shadowSetup)
				{
					EarthView_World_Graphic_CSceneManager_setShadowCameraSetup_void_ShadowCameraSetupPtr_NoVirtual(this.NativeObject, object.Equals(shadowSetup, null) ? IntPtr.Zero : shadowSetup.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowCameraSetup_void_ShadowCameraSetupPtr_Function(IntPtr shadowSetup)
				{
					EarthView.World.Graphic.ShadowCameraSetupPtr csobj_shadowSetup = new EarthView.World.Graphic.ShadowCameraSetupPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_shadowSetup.BindNativeObject(shadowSetup,"ShadowCameraSetupPtr");
					csobj_shadowSetup.Delegate = true;
					IClassFactory csobj_shadowSetupClassFactory = GlobalClassFactoryMap.Get(csobj_shadowSetup.GetCppInstanceTypeName());
					if (csobj_shadowSetupClassFactory != null)
					{
						csobj_shadowSetup.Delegate = true;
						csobj_shadowSetup = csobj_shadowSetupClassFactory.Create() as EarthView.World.Graphic.ShadowCameraSetupPtr;
						csobj_shadowSetup.BindNativeObject(shadowSetup, "ShadowCameraSetupPtr");
						csobj_shadowSetup.Delegate = true;
					}
					
					SetShadowCameraSetup(csobj_shadowSetup);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowCameraSetup_void_ShadowCameraSetupPtr(IntPtr pNativeObject, IntPtr shadowSetup);

				/// <summary>
				/// 设置阴影相机
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void SetShadowCameraSetup(EarthView.World.Graphic.ShadowCameraSetupPtr shadowSetup)
				{
					EarthView_World_Graphic_CSceneManager_setShadowCameraSetup_void_ShadowCameraSetupPtr(this.NativeObject, object.Equals(shadowSetup, null) ? IntPtr.Zero : shadowSetup.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getShadowCameraSetup_CallBack_ShadowCameraSetupPtr();

				protected getShadowCameraSetup_CallBack_ShadowCameraSetupPtr m_getShadowCameraSetup_CallBack_ShadowCameraSetupPtr;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getShadowCameraSetup_ShadowCameraSetupPtr_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 获得阴影相机
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.ShadowCameraSetupPtr GetShadowCameraSetup_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getShadowCameraSetup_ShadowCameraSetupPtr_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ShadowCameraSetupPtr csObj = new EarthView.World.Graphic.ShadowCameraSetupPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "ShadowCameraSetupPtr");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ShadowCameraSetupPtr;
						csObj.BindNativeObject(__ptr, "ShadowCameraSetupPtr");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getShadowCameraSetup_ShadowCameraSetupPtr_Function()
				{
					EarthView.World.Graphic.ShadowCameraSetupPtr csret=GetShadowCameraSetup();
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getShadowCameraSetup_ShadowCameraSetupPtr(IntPtr pNativeObject);

				/// <summary>
				/// 获得阴影相机
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.ShadowCameraSetupPtr GetShadowCameraSetup()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getShadowCameraSetup_ShadowCameraSetupPtr(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.ShadowCameraSetupPtr csObj = new EarthView.World.Graphic.ShadowCameraSetupPtr(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "ShadowCameraSetupPtr");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.ShadowCameraSetupPtr;
						csObj.BindNativeObject(__ptr, "ShadowCameraSetupPtr");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowUseInfiniteFarPlane_CallBack_void_ev_bool(bool enable);

				protected setShadowUseInfiniteFarPlane_CallBack_void_ev_bool m_setShadowUseInfiniteFarPlane_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowUseInfiniteFarPlane_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte enable);

				public virtual void SetShadowUseInfiniteFarPlane_NoVirtual(bool enable)
				{
					EarthView_World_Graphic_CSceneManager_setShadowUseInfiniteFarPlane_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(enable));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowUseInfiniteFarPlane_void_ev_bool_Function(bool enable)
				{
					SetShadowUseInfiniteFarPlane(enable);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowUseInfiniteFarPlane_void_ev_bool(IntPtr pNativeObject, byte enable);

				public virtual void SetShadowUseInfiniteFarPlane(bool enable)
				{
					EarthView_World_Graphic_CSceneManager_setShadowUseInfiniteFarPlane_void_ev_bool(this.NativeObject, Convert.ToByte(enable));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte isShadowTechniqueStencilBased_CallBack_ev_bool();

				protected isShadowTechniqueStencilBased_CallBack_ev_bool m_isShadowTechniqueStencilBased_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueStencilBased_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool IsShadowTechniqueStencilBased_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isShadowTechniqueStencilBased_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueStencilBased_ev_bool_Function()
				{
					bool csret=IsShadowTechniqueStencilBased();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueStencilBased_ev_bool(IntPtr pNativeObject);

				public virtual bool IsShadowTechniqueStencilBased()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isShadowTechniqueStencilBased_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte isShadowTechniqueTextureBased_CallBack_ev_bool();

				protected isShadowTechniqueTextureBased_CallBack_ev_bool m_isShadowTechniqueTextureBased_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueTextureBased_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool IsShadowTechniqueTextureBased_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isShadowTechniqueTextureBased_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueTextureBased_ev_bool_Function()
				{
					bool csret=IsShadowTechniqueTextureBased();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueTextureBased_ev_bool(IntPtr pNativeObject);

				public virtual bool IsShadowTechniqueTextureBased()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isShadowTechniqueTextureBased_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte isShadowTechniqueModulative_CallBack_ev_bool();

				protected isShadowTechniqueModulative_CallBack_ev_bool m_isShadowTechniqueModulative_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueModulative_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool IsShadowTechniqueModulative_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isShadowTechniqueModulative_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueModulative_ev_bool_Function()
				{
					bool csret=IsShadowTechniqueModulative();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueModulative_ev_bool(IntPtr pNativeObject);

				public virtual bool IsShadowTechniqueModulative()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isShadowTechniqueModulative_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte isShadowTechniqueAdditive_CallBack_ev_bool();

				protected isShadowTechniqueAdditive_CallBack_ev_bool m_isShadowTechniqueAdditive_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueAdditive_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool IsShadowTechniqueAdditive_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isShadowTechniqueAdditive_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueAdditive_ev_bool_Function()
				{
					bool csret=IsShadowTechniqueAdditive();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueAdditive_ev_bool(IntPtr pNativeObject);

				public virtual bool IsShadowTechniqueAdditive()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isShadowTechniqueAdditive_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte isShadowTechniqueIntegrated_CallBack_ev_bool();

				protected isShadowTechniqueIntegrated_CallBack_ev_bool m_isShadowTechniqueIntegrated_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueIntegrated_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool IsShadowTechniqueIntegrated_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isShadowTechniqueIntegrated_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueIntegrated_ev_bool_Function()
				{
					bool csret=IsShadowTechniqueIntegrated();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueIntegrated_ev_bool(IntPtr pNativeObject);

				public virtual bool IsShadowTechniqueIntegrated()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isShadowTechniqueIntegrated_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte isShadowTechniqueInUse_CallBack_ev_bool();

				protected isShadowTechniqueInUse_CallBack_ev_bool m_isShadowTechniqueInUse_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueInUse_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool IsShadowTechniqueInUse_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isShadowTechniqueInUse_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueInUse_ev_bool_Function()
				{
					bool csret=IsShadowTechniqueInUse();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isShadowTechniqueInUse_ev_bool(IntPtr pNativeObject);

				public virtual bool IsShadowTechniqueInUse()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isShadowTechniqueInUse_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setShadowUseLightClipPlanes_CallBack_void_ev_bool(bool enabled);

				protected setShadowUseLightClipPlanes_CallBack_void_ev_bool m_setShadowUseLightClipPlanes_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowUseLightClipPlanes_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte enabled);

				public virtual void SetShadowUseLightClipPlanes_NoVirtual(bool enabled)
				{
					EarthView_World_Graphic_CSceneManager_setShadowUseLightClipPlanes_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(enabled));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setShadowUseLightClipPlanes_void_ev_bool_Function(bool enabled)
				{
					SetShadowUseLightClipPlanes(enabled);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setShadowUseLightClipPlanes_void_ev_bool(IntPtr pNativeObject, byte enabled);

				public virtual void SetShadowUseLightClipPlanes(bool enabled)
				{
					EarthView_World_Graphic_CSceneManager_setShadowUseLightClipPlanes_void_ev_bool(this.NativeObject, Convert.ToByte(enabled));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getShadowUseLightClipPlanes_CallBack_ev_bool();

				protected getShadowUseLightClipPlanes_CallBack_ev_bool m_getShadowUseLightClipPlanes_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getShadowUseLightClipPlanes_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool GetShadowUseLightClipPlanes_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getShadowUseLightClipPlanes_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getShadowUseLightClipPlanes_ev_bool_Function()
				{
					bool csret=GetShadowUseLightClipPlanes();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getShadowUseLightClipPlanes_ev_bool(IntPtr pNativeObject);

				public virtual bool GetShadowUseLightClipPlanes()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getShadowUseLightClipPlanes_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _setActiveCompositorChain_CallBack_void_CCompositorChain(IntPtr chain);

				protected _setActiveCompositorChain_CallBack_void_CCompositorChain m__setActiveCompositorChain_CallBack_void_CCompositorChain;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setActiveCompositorChain_void_CCompositorChain_NoVirtual(IntPtr pNativeObject, IntPtr chain);

				public virtual void _setActiveCompositorChain_NoVirtual(EarthView.World.Graphic.CompositorChain chain)
				{
					EarthView_World_Graphic_CSceneManager__setActiveCompositorChain_void_CCompositorChain_NoVirtual(this.NativeObject, object.Equals(chain, null) ? IntPtr.Zero : chain.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__setActiveCompositorChain_void_CCompositorChain_Function(IntPtr chain)
				{
					EarthView.World.Graphic.CompositorChain csobj_chain = new EarthView.World.Graphic.CompositorChain(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_chain.BindNativeObject(chain,"CCompositorChain");
					csobj_chain.Delegate = true;
					IClassFactory csobj_chainClassFactory = GlobalClassFactoryMap.Get(csobj_chain.GetCppInstanceTypeName());
					if (csobj_chainClassFactory != null)
					{
						csobj_chain.Delegate = true;
						csobj_chain = csobj_chainClassFactory.Create() as EarthView.World.Graphic.CompositorChain;
						csobj_chain.BindNativeObject(chain, "CCompositorChain");
						csobj_chain.Delegate = true;
					}
					
					_setActiveCompositorChain(csobj_chain);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__setActiveCompositorChain_void_CCompositorChain(IntPtr pNativeObject, IntPtr chain);

				public virtual void _setActiveCompositorChain(EarthView.World.Graphic.CompositorChain chain)
				{
					EarthView_World_Graphic_CSceneManager__setActiveCompositorChain_void_CCompositorChain(this.NativeObject, object.Equals(chain, null) ? IntPtr.Zero : chain.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setLateMaterialResolving_CallBack_void_ev_bool(bool isLate);

				protected setLateMaterialResolving_CallBack_void_ev_bool m_setLateMaterialResolving_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setLateMaterialResolving_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte isLate);

				public virtual void SetLateMaterialResolving_NoVirtual(bool isLate)
				{
					EarthView_World_Graphic_CSceneManager_setLateMaterialResolving_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(isLate));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setLateMaterialResolving_void_ev_bool_Function(bool isLate)
				{
					SetLateMaterialResolving(isLate);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setLateMaterialResolving_void_ev_bool(IntPtr pNativeObject, byte isLate);

				public virtual void SetLateMaterialResolving(bool isLate)
				{
					EarthView_World_Graphic_CSceneManager_setLateMaterialResolving_void_ev_bool(this.NativeObject, Convert.ToByte(isLate));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte isLateMaterialResolving_CallBack_ev_bool();

				protected isLateMaterialResolving_CallBack_ev_bool m_isLateMaterialResolving_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isLateMaterialResolving_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool IsLateMaterialResolving_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isLateMaterialResolving_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_isLateMaterialResolving_ev_bool_Function()
				{
					bool csret=IsLateMaterialResolving();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_isLateMaterialResolving_ev_bool(IntPtr pNativeObject);

				public virtual bool IsLateMaterialResolving()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_isLateMaterialResolving_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr _getActiveCompositorChain_CallBack_CCompositorChain();

				protected _getActiveCompositorChain_CallBack_CCompositorChain m__getActiveCompositorChain_CallBack_CCompositorChain;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager__getActiveCompositorChain_CCompositorChain_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.CompositorChain _getActiveCompositorChain_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager__getActiveCompositorChain_CCompositorChain_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.CompositorChain csObj = new EarthView.World.Graphic.CompositorChain(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CCompositorChain");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.CompositorChain;
						csObj.BindNativeObject(__ptr, "CCompositorChain");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager__getActiveCompositorChain_CCompositorChain_Function()
				{
					EarthView.World.Graphic.CompositorChain csret=_getActiveCompositorChain();
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager__getActiveCompositorChain_CCompositorChain(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.CompositorChain _getActiveCompositorChain()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager__getActiveCompositorChain_CCompositorChain(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.CompositorChain csObj = new EarthView.World.Graphic.CompositorChain(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CCompositorChain");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.CompositorChain;
						csObj.BindNativeObject(__ptr, "CCompositorChain");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void addListener_CallBack_void_CSceneManagerListener(IntPtr ref_s);

				protected addListener_CallBack_void_CSceneManagerListener m_addListener_CallBack_void_CSceneManagerListener;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_addListener_void_CSceneManagerListener_NoVirtual(IntPtr pNativeObject, IntPtr ref_s);

				public virtual void AddListener_NoVirtual(EarthView.World.Graphic.SceneManager.SceneManagerListener ref_s)
				{
					EarthView_World_Graphic_CSceneManager_addListener_void_CSceneManagerListener_NoVirtual(this.NativeObject, object.Equals(ref_s, null) ? IntPtr.Zero : ref_s.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_addListener_void_CSceneManagerListener_Function(IntPtr ref_s)
				{
					EarthView.World.Graphic.SceneManager.SceneManagerListener csobj_ref_s = new EarthView.World.Graphic.SceneManager.SceneManagerListener(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_ref_s.BindNativeObject(ref_s,"CSceneManagerListener");
					csobj_ref_s.Delegate = true;
					IClassFactory csobj_ref_sClassFactory = GlobalClassFactoryMap.Get(csobj_ref_s.GetCppInstanceTypeName());
					if (csobj_ref_sClassFactory != null)
					{
						csobj_ref_s.Delegate = true;
						csobj_ref_s = csobj_ref_sClassFactory.Create() as EarthView.World.Graphic.SceneManager.SceneManagerListener;
						csobj_ref_s.BindNativeObject(ref_s, "CSceneManagerListener");
						csobj_ref_s.Delegate = true;
					}
					
					AddListener(csobj_ref_s);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_addListener_void_CSceneManagerListener(IntPtr pNativeObject, IntPtr ref_s);

				public virtual void AddListener(EarthView.World.Graphic.SceneManager.SceneManagerListener ref_s)
				{
					EarthView_World_Graphic_CSceneManager_addListener_void_CSceneManagerListener(this.NativeObject, object.Equals(ref_s, null) ? IntPtr.Zero : ref_s.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void removeListener_CallBack_void_CSceneManagerListener(IntPtr s);

				protected removeListener_CallBack_void_CSceneManagerListener m_removeListener_CallBack_void_CSceneManagerListener;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_removeListener_void_CSceneManagerListener_NoVirtual(IntPtr pNativeObject, IntPtr s);

				public virtual void RemoveListener_NoVirtual(EarthView.World.Graphic.SceneManager.SceneManagerListener s)
				{
					EarthView_World_Graphic_CSceneManager_removeListener_void_CSceneManagerListener_NoVirtual(this.NativeObject, object.Equals(s, null) ? IntPtr.Zero : s.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_removeListener_void_CSceneManagerListener_Function(IntPtr s)
				{
					EarthView.World.Graphic.SceneManager.SceneManagerListener csobj_s = new EarthView.World.Graphic.SceneManager.SceneManagerListener(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_s.BindNativeObject(s,"CSceneManagerListener");
					csobj_s.Delegate = true;
					IClassFactory csobj_sClassFactory = GlobalClassFactoryMap.Get(csobj_s.GetCppInstanceTypeName());
					if (csobj_sClassFactory != null)
					{
						csobj_s.Delegate = true;
						csobj_s = csobj_sClassFactory.Create() as EarthView.World.Graphic.SceneManager.SceneManagerListener;
						csobj_s.BindNativeObject(s, "CSceneManagerListener");
						csobj_s.Delegate = true;
					}
					
					RemoveListener(csobj_s);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_removeListener_void_CSceneManagerListener(IntPtr pNativeObject, IntPtr s);

				public virtual void RemoveListener(EarthView.World.Graphic.SceneManager.SceneManagerListener s)
				{
					EarthView_World_Graphic_CSceneManager_removeListener_void_CSceneManagerListener(this.NativeObject, object.Equals(s, null) ? IntPtr.Zero : s.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte existListener_CallBack_ev_bool_CSceneManagerListener(IntPtr s);

				protected existListener_CallBack_ev_bool_CSceneManagerListener m_existListener_CallBack_ev_bool_CSceneManagerListener;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_existListener_ev_bool_CSceneManagerListener_NoVirtual(IntPtr pNativeObject, IntPtr s);

				public virtual bool ExistListener_NoVirtual(EarthView.World.Graphic.SceneManager.SceneManagerListener s)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_existListener_ev_bool_CSceneManagerListener_NoVirtual(this.NativeObject, object.Equals(s, null) ? IntPtr.Zero : s.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_existListener_ev_bool_CSceneManagerListener_Function(IntPtr s)
				{
					EarthView.World.Graphic.SceneManager.SceneManagerListener csobj_s = new EarthView.World.Graphic.SceneManager.SceneManagerListener(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_s.BindNativeObject(s,"CSceneManagerListener");
					csobj_s.Delegate = true;
					IClassFactory csobj_sClassFactory = GlobalClassFactoryMap.Get(csobj_s.GetCppInstanceTypeName());
					if (csobj_sClassFactory != null)
					{
						csobj_s.Delegate = true;
						csobj_s = csobj_sClassFactory.Create() as EarthView.World.Graphic.SceneManager.SceneManagerListener;
						csobj_s.BindNativeObject(s, "CSceneManagerListener");
						csobj_s.Delegate = true;
					}
					
					bool csret=ExistListener(csobj_s);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_existListener_ev_bool_CSceneManagerListener(IntPtr pNativeObject, IntPtr s);

				public virtual bool ExistListener(EarthView.World.Graphic.SceneManager.SceneManagerListener s)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_existListener_ev_bool_CSceneManagerListener(this.NativeObject, object.Equals(s, null) ? IntPtr.Zero : s.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createStaticGeometry_CallBack_CStaticGeometry_EVString(ref IntPtr name);

				protected createStaticGeometry_CallBack_CStaticGeometry_EVString m_createStaticGeometry_CallBack_CStaticGeometry_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createStaticGeometry_CStaticGeometry_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.StaticGeometry CreateStaticGeometry_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createStaticGeometry_CStaticGeometry_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.StaticGeometry csObj = new EarthView.World.Graphic.StaticGeometry(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CStaticGeometry");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.StaticGeometry;
						csObj.BindNativeObject(__ptr, "CStaticGeometry");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createStaticGeometry_CStaticGeometry_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.StaticGeometry csret=CreateStaticGeometry(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createStaticGeometry_CStaticGeometry_EVString(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.StaticGeometry CreateStaticGeometry(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createStaticGeometry_CStaticGeometry_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.StaticGeometry csObj = new EarthView.World.Graphic.StaticGeometry(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CStaticGeometry");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.StaticGeometry;
						csObj.BindNativeObject(__ptr, "CStaticGeometry");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getStaticGeometry_CallBack_CStaticGeometry_EVString(ref IntPtr name);

				protected getStaticGeometry_CallBack_CStaticGeometry_EVString m_getStaticGeometry_CallBack_CStaticGeometry_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getStaticGeometry_CStaticGeometry_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.StaticGeometry GetStaticGeometry_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getStaticGeometry_CStaticGeometry_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.StaticGeometry csObj = new EarthView.World.Graphic.StaticGeometry(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CStaticGeometry");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.StaticGeometry;
						csObj.BindNativeObject(__ptr, "CStaticGeometry");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getStaticGeometry_CStaticGeometry_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.StaticGeometry csret=GetStaticGeometry(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getStaticGeometry_CStaticGeometry_EVString(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.StaticGeometry GetStaticGeometry(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getStaticGeometry_CStaticGeometry_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.StaticGeometry csObj = new EarthView.World.Graphic.StaticGeometry(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CStaticGeometry");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.StaticGeometry;
						csObj.BindNativeObject(__ptr, "CStaticGeometry");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte hasStaticGeometry_CallBack_ev_bool_EVString(ref IntPtr name);

				protected hasStaticGeometry_CallBack_ev_bool_EVString m_hasStaticGeometry_CallBack_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasStaticGeometry_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual bool HasStaticGeometry_NoVirtual(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasStaticGeometry_ev_bool_EVString_NoVirtual(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_hasStaticGeometry_ev_bool_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					bool csret=HasStaticGeometry(strname);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasStaticGeometry_ev_bool_EVString(IntPtr pNativeObject, string name);

				public virtual bool HasStaticGeometry(string name)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasStaticGeometry_ev_bool_EVString(this.NativeObject, name);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyStaticGeometry_CallBack_void_CStaticGeometry(IntPtr geom);

				protected destroyStaticGeometry_CallBack_void_CStaticGeometry m_destroyStaticGeometry_CallBack_void_CStaticGeometry;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyStaticGeometry_void_CStaticGeometry_NoVirtual(IntPtr pNativeObject, IntPtr geom);

				public virtual void DestroyStaticGeometry_NoVirtual(EarthView.World.Graphic.StaticGeometry geom)
				{
					EarthView_World_Graphic_CSceneManager_destroyStaticGeometry_void_CStaticGeometry_NoVirtual(this.NativeObject, object.Equals(geom, null) ? IntPtr.Zero : geom.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyStaticGeometry_void_CStaticGeometry_Function(IntPtr geom)
				{
					EarthView.World.Graphic.StaticGeometry csobj_geom = new EarthView.World.Graphic.StaticGeometry(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_geom.BindNativeObject(geom,"CStaticGeometry");
					csobj_geom.Delegate = true;
					IClassFactory csobj_geomClassFactory = GlobalClassFactoryMap.Get(csobj_geom.GetCppInstanceTypeName());
					if (csobj_geomClassFactory != null)
					{
						csobj_geom.Delegate = true;
						csobj_geom = csobj_geomClassFactory.Create() as EarthView.World.Graphic.StaticGeometry;
						csobj_geom.BindNativeObject(geom, "CStaticGeometry");
						csobj_geom.Delegate = true;
					}
					
					DestroyStaticGeometry(csobj_geom);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyStaticGeometry_void_CStaticGeometry(IntPtr pNativeObject, IntPtr geom);

				public virtual void DestroyStaticGeometry(EarthView.World.Graphic.StaticGeometry geom)
				{
					EarthView_World_Graphic_CSceneManager_destroyStaticGeometry_void_CStaticGeometry(this.NativeObject, object.Equals(geom, null) ? IntPtr.Zero : geom.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyStaticGeometry_CallBack_void_EVString(ref IntPtr name);

				protected destroyStaticGeometry_CallBack_void_EVString m_destroyStaticGeometry_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyStaticGeometry_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual void DestroyStaticGeometry_NoVirtual(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyStaticGeometry_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyStaticGeometry_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroyStaticGeometry(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyStaticGeometry_void_EVString(IntPtr pNativeObject, string name);

				public virtual void DestroyStaticGeometry(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyStaticGeometry_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyAllStaticGeometry_CallBack_void();

				protected destroyAllStaticGeometry_CallBack_void m_destroyAllStaticGeometry_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllStaticGeometry_void_NoVirtual(IntPtr pNativeObject);

				public virtual void DestroyAllStaticGeometry_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllStaticGeometry_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyAllStaticGeometry_void_Function()
				{
					DestroyAllStaticGeometry();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllStaticGeometry_void(IntPtr pNativeObject);

				public virtual void DestroyAllStaticGeometry()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllStaticGeometry_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createInstancedGeometry_CallBack_CInstancedGeometry_EVString(ref IntPtr name);

				protected createInstancedGeometry_CallBack_CInstancedGeometry_EVString m_createInstancedGeometry_CallBack_CInstancedGeometry_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createInstancedGeometry_CInstancedGeometry_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.InstancedGeometry CreateInstancedGeometry_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createInstancedGeometry_CInstancedGeometry_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.InstancedGeometry csObj = new EarthView.World.Graphic.InstancedGeometry(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CInstancedGeometry");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.InstancedGeometry;
						csObj.BindNativeObject(__ptr, "CInstancedGeometry");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createInstancedGeometry_CInstancedGeometry_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.InstancedGeometry csret=CreateInstancedGeometry(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createInstancedGeometry_CInstancedGeometry_EVString(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.InstancedGeometry CreateInstancedGeometry(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createInstancedGeometry_CInstancedGeometry_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.InstancedGeometry csObj = new EarthView.World.Graphic.InstancedGeometry(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CInstancedGeometry");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.InstancedGeometry;
						csObj.BindNativeObject(__ptr, "CInstancedGeometry");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getInstancedGeometry_CallBack_CInstancedGeometry_EVString(ref IntPtr name);

				protected getInstancedGeometry_CallBack_CInstancedGeometry_EVString m_getInstancedGeometry_CallBack_CInstancedGeometry_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getInstancedGeometry_CInstancedGeometry_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.InstancedGeometry GetInstancedGeometry_NoVirtual(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getInstancedGeometry_CInstancedGeometry_EVString_NoVirtual(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.InstancedGeometry csObj = new EarthView.World.Graphic.InstancedGeometry(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CInstancedGeometry");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.InstancedGeometry;
						csObj.BindNativeObject(__ptr, "CInstancedGeometry");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getInstancedGeometry_CInstancedGeometry_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					EarthView.World.Graphic.InstancedGeometry csret=GetInstancedGeometry(strname);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getInstancedGeometry_CInstancedGeometry_EVString(IntPtr pNativeObject, string name);

				public virtual EarthView.World.Graphic.InstancedGeometry GetInstancedGeometry(string name)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getInstancedGeometry_CInstancedGeometry_EVString(this.NativeObject, name);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.InstancedGeometry csObj = new EarthView.World.Graphic.InstancedGeometry(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CInstancedGeometry");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.InstancedGeometry;
						csObj.BindNativeObject(__ptr, "CInstancedGeometry");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyInstancedGeometry_CallBack_void_CInstancedGeometry(IntPtr geom);

				protected destroyInstancedGeometry_CallBack_void_CInstancedGeometry m_destroyInstancedGeometry_CallBack_void_CInstancedGeometry;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyInstancedGeometry_void_CInstancedGeometry_NoVirtual(IntPtr pNativeObject, IntPtr geom);

				public virtual void DestroyInstancedGeometry_NoVirtual(EarthView.World.Graphic.InstancedGeometry geom)
				{
					EarthView_World_Graphic_CSceneManager_destroyInstancedGeometry_void_CInstancedGeometry_NoVirtual(this.NativeObject, object.Equals(geom, null) ? IntPtr.Zero : geom.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyInstancedGeometry_void_CInstancedGeometry_Function(IntPtr geom)
				{
					EarthView.World.Graphic.InstancedGeometry csobj_geom = new EarthView.World.Graphic.InstancedGeometry(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_geom.BindNativeObject(geom,"CInstancedGeometry");
					csobj_geom.Delegate = true;
					IClassFactory csobj_geomClassFactory = GlobalClassFactoryMap.Get(csobj_geom.GetCppInstanceTypeName());
					if (csobj_geomClassFactory != null)
					{
						csobj_geom.Delegate = true;
						csobj_geom = csobj_geomClassFactory.Create() as EarthView.World.Graphic.InstancedGeometry;
						csobj_geom.BindNativeObject(geom, "CInstancedGeometry");
						csobj_geom.Delegate = true;
					}
					
					DestroyInstancedGeometry(csobj_geom);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyInstancedGeometry_void_CInstancedGeometry(IntPtr pNativeObject, IntPtr geom);

				public virtual void DestroyInstancedGeometry(EarthView.World.Graphic.InstancedGeometry geom)
				{
					EarthView_World_Graphic_CSceneManager_destroyInstancedGeometry_void_CInstancedGeometry(this.NativeObject, object.Equals(geom, null) ? IntPtr.Zero : geom.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyInstancedGeometry_CallBack_void_EVString(ref IntPtr name);

				protected destroyInstancedGeometry_CallBack_void_EVString m_destroyInstancedGeometry_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyInstancedGeometry_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual void DestroyInstancedGeometry_NoVirtual(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyInstancedGeometry_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyInstancedGeometry_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroyInstancedGeometry(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyInstancedGeometry_void_EVString(IntPtr pNativeObject, string name);

				public virtual void DestroyInstancedGeometry(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyInstancedGeometry_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyAllInstancedGeometry_CallBack_void();

				protected destroyAllInstancedGeometry_CallBack_void m_destroyAllInstancedGeometry_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllInstancedGeometry_void_NoVirtual(IntPtr pNativeObject);

				public virtual void DestroyAllInstancedGeometry_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllInstancedGeometry_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyAllInstancedGeometry_void_Function()
				{
					DestroyAllInstancedGeometry();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllInstancedGeometry_void(IntPtr pNativeObject);

				public virtual void DestroyAllInstancedGeometry()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllInstancedGeometry_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(ref IntPtr customName, ref IntPtr meshName, ref IntPtr groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags, ushort subMeshIdx);

				protected createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16 m_createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_NoVirtual(IntPtr pNativeObject, string customName, string meshName, string groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags, ushort subMeshIdx);

				/// <summary>
				/// 创建Instance管理器
				/// 每个submesh对应一个instance管理器
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.InstanceManager CreateInstanceManager_NoVirtual(string customName, string meshName, string groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags, ushort subMeshIdx)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_NoVirtual(this.NativeObject, customName, meshName, groupName, technique, numInstancesPerBatch, flags, subMeshIdx);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.InstanceManager csObj = new EarthView.World.Graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CInstanceManager");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.InstanceManager;
						csObj.BindNativeObject(__ptr, "CInstanceManager");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_Function(ref IntPtr customName, ref IntPtr meshName, ref IntPtr groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags, ushort subMeshIdx)
				{
					string strcustomName= Marshal.PtrToStringAnsi(customName);
					ClassFactory.FreeString(ref customName);
					string strmeshName= Marshal.PtrToStringAnsi(meshName);
					ClassFactory.FreeString(ref meshName);
					string strgroupName= Marshal.PtrToStringAnsi(groupName);
					ClassFactory.FreeString(ref groupName);
					
					EarthView.World.Graphic.InstanceManager csret=CreateInstanceManager(strcustomName,strmeshName,strgroupName,technique, numInstancesPerBatch, flags, subMeshIdx);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(IntPtr pNativeObject, string customName, string meshName, string groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags, ushort subMeshIdx);

				/// <summary>
				/// 创建Instance管理器
				/// 每个submesh对应一个instance管理器
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.InstanceManager CreateInstanceManager(string customName, string meshName, string groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags, ushort subMeshIdx)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(this.NativeObject, customName, meshName, groupName, technique, numInstancesPerBatch, flags, subMeshIdx);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.InstanceManager csObj = new EarthView.World.Graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CInstanceManager");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.InstanceManager;
						csObj.BindNativeObject(__ptr, "CInstanceManager");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(ref IntPtr customName, ref IntPtr meshName, ref IntPtr groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags);

				protected createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16 m_createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_NoVirtual(IntPtr pNativeObject, string customName, string meshName, string groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags);

				public virtual EarthView.World.Graphic.InstanceManager CreateInstanceManager_NoVirtual(string customName, string meshName, string groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_NoVirtual(this.NativeObject, customName, meshName, groupName, technique, numInstancesPerBatch, flags);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.InstanceManager csObj = new EarthView.World.Graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CInstanceManager");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.InstanceManager;
						csObj.BindNativeObject(__ptr, "CInstanceManager");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_Function(ref IntPtr customName, ref IntPtr meshName, ref IntPtr groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags)
				{
					string strcustomName= Marshal.PtrToStringAnsi(customName);
					ClassFactory.FreeString(ref customName);
					string strmeshName= Marshal.PtrToStringAnsi(meshName);
					ClassFactory.FreeString(ref meshName);
					string strgroupName= Marshal.PtrToStringAnsi(groupName);
					ClassFactory.FreeString(ref groupName);
					
					EarthView.World.Graphic.InstanceManager csret=CreateInstanceManager(strcustomName,strmeshName,strgroupName,technique, numInstancesPerBatch, flags);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(IntPtr pNativeObject, string customName, string meshName, string groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags);

				public virtual EarthView.World.Graphic.InstanceManager CreateInstanceManager(string customName, string meshName, string groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(this.NativeObject, customName, meshName, groupName, technique, numInstancesPerBatch, flags);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.InstanceManager csObj = new EarthView.World.Graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CInstanceManager");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.InstanceManager;
						csObj.BindNativeObject(__ptr, "CInstanceManager");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t(ref IntPtr customName, ref IntPtr meshName, ref IntPtr groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch);

				protected createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t m_createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_NoVirtual(IntPtr pNativeObject, string customName, string meshName, string groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch);

				public virtual EarthView.World.Graphic.InstanceManager CreateInstanceManager_NoVirtual(string customName, string meshName, string groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_NoVirtual(this.NativeObject, customName, meshName, groupName, technique, numInstancesPerBatch);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.InstanceManager csObj = new EarthView.World.Graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CInstanceManager");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.InstanceManager;
						csObj.BindNativeObject(__ptr, "CInstanceManager");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_Function(ref IntPtr customName, ref IntPtr meshName, ref IntPtr groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch)
				{
					string strcustomName= Marshal.PtrToStringAnsi(customName);
					ClassFactory.FreeString(ref customName);
					string strmeshName= Marshal.PtrToStringAnsi(meshName);
					ClassFactory.FreeString(ref meshName);
					string strgroupName= Marshal.PtrToStringAnsi(groupName);
					ClassFactory.FreeString(ref groupName);
					
					EarthView.World.Graphic.InstanceManager csret=CreateInstanceManager(strcustomName,strmeshName,strgroupName,technique, numInstancesPerBatch);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t(IntPtr pNativeObject, string customName, string meshName, string groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch);

				public virtual EarthView.World.Graphic.InstanceManager CreateInstanceManager(string customName, string meshName, string groupName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t(this.NativeObject, customName, meshName, groupName, technique, numInstancesPerBatch);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.InstanceManager csObj = new EarthView.World.Graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CInstanceManager");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.InstanceManager;
						csObj.BindNativeObject(__ptr, "CInstanceManager");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_addInstanceManager_void_CInstanceManager(IntPtr pNativeObject, IntPtr pInstMnger);

				public void AddInstanceManager(EarthView.World.Graphic.InstanceManager pInstMnger)
				{
					EarthView_World_Graphic_CSceneManager_addInstanceManager_void_CInstanceManager(this.NativeObject, object.Equals(pInstMnger, null) ? IntPtr.Zero : pInstMnger.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getInstanceManager_CallBack_CInstanceManager_EVString(ref IntPtr managerName);

				protected getInstanceManager_CallBack_CInstanceManager_EVString m_getInstanceManager_CallBack_CInstanceManager_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getInstanceManager_CInstanceManager_EVString_NoVirtual(IntPtr pNativeObject, string managerName);

				/// <summary>
				/// 获得Instance管理器
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.InstanceManager GetInstanceManager_NoVirtual(string managerName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getInstanceManager_CInstanceManager_EVString_NoVirtual(this.NativeObject, managerName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.InstanceManager csObj = new EarthView.World.Graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CInstanceManager");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.InstanceManager;
						csObj.BindNativeObject(__ptr, "CInstanceManager");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getInstanceManager_CInstanceManager_EVString_Function(ref IntPtr managerName)
				{
					string strmanagerName= Marshal.PtrToStringAnsi(managerName);
					ClassFactory.FreeString(ref managerName);
					
					EarthView.World.Graphic.InstanceManager csret=GetInstanceManager(strmanagerName);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getInstanceManager_CInstanceManager_EVString(IntPtr pNativeObject, string managerName);

				/// <summary>
				/// 获得Instance管理器
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.InstanceManager GetInstanceManager(string managerName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getInstanceManager_CInstanceManager_EVString(this.NativeObject, managerName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.InstanceManager csObj = new EarthView.World.Graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CInstanceManager");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.InstanceManager;
						csObj.BindNativeObject(__ptr, "CInstanceManager");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte hasInstanceManager_CallBack_ev_bool_EVString(ref IntPtr managerName);

				protected hasInstanceManager_CallBack_ev_bool_EVString m_hasInstanceManager_CallBack_ev_bool_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasInstanceManager_ev_bool_EVString_NoVirtual(IntPtr pNativeObject, string managerName);

				/// <summary>
				/// 判断是否存在给定名称的Instance管理器
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual bool HasInstanceManager_NoVirtual(string managerName)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasInstanceManager_ev_bool_EVString_NoVirtual(this.NativeObject, managerName);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_hasInstanceManager_ev_bool_EVString_Function(ref IntPtr managerName)
				{
					string strmanagerName= Marshal.PtrToStringAnsi(managerName);
					ClassFactory.FreeString(ref managerName);
					
					bool csret=HasInstanceManager(strmanagerName);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasInstanceManager_ev_bool_EVString(IntPtr pNativeObject, string managerName);

				/// <summary>
				/// 判断是否存在给定名称的Instance管理器
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual bool HasInstanceManager(string managerName)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasInstanceManager_ev_bool_EVString(this.NativeObject, managerName);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyInstanceManager_CallBack_void_EVString(ref IntPtr name);

				protected destroyInstanceManager_CallBack_void_EVString m_destroyInstanceManager_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyInstanceManager_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				/// <summary>
				/// 销毁给定的Instance管理器
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void DestroyInstanceManager_NoVirtual(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyInstanceManager_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyInstanceManager_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroyInstanceManager(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyInstanceManager_void_EVString(IntPtr pNativeObject, string name);

				/// <summary>
				/// 销毁给定的Instance管理器
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void DestroyInstanceManager(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyInstanceManager_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyInstanceManager_CallBack_void_CInstanceManager(IntPtr instanceManager);

				protected destroyInstanceManager_CallBack_void_CInstanceManager m_destroyInstanceManager_CallBack_void_CInstanceManager;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyInstanceManager_void_CInstanceManager_NoVirtual(IntPtr pNativeObject, IntPtr instanceManager);

				public virtual void DestroyInstanceManager_NoVirtual(EarthView.World.Graphic.InstanceManager instanceManager)
				{
					EarthView_World_Graphic_CSceneManager_destroyInstanceManager_void_CInstanceManager_NoVirtual(this.NativeObject, object.Equals(instanceManager, null) ? IntPtr.Zero : instanceManager.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyInstanceManager_void_CInstanceManager_Function(IntPtr instanceManager)
				{
					EarthView.World.Graphic.InstanceManager csobj_instanceManager = new EarthView.World.Graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_instanceManager.BindNativeObject(instanceManager,"CInstanceManager");
					csobj_instanceManager.Delegate = true;
					IClassFactory csobj_instanceManagerClassFactory = GlobalClassFactoryMap.Get(csobj_instanceManager.GetCppInstanceTypeName());
					if (csobj_instanceManagerClassFactory != null)
					{
						csobj_instanceManager.Delegate = true;
						csobj_instanceManager = csobj_instanceManagerClassFactory.Create() as EarthView.World.Graphic.InstanceManager;
						csobj_instanceManager.BindNativeObject(instanceManager, "CInstanceManager");
						csobj_instanceManager.Delegate = true;
					}
					
					DestroyInstanceManager(csobj_instanceManager);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyInstanceManager_void_CInstanceManager(IntPtr pNativeObject, IntPtr instanceManager);

				public virtual void DestroyInstanceManager(EarthView.World.Graphic.InstanceManager instanceManager)
				{
					EarthView_World_Graphic_CSceneManager_destroyInstanceManager_void_CInstanceManager(this.NativeObject, object.Equals(instanceManager, null) ? IntPtr.Zero : instanceManager.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyInstanceManagerWithThreadSafe_CallBack_void_EVString(ref IntPtr name);

				protected destroyInstanceManagerWithThreadSafe_CallBack_void_EVString m_destroyInstanceManagerWithThreadSafe_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyInstanceManagerWithThreadSafe_void_EVString_NoVirtual(IntPtr pNativeObject, string name);

				public virtual void DestroyInstanceManagerWithThreadSafe_NoVirtual(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyInstanceManagerWithThreadSafe_void_EVString_NoVirtual(this.NativeObject, name);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyInstanceManagerWithThreadSafe_void_EVString_Function(ref IntPtr name)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					
					DestroyInstanceManagerWithThreadSafe(strname);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyInstanceManagerWithThreadSafe_void_EVString(IntPtr pNativeObject, string name);

				public virtual void DestroyInstanceManagerWithThreadSafe(string name)
				{
					EarthView_World_Graphic_CSceneManager_destroyInstanceManagerWithThreadSafe_void_EVString(this.NativeObject, name);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyInstanceManagerWithThreadSafe_CallBack_void_CInstanceManager(IntPtr instanceManager);

				protected destroyInstanceManagerWithThreadSafe_CallBack_void_CInstanceManager m_destroyInstanceManagerWithThreadSafe_CallBack_void_CInstanceManager;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyInstanceManagerWithThreadSafe_void_CInstanceManager_NoVirtual(IntPtr pNativeObject, IntPtr instanceManager);

				public virtual void DestroyInstanceManagerWithThreadSafe_NoVirtual(EarthView.World.Graphic.InstanceManager instanceManager)
				{
					EarthView_World_Graphic_CSceneManager_destroyInstanceManagerWithThreadSafe_void_CInstanceManager_NoVirtual(this.NativeObject, object.Equals(instanceManager, null) ? IntPtr.Zero : instanceManager.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyInstanceManagerWithThreadSafe_void_CInstanceManager_Function(IntPtr instanceManager)
				{
					EarthView.World.Graphic.InstanceManager csobj_instanceManager = new EarthView.World.Graphic.InstanceManager(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_instanceManager.BindNativeObject(instanceManager,"CInstanceManager");
					csobj_instanceManager.Delegate = true;
					IClassFactory csobj_instanceManagerClassFactory = GlobalClassFactoryMap.Get(csobj_instanceManager.GetCppInstanceTypeName());
					if (csobj_instanceManagerClassFactory != null)
					{
						csobj_instanceManager.Delegate = true;
						csobj_instanceManager = csobj_instanceManagerClassFactory.Create() as EarthView.World.Graphic.InstanceManager;
						csobj_instanceManager.BindNativeObject(instanceManager, "CInstanceManager");
						csobj_instanceManager.Delegate = true;
					}
					
					DestroyInstanceManagerWithThreadSafe(csobj_instanceManager);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyInstanceManagerWithThreadSafe_void_CInstanceManager(IntPtr pNativeObject, IntPtr instanceManager);

				public virtual void DestroyInstanceManagerWithThreadSafe(EarthView.World.Graphic.InstanceManager instanceManager)
				{
					EarthView_World_Graphic_CSceneManager_destroyInstanceManagerWithThreadSafe_void_CInstanceManager(this.NativeObject, object.Equals(instanceManager, null) ? IntPtr.Zero : instanceManager.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyAllInstanceManagers_CallBack_void();

				protected destroyAllInstanceManagers_CallBack_void m_destroyAllInstanceManagers_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllInstanceManagers_void_NoVirtual(IntPtr pNativeObject);

				/// <summary>
				/// 销毁所有Instance管理器
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void DestroyAllInstanceManagers_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllInstanceManagers_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyAllInstanceManagers_void_Function()
				{
					DestroyAllInstanceManagers();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllInstanceManagers_void(IntPtr pNativeObject);

				/// <summary>
				/// 销毁所有Instance管理器
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void DestroyAllInstanceManagers()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllInstanceManagers_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate ulong getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t(ref IntPtr meshName, ref IntPtr groupName, ref IntPtr materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch);

				protected getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t m_getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_NoVirtual(IntPtr pNativeObject, string meshName, string groupName, string materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch);

				/// <summary>
				/// 获得每个批次支持的最多instance数量
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual ulong GetNumInstancesPerBatch_NoVirtual(string meshName, string groupName, string materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch)
				{
					ulong ret=EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_NoVirtual(this.NativeObject, meshName, groupName, materialName, technique, numInstancesPerBatch);
					
					return ret;
					
				}

				protected  ulong EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_Function(ref IntPtr meshName, ref IntPtr groupName, ref IntPtr materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch)
				{
					string strmeshName= Marshal.PtrToStringAnsi(meshName);
					ClassFactory.FreeString(ref meshName);
					string strgroupName= Marshal.PtrToStringAnsi(groupName);
					ClassFactory.FreeString(ref groupName);
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					ulong csret=GetNumInstancesPerBatch(strmeshName,strgroupName,strmaterialName,technique, numInstancesPerBatch);
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t(IntPtr pNativeObject, string meshName, string groupName, string materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch);

				/// <summary>
				/// 获得每个批次支持的最多instance数量
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual ulong GetNumInstancesPerBatch(string meshName, string groupName, string materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch)
				{
					ulong ret=EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t(this.NativeObject, meshName, groupName, materialName, technique, numInstancesPerBatch);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate ulong getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(ref IntPtr meshName, ref IntPtr groupName, ref IntPtr materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags);

				protected getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16 m_getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_NoVirtual(IntPtr pNativeObject, string meshName, string groupName, string materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags);

				public virtual ulong GetNumInstancesPerBatch_NoVirtual(string meshName, string groupName, string materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags)
				{
					ulong ret=EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_NoVirtual(this.NativeObject, meshName, groupName, materialName, technique, numInstancesPerBatch, flags);
					
					return ret;
					
				}

				protected  ulong EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_Function(ref IntPtr meshName, ref IntPtr groupName, ref IntPtr materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags)
				{
					string strmeshName= Marshal.PtrToStringAnsi(meshName);
					ClassFactory.FreeString(ref meshName);
					string strgroupName= Marshal.PtrToStringAnsi(groupName);
					ClassFactory.FreeString(ref groupName);
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					ulong csret=GetNumInstancesPerBatch(strmeshName,strgroupName,strmaterialName,technique, numInstancesPerBatch, flags);
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(IntPtr pNativeObject, string meshName, string groupName, string materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags);

				public virtual ulong GetNumInstancesPerBatch(string meshName, string groupName, string materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags)
				{
					ulong ret=EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(this.NativeObject, meshName, groupName, materialName, technique, numInstancesPerBatch, flags);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate ulong getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(ref IntPtr meshName, ref IntPtr groupName, ref IntPtr materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags, ushort subMeshIdx);

				protected getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16 m_getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_NoVirtual(IntPtr pNativeObject, string meshName, string groupName, string materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags, ushort subMeshIdx);

				public virtual ulong GetNumInstancesPerBatch_NoVirtual(string meshName, string groupName, string materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags, ushort subMeshIdx)
				{
					ulong ret=EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_NoVirtual(this.NativeObject, meshName, groupName, materialName, technique, numInstancesPerBatch, flags, subMeshIdx);
					
					return ret;
					
				}

				protected  ulong EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_Function(ref IntPtr meshName, ref IntPtr groupName, ref IntPtr materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags, ushort subMeshIdx)
				{
					string strmeshName= Marshal.PtrToStringAnsi(meshName);
					ClassFactory.FreeString(ref meshName);
					string strgroupName= Marshal.PtrToStringAnsi(groupName);
					ClassFactory.FreeString(ref groupName);
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					
					ulong csret=GetNumInstancesPerBatch(strmeshName,strgroupName,strmaterialName,technique, numInstancesPerBatch, flags, subMeshIdx);
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ulong EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(IntPtr pNativeObject, string meshName, string groupName, string materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags, ushort subMeshIdx);

				public virtual ulong GetNumInstancesPerBatch(string meshName, string groupName, string materialName, EarthView.World.Graphic.InstanceManager.INSTANCINGTECHNIQUE technique, ulong numInstancesPerBatch, ushort flags, ushort subMeshIdx)
				{
					ulong ret=EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(this.NativeObject, meshName, groupName, materialName, technique, numInstancesPerBatch, flags, subMeshIdx);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createInstancedEntity_CallBack_CInstancedEntity_EVString_EVString(ref IntPtr materialName, ref IntPtr managerName);

				protected createInstancedEntity_CallBack_CInstancedEntity_EVString_EVString m_createInstancedEntity_CallBack_CInstancedEntity_EVString_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createInstancedEntity_CInstancedEntity_EVString_EVString_NoVirtual(IntPtr pNativeObject, string materialName, string managerName);

				/// <summary>
				/// 创建Instance实体
				/// 每个实体对应一个SubMesh
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.InstancedEntity CreateInstancedEntity_NoVirtual(string materialName, string managerName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createInstancedEntity_CInstancedEntity_EVString_EVString_NoVirtual(this.NativeObject, materialName, managerName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.InstancedEntity csObj = new EarthView.World.Graphic.InstancedEntity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CInstancedEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.InstancedEntity;
						csObj.BindNativeObject(__ptr, "CInstancedEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createInstancedEntity_CInstancedEntity_EVString_EVString_Function(ref IntPtr materialName, ref IntPtr managerName)
				{
					string strmaterialName= Marshal.PtrToStringAnsi(materialName);
					ClassFactory.FreeString(ref materialName);
					string strmanagerName= Marshal.PtrToStringAnsi(managerName);
					ClassFactory.FreeString(ref managerName);
					
					EarthView.World.Graphic.InstancedEntity csret=CreateInstancedEntity(strmaterialName,strmanagerName);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createInstancedEntity_CInstancedEntity_EVString_EVString(IntPtr pNativeObject, string materialName, string managerName);

				/// <summary>
				/// 创建Instance实体
				/// 每个实体对应一个SubMesh
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual EarthView.World.Graphic.InstancedEntity CreateInstancedEntity(string materialName, string managerName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createInstancedEntity_CInstancedEntity_EVString_EVString(this.NativeObject, materialName, managerName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.InstancedEntity csObj = new EarthView.World.Graphic.InstancedEntity(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CInstancedEntity");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.InstancedEntity;
						csObj.BindNativeObject(__ptr, "CInstancedEntity");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyInstancedEntity_CallBack_void_CInstancedEntity(IntPtr instancedEntity);

				protected destroyInstancedEntity_CallBack_void_CInstancedEntity m_destroyInstancedEntity_CallBack_void_CInstancedEntity;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyInstancedEntity_void_CInstancedEntity_NoVirtual(IntPtr pNativeObject, IntPtr instancedEntity);

				/// <summary>
				/// 销毁Instance实体				
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void DestroyInstancedEntity_NoVirtual(EarthView.World.Graphic.InstancedEntity instancedEntity)
				{
					EarthView_World_Graphic_CSceneManager_destroyInstancedEntity_void_CInstancedEntity_NoVirtual(this.NativeObject, object.Equals(instancedEntity, null) ? IntPtr.Zero : instancedEntity.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyInstancedEntity_void_CInstancedEntity_Function(IntPtr instancedEntity)
				{
					EarthView.World.Graphic.InstancedEntity csobj_instancedEntity = new EarthView.World.Graphic.InstancedEntity(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_instancedEntity.BindNativeObject(instancedEntity,"CInstancedEntity");
					csobj_instancedEntity.Delegate = true;
					IClassFactory csobj_instancedEntityClassFactory = GlobalClassFactoryMap.Get(csobj_instancedEntity.GetCppInstanceTypeName());
					if (csobj_instancedEntityClassFactory != null)
					{
						csobj_instancedEntity.Delegate = true;
						csobj_instancedEntity = csobj_instancedEntityClassFactory.Create() as EarthView.World.Graphic.InstancedEntity;
						csobj_instancedEntity.BindNativeObject(instancedEntity, "CInstancedEntity");
						csobj_instancedEntity.Delegate = true;
					}
					
					DestroyInstancedEntity(csobj_instancedEntity);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyInstancedEntity_void_CInstancedEntity(IntPtr pNativeObject, IntPtr instancedEntity);

				/// <summary>
				/// 销毁Instance实体				
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public virtual void DestroyInstancedEntity(EarthView.World.Graphic.InstancedEntity instancedEntity)
				{
					EarthView_World_Graphic_CSceneManager_destroyInstancedEntity_void_CInstancedEntity(this.NativeObject, object.Equals(instancedEntity, null) ? IntPtr.Zero : instancedEntity.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__addDirtyInstanceManager_void_CInstanceManager(IntPtr pNativeObject, IntPtr ref_dirtyManager);

				/// <summary>
				/// 将instance管理器添加到需要更新包围盒的队列中		
				/// </summary>		
				/// <param name=""></param>				
				/// <returns></returns>
				public void _addDirtyInstanceManager(EarthView.World.Graphic.InstanceManager ref_dirtyManager)
				{
					EarthView_World_Graphic_CSceneManager__addDirtyInstanceManager_void_CInstanceManager(this.NativeObject, object.Equals(ref_dirtyManager, null) ? IntPtr.Zero : ref_dirtyManager.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createMovableObject_CallBack_CMovableObject_EVString_EVString_CommonStringPairList(ref IntPtr name, ref IntPtr typeName, IntPtr EVparams);

				protected createMovableObject_CallBack_CMovableObject_EVString_EVString_CommonStringPairList m_createMovableObject_CallBack_CMovableObject_EVString_EVString_CommonStringPairList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_EVString_CommonStringPairList_NoVirtual(IntPtr pNativeObject, string name, string typeName, IntPtr EVparams);

				public virtual EarthView.World.Graphic.MovableObject CreateMovableObject_NoVirtual(string name, string typeName, EarthView.World.Core.CommonStringPairList EVparams)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_EVString_CommonStringPairList_NoVirtual(this.NativeObject, name, typeName, object.Equals(EVparams, null) ? IntPtr.Zero : EVparams.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.MovableObject csObj = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMovableObject");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MovableObject;
						csObj.BindNativeObject(__ptr, "CMovableObject");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_EVString_CommonStringPairList_Function(ref IntPtr name, ref IntPtr typeName, IntPtr EVparams)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					string strtypeName= Marshal.PtrToStringAnsi(typeName);
					ClassFactory.FreeString(ref typeName);
					EarthView.World.Core.CommonStringPairList csobj_params = new EarthView.World.Core.CommonStringPairList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_params.BindNativeObject(EVparams,"CommonStringPairList");
					csobj_params.Delegate = true;
					IClassFactory csobj_paramsClassFactory = GlobalClassFactoryMap.Get(csobj_params.GetCppInstanceTypeName());
					if (csobj_paramsClassFactory != null)
					{
						csobj_params.Delegate = true;
						csobj_params = csobj_paramsClassFactory.Create() as EarthView.World.Core.CommonStringPairList;
						csobj_params.BindNativeObject(EVparams, "CommonStringPairList");
						csobj_params.Delegate = true;
					}
					
					EarthView.World.Graphic.MovableObject csret=CreateMovableObject(strname,strtypeName,csobj_params);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_EVString_CommonStringPairList(IntPtr pNativeObject, string name, string typeName, IntPtr EVparams);

				public virtual EarthView.World.Graphic.MovableObject CreateMovableObject(string name, string typeName, EarthView.World.Core.CommonStringPairList EVparams)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_EVString_CommonStringPairList(this.NativeObject, name, typeName, object.Equals(EVparams, null) ? IntPtr.Zero : EVparams.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.MovableObject csObj = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMovableObject");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MovableObject;
						csObj.BindNativeObject(__ptr, "CMovableObject");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createMovableObject_CallBack_CMovableObject_EVString_EVString(ref IntPtr name, ref IntPtr typeName);

				protected createMovableObject_CallBack_CMovableObject_EVString_EVString m_createMovableObject_CallBack_CMovableObject_EVString_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_EVString_NoVirtual(IntPtr pNativeObject, string name, string typeName);

				public virtual EarthView.World.Graphic.MovableObject CreateMovableObject_NoVirtual(string name, string typeName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_EVString_NoVirtual(this.NativeObject, name, typeName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.MovableObject csObj = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMovableObject");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MovableObject;
						csObj.BindNativeObject(__ptr, "CMovableObject");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_EVString_Function(ref IntPtr name, ref IntPtr typeName)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					string strtypeName= Marshal.PtrToStringAnsi(typeName);
					ClassFactory.FreeString(ref typeName);
					
					EarthView.World.Graphic.MovableObject csret=CreateMovableObject(strname,strtypeName);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_EVString(IntPtr pNativeObject, string name, string typeName);

				public virtual EarthView.World.Graphic.MovableObject CreateMovableObject(string name, string typeName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_EVString(this.NativeObject, name, typeName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.MovableObject csObj = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMovableObject");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MovableObject;
						csObj.BindNativeObject(__ptr, "CMovableObject");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createMovableObject_CallBack_CMovableObject_EVString_CommonStringPairList(ref IntPtr typeName, IntPtr EVparams);

				protected createMovableObject_CallBack_CMovableObject_EVString_CommonStringPairList m_createMovableObject_CallBack_CMovableObject_EVString_CommonStringPairList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_CommonStringPairList_NoVirtual(IntPtr pNativeObject, string typeName, IntPtr EVparams);

				public virtual EarthView.World.Graphic.MovableObject CreateMovableObject_NoVirtual(string typeName, EarthView.World.Core.CommonStringPairList EVparams)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_CommonStringPairList_NoVirtual(this.NativeObject, typeName, object.Equals(EVparams, null) ? IntPtr.Zero : EVparams.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.MovableObject csObj = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMovableObject");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MovableObject;
						csObj.BindNativeObject(__ptr, "CMovableObject");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_CommonStringPairList_Function(ref IntPtr typeName, IntPtr EVparams)
				{
					string strtypeName= Marshal.PtrToStringAnsi(typeName);
					ClassFactory.FreeString(ref typeName);
					EarthView.World.Core.CommonStringPairList csobj_params = new EarthView.World.Core.CommonStringPairList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_params.BindNativeObject(EVparams,"CommonStringPairList");
					csobj_params.Delegate = true;
					IClassFactory csobj_paramsClassFactory = GlobalClassFactoryMap.Get(csobj_params.GetCppInstanceTypeName());
					if (csobj_paramsClassFactory != null)
					{
						csobj_params.Delegate = true;
						csobj_params = csobj_paramsClassFactory.Create() as EarthView.World.Core.CommonStringPairList;
						csobj_params.BindNativeObject(EVparams, "CommonStringPairList");
						csobj_params.Delegate = true;
					}
					
					EarthView.World.Graphic.MovableObject csret=CreateMovableObject(strtypeName,csobj_params);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_CommonStringPairList(IntPtr pNativeObject, string typeName, IntPtr EVparams);

				public virtual EarthView.World.Graphic.MovableObject CreateMovableObject(string typeName, EarthView.World.Core.CommonStringPairList EVparams)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_CommonStringPairList(this.NativeObject, typeName, object.Equals(EVparams, null) ? IntPtr.Zero : EVparams.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.MovableObject csObj = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMovableObject");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MovableObject;
						csObj.BindNativeObject(__ptr, "CMovableObject");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createMovableObject_CallBack_CMovableObject_EVString(ref IntPtr typeName);

				protected createMovableObject_CallBack_CMovableObject_EVString m_createMovableObject_CallBack_CMovableObject_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_NoVirtual(IntPtr pNativeObject, string typeName);

				public virtual EarthView.World.Graphic.MovableObject CreateMovableObject_NoVirtual(string typeName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_NoVirtual(this.NativeObject, typeName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.MovableObject csObj = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMovableObject");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MovableObject;
						csObj.BindNativeObject(__ptr, "CMovableObject");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_Function(ref IntPtr typeName)
				{
					string strtypeName= Marshal.PtrToStringAnsi(typeName);
					ClassFactory.FreeString(ref typeName);
					
					EarthView.World.Graphic.MovableObject csret=CreateMovableObject(strtypeName);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString(IntPtr pNativeObject, string typeName);

				public virtual EarthView.World.Graphic.MovableObject CreateMovableObject(string typeName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString(this.NativeObject, typeName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.MovableObject csObj = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMovableObject");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MovableObject;
						csObj.BindNativeObject(__ptr, "CMovableObject");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyMovableObject_CallBack_void_EVString_EVString(ref IntPtr name, ref IntPtr typeName);

				protected destroyMovableObject_CallBack_void_EVString_EVString m_destroyMovableObject_CallBack_void_EVString_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyMovableObject_void_EVString_EVString_NoVirtual(IntPtr pNativeObject, string name, string typeName);

				public virtual void DestroyMovableObject_NoVirtual(string name, string typeName)
				{
					EarthView_World_Graphic_CSceneManager_destroyMovableObject_void_EVString_EVString_NoVirtual(this.NativeObject, name, typeName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyMovableObject_void_EVString_EVString_Function(ref IntPtr name, ref IntPtr typeName)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					string strtypeName= Marshal.PtrToStringAnsi(typeName);
					ClassFactory.FreeString(ref typeName);
					
					DestroyMovableObject(strname,strtypeName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyMovableObject_void_EVString_EVString(IntPtr pNativeObject, string name, string typeName);

				public virtual void DestroyMovableObject(string name, string typeName)
				{
					EarthView_World_Graphic_CSceneManager_destroyMovableObject_void_EVString_EVString(this.NativeObject, name, typeName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyMovableObject_CallBack_void_CMovableObject(IntPtr m);

				protected destroyMovableObject_CallBack_void_CMovableObject m_destroyMovableObject_CallBack_void_CMovableObject;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyMovableObject_void_CMovableObject_NoVirtual(IntPtr pNativeObject, IntPtr m);

				public virtual void DestroyMovableObject_NoVirtual(EarthView.World.Graphic.MovableObject m)
				{
					EarthView_World_Graphic_CSceneManager_destroyMovableObject_void_CMovableObject_NoVirtual(this.NativeObject, object.Equals(m, null) ? IntPtr.Zero : m.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyMovableObject_void_CMovableObject_Function(IntPtr m)
				{
					EarthView.World.Graphic.MovableObject csobj_m = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_m.BindNativeObject(m,"CMovableObject");
					csobj_m.Delegate = true;
					IClassFactory csobj_mClassFactory = GlobalClassFactoryMap.Get(csobj_m.GetCppInstanceTypeName());
					if (csobj_mClassFactory != null)
					{
						csobj_m.Delegate = true;
						csobj_m = csobj_mClassFactory.Create() as EarthView.World.Graphic.MovableObject;
						csobj_m.BindNativeObject(m, "CMovableObject");
						csobj_m.Delegate = true;
					}
					
					DestroyMovableObject(csobj_m);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyMovableObject_void_CMovableObject(IntPtr pNativeObject, IntPtr m);

				public virtual void DestroyMovableObject(EarthView.World.Graphic.MovableObject m)
				{
					EarthView_World_Graphic_CSceneManager_destroyMovableObject_void_CMovableObject(this.NativeObject, object.Equals(m, null) ? IntPtr.Zero : m.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyAllMovableObjectsByType_CallBack_void_EVString(ref IntPtr typeName);

				protected destroyAllMovableObjectsByType_CallBack_void_EVString m_destroyAllMovableObjectsByType_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllMovableObjectsByType_void_EVString_NoVirtual(IntPtr pNativeObject, string typeName);

				public virtual void DestroyAllMovableObjectsByType_NoVirtual(string typeName)
				{
					EarthView_World_Graphic_CSceneManager_destroyAllMovableObjectsByType_void_EVString_NoVirtual(this.NativeObject, typeName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyAllMovableObjectsByType_void_EVString_Function(ref IntPtr typeName)
				{
					string strtypeName= Marshal.PtrToStringAnsi(typeName);
					ClassFactory.FreeString(ref typeName);
					
					DestroyAllMovableObjectsByType(strtypeName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllMovableObjectsByType_void_EVString(IntPtr pNativeObject, string typeName);

				public virtual void DestroyAllMovableObjectsByType(string typeName)
				{
					EarthView_World_Graphic_CSceneManager_destroyAllMovableObjectsByType_void_EVString(this.NativeObject, typeName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyAllMovableObjects_CallBack_void();

				protected destroyAllMovableObjects_CallBack_void m_destroyAllMovableObjects_CallBack_void;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllMovableObjects_void_NoVirtual(IntPtr pNativeObject);

				public virtual void DestroyAllMovableObjects_NoVirtual()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllMovableObjects_void_NoVirtual(this.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_destroyAllMovableObjects_void_Function()
				{
					DestroyAllMovableObjects();
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_destroyAllMovableObjects_void(IntPtr pNativeObject);

				public virtual void DestroyAllMovableObjects()
				{
					EarthView_World_Graphic_CSceneManager_destroyAllMovableObjects_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getMovableObject_CallBack_CMovableObject_EVString_EVString(ref IntPtr name, ref IntPtr typeName);

				protected getMovableObject_CallBack_CMovableObject_EVString_EVString m_getMovableObject_CallBack_CMovableObject_EVString_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getMovableObject_CMovableObject_EVString_EVString_NoVirtual(IntPtr pNativeObject, string name, string typeName);

				public virtual EarthView.World.Graphic.MovableObject GetMovableObject_NoVirtual(string name, string typeName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getMovableObject_CMovableObject_EVString_EVString_NoVirtual(this.NativeObject, name, typeName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.MovableObject csObj = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMovableObject");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MovableObject;
						csObj.BindNativeObject(__ptr, "CMovableObject");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getMovableObject_CMovableObject_EVString_EVString_Function(ref IntPtr name, ref IntPtr typeName)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					string strtypeName= Marshal.PtrToStringAnsi(typeName);
					ClassFactory.FreeString(ref typeName);
					
					EarthView.World.Graphic.MovableObject csret=GetMovableObject(strname,strtypeName);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getMovableObject_CMovableObject_EVString_EVString(IntPtr pNativeObject, string name, string typeName);

				public virtual EarthView.World.Graphic.MovableObject GetMovableObject(string name, string typeName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getMovableObject_CMovableObject_EVString_EVString(this.NativeObject, name, typeName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.MovableObject csObj = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CMovableObject");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MovableObject;
						csObj.BindNativeObject(__ptr, "CMovableObject");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte hasMovableObject_CallBack_ev_bool_EVString_EVString(ref IntPtr name, ref IntPtr typeName);

				protected hasMovableObject_CallBack_ev_bool_EVString_EVString m_hasMovableObject_CallBack_ev_bool_EVString_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasMovableObject_ev_bool_EVString_EVString_NoVirtual(IntPtr pNativeObject, string name, string typeName);

				public virtual bool HasMovableObject_NoVirtual(string name, string typeName)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasMovableObject_ev_bool_EVString_EVString_NoVirtual(this.NativeObject, name, typeName);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_hasMovableObject_ev_bool_EVString_EVString_Function(ref IntPtr name, ref IntPtr typeName)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					string strtypeName= Marshal.PtrToStringAnsi(typeName);
					ClassFactory.FreeString(ref typeName);
					
					bool csret=HasMovableObject(strname,strtypeName);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_hasMovableObject_ev_bool_EVString_EVString(IntPtr pNativeObject, string name, string typeName);

				public virtual bool HasMovableObject(string name, string typeName)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_hasMovableObject_ev_bool_EVString_EVString(this.NativeObject, name, typeName);
					
					return Convert.ToBoolean(ret);
					
				}

				public class MovableObjectIteratorPair : EarthView.World.Core.BaseObject
				{
					public MovableObjectIteratorPair() : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						Create("MovableObjectIteratorPair",  null);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}
					private string firstField;
					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr Get_EarthView_World_Graphic_CSceneManager_MovableObjectIteratorPair_first(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_MovableObjectIteratorPair_first( IntPtr pObject, string value );

					public 					string First
					{
						get
						{
							IntPtr __ptr = Get_EarthView_World_Graphic_CSceneManager_MovableObjectIteratorPair_first(this.NativeObject);
							
							string ret = Marshal.PtrToStringAnsi(__ptr);
							ClassFactory.FreeString(ref __ptr);
							return ret;
							
						}

						set
						{
							firstField = value;
							Set_EarthView_World_Graphic_CSceneManager_MovableObjectIteratorPair_first( this.NativeObject,value );
						}
					}

					private EarthView.World.Graphic.MovableObject secondField;
					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr Get_EarthView_World_Graphic_CSceneManager_MovableObjectIteratorPair_second(IntPtr pObject);

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void Set_EarthView_World_Graphic_CSceneManager_MovableObjectIteratorPair_second( IntPtr pObject, IntPtr value );

					public 					EarthView.World.Graphic.MovableObject Second
					{
						get
						{
							IntPtr __ptr = Get_EarthView_World_Graphic_CSceneManager_MovableObjectIteratorPair_second(this.NativeObject);
							
							if(__ptr==IntPtr.Zero)
							{
							return null;
							}
							if(!object.Equals(secondField, null)){
								secondField.NativeObject = __ptr;
								return secondField;
							}
							EarthView.World.Graphic.MovableObject csObj = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
							csObj.BindNativeObject(__ptr, "CMovableObject");
							csObj.Delegate = true;
							IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
							if (csObjClassFactory != null)
							{
								csObj.Delegate = true;
								csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MovableObject;
								csObj.BindNativeObject(__ptr, "CMovableObject");
								csObj.Delegate = true;
							}
							return csObj;
							
						}

						set
						{
							secondField = value;
							Set_EarthView_World_Graphic_CSceneManager_MovableObjectIteratorPair_second( this.NativeObject,object.Equals(value, null) ? IntPtr.Zero : value.NativeObject );
						}
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadMovableObjectIteratorPair = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadMovableObjectIteratorPair = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadMovableObjectIteratorPair = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadMovableObjectIteratorPair = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadMovableObjectIteratorPair = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadMovableObjectIteratorPair = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadMovableObjectIteratorPair = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadMovableObjectIteratorPair = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadMovableObjectIteratorPair = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadMovableObjectIteratorPair = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadMovableObjectIteratorPair = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadMovableObjectIteratorPair = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::MovableObjectIteratorPair", new MovableObjectIteratorPairClassFactory());

					public MovableObjectIteratorPair(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
						}
					}
					public static MovableObjectIteratorPair FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						MovableObjectIteratorPair obj = baseObj as  MovableObjectIteratorPair;
						if (object.Equals(obj, null))
						{
							obj = new MovableObjectIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "MovableObjectIteratorPair");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class MovableObjectIteratorPairClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						MovableObjectIteratorPair emptyInstance = new MovableObjectIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				public class MovableObjectIterator : EarthView.World.Core.BaseObject
				{
					public MovableObjectIterator(ref EarthView.World.Graphic.SceneManager.MovableObjectMap lst) : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						NameValuePairList list = new NameValuePairList();
						BasePtr valuelst = new BasePtr(lst);
						list.Add("lst", valuelst.PtrVal);
						Create("MovableObjectIterator", list);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}
					public MovableObjectIterator(EarthView.World.Graphic.SceneManager.MovableObjectIterator other) : base(CreatedWhenConstruct.CWC_NotToCreate)
					{
						NameValuePairList list = new NameValuePairList();
						BasePtr valueother = new BasePtr(other);
						list.Add("other", valueother.PtrVal);
						Create("MovableObjectIterator", list);
						RegisterCallBack();
						this.needDispose = true;
						GlobalTraceInfoMap.Put(this);
					}

					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern byte EarthView_World_Graphic_CSceneManager_MovableObjectIterator_hasMoreElements_ev_bool(IntPtr pNativeObject);

					public bool HasMoreElements()
					{
						byte ret=EarthView_World_Graphic_CSceneManager_MovableObjectIterator_hasMoreElements_ev_bool(this.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern void EarthView_World_Graphic_CSceneManager_MovableObjectIterator_moveNext_void(IntPtr pNativeObject);

					public void MoveNext()
					{
						EarthView_World_Graphic_CSceneManager_MovableObjectIterator_moveNext_void(this.NativeObject);
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern ushort EarthView_World_Graphic_CSceneManager_MovableObjectIterator_nextKey_ev_uint16(IntPtr pNativeObject);

					public ushort NextKey()
					{
						ushort ret=EarthView_World_Graphic_CSceneManager_MovableObjectIterator_nextKey_ev_uint16(this.NativeObject);
						
						return ret;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_MovableObjectIterator_nextValue_CMovableObject(IntPtr pNativeObject);

					public EarthView.World.Graphic.MovableObject NextValue()
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_MovableObjectIterator_nextValue_CMovableObject(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.MovableObject csObj = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CMovableObject");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MovableObject;
							csObj.BindNativeObject(__ptr, "CMovableObject");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr[] EarthView_World_Graphic_CSceneManager_MovableObjectIterator_nextValuePtr_CMovableObject(IntPtr pNativeObject);

					public EarthView.World.Graphic.MovableObject[] NextValuePtr()
					{
						IntPtr[] ret=EarthView_World_Graphic_CSceneManager_MovableObjectIterator_nextValuePtr_CMovableObject(this.NativeObject);
						
						EarthView.World.Graphic.MovableObject[] csObjs=new EarthView.World.Graphic.MovableObject[ret.Length];
						for (int i = 0; i < ret.Length; i++)
						{
						EarthView.World.Graphic.MovableObject csObj = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(ret[i], "CMovableObject");
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MovableObject;
							csObj.BindNativeObject(ret[i], "CMovableObject");
						}
						csObjs[i]=csObj;
						}
						return csObjs;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_MovableObjectIterator_next_CMovableObject(IntPtr pNativeObject);

					public EarthView.World.Graphic.MovableObject Next()
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_MovableObjectIterator_next_CMovableObject(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.MovableObject csObj = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "CMovableObject");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.MovableObject;
							csObj.BindNativeObject(__ptr, "CMovableObject");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_MovableObjectIterator_getBegin_MovableObjectIteratorPair(IntPtr pNativeObject);

					public EarthView.World.Graphic.SceneManager.MovableObjectIteratorPair GetBegin()
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_MovableObjectIterator_getBegin_MovableObjectIteratorPair(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.SceneManager.MovableObjectIteratorPair csObj = new EarthView.World.Graphic.SceneManager.MovableObjectIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "MovableObjectIteratorPair");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.MovableObjectIteratorPair;
							csObj.BindNativeObject(__ptr, "MovableObjectIteratorPair");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_MovableObjectIterator_getEnd_MovableObjectIteratorPair(IntPtr pNativeObject);

					public EarthView.World.Graphic.SceneManager.MovableObjectIteratorPair GetEnd()
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_MovableObjectIterator_getEnd_MovableObjectIteratorPair(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.SceneManager.MovableObjectIteratorPair csObj = new EarthView.World.Graphic.SceneManager.MovableObjectIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "MovableObjectIteratorPair");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.MovableObjectIteratorPair;
							csObj.BindNativeObject(__ptr, "MovableObjectIteratorPair");
							csObj.Delegate = true;
						}
						return csObj;
						
					}


					#if DEBUG 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#else 
						#if Windows 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#elif Linux 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Android 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
						#elif Apple 
							[System.Runtime.InteropServices.DllImport("__Internal")]
						#else 
							[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
						#endif 
					#endif 
					private static extern IntPtr EarthView_World_Graphic_CSceneManager_MovableObjectIterator_getCurrent_MovableObjectIteratorPair(IntPtr pNativeObject);

					public EarthView.World.Graphic.SceneManager.MovableObjectIteratorPair GetCurrent()
					{
						IntPtr __ptr = EarthView_World_Graphic_CSceneManager_MovableObjectIterator_getCurrent_MovableObjectIteratorPair(this.NativeObject);
						
						if(__ptr==IntPtr.Zero)
						{
						return null;
						}
						EarthView.World.Graphic.SceneManager.MovableObjectIteratorPair csObj = new EarthView.World.Graphic.SceneManager.MovableObjectIteratorPair(CreatedWhenConstruct.CWC_NotToCreate);
						csObj.BindNativeObject(__ptr, "MovableObjectIteratorPair");
						csObj.Delegate = true;
						IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
						if (csObjClassFactory != null)
						{
							csObj.Delegate = true;
							csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.MovableObjectIteratorPair;
							csObj.BindNativeObject(__ptr, "MovableObjectIteratorPair");
							csObj.Delegate = true;
						}
						return csObj;
						
					}

					#if DEBUG 
						#if Windows 
							private static bool bLoadMovableObjectIterator = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadMovableObjectIterator = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#elif Linux 
							private static bool bLoadMovableObjectIterator = LoadDll.Load("EV_Graphic_d.so");
							private static bool csbLoadMovableObjectIterator = LoadDll.Load("EV_Graphic_CSharp_d.so");

						#else 
							private static bool bLoadMovableObjectIterator = LoadDll.Load("EV_Graphic_d.dll");
							private static bool csbLoadMovableObjectIterator = LoadDll.Load("EV_Graphic_CSharp_d.dll");

						#endif 
					#else 
						#if Windows 
							private static bool bLoadMovableObjectIterator = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadMovableObjectIterator = LoadDll.Load("EV_Graphic_CSharp.dll");

						#elif Linux 
							private static bool bLoadMovableObjectIterator = LoadDll.Load("EV_Graphic.so");
							private static bool csbLoadMovableObjectIterator = LoadDll.Load("EV_Graphic_CSharp.so");

						#else 
							private static bool bLoadMovableObjectIterator = LoadDll.Load("EV_Graphic.dll");
							private static bool csbLoadMovableObjectIterator = LoadDll.Load("EV_Graphic_CSharp.dll");

						#endif 
					#endif 

					private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager::MovableObjectIterator", new MovableObjectIteratorClassFactory());

					public MovableObjectIterator(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
					{
					}

					public override void RegisterCallBack()
					{
						if (this.NativeObject != IntPtr.Zero)
						{
						}
					}
					public static MovableObjectIterator FromBaseObject(BaseObject baseObj)
					{
						if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
							return null;
						MovableObjectIterator obj = baseObj as  MovableObjectIterator;
						if (object.Equals(obj, null))
						{
							obj = new MovableObjectIterator(CreatedWhenConstruct.CWC_NotToCreate);
							obj.BindNativeObject(baseObj.NativeObject, "MovableObjectIterator");
							obj.IncreaseCast();
						}

						return obj;
					}
				}

				public class MovableObjectIteratorClassFactory : IClassFactory
				{
					public BaseObject Create()
					{
						MovableObjectIterator emptyInstance = new MovableObjectIterator(CreatedWhenConstruct.CWC_NotToCreate);
						return emptyInstance;
					}
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getMovableObjectIterator_CallBack_MovableObjectIterator_EVString(ref IntPtr typeName);

				protected getMovableObjectIterator_CallBack_MovableObjectIterator_EVString m_getMovableObjectIterator_CallBack_MovableObjectIterator_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getMovableObjectIterator_MovableObjectIterator_EVString_NoVirtual(IntPtr pNativeObject, string typeName);

				public virtual EarthView.World.Graphic.SceneManager.MovableObjectIterator GetMovableObjectIterator_NoVirtual(string typeName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getMovableObjectIterator_MovableObjectIterator_EVString_NoVirtual(this.NativeObject, typeName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneManager.MovableObjectIterator csObj = new EarthView.World.Graphic.SceneManager.MovableObjectIterator(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "MovableObjectIterator");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.MovableObjectIterator;
						csObj.BindNativeObject(__ptr, "MovableObjectIterator");
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager_getMovableObjectIterator_MovableObjectIterator_EVString_Function(ref IntPtr typeName)
				{
					string strtypeName= Marshal.PtrToStringAnsi(typeName);
					ClassFactory.FreeString(ref typeName);
					
					EarthView.World.Graphic.SceneManager.MovableObjectIterator csret=GetMovableObjectIterator(strtypeName);
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getMovableObjectIterator_MovableObjectIterator_EVString(IntPtr pNativeObject, string typeName);

				public virtual EarthView.World.Graphic.SceneManager.MovableObjectIterator GetMovableObjectIterator(string typeName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getMovableObjectIterator_MovableObjectIterator_EVString(this.NativeObject, typeName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneManager.MovableObjectIterator csObj = new EarthView.World.Graphic.SceneManager.MovableObjectIterator(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "MovableObjectIterator");
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.MovableObjectIterator;
						csObj.BindNativeObject(__ptr, "MovableObjectIterator");
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void injectMovableObject_CallBack_void_CMovableObject(IntPtr m);

				protected injectMovableObject_CallBack_void_CMovableObject m_injectMovableObject_CallBack_void_CMovableObject;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_injectMovableObject_void_CMovableObject_NoVirtual(IntPtr pNativeObject, IntPtr m);

				public virtual void InjectMovableObject_NoVirtual(EarthView.World.Graphic.MovableObject m)
				{
					EarthView_World_Graphic_CSceneManager_injectMovableObject_void_CMovableObject_NoVirtual(this.NativeObject, object.Equals(m, null) ? IntPtr.Zero : m.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_injectMovableObject_void_CMovableObject_Function(IntPtr m)
				{
					EarthView.World.Graphic.MovableObject csobj_m = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_m.BindNativeObject(m,"CMovableObject");
					csobj_m.Delegate = true;
					IClassFactory csobj_mClassFactory = GlobalClassFactoryMap.Get(csobj_m.GetCppInstanceTypeName());
					if (csobj_mClassFactory != null)
					{
						csobj_m.Delegate = true;
						csobj_m = csobj_mClassFactory.Create() as EarthView.World.Graphic.MovableObject;
						csobj_m.BindNativeObject(m, "CMovableObject");
						csobj_m.Delegate = true;
					}
					
					InjectMovableObject(csobj_m);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_injectMovableObject_void_CMovableObject(IntPtr pNativeObject, IntPtr m);

				public virtual void InjectMovableObject(EarthView.World.Graphic.MovableObject m)
				{
					EarthView_World_Graphic_CSceneManager_injectMovableObject_void_CMovableObject(this.NativeObject, object.Equals(m, null) ? IntPtr.Zero : m.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void extractMovableObject_CallBack_void_EVString_EVString(ref IntPtr name, ref IntPtr typeName);

				protected extractMovableObject_CallBack_void_EVString_EVString m_extractMovableObject_CallBack_void_EVString_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_extractMovableObject_void_EVString_EVString_NoVirtual(IntPtr pNativeObject, string name, string typeName);

				public virtual void ExtractMovableObject_NoVirtual(string name, string typeName)
				{
					EarthView_World_Graphic_CSceneManager_extractMovableObject_void_EVString_EVString_NoVirtual(this.NativeObject, name, typeName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_extractMovableObject_void_EVString_EVString_Function(ref IntPtr name, ref IntPtr typeName)
				{
					string strname= Marshal.PtrToStringAnsi(name);
					ClassFactory.FreeString(ref name);
					string strtypeName= Marshal.PtrToStringAnsi(typeName);
					ClassFactory.FreeString(ref typeName);
					
					ExtractMovableObject(strname,strtypeName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_extractMovableObject_void_EVString_EVString(IntPtr pNativeObject, string name, string typeName);

				public virtual void ExtractMovableObject(string name, string typeName)
				{
					EarthView_World_Graphic_CSceneManager_extractMovableObject_void_EVString_EVString(this.NativeObject, name, typeName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void extractMovableObject_CallBack_void_CMovableObject(IntPtr m);

				protected extractMovableObject_CallBack_void_CMovableObject m_extractMovableObject_CallBack_void_CMovableObject;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_extractMovableObject_void_CMovableObject_NoVirtual(IntPtr pNativeObject, IntPtr m);

				public virtual void ExtractMovableObject_NoVirtual(EarthView.World.Graphic.MovableObject m)
				{
					EarthView_World_Graphic_CSceneManager_extractMovableObject_void_CMovableObject_NoVirtual(this.NativeObject, object.Equals(m, null) ? IntPtr.Zero : m.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_extractMovableObject_void_CMovableObject_Function(IntPtr m)
				{
					EarthView.World.Graphic.MovableObject csobj_m = new EarthView.World.Graphic.MovableObject(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_m.BindNativeObject(m,"CMovableObject");
					csobj_m.Delegate = true;
					IClassFactory csobj_mClassFactory = GlobalClassFactoryMap.Get(csobj_m.GetCppInstanceTypeName());
					if (csobj_mClassFactory != null)
					{
						csobj_m.Delegate = true;
						csobj_m = csobj_mClassFactory.Create() as EarthView.World.Graphic.MovableObject;
						csobj_m.BindNativeObject(m, "CMovableObject");
						csobj_m.Delegate = true;
					}
					
					ExtractMovableObject(csobj_m);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_extractMovableObject_void_CMovableObject(IntPtr pNativeObject, IntPtr m);

				public virtual void ExtractMovableObject(EarthView.World.Graphic.MovableObject m)
				{
					EarthView_World_Graphic_CSceneManager_extractMovableObject_void_CMovableObject(this.NativeObject, object.Equals(m, null) ? IntPtr.Zero : m.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void extractAllMovableObjectsByType_CallBack_void_EVString(ref IntPtr typeName);

				protected extractAllMovableObjectsByType_CallBack_void_EVString m_extractAllMovableObjectsByType_CallBack_void_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_extractAllMovableObjectsByType_void_EVString_NoVirtual(IntPtr pNativeObject, string typeName);

				public virtual void ExtractAllMovableObjectsByType_NoVirtual(string typeName)
				{
					EarthView_World_Graphic_CSceneManager_extractAllMovableObjectsByType_void_EVString_NoVirtual(this.NativeObject, typeName);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_extractAllMovableObjectsByType_void_EVString_Function(ref IntPtr typeName)
				{
					string strtypeName= Marshal.PtrToStringAnsi(typeName);
					ClassFactory.FreeString(ref typeName);
					
					ExtractAllMovableObjectsByType(strtypeName);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_extractAllMovableObjectsByType_void_EVString(IntPtr pNativeObject, string typeName);

				public virtual void ExtractAllMovableObjectsByType(string typeName)
				{
					EarthView_World_Graphic_CSceneManager_extractAllMovableObjectsByType_void_EVString(this.NativeObject, typeName);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setVisibilityMask_CallBack_void_ev_uint32(uint vmask);

				protected setVisibilityMask_CallBack_void_ev_uint32 m_setVisibilityMask_CallBack_void_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setVisibilityMask_void_ev_uint32_NoVirtual(IntPtr pNativeObject, uint vmask);

				public virtual void SetVisibilityMask_NoVirtual(uint vmask)
				{
					EarthView_World_Graphic_CSceneManager_setVisibilityMask_void_ev_uint32_NoVirtual(this.NativeObject, vmask);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setVisibilityMask_void_ev_uint32_Function(uint vmask)
				{
					SetVisibilityMask(vmask);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setVisibilityMask_void_ev_uint32(IntPtr pNativeObject, uint vmask);

				public virtual void SetVisibilityMask(uint vmask)
				{
					EarthView_World_Graphic_CSceneManager_setVisibilityMask_void_ev_uint32(this.NativeObject, vmask);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate uint getVisibilityMask_CallBack_ev_uint32();

				protected getVisibilityMask_CallBack_ev_uint32 m_getVisibilityMask_CallBack_ev_uint32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint EarthView_World_Graphic_CSceneManager_getVisibilityMask_ev_uint32_NoVirtual(IntPtr pNativeObject);

				public virtual uint GetVisibilityMask_NoVirtual()
				{
					uint ret=EarthView_World_Graphic_CSceneManager_getVisibilityMask_ev_uint32_NoVirtual(this.NativeObject);
					
					return ret;
					
				}

				protected  uint EarthView_World_Graphic_CSceneManager_getVisibilityMask_ev_uint32_Function()
				{
					uint csret=GetVisibilityMask();
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint EarthView_World_Graphic_CSceneManager_getVisibilityMask_ev_uint32(IntPtr pNativeObject);

				public virtual uint GetVisibilityMask()
				{
					uint ret=EarthView_World_Graphic_CSceneManager_getVisibilityMask_ev_uint32(this.NativeObject);
					
					return ret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern uint EarthView_World_Graphic_CSceneManager__getCombinedVisibilityMask_ev_uint32(IntPtr pNativeObject);

				public uint _getCombinedVisibilityMask()
				{
					uint ret=EarthView_World_Graphic_CSceneManager__getCombinedVisibilityMask_ev_uint32(this.NativeObject);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setFindVisibleObjects_CallBack_void_ev_bool(bool find);

				protected setFindVisibleObjects_CallBack_void_ev_bool m_setFindVisibleObjects_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setFindVisibleObjects_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte find);

				public virtual void SetFindVisibleObjects_NoVirtual(bool find)
				{
					EarthView_World_Graphic_CSceneManager_setFindVisibleObjects_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(find));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setFindVisibleObjects_void_ev_bool_Function(bool find)
				{
					SetFindVisibleObjects(find);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setFindVisibleObjects_void_ev_bool(IntPtr pNativeObject, byte find);

				public virtual void SetFindVisibleObjects(bool find)
				{
					EarthView_World_Graphic_CSceneManager_setFindVisibleObjects_void_ev_bool(this.NativeObject, Convert.ToByte(find));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getFindVisibleObjects_CallBack_ev_bool();

				protected getFindVisibleObjects_CallBack_ev_bool m_getFindVisibleObjects_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getFindVisibleObjects_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool GetFindVisibleObjects_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getFindVisibleObjects_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getFindVisibleObjects_ev_bool_Function()
				{
					bool csret=GetFindVisibleObjects();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getFindVisibleObjects_ev_bool(IntPtr pNativeObject);

				public virtual bool GetFindVisibleObjects()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getFindVisibleObjects_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setNormaliseNormalsOnScale_CallBack_void_ev_bool(bool n);

				protected setNormaliseNormalsOnScale_CallBack_void_ev_bool m_setNormaliseNormalsOnScale_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setNormaliseNormalsOnScale_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte n);

				public virtual void SetNormaliseNormalsOnScale_NoVirtual(bool n)
				{
					EarthView_World_Graphic_CSceneManager_setNormaliseNormalsOnScale_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(n));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setNormaliseNormalsOnScale_void_ev_bool_Function(bool n)
				{
					SetNormaliseNormalsOnScale(n);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setNormaliseNormalsOnScale_void_ev_bool(IntPtr pNativeObject, byte n);

				public virtual void SetNormaliseNormalsOnScale(bool n)
				{
					EarthView_World_Graphic_CSceneManager_setNormaliseNormalsOnScale_void_ev_bool(this.NativeObject, Convert.ToByte(n));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getNormaliseNormalsOnScale_CallBack_ev_bool();

				protected getNormaliseNormalsOnScale_CallBack_ev_bool m_getNormaliseNormalsOnScale_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getNormaliseNormalsOnScale_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool GetNormaliseNormalsOnScale_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getNormaliseNormalsOnScale_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getNormaliseNormalsOnScale_ev_bool_Function()
				{
					bool csret=GetNormaliseNormalsOnScale();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getNormaliseNormalsOnScale_ev_bool(IntPtr pNativeObject);

				public virtual bool GetNormaliseNormalsOnScale()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getNormaliseNormalsOnScale_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setFlipCullingOnNegativeScale_CallBack_void_ev_bool(bool n);

				protected setFlipCullingOnNegativeScale_CallBack_void_ev_bool m_setFlipCullingOnNegativeScale_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setFlipCullingOnNegativeScale_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte n);

				public virtual void SetFlipCullingOnNegativeScale_NoVirtual(bool n)
				{
					EarthView_World_Graphic_CSceneManager_setFlipCullingOnNegativeScale_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(n));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setFlipCullingOnNegativeScale_void_ev_bool_Function(bool n)
				{
					SetFlipCullingOnNegativeScale(n);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setFlipCullingOnNegativeScale_void_ev_bool(IntPtr pNativeObject, byte n);

				public virtual void SetFlipCullingOnNegativeScale(bool n)
				{
					EarthView_World_Graphic_CSceneManager_setFlipCullingOnNegativeScale_void_ev_bool(this.NativeObject, Convert.ToByte(n));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getFlipCullingOnNegativeScale_CallBack_ev_bool();

				protected getFlipCullingOnNegativeScale_CallBack_ev_bool m_getFlipCullingOnNegativeScale_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getFlipCullingOnNegativeScale_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool GetFlipCullingOnNegativeScale_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getFlipCullingOnNegativeScale_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getFlipCullingOnNegativeScale_ev_bool_Function()
				{
					bool csret=GetFlipCullingOnNegativeScale();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getFlipCullingOnNegativeScale_ev_bool(IntPtr pNativeObject);

				public virtual bool GetFlipCullingOnNegativeScale()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getFlipCullingOnNegativeScale_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool_ev_bool_LightList(IntPtr pass, IntPtr rend, bool shadowDerivation, bool doLightIteration, IntPtr manualLightList);

				protected _injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool_ev_bool_LightList m__injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool_ev_bool_LightList;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_ev_bool_LightList_NoVirtual(IntPtr pNativeObject, IntPtr pass, IntPtr rend, byte shadowDerivation, byte doLightIteration, IntPtr manualLightList);

				public virtual void _injectRenderWithPass_NoVirtual(EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Renderable rend, bool shadowDerivation, bool doLightIteration, EarthView.World.Graphic.LightList manualLightList)
				{
					EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_ev_bool_LightList_NoVirtual(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, Convert.ToByte(shadowDerivation), Convert.ToByte(doLightIteration), object.Equals(manualLightList, null) ? IntPtr.Zero : manualLightList.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_ev_bool_LightList_Function(IntPtr pass, IntPtr rend, bool shadowDerivation, bool doLightIteration, IntPtr manualLightList)
				{
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					EarthView.World.Graphic.Renderable csobj_rend = new EarthView.World.Graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_rend.BindNativeObject(rend,"CRenderable");
					csobj_rend.Delegate = true;
					IClassFactory csobj_rendClassFactory = GlobalClassFactoryMap.Get(csobj_rend.GetCppInstanceTypeName());
					if (csobj_rendClassFactory != null)
					{
						csobj_rend.Delegate = true;
						csobj_rend = csobj_rendClassFactory.Create() as EarthView.World.Graphic.Renderable;
						csobj_rend.BindNativeObject(rend, "CRenderable");
						csobj_rend.Delegate = true;
					}
					EarthView.World.Graphic.LightList csobj_manualLightList = new EarthView.World.Graphic.LightList(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_manualLightList.BindNativeObject(manualLightList,"LightList");
					csobj_manualLightList.Delegate = true;
					IClassFactory csobj_manualLightListClassFactory = GlobalClassFactoryMap.Get(csobj_manualLightList.GetCppInstanceTypeName());
					if (csobj_manualLightListClassFactory != null)
					{
						csobj_manualLightList.Delegate = true;
						csobj_manualLightList = csobj_manualLightListClassFactory.Create() as EarthView.World.Graphic.LightList;
						csobj_manualLightList.BindNativeObject(manualLightList, "LightList");
						csobj_manualLightList.Delegate = true;
					}
					
					_injectRenderWithPass(csobj_pass, csobj_rend, shadowDerivation, doLightIteration, csobj_manualLightList);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_ev_bool_LightList(IntPtr pNativeObject, IntPtr pass, IntPtr rend, byte shadowDerivation, byte doLightIteration, IntPtr manualLightList);

				public virtual void _injectRenderWithPass(EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Renderable rend, bool shadowDerivation, bool doLightIteration, EarthView.World.Graphic.LightList manualLightList)
				{
					EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_ev_bool_LightList(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, Convert.ToByte(shadowDerivation), Convert.ToByte(doLightIteration), object.Equals(manualLightList, null) ? IntPtr.Zero : manualLightList.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool_ev_bool(IntPtr pass, IntPtr rend, bool shadowDerivation, bool doLightIteration);

				protected _injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool_ev_bool m__injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr pass, IntPtr rend, byte shadowDerivation, byte doLightIteration);

				public virtual void _injectRenderWithPass_NoVirtual(EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Renderable rend, bool shadowDerivation, bool doLightIteration)
				{
					EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_ev_bool_NoVirtual(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, Convert.ToByte(shadowDerivation), Convert.ToByte(doLightIteration));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_ev_bool_Function(IntPtr pass, IntPtr rend, bool shadowDerivation, bool doLightIteration)
				{
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					EarthView.World.Graphic.Renderable csobj_rend = new EarthView.World.Graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_rend.BindNativeObject(rend,"CRenderable");
					csobj_rend.Delegate = true;
					IClassFactory csobj_rendClassFactory = GlobalClassFactoryMap.Get(csobj_rend.GetCppInstanceTypeName());
					if (csobj_rendClassFactory != null)
					{
						csobj_rend.Delegate = true;
						csobj_rend = csobj_rendClassFactory.Create() as EarthView.World.Graphic.Renderable;
						csobj_rend.BindNativeObject(rend, "CRenderable");
						csobj_rend.Delegate = true;
					}
					
					_injectRenderWithPass(csobj_pass, csobj_rend, shadowDerivation, doLightIteration);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_ev_bool(IntPtr pNativeObject, IntPtr pass, IntPtr rend, byte shadowDerivation, byte doLightIteration);

				public virtual void _injectRenderWithPass(EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Renderable rend, bool shadowDerivation, bool doLightIteration)
				{
					EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_ev_bool(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, Convert.ToByte(shadowDerivation), Convert.ToByte(doLightIteration));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool(IntPtr pass, IntPtr rend, bool shadowDerivation);

				protected _injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool m__injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr pass, IntPtr rend, byte shadowDerivation);

				public virtual void _injectRenderWithPass_NoVirtual(EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Renderable rend, bool shadowDerivation)
				{
					EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_NoVirtual(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, Convert.ToByte(shadowDerivation));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_Function(IntPtr pass, IntPtr rend, bool shadowDerivation)
				{
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					EarthView.World.Graphic.Renderable csobj_rend = new EarthView.World.Graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_rend.BindNativeObject(rend,"CRenderable");
					csobj_rend.Delegate = true;
					IClassFactory csobj_rendClassFactory = GlobalClassFactoryMap.Get(csobj_rend.GetCppInstanceTypeName());
					if (csobj_rendClassFactory != null)
					{
						csobj_rend.Delegate = true;
						csobj_rend = csobj_rendClassFactory.Create() as EarthView.World.Graphic.Renderable;
						csobj_rend.BindNativeObject(rend, "CRenderable");
						csobj_rend.Delegate = true;
					}
					
					_injectRenderWithPass(csobj_pass, csobj_rend, shadowDerivation);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool(IntPtr pNativeObject, IntPtr pass, IntPtr rend, byte shadowDerivation);

				public virtual void _injectRenderWithPass(EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Renderable rend, bool shadowDerivation)
				{
					EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject, Convert.ToByte(shadowDerivation));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _injectRenderWithPass_CallBack_void_CPass_CRenderable(IntPtr pass, IntPtr rend);

				protected _injectRenderWithPass_CallBack_void_CPass_CRenderable m__injectRenderWithPass_CallBack_void_CPass_CRenderable;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_NoVirtual(IntPtr pNativeObject, IntPtr pass, IntPtr rend);

				public virtual void _injectRenderWithPass_NoVirtual(EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Renderable rend)
				{
					EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_NoVirtual(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_Function(IntPtr pass, IntPtr rend)
				{
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					EarthView.World.Graphic.Renderable csobj_rend = new EarthView.World.Graphic.Renderable(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_rend.BindNativeObject(rend,"CRenderable");
					csobj_rend.Delegate = true;
					IClassFactory csobj_rendClassFactory = GlobalClassFactoryMap.Get(csobj_rend.GetCppInstanceTypeName());
					if (csobj_rendClassFactory != null)
					{
						csobj_rend.Delegate = true;
						csobj_rend = csobj_rendClassFactory.Create() as EarthView.World.Graphic.Renderable;
						csobj_rend.BindNativeObject(rend, "CRenderable");
						csobj_rend.Delegate = true;
					}
					
					_injectRenderWithPass(csobj_pass, csobj_rend);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable(IntPtr pNativeObject, IntPtr pass, IntPtr rend);

				public virtual void _injectRenderWithPass(EarthView.World.Graphic.Pass pass, EarthView.World.Graphic.Renderable rend)
				{
					EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, object.Equals(rend, null) ? IntPtr.Zero : rend.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _suppressRenderStateChanges_CallBack_void_ev_bool(bool suppress);

				protected _suppressRenderStateChanges_CallBack_void_ev_bool m__suppressRenderStateChanges_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__suppressRenderStateChanges_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte suppress);

				public virtual void _suppressRenderStateChanges_NoVirtual(bool suppress)
				{
					EarthView_World_Graphic_CSceneManager__suppressRenderStateChanges_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(suppress));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__suppressRenderStateChanges_void_ev_bool_Function(bool suppress)
				{
					_suppressRenderStateChanges(suppress);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__suppressRenderStateChanges_void_ev_bool(IntPtr pNativeObject, byte suppress);

				public virtual void _suppressRenderStateChanges(bool suppress)
				{
					EarthView_World_Graphic_CSceneManager__suppressRenderStateChanges_void_ev_bool(this.NativeObject, Convert.ToByte(suppress));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte _areRenderStateChangesSuppressed_CallBack_ev_bool();

				protected _areRenderStateChangesSuppressed_CallBack_ev_bool m__areRenderStateChangesSuppressed_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager__areRenderStateChangesSuppressed_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool _areRenderStateChangesSuppressed_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager__areRenderStateChangesSuppressed_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager__areRenderStateChangesSuppressed_ev_bool_Function()
				{
					bool csret=_areRenderStateChangesSuppressed();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager__areRenderStateChangesSuppressed_ev_bool(IntPtr pNativeObject);

				public virtual bool _areRenderStateChangesSuppressed()
				{
					byte ret=EarthView_World_Graphic_CSceneManager__areRenderStateChangesSuppressed_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr _setPass_CallBack_CPass_CPass_ev_bool_ev_bool(IntPtr pass, bool evenIfSuppressed, bool shadowDerivation);

				protected _setPass_CallBack_CPass_CPass_ev_bool_ev_bool m__setPass_CallBack_CPass_CPass_ev_bool_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_ev_bool_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr pass, byte evenIfSuppressed, byte shadowDerivation);

				public virtual EarthView.World.Graphic.Pass _setPass_NoVirtual(EarthView.World.Graphic.Pass pass, bool evenIfSuppressed, bool shadowDerivation)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_ev_bool_ev_bool_NoVirtual(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, Convert.ToByte(evenIfSuppressed), Convert.ToByte(shadowDerivation));
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Pass csObj = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CPass");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Pass;
						csObj.BindNativeObject(__ptr, "CPass");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_ev_bool_ev_bool_Function(IntPtr pass, bool evenIfSuppressed, bool shadowDerivation)
				{
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					
					EarthView.World.Graphic.Pass csret=_setPass(csobj_pass, evenIfSuppressed, shadowDerivation);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_ev_bool_ev_bool(IntPtr pNativeObject, IntPtr pass, byte evenIfSuppressed, byte shadowDerivation);

				public virtual EarthView.World.Graphic.Pass _setPass(EarthView.World.Graphic.Pass pass, bool evenIfSuppressed, bool shadowDerivation)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_ev_bool_ev_bool(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, Convert.ToByte(evenIfSuppressed), Convert.ToByte(shadowDerivation));
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Pass csObj = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CPass");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Pass;
						csObj.BindNativeObject(__ptr, "CPass");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr _setPass_CallBack_CPass_CPass_ev_bool(IntPtr pass, bool evenIfSuppressed);

				protected _setPass_CallBack_CPass_CPass_ev_bool m__setPass_CallBack_CPass_CPass_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_ev_bool_NoVirtual(IntPtr pNativeObject, IntPtr pass, byte evenIfSuppressed);

				public virtual EarthView.World.Graphic.Pass _setPass_NoVirtual(EarthView.World.Graphic.Pass pass, bool evenIfSuppressed)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_ev_bool_NoVirtual(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, Convert.ToByte(evenIfSuppressed));
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Pass csObj = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CPass");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Pass;
						csObj.BindNativeObject(__ptr, "CPass");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_ev_bool_Function(IntPtr pass, bool evenIfSuppressed)
				{
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					
					EarthView.World.Graphic.Pass csret=_setPass(csobj_pass, evenIfSuppressed);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_ev_bool(IntPtr pNativeObject, IntPtr pass, byte evenIfSuppressed);

				public virtual EarthView.World.Graphic.Pass _setPass(EarthView.World.Graphic.Pass pass, bool evenIfSuppressed)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_ev_bool(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject, Convert.ToByte(evenIfSuppressed));
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Pass csObj = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CPass");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Pass;
						csObj.BindNativeObject(__ptr, "CPass");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr _setPass_CallBack_CPass_CPass(IntPtr pass);

				protected _setPass_CallBack_CPass_CPass m__setPass_CallBack_CPass_CPass;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_NoVirtual(IntPtr pNativeObject, IntPtr pass);

				public virtual EarthView.World.Graphic.Pass _setPass_NoVirtual(EarthView.World.Graphic.Pass pass)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_NoVirtual(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Pass csObj = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CPass");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Pass;
						csObj.BindNativeObject(__ptr, "CPass");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_Function(IntPtr pass)
				{
					EarthView.World.Graphic.Pass csobj_pass = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_pass.BindNativeObject(pass,"CPass");
					csobj_pass.Delegate = true;
					IClassFactory csobj_passClassFactory = GlobalClassFactoryMap.Get(csobj_pass.GetCppInstanceTypeName());
					if (csobj_passClassFactory != null)
					{
						csobj_pass.Delegate = true;
						csobj_pass = csobj_passClassFactory.Create() as EarthView.World.Graphic.Pass;
						csobj_pass.BindNativeObject(pass, "CPass");
						csobj_pass.Delegate = true;
					}
					
					EarthView.World.Graphic.Pass csret=_setPass(csobj_pass);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass(IntPtr pNativeObject, IntPtr pass);

				public virtual EarthView.World.Graphic.Pass _setPass(EarthView.World.Graphic.Pass pass)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass(this.NativeObject, object.Equals(pass, null) ? IntPtr.Zero : pass.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Pass csObj = new EarthView.World.Graphic.Pass(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CPass");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Pass;
						csObj.BindNativeObject(__ptr, "CPass");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _markGpuParamsDirty_CallBack_void_ev_uint16(ushort mask);

				protected _markGpuParamsDirty_CallBack_void_ev_uint16 m__markGpuParamsDirty_CallBack_void_ev_uint16;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__markGpuParamsDirty_void_ev_uint16_NoVirtual(IntPtr pNativeObject, ushort mask);

				public virtual void _markGpuParamsDirty_NoVirtual(ushort mask)
				{
					EarthView_World_Graphic_CSceneManager__markGpuParamsDirty_void_ev_uint16_NoVirtual(this.NativeObject, mask);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__markGpuParamsDirty_void_ev_uint16_Function(ushort mask)
				{
					_markGpuParamsDirty(mask);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__markGpuParamsDirty_void_ev_uint16(IntPtr pNativeObject, ushort mask);

				public virtual void _markGpuParamsDirty(ushort mask)
				{
					EarthView_World_Graphic_CSceneManager__markGpuParamsDirty_void_ev_uint16(this.NativeObject, mask);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _suppressShadows_CallBack_void_ev_bool(bool suppress);

				protected _suppressShadows_CallBack_void_ev_bool m__suppressShadows_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__suppressShadows_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte suppress);

				public virtual void _suppressShadows_NoVirtual(bool suppress)
				{
					EarthView_World_Graphic_CSceneManager__suppressShadows_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(suppress));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__suppressShadows_void_ev_bool_Function(bool suppress)
				{
					_suppressShadows(suppress);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__suppressShadows_void_ev_bool(IntPtr pNativeObject, byte suppress);

				public virtual void _suppressShadows(bool suppress)
				{
					EarthView_World_Graphic_CSceneManager__suppressShadows_void_ev_bool(this.NativeObject, Convert.ToByte(suppress));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte _areShadowsSuppressed_CallBack_ev_bool();

				protected _areShadowsSuppressed_CallBack_ev_bool m__areShadowsSuppressed_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager__areShadowsSuppressed_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool _areShadowsSuppressed_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager__areShadowsSuppressed_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager__areShadowsSuppressed_ev_bool_Function()
				{
					bool csret=_areShadowsSuppressed();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager__areShadowsSuppressed_ev_bool(IntPtr pNativeObject);

				public virtual bool _areShadowsSuppressed()
				{
					byte ret=EarthView_World_Graphic_CSceneManager__areShadowsSuppressed_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void _renderQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode(IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				protected _renderQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode m__renderQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__renderQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_NoVirtual(IntPtr pNativeObject, IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				public virtual void _renderQueueGroupObjects_NoVirtual(EarthView.World.Graphic.RenderQueueGroup group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView_World_Graphic_CSceneManager__renderQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_NoVirtual(this.NativeObject, object.Equals(group, null) ? IntPtr.Zero : group.NativeObject, om);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager__renderQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_Function(IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView.World.Graphic.RenderQueueGroup csobj_group = new EarthView.World.Graphic.RenderQueueGroup(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_group.BindNativeObject(group,"CRenderQueueGroup");
					csobj_group.Delegate = true;
					IClassFactory csobj_groupClassFactory = GlobalClassFactoryMap.Get(csobj_group.GetCppInstanceTypeName());
					if (csobj_groupClassFactory != null)
					{
						csobj_group.Delegate = true;
						csobj_group = csobj_groupClassFactory.Create() as EarthView.World.Graphic.RenderQueueGroup;
						csobj_group.BindNativeObject(group, "CRenderQueueGroup");
						csobj_group.Delegate = true;
					}
					
					_renderQueueGroupObjects(csobj_group, om);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__renderQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(IntPtr pNativeObject, IntPtr group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om);

				public virtual void _renderQueueGroupObjects(EarthView.World.Graphic.RenderQueueGroup group, EarthView.World.Graphic.QueuedRenderableCollection.ORGANISATIONMODE om)
				{
					EarthView_World_Graphic_CSceneManager__renderQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(this.NativeObject, object.Equals(group, null) ? IntPtr.Zero : group.NativeObject, om);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setQueuedRenderableVisitor_void_CSceneMgrQueuedRenderableVisitor(IntPtr pNativeObject, IntPtr visitor);

				public void SetQueuedRenderableVisitor(EarthView.World.Graphic.SceneManager.SceneMgrQueuedRenderableVisitor visitor)
				{
					EarthView_World_Graphic_CSceneManager_setQueuedRenderableVisitor_void_CSceneMgrQueuedRenderableVisitor(this.NativeObject, object.Equals(visitor, null) ? IntPtr.Zero : visitor.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getQueuedRenderableVisitor_CSceneMgrQueuedRenderableVisitor(IntPtr pNativeObject);

				public EarthView.World.Graphic.SceneManager.SceneMgrQueuedRenderableVisitor GetQueuedRenderableVisitor()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getQueuedRenderableVisitor_CSceneMgrQueuedRenderableVisitor(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneManager.SceneMgrQueuedRenderableVisitor csObj = new EarthView.World.Graphic.SceneManager.SceneMgrQueuedRenderableVisitor(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneMgrQueuedRenderableVisitor");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager.SceneMgrQueuedRenderableVisitor;
						csObj.BindNativeObject(__ptr, "CSceneMgrQueuedRenderableVisitor");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getDestinationRenderSystem_CRenderSystem(IntPtr pNativeObject);

				public EarthView.World.Graphic.RenderSystem GetDestinationRenderSystem()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getDestinationRenderSystem_CRenderSystem(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.RenderSystem csObj = new EarthView.World.Graphic.RenderSystem(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CRenderSystem");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.RenderSystem;
						csObj.BindNativeObject(__ptr, "CRenderSystem");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getCurrentViewport_CViewport(IntPtr pNativeObject);

				public EarthView.World.Graphic.Viewport GetCurrentViewport()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getCurrentViewport_CViewport(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Viewport csObj = new EarthView.World.Graphic.Viewport(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CViewport");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Viewport;
						csObj.BindNativeObject(__ptr, "CViewport");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getCameraInProgress_CCamera(IntPtr pNativeObject);

				/// <summary>
				/// 返回当前渲染系统正在使用的相机
				/// </summary>
				/// <returns></returns>
				public EarthView.World.Graphic.Camera GetCameraInProgress()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getCameraInProgress_CCamera(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.Camera csObj = new EarthView.World.Graphic.Camera(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CCamera");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.Camera;
						csObj.BindNativeObject(__ptr, "CCamera");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getVisibleObjectsBoundsInfo_VisibleObjectsBoundsInfo_CCamera(IntPtr pNativeObject, IntPtr cam);

				public EarthView.World.Graphic.VisibleObjectsBoundsInfo GetVisibleObjectsBoundsInfo(EarthView.World.Graphic.Camera cam)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getVisibleObjectsBoundsInfo_VisibleObjectsBoundsInfo_CCamera(this.NativeObject, object.Equals(cam, null) ? IntPtr.Zero : cam.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.VisibleObjectsBoundsInfo csObj = new EarthView.World.Graphic.VisibleObjectsBoundsInfo(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "VisibleObjectsBoundsInfo");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.VisibleObjectsBoundsInfo;
						csObj.BindNativeObject(__ptr, "VisibleObjectsBoundsInfo");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getShadowCasterBoundsInfo_VisibleObjectsBoundsInfo_CLight_ev_size_t(IntPtr pNativeObject, IntPtr light, ulong iteration);

				public EarthView.World.Graphic.VisibleObjectsBoundsInfo GetShadowCasterBoundsInfo(EarthView.World.Graphic.Light light, ulong iteration)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getShadowCasterBoundsInfo_VisibleObjectsBoundsInfo_CLight_ev_size_t(this.NativeObject, object.Equals(light, null) ? IntPtr.Zero : light.NativeObject, iteration);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.VisibleObjectsBoundsInfo csObj = new EarthView.World.Graphic.VisibleObjectsBoundsInfo(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "VisibleObjectsBoundsInfo");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.VisibleObjectsBoundsInfo;
						csObj.BindNativeObject(__ptr, "VisibleObjectsBoundsInfo");
						csObj.Delegate = true;
					}
					return csObj;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManager_getShadowCasterBoundsInfo_VisibleObjectsBoundsInfo_CLight(IntPtr pNativeObject, IntPtr light);

				public EarthView.World.Graphic.VisibleObjectsBoundsInfo GetShadowCasterBoundsInfo(EarthView.World.Graphic.Light light)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManager_getShadowCasterBoundsInfo_VisibleObjectsBoundsInfo_CLight(this.NativeObject, object.Equals(light, null) ? IntPtr.Zero : light.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.VisibleObjectsBoundsInfo csObj = new EarthView.World.Graphic.VisibleObjectsBoundsInfo(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "VisibleObjectsBoundsInfo");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.VisibleObjectsBoundsInfo;
						csObj.BindNativeObject(__ptr, "VisibleObjectsBoundsInfo");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setCameraRelativeRendering_CallBack_void_ev_bool(bool rel);

				protected setCameraRelativeRendering_CallBack_void_ev_bool m_setCameraRelativeRendering_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setCameraRelativeRendering_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte rel);

				public virtual void SetCameraRelativeRendering_NoVirtual(bool rel)
				{
					EarthView_World_Graphic_CSceneManager_setCameraRelativeRendering_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(rel));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setCameraRelativeRendering_void_ev_bool_Function(bool rel)
				{
					SetCameraRelativeRendering(rel);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setCameraRelativeRendering_void_ev_bool(IntPtr pNativeObject, byte rel);

				public virtual void SetCameraRelativeRendering(bool rel)
				{
					EarthView_World_Graphic_CSceneManager_setCameraRelativeRendering_void_ev_bool(this.NativeObject, Convert.ToByte(rel));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getCameraRelativeRendering_CallBack_ev_bool();

				protected getCameraRelativeRendering_CallBack_ev_bool m_getCameraRelativeRendering_CallBack_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getCameraRelativeRendering_ev_bool_NoVirtual(IntPtr pNativeObject);

				public virtual bool GetCameraRelativeRendering_NoVirtual()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getCameraRelativeRendering_ev_bool_NoVirtual(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getCameraRelativeRendering_ev_bool_Function()
				{
					bool csret=GetCameraRelativeRendering();
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getCameraRelativeRendering_ev_bool(IntPtr pNativeObject);

				public virtual bool GetCameraRelativeRendering()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getCameraRelativeRendering_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_addLodListener_void_CLodListener(IntPtr pNativeObject, IntPtr ref_listener);

				public void AddLodListener(EarthView.World.Graphic.LodListener ref_listener)
				{
					EarthView_World_Graphic_CSceneManager_addLodListener_void_CLodListener(this.NativeObject, object.Equals(ref_listener, null) ? IntPtr.Zero : ref_listener.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_removeLodListener_void_CLodListener(IntPtr pNativeObject, IntPtr listener);

				public void RemoveLodListener(EarthView.World.Graphic.LodListener listener)
				{
					EarthView_World_Graphic_CSceneManager_removeLodListener_void_CLodListener(this.NativeObject, object.Equals(listener, null) ? IntPtr.Zero : listener.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__notifyMovableObjectLodChanged_void_MovableObjectLodChangedEvent(IntPtr pNativeObject, IntPtr evt);

				public void _notifyMovableObjectLodChanged(ref EarthView.World.Graphic.MovableObjectLodChangedEvent evt)
				{
					EarthView_World_Graphic_CSceneManager__notifyMovableObjectLodChanged_void_MovableObjectLodChangedEvent(this.NativeObject, object.Equals(evt, null) ? IntPtr.Zero : evt.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__notifyEntityMeshLodChanged_void_EntityMeshLodChangedEvent(IntPtr pNativeObject, IntPtr evt);

				public void _notifyEntityMeshLodChanged(ref EarthView.World.Graphic.EntityMeshLodChangedEvent evt)
				{
					EarthView_World_Graphic_CSceneManager__notifyEntityMeshLodChanged_void_EntityMeshLodChangedEvent(this.NativeObject, object.Equals(evt, null) ? IntPtr.Zero : evt.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__notifyEntityMaterialLodChanged_void_EntityMaterialLodChangedEvent(IntPtr pNativeObject, IntPtr evt);

				public void _notifyEntityMaterialLodChanged(ref EarthView.World.Graphic.EntityMaterialLodChangedEvent evt)
				{
					EarthView_World_Graphic_CSceneManager__notifyEntityMaterialLodChanged_void_EntityMaterialLodChangedEvent(this.NativeObject, object.Equals(evt, null) ? IntPtr.Zero : evt.NativeObject);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager__handleLodEvents_void(IntPtr pNativeObject);

				public void _handleLodEvents()
				{
					EarthView_World_Graphic_CSceneManager__handleLodEvents_void(this.NativeObject);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getHeightAt_CallBack_Real_Real_Real_ev_real32(double latitude, double lontitude, float targetSamplesPerDegrees);

				protected getHeightAt_CallBack_Real_Real_Real_ev_real32 m_getHeightAt_CallBack_Real_Real_Real_ev_real32;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getHeightAt_Real_Real_Real_ev_real32_NoVirtual(IntPtr pNativeObject, double latitude, double lontitude, float targetSamplesPerDegrees);

				public virtual double GetHeightAt_NoVirtual(double latitude, double lontitude, float targetSamplesPerDegrees)
				{
					double ret=EarthView_World_Graphic_CSceneManager_getHeightAt_Real_Real_Real_ev_real32_NoVirtual(this.NativeObject, latitude, lontitude, targetSamplesPerDegrees);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CSceneManager_getHeightAt_Real_Real_Real_ev_real32_Function(double latitude, double lontitude, float targetSamplesPerDegrees)
				{
					double csret=GetHeightAt(latitude, lontitude, targetSamplesPerDegrees);
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getHeightAt_Real_Real_Real_ev_real32(IntPtr pNativeObject, double latitude, double lontitude, float targetSamplesPerDegrees);

				public virtual double GetHeightAt(double latitude, double lontitude, float targetSamplesPerDegrees)
				{
					double ret=EarthView_World_Graphic_CSceneManager_getHeightAt_Real_Real_Real_ev_real32(this.NativeObject, latitude, lontitude, targetSamplesPerDegrees);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getBestHeightAt_CallBack_Real_Real_Real(double latitude, double lontitude);

				protected getBestHeightAt_CallBack_Real_Real_Real m_getBestHeightAt_CallBack_Real_Real_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getBestHeightAt_Real_Real_Real_NoVirtual(IntPtr pNativeObject, double latitude, double lontitude);

				public virtual double GetBestHeightAt_NoVirtual(double latitude, double lontitude)
				{
					double ret=EarthView_World_Graphic_CSceneManager_getBestHeightAt_Real_Real_Real_NoVirtual(this.NativeObject, latitude, lontitude);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CSceneManager_getBestHeightAt_Real_Real_Real_Function(double latitude, double lontitude)
				{
					double csret=GetBestHeightAt(latitude, lontitude);
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getBestHeightAt_Real_Real_Real(IntPtr pNativeObject, double latitude, double lontitude);

				public virtual double GetBestHeightAt(double latitude, double lontitude)
				{
					double ret=EarthView_World_Graphic_CSceneManager_getBestHeightAt_Real_Real_Real(this.NativeObject, latitude, lontitude);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate double getHeightAtTile_CallBack_Real_Real_Real(double latitude, double lontitude);

				protected getHeightAtTile_CallBack_Real_Real_Real m_getHeightAtTile_CallBack_Real_Real_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getHeightAtTile_Real_Real_Real_NoVirtual(IntPtr pNativeObject, double latitude, double lontitude);

				public virtual double GetHeightAtTile_NoVirtual(double latitude, double lontitude)
				{
					double ret=EarthView_World_Graphic_CSceneManager_getHeightAtTile_Real_Real_Real_NoVirtual(this.NativeObject, latitude, lontitude);
					
					return ret;
					
				}

				protected  double EarthView_World_Graphic_CSceneManager_getHeightAtTile_Real_Real_Real_Function(double latitude, double lontitude)
				{
					double csret=GetHeightAtTile(latitude, lontitude);
					
					return csret;
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern double EarthView_World_Graphic_CSceneManager_getHeightAtTile_Real_Real_Real(IntPtr pNativeObject, double latitude, double lontitude);

				public virtual double GetHeightAtTile(double latitude, double lontitude)
				{
					double ret=EarthView_World_Graphic_CSceneManager_getHeightAtTile_Real_Real_Real(this.NativeObject, latitude, lontitude);
					
					return ret;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte getTileEnvelope_CallBack_ev_bool_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real(int level, uint row, uint col, ref double minX, ref double maxX, ref double minY, ref double maxY);

				protected getTileEnvelope_CallBack_ev_bool_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real m_getTileEnvelope_CallBack_ev_bool_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getTileEnvelope_ev_bool_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_NoVirtual(IntPtr pNativeObject, int level, uint row, uint col, ref double minX, ref double maxX, ref double minY, ref double maxY);

				public virtual bool GetTileEnvelope_NoVirtual(int level, uint row, uint col, ref double minX, ref double maxX, ref double minY, ref double maxY)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getTileEnvelope_ev_bool_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_NoVirtual(this.NativeObject, level, row, col, ref minX, ref maxX, ref minY, ref maxY);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_getTileEnvelope_ev_bool_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_Function(int level, uint row, uint col, ref double minX, ref double maxX, ref double minY, ref double maxY)
				{
					bool csret=GetTileEnvelope(level, row, col, ref minX, ref maxX, ref minY, ref maxY);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getTileEnvelope_ev_bool_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real(IntPtr pNativeObject, int level, uint row, uint col, ref double minX, ref double maxX, ref double minY, ref double maxY);

				public virtual bool GetTileEnvelope(int level, uint row, uint col, ref double minX, ref double maxX, ref double minY, ref double maxY)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getTileEnvelope_ev_bool_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real(this.NativeObject, level, row, col, ref minX, ref maxX, ref minY, ref maxY);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte addTempLayer_CallBack_ev_bool_ILayer(IntPtr layer);

				protected addTempLayer_CallBack_ev_bool_ILayer m_addTempLayer_CallBack_ev_bool_ILayer;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_addTempLayer_ev_bool_ILayer_NoVirtual(IntPtr pNativeObject, IntPtr layer);

				/// <summary>
				/// 添加临时图层
				/// </summary>
				/// <param name="layer">图层</param>  				
				/// <returns>是否成功</returns>
				public virtual bool AddTempLayer_NoVirtual(EarthView.World.Spatial.Atlas.Ilayer layer)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_addTempLayer_ev_bool_ILayer_NoVirtual(this.NativeObject, object.Equals(layer, null) ? IntPtr.Zero : layer.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_addTempLayer_ev_bool_ILayer_Function(IntPtr layer)
				{
					EarthView.World.Spatial.Atlas.Ilayer csobj_layer = new EarthView.World.Spatial.Atlas.Ilayer(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_layer.BindNativeObject(layer,"ILayer");
					csobj_layer.Delegate = true;
					IClassFactory csobj_layerClassFactory = GlobalClassFactoryMap.Get(csobj_layer.GetCppInstanceTypeName());
					if (csobj_layerClassFactory != null)
					{
						csobj_layer.Delegate = true;
						csobj_layer = csobj_layerClassFactory.Create() as EarthView.World.Spatial.Atlas.Ilayer;
						csobj_layer.BindNativeObject(layer, "ILayer");
						csobj_layer.Delegate = true;
					}
					
					bool csret=AddTempLayer(csobj_layer);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_addTempLayer_ev_bool_ILayer(IntPtr pNativeObject, IntPtr layer);

				/// <summary>
				/// 添加临时图层
				/// </summary>
				/// <param name="layer">图层</param>  				
				/// <returns>是否成功</returns>
				public virtual bool AddTempLayer(EarthView.World.Spatial.Atlas.Ilayer layer)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_addTempLayer_ev_bool_ILayer(this.NativeObject, object.Equals(layer, null) ? IntPtr.Zero : layer.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate byte removeTempLayer_CallBack_ev_bool_ILayer(IntPtr layer);

				protected removeTempLayer_CallBack_ev_bool_ILayer m_removeTempLayer_CallBack_ev_bool_ILayer;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_removeTempLayer_ev_bool_ILayer_NoVirtual(IntPtr pNativeObject, IntPtr layer);

				/// <summary>
				/// 删除临时图层
				/// </summary>
				/// <param name="layer">图层</param>  				
				/// <returns>是否成功</returns>
				public virtual bool RemoveTempLayer_NoVirtual(EarthView.World.Spatial.Atlas.Ilayer layer)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_removeTempLayer_ev_bool_ILayer_NoVirtual(this.NativeObject, object.Equals(layer, null) ? IntPtr.Zero : layer.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				protected  byte EarthView_World_Graphic_CSceneManager_removeTempLayer_ev_bool_ILayer_Function(IntPtr layer)
				{
					EarthView.World.Spatial.Atlas.Ilayer csobj_layer = new EarthView.World.Spatial.Atlas.Ilayer(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_layer.BindNativeObject(layer,"ILayer");
					csobj_layer.Delegate = true;
					IClassFactory csobj_layerClassFactory = GlobalClassFactoryMap.Get(csobj_layer.GetCppInstanceTypeName());
					if (csobj_layerClassFactory != null)
					{
						csobj_layer.Delegate = true;
						csobj_layer = csobj_layerClassFactory.Create() as EarthView.World.Spatial.Atlas.Ilayer;
						csobj_layer.BindNativeObject(layer, "ILayer");
						csobj_layer.Delegate = true;
					}
					
					bool csret=RemoveTempLayer(csobj_layer);
					
					return Convert.ToByte(csret);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_removeTempLayer_ev_bool_ILayer(IntPtr pNativeObject, IntPtr layer);

				/// <summary>
				/// 删除临时图层
				/// </summary>
				/// <param name="layer">图层</param>  				
				/// <returns>是否成功</returns>
				public virtual bool RemoveTempLayer(EarthView.World.Spatial.Atlas.Ilayer layer)
				{
					byte ret=EarthView_World_Graphic_CSceneManager_removeTempLayer_ev_bool_ILayer(this.NativeObject, object.Equals(layer, null) ? IntPtr.Zero : layer.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void updateQuadImage_CallBack_void_bool_bool_bool(bool updateImageGroup, bool updateFeatureGroup, bool updateKmlGroup);

				protected updateQuadImage_CallBack_void_bool_bool_bool m_updateQuadImage_CallBack_void_bool_bool_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_updateQuadImage_void_bool_bool_bool_NoVirtual(IntPtr pNativeObject, byte updateImageGroup, byte updateFeatureGroup, byte updateKmlGroup);

				/// <summary>
				/// 刷新瓦片纹理
				/// </summary>
				/// <param name="updateImageGroup">是否更新影像层</param>  
				/// <param name="updateFeatureGroup">是否更新特征层</param> 
				/// <param name="updateKmlGroup">是否更新kml层</param> 
				/// <returns></returns>
				public virtual void UpdateQuadImage_NoVirtual(bool updateImageGroup, bool updateFeatureGroup, bool updateKmlGroup)
				{
					EarthView_World_Graphic_CSceneManager_updateQuadImage_void_bool_bool_bool_NoVirtual(this.NativeObject, Convert.ToByte(updateImageGroup), Convert.ToByte(updateFeatureGroup), Convert.ToByte(updateKmlGroup));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_updateQuadImage_void_bool_bool_bool_Function(bool updateImageGroup, bool updateFeatureGroup, bool updateKmlGroup)
				{
					UpdateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_updateQuadImage_void_bool_bool_bool(IntPtr pNativeObject, byte updateImageGroup, byte updateFeatureGroup, byte updateKmlGroup);

				/// <summary>
				/// 刷新瓦片纹理
				/// </summary>
				/// <param name="updateImageGroup">是否更新影像层</param>  
				/// <param name="updateFeatureGroup">是否更新特征层</param> 
				/// <param name="updateKmlGroup">是否更新kml层</param> 
				/// <returns></returns>
				public virtual void UpdateQuadImage(bool updateImageGroup, bool updateFeatureGroup, bool updateKmlGroup)
				{
					EarthView_World_Graphic_CSceneManager_updateQuadImage_void_bool_bool_bool(this.NativeObject, Convert.ToByte(updateImageGroup), Convert.ToByte(updateFeatureGroup), Convert.ToByte(updateKmlGroup));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void updateQuadImage_CallBack_void_bool_bool_bool_Real_Real_Real_Real(bool updateImageGroup, bool updateFeatureGroup, bool updateKmlGroup, double minX, double maxX, double minY, double maxY);

				protected updateQuadImage_CallBack_void_bool_bool_bool_Real_Real_Real_Real m_updateQuadImage_CallBack_void_bool_bool_bool_Real_Real_Real_Real;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_updateQuadImage_void_bool_bool_bool_Real_Real_Real_Real_NoVirtual(IntPtr pNativeObject, byte updateImageGroup, byte updateFeatureGroup, byte updateKmlGroup, double minX, double maxX, double minY, double maxY);

				/// <summary>
				/// 刷新瓦片纹理<只刷新指定范围内的瓦片>
				/// </summary>
				/// <param name="updateImageGroup">是否更新影像层</param>  
				/// <param name="updateFeatureGroup">是否更新特征层</param> 
				/// <param name="updateKmlGroup">是否更新kml层</param> 
				/// <param name="minX">最小经度</param>
				/// <param name="maxX">最大经度</param>
				/// <param name="minY">最小纬度</param>
				/// <param name="maxY">最大纬度</param>
				/// <returns></returns>
				public virtual void UpdateQuadImage_NoVirtual(bool updateImageGroup, bool updateFeatureGroup, bool updateKmlGroup, double minX, double maxX, double minY, double maxY)
				{
					EarthView_World_Graphic_CSceneManager_updateQuadImage_void_bool_bool_bool_Real_Real_Real_Real_NoVirtual(this.NativeObject, Convert.ToByte(updateImageGroup), Convert.ToByte(updateFeatureGroup), Convert.ToByte(updateKmlGroup), minX, maxX, minY, maxY);
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_updateQuadImage_void_bool_bool_bool_Real_Real_Real_Real_Function(bool updateImageGroup, bool updateFeatureGroup, bool updateKmlGroup, double minX, double maxX, double minY, double maxY)
				{
					UpdateQuadImage(updateImageGroup, updateFeatureGroup, updateKmlGroup, minX, maxX, minY, maxY);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_updateQuadImage_void_bool_bool_bool_Real_Real_Real_Real(IntPtr pNativeObject, byte updateImageGroup, byte updateFeatureGroup, byte updateKmlGroup, double minX, double maxX, double minY, double maxY);

				/// <summary>
				/// 刷新瓦片纹理<只刷新指定范围内的瓦片>
				/// </summary>
				/// <param name="updateImageGroup">是否更新影像层</param>  
				/// <param name="updateFeatureGroup">是否更新特征层</param> 
				/// <param name="updateKmlGroup">是否更新kml层</param> 
				/// <param name="minX">最小经度</param>
				/// <param name="maxX">最大经度</param>
				/// <param name="minY">最小纬度</param>
				/// <param name="maxY">最大纬度</param>
				/// <returns></returns>
				public virtual void UpdateQuadImage(bool updateImageGroup, bool updateFeatureGroup, bool updateKmlGroup, double minX, double maxX, double minY, double maxY)
				{
					EarthView_World_Graphic_CSceneManager_updateQuadImage_void_bool_bool_bool_Real_Real_Real_Real(this.NativeObject, Convert.ToByte(updateImageGroup), Convert.ToByte(updateFeatureGroup), Convert.ToByte(updateKmlGroup), minX, maxX, minY, maxY);
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void updateOBQ_CallBack_void_ev_bool_ev_bool_ev_bool_ev_bool(bool bUpdateVectorTexture, bool bUpdateKmlTexture, bool bUpdateTemporaryTexture, bool bUpdateTerrain);

				protected updateOBQ_CallBack_void_ev_bool_ev_bool_ev_bool_ev_bool m_updateOBQ_CallBack_void_ev_bool_ev_bool_ev_bool_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_updateOBQ_void_ev_bool_ev_bool_ev_bool_ev_bool_NoVirtual(IntPtr pNativeObject, byte bUpdateVectorTexture, byte bUpdateKmlTexture, byte bUpdateTemporaryTexture, byte bUpdateTerrain);

				/// <summary>
				/// 刷新摄影测量纹理
				/// </summary>
				/// <returns></returns>
				public virtual void UpdateOBQ_NoVirtual(bool bUpdateVectorTexture, bool bUpdateKmlTexture, bool bUpdateTemporaryTexture, bool bUpdateTerrain)
				{
					EarthView_World_Graphic_CSceneManager_updateOBQ_void_ev_bool_ev_bool_ev_bool_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(bUpdateVectorTexture), Convert.ToByte(bUpdateKmlTexture), Convert.ToByte(bUpdateTemporaryTexture), Convert.ToByte(bUpdateTerrain));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_updateOBQ_void_ev_bool_ev_bool_ev_bool_ev_bool_Function(bool bUpdateVectorTexture, bool bUpdateKmlTexture, bool bUpdateTemporaryTexture, bool bUpdateTerrain)
				{
					UpdateOBQ(bUpdateVectorTexture, bUpdateKmlTexture, bUpdateTemporaryTexture, bUpdateTerrain);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_updateOBQ_void_ev_bool_ev_bool_ev_bool_ev_bool(IntPtr pNativeObject, byte bUpdateVectorTexture, byte bUpdateKmlTexture, byte bUpdateTemporaryTexture, byte bUpdateTerrain);

				/// <summary>
				/// 刷新摄影测量纹理
				/// </summary>
				/// <returns></returns>
				public virtual void UpdateOBQ(bool bUpdateVectorTexture, bool bUpdateKmlTexture, bool bUpdateTemporaryTexture, bool bUpdateTerrain)
				{
					EarthView_World_Graphic_CSceneManager_updateOBQ_void_ev_bool_ev_bool_ev_bool_ev_bool(this.NativeObject, Convert.ToByte(bUpdateVectorTexture), Convert.ToByte(bUpdateKmlTexture), Convert.ToByte(bUpdateTemporaryTexture), Convert.ToByte(bUpdateTerrain));
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void setCollisionDetectionEnable_CallBack_void_ev_bool(bool enable);

				protected setCollisionDetectionEnable_CallBack_void_ev_bool m_setCollisionDetectionEnable_CallBack_void_ev_bool;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setCollisionDetectionEnable_void_ev_bool_NoVirtual(IntPtr pNativeObject, byte enable);

				/// <summary>
				/// 允许碰撞
				/// </summary>
				/// <param name="enable"></param>
				/// <returns></returns>
				public virtual void SetCollisionDetectionEnable_NoVirtual(bool enable)
				{
					EarthView_World_Graphic_CSceneManager_setCollisionDetectionEnable_void_ev_bool_NoVirtual(this.NativeObject, Convert.ToByte(enable));
					
				}

				protected  void EarthView_World_Graphic_CSceneManager_setCollisionDetectionEnable_void_ev_bool_Function(bool enable)
				{
					SetCollisionDetectionEnable(enable);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManager_setCollisionDetectionEnable_void_ev_bool(IntPtr pNativeObject, byte enable);

				/// <summary>
				/// 允许碰撞
				/// </summary>
				/// <param name="enable"></param>
				/// <returns></returns>
				public virtual void SetCollisionDetectionEnable(bool enable)
				{
					EarthView_World_Graphic_CSceneManager_setCollisionDetectionEnable_void_ev_bool(this.NativeObject, Convert.ToByte(enable));
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte EarthView_World_Graphic_CSceneManager_getCollisionDetectionEnable_ev_bool(IntPtr pNativeObject);

				/// <summary>
				/// 是否碰撞
				/// </summary>
				/// <param name="enable"></param>
				/// <returns></returns>
				public bool GetCollisionDetectionEnable()
				{
					byte ret=EarthView_World_Graphic_CSceneManager_getCollisionDetectionEnable_ev_bool(this.NativeObject);
					
					return Convert.ToBoolean(ret);
					
				}

				#if DEBUG 
					#if Windows 
						private static bool bLoadSceneManager = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadSceneManager = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#elif Linux 
						private static bool bLoadSceneManager = LoadDll.Load("EV_Graphic_d.so");
						private static bool csbLoadSceneManager = LoadDll.Load("EV_Graphic_CSharp_d.so");

					#else 
						private static bool bLoadSceneManager = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadSceneManager = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#endif 
				#else 
					#if Windows 
						private static bool bLoadSceneManager = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadSceneManager = LoadDll.Load("EV_Graphic_CSharp.dll");

					#elif Linux 
						private static bool bLoadSceneManager = LoadDll.Load("EV_Graphic.so");
						private static bool csbLoadSceneManager = LoadDll.Load("EV_Graphic_CSharp.so");

					#else 
						private static bool bLoadSceneManager = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadSceneManager = LoadDll.Load("EV_Graphic_CSharp.dll");

					#endif 
				#endif 

				private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManager", new SceneManagerClassFactory());

				private static bool registerProxyStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManagerProxy", new SceneManagerClassFactory());

				public SceneManager(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
				{
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createSceneNodeImpl_CSceneNode(IntPtr pObject, createSceneNodeImpl_CallBack_CSceneNode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createSceneNodeImpl_CSceneNode_EVString(IntPtr pObject, createSceneNodeImpl_CallBack_CSceneNode_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_initRenderQueue_void(IntPtr pObject, initRenderQueue_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_deriveShadowCasterPass_CPass_CPass(IntPtr pObject, deriveShadowCasterPass_CallBack_CPass_CPass pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_deriveShadowReceiverPass_CPass_CPass(IntPtr pObject, deriveShadowReceiverPass_CallBack_CPass_CPass pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_validatePassForRendering_ev_bool_CPass(IntPtr pObject, validatePassForRendering_CallBack_ev_bool_CPass pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_validateRenderableForRendering_ev_bool_CPass_CRenderable(IntPtr pObject, validateRenderableForRendering_CallBack_ev_bool_CPass_CRenderable pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createSkyboxPlane_CMeshPtr_BoxPlane_Real_CQuaternion_EVString(IntPtr pObject, createSkyboxPlane_CallBack_CMeshPtr_BoxPlane_Real_CQuaternion_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createSkydomePlane_CMeshPtr_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(IntPtr pObject, createSkydomePlane_CallBack_CMeshPtr_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_useRenderableViewProjMode_void_CRenderable_ev_bool(IntPtr pObject, useRenderableViewProjMode_CallBack_void_CRenderable_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_resetViewProjMode_void_ev_bool(IntPtr pObject, resetViewProjMode_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_firePreRenderQueues_void(IntPtr pObject, firePreRenderQueues_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_firePostRenderQueues_void(IntPtr pObject, firePostRenderQueues_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_fireRenderQueueStarted_ev_bool_ev_uint8_EVString(IntPtr pObject, fireRenderQueueStarted_CallBack_ev_bool_ev_uint8_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_fireRenderQueueEnded_ev_bool_ev_uint8_EVString(IntPtr pObject, fireRenderQueueEnded_CallBack_ev_bool_ev_uint8_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_fireRenderSingleObjectStarted_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(IntPtr pObject, fireRenderSingleObjectStarted_CallBack_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_fireRenderSingleObjectEnd_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(IntPtr pObject, fireRenderSingleObjectEnd_CallBack_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_fireShadowTexturesUpdated_void_ev_size_t(IntPtr pObject, fireShadowTexturesUpdated_CallBack_void_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_fireShadowTexturesPreCaster_void_CLight_CCamera_ev_size_t(IntPtr pObject, fireShadowTexturesPreCaster_CallBack_void_CLight_CCamera_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_fireShadowTexturesPreReceiver_void_CLight_CFrustum(IntPtr pObject, fireShadowTexturesPreReceiver_CallBack_void_CLight_CFrustum pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_firePreUpdateSceneGraph_void_CCamera(IntPtr pObject, firePreUpdateSceneGraph_CallBack_void_CCamera pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_firePostUpdateSceneGraph_void_CCamera(IntPtr pObject, firePostUpdateSceneGraph_CallBack_void_CCamera pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_firePreFindVisibleObjects_void_CViewport(IntPtr pObject, firePreFindVisibleObjects_CallBack_void_CViewport pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_firePostFindVisibleObjects_void_CViewport(IntPtr pObject, firePostFindVisibleObjects_CallBack_void_CViewport pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_fireSceneManagerDestroyed_void(IntPtr pObject, fireSceneManagerDestroyed_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setViewport_void_CViewport(IntPtr pObject, setViewport_CallBack_void_CViewport pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderVisibleObjectsDefaultSequence_void(IntPtr pObject, renderVisibleObjectsDefaultSequence_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderVisibleObjectsCustomSequence_void_CRenderQueueInvocationSequence(IntPtr pObject, renderVisibleObjectsCustomSequence_CallBack_void_CRenderQueueInvocationSequence pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_prepareRenderQueue_void(IntPtr pObject, prepareRenderQueue_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderSingleObject_void_CRenderable_CPass_ev_bool_ev_bool_LightList(IntPtr pObject, renderSingleObject_CallBack_void_CRenderable_CPass_ev_bool_ev_bool_LightList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderSingleObject_void_CRenderable_CPass_ev_bool_ev_bool(IntPtr pObject, renderSingleObject_CallBack_void_CRenderable_CPass_ev_bool_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createAutoParamDataSource_CAutoParamDataSource(IntPtr pObject, createAutoParamDataSource_CallBack_CAutoParamDataSource pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_findLightsAffectingFrustum_void_CCamera(IntPtr pObject, findLightsAffectingFrustum_CallBack_void_CCamera pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_initShadowVolumeMaterials_void(IntPtr pObject, initShadowVolumeMaterials_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_ensureShadowTexturesCreated_void(IntPtr pObject, ensureShadowTexturesCreated_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyShadowTextures_void(IntPtr pObject, destroyShadowTextures_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_prepareShadowTextures_void_CCamera_CViewport_LightList(IntPtr pObject, prepareShadowTextures_CallBack_void_CCamera_CViewport_LightList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_prepareShadowTextures_void_CCamera_CViewport(IntPtr pObject, prepareShadowTextures_CallBack_void_CCamera_CViewport pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setImageDefaultMaterial_void_CMaterialPtr(IntPtr pObject, setImageDefaultMaterial_CallBack_void_CMaterialPtr pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setImageUseDefaultMaterial_void_ev_bool(IntPtr pObject, setImageUseDefaultMaterial_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSunPosition_CVector3(IntPtr pObject, getSunPosition_CallBack_CVector3 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setAtmosphereVisible_void_ev_bool(IntPtr pObject, setAtmosphereVisible_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_storeAtmosphereVisibleState_void(IntPtr pObject, storeAtmosphereVisibleState_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_restoreAtmosphereVisibleState_void(IntPtr pObject, restoreAtmosphereVisibleState_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSunVisible_void_ev_bool(IntPtr pObject, setSunVisible_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__pauseRendering_RenderContext(IntPtr pObject, _pauseRendering_CallBack_RenderContext pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__resumeRendering_void_RenderContext(IntPtr pObject, _resumeRendering_CallBack_void_RenderContext pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderShadowVolumesToStencil_void_CLight_CCamera_ev_bool(IntPtr pObject, renderShadowVolumesToStencil_CallBack_void_CLight_CCamera_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowVolumeStencilState_void_ev_bool_ev_bool_ev_bool(IntPtr pObject, setShadowVolumeStencilState_CallBack_void_ev_bool_ev_bool_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_findShadowCastersForLight_ShadowCasterList_CLight_CCamera(IntPtr pObject, findShadowCastersForLight_CallBack_ShadowCasterList_CLight_CCamera pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderBasicQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(IntPtr pObject, renderBasicQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderAdditiveStencilShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(IntPtr pObject, renderAdditiveStencilShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderModulativeStencilShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(IntPtr pObject, renderModulativeStencilShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderTextureShadowCasterQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(IntPtr pObject, renderTextureShadowCasterQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderTextureShadowReceiverQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(IntPtr pObject, renderTextureShadowReceiverQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderModulativeTextureShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(IntPtr pObject, renderModulativeTextureShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderAdditiveTextureShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(IntPtr pObject, renderAdditiveTextureShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(IntPtr pObject, renderObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(IntPtr pObject, renderObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderTransparentShadowCasterObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(IntPtr pObject, renderTransparentShadowCasterObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderTransparentShadowCasterObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(IntPtr pObject, renderTransparentShadowCasterObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_updateRenderQueueSplitOptions_void(IntPtr pObject, updateRenderQueueSplitOptions_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_updateRenderQueueGroupSplitOptions_void_CRenderQueueGroup_ev_bool_ev_bool(IntPtr pObject, updateRenderQueueGroupSplitOptions_CallBack_void_CRenderQueueGroup_ev_bool_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_buildAndSetScissor_ClipResult_LightList_CCamera(IntPtr pObject, buildAndSetScissor_CallBack_ClipResult_LightList_CCamera pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_buildScissor_void_CLight_CCamera_RealRect(IntPtr pObject, buildScissor_CallBack_void_CLight_CCamera_RealRect pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_resetScissor_void(IntPtr pObject, resetScissor_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_buildAndSetLightClip_ClipResult_LightList(IntPtr pObject, buildAndSetLightClip_CallBack_ClipResult_LightList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_buildLightClip_void_CLight_PlaneList(IntPtr pObject, buildLightClip_CallBack_void_CLight_PlaneList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_resetLightClip_void(IntPtr pObject, resetLightClip_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_checkCachedLightClippingInfo_void(IntPtr pObject, checkCachedLightClippingInfo_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_useLights_void_LightList_ev_uint16(IntPtr pObject, useLights_CallBack_void_LightList_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setViewMatrix_void_CMatrix4(IntPtr pObject, setViewMatrix_CallBack_void_CMatrix4 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_useLightsGpuProgram_void_CPass_LightList(IntPtr pObject, useLightsGpuProgram_CallBack_void_CPass_LightList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_bindGpuProgram_void_CGpuProgram(IntPtr pObject, bindGpuProgram_CallBack_void_CGpuProgram pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_updateGpuProgramParameters_void_CPass(IntPtr pObject, updateGpuProgramParameters_CallBack_void_CPass pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getTypeName_EVString(IntPtr pObject, getTypeName_CallBack_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createCamera_CCamera_EVString(IntPtr pObject, createCamera_CallBack_CCamera_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getCamera_CCamera_EVString(IntPtr pObject, getCamera_CallBack_CCamera_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasCamera_ev_bool_EVString(IntPtr pObject, hasCamera_CallBack_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyCamera_void_CCamera(IntPtr pObject, destroyCamera_CallBack_void_CCamera pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyCamera_void_EVString(IntPtr pObject, destroyCamera_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllCameras_void(IntPtr pObject, destroyAllCameras_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createLight_CLight_EVString(IntPtr pObject, createLight_CallBack_CLight_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createLight_CLight(IntPtr pObject, createLight_CallBack_CLight pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getLightCount_ev_uint16(IntPtr pObject, getLightCount_CallBack_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getLight_CLight_ev_uint16(IntPtr pObject, getLight_CallBack_CLight_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getLight_CLight_EVString(IntPtr pObject, getLight_CallBack_CLight_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasLight_ev_bool_EVString(IntPtr pObject, hasLight_CallBack_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getLightClippingPlanes_PlaneList_CLight(IntPtr pObject, getLightClippingPlanes_CallBack_PlaneList_CLight pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getLightScissorRect_RealRect_CLight_CCamera(IntPtr pObject, getLightScissorRect_CallBack_RealRect_CLight_CCamera pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyLight_void_EVString(IntPtr pObject, destroyLight_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyLight_void_CLight(IntPtr pObject, destroyLight_CallBack_void_CLight pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllLights_void(IntPtr pObject, destroyAllLights_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSoftShadowTexName_EVString(IntPtr pObject, getSoftShadowTexName_CallBack_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowTexCam_CCamera(IntPtr pObject, getShadowTexCam_CallBack_CCamera pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSoftShadowProjMatrix_CMatrix4_ev_uint16(IntPtr pObject, getSoftShadowProjMatrix_CallBack_CMatrix4_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getCascadeEyeSpaceDepthArray_CVector4(IntPtr pObject, getCascadeEyeSpaceDepthArray_CallBack_CVector4 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSoftShadowNearClip_float_ev_uint8(IntPtr pObject, getSoftShadowNearClip_CallBack_float_ev_uint8 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSoftShadowFarClip_float_ev_uint8(IntPtr pObject, getSoftShadowFarClip_CallBack_float_ev_uint8 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getIsUseSoftShadowFitToCascadesMode_bool(IntPtr pObject, getIsUseSoftShadowFitToCascadesMode_CallBack_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setIsUseSoftShadowFitToCascadesMode_void_bool(IntPtr pObject, setIsUseSoftShadowFitToCascadesMode_CallBack_void_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getCurrentClipIndex_ev_uint8(IntPtr pObject, getCurrentClipIndex_CallBack_ev_uint8 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getIsUseSoftShadowTechnique_bool(IntPtr pObject, getIsUseSoftShadowTechnique_CallBack_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setIsUseSoftShadowTechnique_void_bool(IntPtr pObject, setIsUseSoftShadowTechnique_CallBack_void_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getCascadePartitionsPercent_float(IntPtr pObject, getCascadePartitionsPercent_CallBack_float pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setCascadePartitionsPercent_void_float(IntPtr pObject, setCascadePartitionsPercent_CallBack_void_float pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getCascadePartitionsDistance_int_ev_uint8(IntPtr pObject, getCascadePartitionsDistance_CallBack_int_ev_uint8 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setCascadePartitionsDistance_void_ev_uint8_ev_uint8(IntPtr pObject, setCascadePartitionsDistance_CallBack_void_ev_uint8_ev_uint8 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSoftShadowOffsetFormat_PixelFormat(IntPtr pObject, getSoftShadowOffsetFormat_CallBack_PixelFormat pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_checkShadowCasterInFrustum_void_CCamera(IntPtr pObject, checkShadowCasterInFrustum_CallBack_void_CCamera pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasShadowCasterInFrustum_bool(IntPtr pObject, hasShadowCasterInFrustum_CallBack_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSoftShadowLightBleedPower_Real(IntPtr pObject, getSoftShadowLightBleedPower_CallBack_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSoftShadowLightBleedPower_void_Real(IntPtr pObject, setSoftShadowLightBleedPower_CallBack_void_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSoftShadowDepthOffset_Real(IntPtr pObject, getSoftShadowDepthOffset_CallBack_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSoftShadowDepthOffset_void_Real(IntPtr pObject, setSoftShadowDepthOffset_CallBack_void_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSoftShadowNormalFactor_float(IntPtr pObject, getSoftShadowNormalFactor_CallBack_float pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSoftShadowNormalFactor_void_float(IntPtr pObject, setSoftShadowNormalFactor_CallBack_void_float pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__notifyLightsDirty_void(IntPtr pObject, _notifyLightsDirty_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__getLightsAffectingFrustum_LightList(IntPtr pObject, _getLightsAffectingFrustum_CallBack_LightList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__populateLightList_void_CVector3_Real_LightList_ev_uint32(IntPtr pObject, _populateLightList_CallBack_void_CVector3_Real_LightList_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__populateLightList_void_CVector3_Real_LightList(IntPtr pObject, _populateLightList_CallBack_void_CVector3_Real_LightList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_showImage_void_ev_bool(IntPtr pObject, showImage_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getImageVisible_ev_bool(IntPtr pObject, getImageVisible_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_showOcean_void_ev_bool(IntPtr pObject, showOcean_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getOceanVisible_ev_bool(IntPtr pObject, getOceanVisible_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__populateLightList_void_CSceneNode_Real_LightList_ev_uint32(IntPtr pObject, _populateLightList_CallBack_void_CSceneNode_Real_LightList_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__populateLightList_void_CSceneNode_Real_LightList(IntPtr pObject, _populateLightList_CallBack_void_CSceneNode_Real_LightList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createSceneNode_CSceneNode(IntPtr pObject, createSceneNode_CallBack_CSceneNode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createSceneNode_CSceneNode_EVString(IntPtr pObject, createSceneNode_CallBack_CSceneNode_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroySceneNode_void_EVString(IntPtr pObject, destroySceneNode_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroySceneNode_void_CSceneNode(IntPtr pObject, destroySceneNode_CallBack_void_CSceneNode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getRootSceneNode_CSceneNode(IntPtr pObject, getRootSceneNode_CallBack_CSceneNode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSceneNode_CSceneNode_EVString(IntPtr pObject, getSceneNode_CallBack_CSceneNode_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasSceneNode_ev_bool_EVString(IntPtr pObject, hasSceneNode_CallBack_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_IntVector_EVString(IntPtr pObject, createEntity_CallBack_CEntity_EVString_EVString_IntVector_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_EVString(IntPtr pObject, createEntity_CallBack_CEntity_EVString_EVString_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_IntVector(IntPtr pObject, createEntity_CallBack_CEntity_EVString_EVString_IntVector pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString(IntPtr pObject, createEntity_CallBack_CEntity_EVString_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_CMeshPtr_IntVector(IntPtr pObject, createEntity_CallBack_CEntity_EVString_CMeshPtr_IntVector pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_CMeshPtr(IntPtr pObject, createEntity_CallBack_CEntity_EVString_CMeshPtr pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_CMeshPtr_IntVector(IntPtr pObject, createEntity_CallBack_CEntity_CMeshPtr_IntVector pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_CMeshPtr(IntPtr pObject, createEntity_CallBack_CEntity_CMeshPtr pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_IntVector(IntPtr pObject, createEntity_CallBack_CEntity_EVString_IntVector pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString(IntPtr pObject, createEntity_CallBack_CEntity_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_PrefabType(IntPtr pObject, createEntity_CallBack_CEntity_EVString_PrefabType pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_PrefabType(IntPtr pObject, createEntity_CallBack_CEntity_PrefabType pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getEntity_CEntity_EVString(IntPtr pObject, getEntity_CallBack_CEntity_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasEntity_ev_bool_EVString(IntPtr pObject, hasEntity_CallBack_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyEntity_void_CEntity(IntPtr pObject, destroyEntity_CallBack_void_CEntity pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyEntity_void_EVString(IntPtr pObject, destroyEntity_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllEntities_void(IntPtr pObject, destroyAllEntities_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createManualObject_CManualObject_EVString(IntPtr pObject, createManualObject_CallBack_CManualObject_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createManualObject_CManualObject(IntPtr pObject, createManualObject_CallBack_CManualObject pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getManualObject_CManualObject_EVString(IntPtr pObject, getManualObject_CallBack_CManualObject_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasManualObject_ev_bool_EVString(IntPtr pObject, hasManualObject_CallBack_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyManualObject_void_CManualObject(IntPtr pObject, destroyManualObject_CallBack_void_CManualObject pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyManualObject_void_EVString(IntPtr pObject, destroyManualObject_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllManualObjects_void(IntPtr pObject, destroyAllManualObjects_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_usingWebMercator_ev_bool(IntPtr pObject, usingWebMercator_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createBillboardChain_CBillboardChain_EVString(IntPtr pObject, createBillboardChain_CallBack_CBillboardChain_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createBillboardChain_CBillboardChain(IntPtr pObject, createBillboardChain_CallBack_CBillboardChain pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getBillboardChain_CBillboardChain_EVString(IntPtr pObject, getBillboardChain_CallBack_CBillboardChain_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasBillboardChain_ev_bool_EVString(IntPtr pObject, hasBillboardChain_CallBack_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyBillboardChain_void_CBillboardChain(IntPtr pObject, destroyBillboardChain_CallBack_void_CBillboardChain pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyBillboardChain_void_EVString(IntPtr pObject, destroyBillboardChain_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllBillboardChains_void(IntPtr pObject, destroyAllBillboardChains_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createRibbonTrail_CRibbonTrail_EVString(IntPtr pObject, createRibbonTrail_CallBack_CRibbonTrail_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createRibbonTrail_CRibbonTrail(IntPtr pObject, createRibbonTrail_CallBack_CRibbonTrail pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getRibbonTrail_CRibbonTrail_EVString(IntPtr pObject, getRibbonTrail_CallBack_CRibbonTrail_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasRibbonTrail_ev_bool_EVString(IntPtr pObject, hasRibbonTrail_CallBack_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyRibbonTrail_void_CRibbonTrail(IntPtr pObject, destroyRibbonTrail_CallBack_void_CRibbonTrail pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyRibbonTrail_void_EVString(IntPtr pObject, destroyRibbonTrail_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllRibbonTrails_void(IntPtr pObject, destroyAllRibbonTrails_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_EVString(IntPtr pObject, createParticleSystem_CallBack_CParticleSystem_EVString_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_ev_size_t_EVString(IntPtr pObject, createParticleSystem_CallBack_CParticleSystem_EVString_ev_size_t_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_ev_size_t(IntPtr pObject, createParticleSystem_CallBack_CParticleSystem_EVString_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString(IntPtr pObject, createParticleSystem_CallBack_CParticleSystem_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_ev_size_t_EVString(IntPtr pObject, createParticleSystem_CallBack_CParticleSystem_ev_size_t_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_ev_size_t(IntPtr pObject, createParticleSystem_CallBack_CParticleSystem_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem(IntPtr pObject, createParticleSystem_CallBack_CParticleSystem pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getParticleSystem_CParticleSystem_EVString(IntPtr pObject, getParticleSystem_CallBack_CParticleSystem_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasParticleSystem_ev_bool_EVString(IntPtr pObject, hasParticleSystem_CallBack_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyParticleSystem_void_CParticleSystem(IntPtr pObject, destroyParticleSystem_CallBack_void_CParticleSystem pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyParticleSystem_void_EVString(IntPtr pObject, destroyParticleSystem_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllParticleSystems_void(IntPtr pObject, destroyAllParticleSystems_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_clearScene_void(IntPtr pObject, clearScene_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_EVString(IntPtr pObject, prepareWorldGeometry_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_DataStreamPtr_EVString(IntPtr pObject, prepareWorldGeometry_CallBack_void_DataStreamPtr_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_DataStreamPtr(IntPtr pObject, prepareWorldGeometry_CallBack_void_DataStreamPtr pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_EVString(IntPtr pObject, setWorldGeometry_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_DataStreamPtr_EVString(IntPtr pObject, setWorldGeometry_CallBack_void_DataStreamPtr_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_DataStreamPtr(IntPtr pObject, setWorldGeometry_CallBack_void_DataStreamPtr pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_EVString(IntPtr pObject, estimateWorldGeometry_CallBack_ev_size_t_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_DataStreamPtr_EVString(IntPtr pObject, estimateWorldGeometry_CallBack_ev_size_t_DataStreamPtr_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_DataStreamPtr(IntPtr pObject, estimateWorldGeometry_CallBack_ev_size_t_DataStreamPtr pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSuggestedViewpoint_ViewPoint_ev_bool(IntPtr pObject, getSuggestedViewpoint_CallBack_ViewPoint_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSuggestedViewpoint_ViewPoint(IntPtr pObject, getSuggestedViewpoint_CallBack_ViewPoint pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setOption_ev_bool_EVString_void(IntPtr pObject, setOption_CallBack_ev_bool_EVString_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getOption_ev_bool_EVString_void(IntPtr pObject, getOption_CallBack_ev_bool_EVString_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasOption_ev_bool_EVString(IntPtr pObject, hasOption_CallBack_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getOptionValues_ev_bool_EVString_StringVector(IntPtr pObject, getOptionValues_CallBack_ev_bool_EVString_StringVector pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getOptionKeys_ev_bool_StringVector(IntPtr pObject, getOptionKeys_CallBack_ev_bool_StringVector pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__updateSceneGraph_void_CCamera(IntPtr pObject, _updateSceneGraph_CallBack_void_CCamera pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__findVisibleObjects_void_CCamera_VisibleObjectsBoundsInfo_ev_bool(IntPtr pObject, _findVisibleObjects_CallBack_void_CCamera_VisibleObjectsBoundsInfo_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__applySceneAnimations_void(IntPtr pObject, _applySceneAnimations_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__renderVisibleObjects_void(IntPtr pObject, _renderVisibleObjects_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__renderScene_void_CCamera_CViewport_ev_bool(IntPtr pObject, _renderScene_CallBack_void_CCamera_CViewport_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__queueSkiesForRendering_void_CCamera(IntPtr pObject, _queueSkiesForRendering_CallBack_void_CCamera pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setDestinationRenderSystem_void_CRenderSystem(IntPtr pObject, _setDestinationRenderSystem_CallBack_void_CRenderSystem pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString(IntPtr pObject, setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32(IntPtr pObject, setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32(IntPtr pObject, setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real(IntPtr pObject, setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool(IntPtr pObject, setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real(IntPtr pObject, setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real(IntPtr pObject, setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString(IntPtr pObject, setSkyPlane_CallBack_void_ev_bool_CPlane_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString(IntPtr pObject, _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32(IntPtr pObject, _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32(IntPtr pObject, _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real(IntPtr pObject, _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8(IntPtr pObject, _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real(IntPtr pObject, _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real(IntPtr pObject, _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString(IntPtr pObject, _setSkyPlane_CallBack_void_ev_bool_CPlane_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlaneEnabled_void_ev_bool(IntPtr pObject, setSkyPlaneEnabled_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isSkyPlaneEnabled_ev_bool(IntPtr pObject, isSkyPlaneEnabled_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSkyPlaneNode_CSceneNode(IntPtr pObject, getSkyPlaneNode_CallBack_CSceneNode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSkyPlaneGenParameters_SkyPlaneGenParameters(IntPtr pObject, getSkyPlaneGenParameters_CallBack_SkyPlaneGenParameters pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString(IntPtr pObject, setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_CQuaternion(IntPtr pObject, setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool_CQuaternion pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool(IntPtr pObject, setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real(IntPtr pObject, setSkyBox_CallBack_void_ev_bool_EVString_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString(IntPtr pObject, setSkyBox_CallBack_void_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString(IntPtr pObject, _setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_CQuaternion(IntPtr pObject, _setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8_CQuaternion pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8(IntPtr pObject, _setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real(IntPtr pObject, _setSkyBox_CallBack_void_ev_bool_EVString_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString(IntPtr pObject, _setSkyBox_CallBack_void_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyBoxEnabled_void_ev_bool(IntPtr pObject, setSkyBoxEnabled_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isSkyBoxEnabled_ev_bool(IntPtr pObject, isSkyBoxEnabled_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSkyBoxNode_CSceneNode(IntPtr pObject, getSkyBoxNode_CallBack_CSceneNode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSkyBoxGenParameters_SkyBoxGenParameters(IntPtr pObject, getSkyBoxGenParameters_CallBack_SkyBoxGenParameters pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(IntPtr pObject, setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32(IntPtr pObject, setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32(IntPtr pObject, setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32(IntPtr pObject, setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion(IntPtr pObject, setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool(IntPtr pObject, setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real(IntPtr pObject, setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real(IntPtr pObject, setSkyDome_CallBack_void_ev_bool_EVString_Real_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real(IntPtr pObject, setSkyDome_CallBack_void_ev_bool_EVString_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString(IntPtr pObject, setSkyDome_CallBack_void_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(IntPtr pObject, _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32(IntPtr pObject, _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32(IntPtr pObject, _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32(IntPtr pObject, _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion(IntPtr pObject, _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8(IntPtr pObject, _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real(IntPtr pObject, _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real(IntPtr pObject, _setSkyDome_CallBack_void_ev_bool_EVString_Real_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real(IntPtr pObject, _setSkyDome_CallBack_void_ev_bool_EVString_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString(IntPtr pObject, _setSkyDome_CallBack_void_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDomeEnabled_void_ev_bool(IntPtr pObject, setSkyDomeEnabled_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isSkyDomeEnabled_ev_bool(IntPtr pObject, isSkyDomeEnabled_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSkyDomeNode_CSceneNode(IntPtr pObject, getSkyDomeNode_CallBack_CSceneNode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSkyDomeGenParameters_SkyDomeGenParameters(IntPtr pObject, getSkyDomeGenParameters_CallBack_SkyDomeGenParameters pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getFogMode_FogMode(IntPtr pObject, getFogMode_CallBack_FogMode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getFogColour_CColourValue(IntPtr pObject, getFogColour_CallBack_CColourValue pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getFogStart_Real(IntPtr pObject, getFogStart_CallBack_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getFogEnd_Real(IntPtr pObject, getFogEnd_CallBack_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getFogDensity_Real(IntPtr pObject, getFogDensity_CallBack_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_EVString_ev_uint32(IntPtr pObject, createBillboardSet_CallBack_CBillboardSet_EVString_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_EVString(IntPtr pObject, createBillboardSet_CallBack_CBillboardSet_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_ev_uint32(IntPtr pObject, createBillboardSet_CallBack_CBillboardSet_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet(IntPtr pObject, createBillboardSet_CallBack_CBillboardSet pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getBillboardSet_CBillboardSet_EVString(IntPtr pObject, getBillboardSet_CallBack_CBillboardSet_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasBillboardSet_ev_bool_EVString(IntPtr pObject, hasBillboardSet_CallBack_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyBillboardSet_void_CBillboardSet(IntPtr pObject, destroyBillboardSet_CallBack_void_CBillboardSet pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyBillboardSet_void_EVString(IntPtr pObject, destroyBillboardSet_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllBillboardSets_void(IntPtr pObject, destroyAllBillboardSets_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setDisplaySceneNodes_void_ev_bool(IntPtr pObject, setDisplaySceneNodes_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getDisplaySceneNodes_ev_bool(IntPtr pObject, getDisplaySceneNodes_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createAnimation_CAnimation_EVString_Real(IntPtr pObject, createAnimation_CallBack_CAnimation_EVString_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getAnimation_CAnimation_EVString(IntPtr pObject, getAnimation_CallBack_CAnimation_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasAnimation_ev_bool_EVString(IntPtr pObject, hasAnimation_CallBack_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAnimation_void_EVString(IntPtr pObject, destroyAnimation_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllAnimations_void(IntPtr pObject, destroyAllAnimations_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createAnimationState_CAnimationState_EVString(IntPtr pObject, createAnimationState_CallBack_CAnimationState_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getAnimationState_CAnimationState_EVString(IntPtr pObject, getAnimationState_CallBack_CAnimationState_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasAnimationState_ev_bool_EVString(IntPtr pObject, hasAnimationState_CallBack_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAnimationState_void_EVString(IntPtr pObject, destroyAnimationState_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllAnimationStates_void(IntPtr pObject, destroyAllAnimationStates_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool(IntPtr pObject, manualRender_CallBack_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4(IntPtr pObject, manualRender_CallBack_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList(IntPtr pObject, manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool(IntPtr pObject, manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool(IntPtr pObject, manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool(IntPtr pObject, manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4(IntPtr pObject, manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getRenderQueue_CRenderQueue(IntPtr pObject, getRenderQueue_CallBack_CRenderQueue pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_addRenderQueueListener_void_CRenderQueueListener(IntPtr pObject, addRenderQueueListener_CallBack_void_CRenderQueueListener pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_removeRenderQueueListener_void_CRenderQueueListener(IntPtr pObject, removeRenderQueueListener_CallBack_void_CRenderQueueListener pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_addRenderObjectListener_void_CRenderObjectListener(IntPtr pObject, addRenderObjectListener_CallBack_void_CRenderObjectListener pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_removeRenderObjectListener_void_CRenderObjectListener(IntPtr pObject, removeRenderObjectListener_CallBack_void_CRenderObjectListener pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_addSpecialCaseRenderQueue_void_ev_uint8(IntPtr pObject, addSpecialCaseRenderQueue_CallBack_void_ev_uint8 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_removeSpecialCaseRenderQueue_void_ev_uint8(IntPtr pObject, removeSpecialCaseRenderQueue_CallBack_void_ev_uint8 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_clearSpecialCaseRenderQueues_void(IntPtr pObject, clearSpecialCaseRenderQueues_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSpecialCaseRenderQueueMode_void_SpecialCaseRenderQueueMode(IntPtr pObject, setSpecialCaseRenderQueueMode_CallBack_void_SpecialCaseRenderQueueMode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode(IntPtr pObject, getSpecialCaseRenderQueueMode_CallBack_SpecialCaseRenderQueueMode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isRenderQueueToBeProcessed_ev_bool_ev_uint8(IntPtr pObject, isRenderQueueToBeProcessed_CallBack_ev_bool_ev_uint8 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setWorldGeometryRenderQueue_void_ev_uint8(IntPtr pObject, setWorldGeometryRenderQueue_CallBack_void_ev_uint8 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getWorldGeometryRenderQueue_ev_uint8(IntPtr pObject, getWorldGeometryRenderQueue_CallBack_ev_uint8 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_showBoundingBoxes_void_ev_bool(IntPtr pObject, showBoundingBoxes_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShowBoundingBoxes_ev_bool(IntPtr pObject, getShowBoundingBoxes_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__notifyAutotrackingSceneNode_void_CSceneNode_ev_bool(IntPtr pObject, _notifyAutotrackingSceneNode_CallBack_void_CSceneNode_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createAABBQuery_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_ev_uint32(IntPtr pObject, createAABBQuery_CallBack_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createAABBQuery_CAxisAlignedBoxSceneQuery_CAxisAlignedBox(IntPtr pObject, createAABBQuery_CallBack_CAxisAlignedBoxSceneQuery_CAxisAlignedBox pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createSphereQuery_CSphereSceneQuery_CSphere_ev_uint32(IntPtr pObject, createSphereQuery_CallBack_CSphereSceneQuery_CSphere_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createSphereQuery_CSphereSceneQuery_CSphere(IntPtr pObject, createSphereQuery_CallBack_CSphereSceneQuery_CSphere pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createPlaneBoundedVolumeQuery_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_ev_uint32(IntPtr pObject, createPlaneBoundedVolumeQuery_CallBack_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createPlaneBoundedVolumeQuery_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList(IntPtr pObject, createPlaneBoundedVolumeQuery_CallBack_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createRayQuery_CRaySceneQuery_CRay_ev_uint32(IntPtr pObject, createRayQuery_CallBack_CRaySceneQuery_CRay_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createRayQuery_CRaySceneQuery_CRay(IntPtr pObject, createRayQuery_CallBack_CRaySceneQuery_CRay pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createIntersectionQuery_CIntersectionSceneQuery_ev_uint32(IntPtr pObject, createIntersectionQuery_CallBack_CIntersectionSceneQuery_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createIntersectionQuery_CIntersectionSceneQuery(IntPtr pObject, createIntersectionQuery_CallBack_CIntersectionSceneQuery pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyQuery_void_CSceneQuery(IntPtr pObject, destroyQuery_CallBack_void_CSceneQuery pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTechnique_void_ShadowTechnique(IntPtr pObject, setShadowTechnique_CallBack_void_ShadowTechnique pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowTechnique_ShadowTechnique(IntPtr pObject, getShadowTechnique_CallBack_ShadowTechnique pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShowDebugShadows_void_ev_bool(IntPtr pObject, setShowDebugShadows_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShowDebugShadows_ev_bool(IntPtr pObject, getShowDebugShadows_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowColour_void_CColourValue(IntPtr pObject, setShadowColour_CallBack_void_CColourValue pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowColour_CColourValue(IntPtr pObject, getShadowColour_CallBack_CColourValue pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowDirectionalLightExtrusionDistance_void_Real(IntPtr pObject, setShadowDirectionalLightExtrusionDistance_CallBack_void_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowDirectionalLightExtrusionDistance_Real(IntPtr pObject, getShadowDirectionalLightExtrusionDistance_CallBack_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowColorRRatio_void_Real(IntPtr pObject, setShadowColorRRatio_CallBack_void_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowColorGRatio_void_Real(IntPtr pObject, setShadowColorGRatio_CallBack_void_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowColorBRatio_void_Real(IntPtr pObject, setShadowColorBRatio_CallBack_void_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowColorRRatio_Real(IntPtr pObject, getShadowColorRRatio_CallBack_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowColorGRatio_Real(IntPtr pObject, getShadowColorGRatio_CallBack_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowColorBRatio_Real(IntPtr pObject, getShadowColorBRatio_CallBack_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowFarDistance_void_Real(IntPtr pObject, setShadowFarDistance_CallBack_void_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowFarDistance_Real(IntPtr pObject, getShadowFarDistance_CallBack_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowFarDistanceSquared_Real(IntPtr pObject, getShadowFarDistanceSquared_CallBack_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowIndexBufferSize_void_ev_size_t(IntPtr pObject, setShadowIndexBufferSize_CallBack_void_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowIndexBufferSize_ev_size_t(IntPtr pObject, getShadowIndexBufferSize_CallBack_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureSize_void_ev_uint16(IntPtr pObject, setShadowTextureSize_CallBack_void_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat(IntPtr pObject, setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16(IntPtr pObject, setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(IntPtr pObject, setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ShadowTextureConfig(IntPtr pObject, setShadowTextureConfig_CallBack_void_ev_size_t_ShadowTextureConfig pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTexturePixelFormat_void_PixelFormat(IntPtr pObject, setShadowTexturePixelFormat_CallBack_void_PixelFormat pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureFSAA_void_ev_uint16(IntPtr pObject, setShadowTextureFSAA_CallBack_void_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureCount_void_ev_size_t(IntPtr pObject, setShadowTextureCount_CallBack_void_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16(IntPtr pObject, setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat(IntPtr pObject, setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16(IntPtr pObject, setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(IntPtr pObject, setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowTexture_CTexturePtr_ev_size_t(IntPtr pObject, getShadowTexture_CallBack_CTexturePtr_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowDirLightTextureOffset_void_Real(IntPtr pObject, setShadowDirLightTextureOffset_CallBack_void_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowDirLightTextureOffset_Real(IntPtr pObject, getShadowDirLightTextureOffset_CallBack_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureFadeStart_void_Real(IntPtr pObject, setShadowTextureFadeStart_CallBack_void_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureFadeEnd_void_Real(IntPtr pObject, setShadowTextureFadeEnd_CallBack_void_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureSelfShadow_void_ev_bool(IntPtr pObject, setShadowTextureSelfShadow_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowTextureSelfShadow_ev_bool(IntPtr pObject, getShadowTextureSelfShadow_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureCasterMaterial_void_EVString(IntPtr pObject, setShadowTextureCasterMaterial_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureReceiverMaterial_void_EVString(IntPtr pObject, setShadowTextureReceiverMaterial_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowCasterRenderBackFaces_void_ev_bool(IntPtr pObject, setShadowCasterRenderBackFaces_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowCasterRenderBackFaces_ev_bool(IntPtr pObject, getShadowCasterRenderBackFaces_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowCameraSetup_void_ShadowCameraSetupPtr(IntPtr pObject, setShadowCameraSetup_CallBack_void_ShadowCameraSetupPtr pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowCameraSetup_ShadowCameraSetupPtr(IntPtr pObject, getShadowCameraSetup_CallBack_ShadowCameraSetupPtr pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowUseInfiniteFarPlane_void_ev_bool(IntPtr pObject, setShadowUseInfiniteFarPlane_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isShadowTechniqueStencilBased_ev_bool(IntPtr pObject, isShadowTechniqueStencilBased_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isShadowTechniqueTextureBased_ev_bool(IntPtr pObject, isShadowTechniqueTextureBased_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isShadowTechniqueModulative_ev_bool(IntPtr pObject, isShadowTechniqueModulative_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isShadowTechniqueAdditive_ev_bool(IntPtr pObject, isShadowTechniqueAdditive_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isShadowTechniqueIntegrated_ev_bool(IntPtr pObject, isShadowTechniqueIntegrated_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isShadowTechniqueInUse_ev_bool(IntPtr pObject, isShadowTechniqueInUse_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowUseLightClipPlanes_void_ev_bool(IntPtr pObject, setShadowUseLightClipPlanes_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowUseLightClipPlanes_ev_bool(IntPtr pObject, getShadowUseLightClipPlanes_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setActiveCompositorChain_void_CCompositorChain(IntPtr pObject, _setActiveCompositorChain_CallBack_void_CCompositorChain pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setLateMaterialResolving_void_ev_bool(IntPtr pObject, setLateMaterialResolving_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isLateMaterialResolving_ev_bool(IntPtr pObject, isLateMaterialResolving_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__getActiveCompositorChain_CCompositorChain(IntPtr pObject, _getActiveCompositorChain_CallBack_CCompositorChain pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_addListener_void_CSceneManagerListener(IntPtr pObject, addListener_CallBack_void_CSceneManagerListener pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_removeListener_void_CSceneManagerListener(IntPtr pObject, removeListener_CallBack_void_CSceneManagerListener pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_existListener_ev_bool_CSceneManagerListener(IntPtr pObject, existListener_CallBack_ev_bool_CSceneManagerListener pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createStaticGeometry_CStaticGeometry_EVString(IntPtr pObject, createStaticGeometry_CallBack_CStaticGeometry_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getStaticGeometry_CStaticGeometry_EVString(IntPtr pObject, getStaticGeometry_CallBack_CStaticGeometry_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasStaticGeometry_ev_bool_EVString(IntPtr pObject, hasStaticGeometry_CallBack_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyStaticGeometry_void_CStaticGeometry(IntPtr pObject, destroyStaticGeometry_CallBack_void_CStaticGeometry pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyStaticGeometry_void_EVString(IntPtr pObject, destroyStaticGeometry_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllStaticGeometry_void(IntPtr pObject, destroyAllStaticGeometry_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createInstancedGeometry_CInstancedGeometry_EVString(IntPtr pObject, createInstancedGeometry_CallBack_CInstancedGeometry_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getInstancedGeometry_CInstancedGeometry_EVString(IntPtr pObject, getInstancedGeometry_CallBack_CInstancedGeometry_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyInstancedGeometry_void_CInstancedGeometry(IntPtr pObject, destroyInstancedGeometry_CallBack_void_CInstancedGeometry pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyInstancedGeometry_void_EVString(IntPtr pObject, destroyInstancedGeometry_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllInstancedGeometry_void(IntPtr pObject, destroyAllInstancedGeometry_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(IntPtr pObject, createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(IntPtr pObject, createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t(IntPtr pObject, createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getInstanceManager_CInstanceManager_EVString(IntPtr pObject, getInstanceManager_CallBack_CInstanceManager_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasInstanceManager_ev_bool_EVString(IntPtr pObject, hasInstanceManager_CallBack_ev_bool_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyInstanceManager_void_EVString(IntPtr pObject, destroyInstanceManager_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyInstanceManager_void_CInstanceManager(IntPtr pObject, destroyInstanceManager_CallBack_void_CInstanceManager pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyInstanceManagerWithThreadSafe_void_EVString(IntPtr pObject, destroyInstanceManagerWithThreadSafe_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyInstanceManagerWithThreadSafe_void_CInstanceManager(IntPtr pObject, destroyInstanceManagerWithThreadSafe_CallBack_void_CInstanceManager pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllInstanceManagers_void(IntPtr pObject, destroyAllInstanceManagers_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t(IntPtr pObject, getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(IntPtr pObject, getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(IntPtr pObject, getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createInstancedEntity_CInstancedEntity_EVString_EVString(IntPtr pObject, createInstancedEntity_CallBack_CInstancedEntity_EVString_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyInstancedEntity_void_CInstancedEntity(IntPtr pObject, destroyInstancedEntity_CallBack_void_CInstancedEntity pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_EVString_CommonStringPairList(IntPtr pObject, createMovableObject_CallBack_CMovableObject_EVString_EVString_CommonStringPairList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_EVString(IntPtr pObject, createMovableObject_CallBack_CMovableObject_EVString_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_CommonStringPairList(IntPtr pObject, createMovableObject_CallBack_CMovableObject_EVString_CommonStringPairList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString(IntPtr pObject, createMovableObject_CallBack_CMovableObject_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyMovableObject_void_EVString_EVString(IntPtr pObject, destroyMovableObject_CallBack_void_EVString_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyMovableObject_void_CMovableObject(IntPtr pObject, destroyMovableObject_CallBack_void_CMovableObject pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllMovableObjectsByType_void_EVString(IntPtr pObject, destroyAllMovableObjectsByType_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllMovableObjects_void(IntPtr pObject, destroyAllMovableObjects_CallBack_void pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getMovableObject_CMovableObject_EVString_EVString(IntPtr pObject, getMovableObject_CallBack_CMovableObject_EVString_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasMovableObject_ev_bool_EVString_EVString(IntPtr pObject, hasMovableObject_CallBack_ev_bool_EVString_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getMovableObjectIterator_MovableObjectIterator_EVString(IntPtr pObject, getMovableObjectIterator_CallBack_MovableObjectIterator_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_injectMovableObject_void_CMovableObject(IntPtr pObject, injectMovableObject_CallBack_void_CMovableObject pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_extractMovableObject_void_EVString_EVString(IntPtr pObject, extractMovableObject_CallBack_void_EVString_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_extractMovableObject_void_CMovableObject(IntPtr pObject, extractMovableObject_CallBack_void_CMovableObject pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_extractAllMovableObjectsByType_void_EVString(IntPtr pObject, extractAllMovableObjectsByType_CallBack_void_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setVisibilityMask_void_ev_uint32(IntPtr pObject, setVisibilityMask_CallBack_void_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getVisibilityMask_ev_uint32(IntPtr pObject, getVisibilityMask_CallBack_ev_uint32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setFindVisibleObjects_void_ev_bool(IntPtr pObject, setFindVisibleObjects_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getFindVisibleObjects_ev_bool(IntPtr pObject, getFindVisibleObjects_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setNormaliseNormalsOnScale_void_ev_bool(IntPtr pObject, setNormaliseNormalsOnScale_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getNormaliseNormalsOnScale_ev_bool(IntPtr pObject, getNormaliseNormalsOnScale_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setFlipCullingOnNegativeScale_void_ev_bool(IntPtr pObject, setFlipCullingOnNegativeScale_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getFlipCullingOnNegativeScale_ev_bool(IntPtr pObject, getFlipCullingOnNegativeScale_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_ev_bool_LightList(IntPtr pObject, _injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool_ev_bool_LightList pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_ev_bool(IntPtr pObject, _injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool(IntPtr pObject, _injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable(IntPtr pObject, _injectRenderWithPass_CallBack_void_CPass_CRenderable pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__suppressRenderStateChanges_void_ev_bool(IntPtr pObject, _suppressRenderStateChanges_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__areRenderStateChangesSuppressed_ev_bool(IntPtr pObject, _areRenderStateChangesSuppressed_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_ev_bool_ev_bool(IntPtr pObject, _setPass_CallBack_CPass_CPass_ev_bool_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_ev_bool(IntPtr pObject, _setPass_CallBack_CPass_CPass_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass(IntPtr pObject, _setPass_CallBack_CPass_CPass pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__markGpuParamsDirty_void_ev_uint16(IntPtr pObject, _markGpuParamsDirty_CallBack_void_ev_uint16 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__suppressShadows_void_ev_bool(IntPtr pObject, _suppressShadows_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__areShadowsSuppressed_ev_bool(IntPtr pObject, _areShadowsSuppressed_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__renderQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(IntPtr pObject, _renderQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setCameraRelativeRendering_void_ev_bool(IntPtr pObject, setCameraRelativeRendering_CallBack_void_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getCameraRelativeRendering_ev_bool(IntPtr pObject, getCameraRelativeRendering_CallBack_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getHeightAt_Real_Real_Real_ev_real32(IntPtr pObject, getHeightAt_CallBack_Real_Real_Real_ev_real32 pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getBestHeightAt_Real_Real_Real(IntPtr pObject, getBestHeightAt_CallBack_Real_Real_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getHeightAtTile_Real_Real_Real(IntPtr pObject, getHeightAtTile_CallBack_Real_Real_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getTileEnvelope_ev_bool_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real(IntPtr pObject, getTileEnvelope_CallBack_ev_bool_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_addTempLayer_ev_bool_ILayer(IntPtr pObject, addTempLayer_CallBack_ev_bool_ILayer pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_removeTempLayer_ev_bool_ILayer(IntPtr pObject, removeTempLayer_CallBack_ev_bool_ILayer pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_updateQuadImage_void_bool_bool_bool(IntPtr pObject, updateQuadImage_CallBack_void_bool_bool_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_updateQuadImage_void_bool_bool_bool_Real_Real_Real_Real(IntPtr pObject, updateQuadImage_CallBack_void_bool_bool_bool_Real_Real_Real_Real pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_updateOBQ_void_ev_bool_ev_bool_ev_bool_ev_bool(IntPtr pObject, updateOBQ_CallBack_void_ev_bool_ev_bool_ev_bool_ev_bool pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setCollisionDetectionEnable_void_ev_bool(IntPtr pObject, setCollisionDetectionEnable_CallBack_void_ev_bool pCallback);

				public override void RegisterCallBack()
				{
					if (this.NativeObject != IntPtr.Zero)
					{
						m_createSceneNodeImpl_CallBack_CSceneNode = EarthView_World_Graphic_CSceneManager_createSceneNodeImpl_CSceneNode_Function;
						GC.KeepAlive(m_createSceneNodeImpl_CallBack_CSceneNode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createSceneNodeImpl_CSceneNode(this.NativeObject, m_createSceneNodeImpl_CallBack_CSceneNode);
						m_createSceneNodeImpl_CallBack_CSceneNode_EVString = EarthView_World_Graphic_CSceneManager_createSceneNodeImpl_CSceneNode_EVString_Function;
						GC.KeepAlive(m_createSceneNodeImpl_CallBack_CSceneNode_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createSceneNodeImpl_CSceneNode_EVString(this.NativeObject, m_createSceneNodeImpl_CallBack_CSceneNode_EVString);
						m_initRenderQueue_CallBack_void = EarthView_World_Graphic_CSceneManager_initRenderQueue_void_Function;
						GC.KeepAlive(m_initRenderQueue_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_initRenderQueue_void(this.NativeObject, m_initRenderQueue_CallBack_void);
						m_deriveShadowCasterPass_CallBack_CPass_CPass = EarthView_World_Graphic_CSceneManager_deriveShadowCasterPass_CPass_CPass_Function;
						GC.KeepAlive(m_deriveShadowCasterPass_CallBack_CPass_CPass);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_deriveShadowCasterPass_CPass_CPass(this.NativeObject, m_deriveShadowCasterPass_CallBack_CPass_CPass);
						m_deriveShadowReceiverPass_CallBack_CPass_CPass = EarthView_World_Graphic_CSceneManager_deriveShadowReceiverPass_CPass_CPass_Function;
						GC.KeepAlive(m_deriveShadowReceiverPass_CallBack_CPass_CPass);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_deriveShadowReceiverPass_CPass_CPass(this.NativeObject, m_deriveShadowReceiverPass_CallBack_CPass_CPass);
						m_validatePassForRendering_CallBack_ev_bool_CPass = EarthView_World_Graphic_CSceneManager_validatePassForRendering_ev_bool_CPass_Function;
						GC.KeepAlive(m_validatePassForRendering_CallBack_ev_bool_CPass);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_validatePassForRendering_ev_bool_CPass(this.NativeObject, m_validatePassForRendering_CallBack_ev_bool_CPass);
						m_validateRenderableForRendering_CallBack_ev_bool_CPass_CRenderable = EarthView_World_Graphic_CSceneManager_validateRenderableForRendering_ev_bool_CPass_CRenderable_Function;
						GC.KeepAlive(m_validateRenderableForRendering_CallBack_ev_bool_CPass_CRenderable);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_validateRenderableForRendering_ev_bool_CPass_CRenderable(this.NativeObject, m_validateRenderableForRendering_CallBack_ev_bool_CPass_CRenderable);
						m_createSkyboxPlane_CallBack_CMeshPtr_BoxPlane_Real_CQuaternion_EVString = EarthView_World_Graphic_CSceneManager_createSkyboxPlane_CMeshPtr_BoxPlane_Real_CQuaternion_EVString_Function;
						GC.KeepAlive(m_createSkyboxPlane_CallBack_CMeshPtr_BoxPlane_Real_CQuaternion_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createSkyboxPlane_CMeshPtr_BoxPlane_Real_CQuaternion_EVString(this.NativeObject, m_createSkyboxPlane_CallBack_CMeshPtr_BoxPlane_Real_CQuaternion_EVString);
						m_createSkydomePlane_CallBack_CMeshPtr_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString = EarthView_World_Graphic_CSceneManager_createSkydomePlane_CMeshPtr_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_Function;
						GC.KeepAlive(m_createSkydomePlane_CallBack_CMeshPtr_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createSkydomePlane_CMeshPtr_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(this.NativeObject, m_createSkydomePlane_CallBack_CMeshPtr_BoxPlane_Real_Real_Real_CQuaternion_ev_int32_ev_int32_ev_int32_EVString);
						m_useRenderableViewProjMode_CallBack_void_CRenderable_ev_bool = EarthView_World_Graphic_CSceneManager_useRenderableViewProjMode_void_CRenderable_ev_bool_Function;
						GC.KeepAlive(m_useRenderableViewProjMode_CallBack_void_CRenderable_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_useRenderableViewProjMode_void_CRenderable_ev_bool(this.NativeObject, m_useRenderableViewProjMode_CallBack_void_CRenderable_ev_bool);
						m_resetViewProjMode_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_resetViewProjMode_void_ev_bool_Function;
						GC.KeepAlive(m_resetViewProjMode_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_resetViewProjMode_void_ev_bool(this.NativeObject, m_resetViewProjMode_CallBack_void_ev_bool);
						m_firePreRenderQueues_CallBack_void = EarthView_World_Graphic_CSceneManager_firePreRenderQueues_void_Function;
						GC.KeepAlive(m_firePreRenderQueues_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_firePreRenderQueues_void(this.NativeObject, m_firePreRenderQueues_CallBack_void);
						m_firePostRenderQueues_CallBack_void = EarthView_World_Graphic_CSceneManager_firePostRenderQueues_void_Function;
						GC.KeepAlive(m_firePostRenderQueues_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_firePostRenderQueues_void(this.NativeObject, m_firePostRenderQueues_CallBack_void);
						m_fireRenderQueueStarted_CallBack_ev_bool_ev_uint8_EVString = EarthView_World_Graphic_CSceneManager_fireRenderQueueStarted_ev_bool_ev_uint8_EVString_Function;
						GC.KeepAlive(m_fireRenderQueueStarted_CallBack_ev_bool_ev_uint8_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_fireRenderQueueStarted_ev_bool_ev_uint8_EVString(this.NativeObject, m_fireRenderQueueStarted_CallBack_ev_bool_ev_uint8_EVString);
						m_fireRenderQueueEnded_CallBack_ev_bool_ev_uint8_EVString = EarthView_World_Graphic_CSceneManager_fireRenderQueueEnded_ev_bool_ev_uint8_EVString_Function;
						GC.KeepAlive(m_fireRenderQueueEnded_CallBack_ev_bool_ev_uint8_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_fireRenderQueueEnded_ev_bool_ev_uint8_EVString(this.NativeObject, m_fireRenderQueueEnded_CallBack_ev_bool_ev_uint8_EVString);
						m_fireRenderSingleObjectStarted_CallBack_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool = EarthView_World_Graphic_CSceneManager_fireRenderSingleObjectStarted_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_Function;
						GC.KeepAlive(m_fireRenderSingleObjectStarted_CallBack_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_fireRenderSingleObjectStarted_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(this.NativeObject, m_fireRenderSingleObjectStarted_CallBack_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool);
						m_fireRenderSingleObjectEnd_CallBack_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool = EarthView_World_Graphic_CSceneManager_fireRenderSingleObjectEnd_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool_Function;
						GC.KeepAlive(m_fireRenderSingleObjectEnd_CallBack_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_fireRenderSingleObjectEnd_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool(this.NativeObject, m_fireRenderSingleObjectEnd_CallBack_void_CRenderable_CPass_CAutoParamDataSource_LightList_ev_bool);
						m_fireShadowTexturesUpdated_CallBack_void_ev_size_t = EarthView_World_Graphic_CSceneManager_fireShadowTexturesUpdated_void_ev_size_t_Function;
						GC.KeepAlive(m_fireShadowTexturesUpdated_CallBack_void_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_fireShadowTexturesUpdated_void_ev_size_t(this.NativeObject, m_fireShadowTexturesUpdated_CallBack_void_ev_size_t);
						m_fireShadowTexturesPreCaster_CallBack_void_CLight_CCamera_ev_size_t = EarthView_World_Graphic_CSceneManager_fireShadowTexturesPreCaster_void_CLight_CCamera_ev_size_t_Function;
						GC.KeepAlive(m_fireShadowTexturesPreCaster_CallBack_void_CLight_CCamera_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_fireShadowTexturesPreCaster_void_CLight_CCamera_ev_size_t(this.NativeObject, m_fireShadowTexturesPreCaster_CallBack_void_CLight_CCamera_ev_size_t);
						m_fireShadowTexturesPreReceiver_CallBack_void_CLight_CFrustum = EarthView_World_Graphic_CSceneManager_fireShadowTexturesPreReceiver_void_CLight_CFrustum_Function;
						GC.KeepAlive(m_fireShadowTexturesPreReceiver_CallBack_void_CLight_CFrustum);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_fireShadowTexturesPreReceiver_void_CLight_CFrustum(this.NativeObject, m_fireShadowTexturesPreReceiver_CallBack_void_CLight_CFrustum);
						m_firePreUpdateSceneGraph_CallBack_void_CCamera = EarthView_World_Graphic_CSceneManager_firePreUpdateSceneGraph_void_CCamera_Function;
						GC.KeepAlive(m_firePreUpdateSceneGraph_CallBack_void_CCamera);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_firePreUpdateSceneGraph_void_CCamera(this.NativeObject, m_firePreUpdateSceneGraph_CallBack_void_CCamera);
						m_firePostUpdateSceneGraph_CallBack_void_CCamera = EarthView_World_Graphic_CSceneManager_firePostUpdateSceneGraph_void_CCamera_Function;
						GC.KeepAlive(m_firePostUpdateSceneGraph_CallBack_void_CCamera);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_firePostUpdateSceneGraph_void_CCamera(this.NativeObject, m_firePostUpdateSceneGraph_CallBack_void_CCamera);
						m_firePreFindVisibleObjects_CallBack_void_CViewport = EarthView_World_Graphic_CSceneManager_firePreFindVisibleObjects_void_CViewport_Function;
						GC.KeepAlive(m_firePreFindVisibleObjects_CallBack_void_CViewport);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_firePreFindVisibleObjects_void_CViewport(this.NativeObject, m_firePreFindVisibleObjects_CallBack_void_CViewport);
						m_firePostFindVisibleObjects_CallBack_void_CViewport = EarthView_World_Graphic_CSceneManager_firePostFindVisibleObjects_void_CViewport_Function;
						GC.KeepAlive(m_firePostFindVisibleObjects_CallBack_void_CViewport);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_firePostFindVisibleObjects_void_CViewport(this.NativeObject, m_firePostFindVisibleObjects_CallBack_void_CViewport);
						m_fireSceneManagerDestroyed_CallBack_void = EarthView_World_Graphic_CSceneManager_fireSceneManagerDestroyed_void_Function;
						GC.KeepAlive(m_fireSceneManagerDestroyed_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_fireSceneManagerDestroyed_void(this.NativeObject, m_fireSceneManagerDestroyed_CallBack_void);
						m_setViewport_CallBack_void_CViewport = EarthView_World_Graphic_CSceneManager_setViewport_void_CViewport_Function;
						GC.KeepAlive(m_setViewport_CallBack_void_CViewport);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setViewport_void_CViewport(this.NativeObject, m_setViewport_CallBack_void_CViewport);
						m_renderVisibleObjectsDefaultSequence_CallBack_void = EarthView_World_Graphic_CSceneManager_renderVisibleObjectsDefaultSequence_void_Function;
						GC.KeepAlive(m_renderVisibleObjectsDefaultSequence_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderVisibleObjectsDefaultSequence_void(this.NativeObject, m_renderVisibleObjectsDefaultSequence_CallBack_void);
						m_renderVisibleObjectsCustomSequence_CallBack_void_CRenderQueueInvocationSequence = EarthView_World_Graphic_CSceneManager_renderVisibleObjectsCustomSequence_void_CRenderQueueInvocationSequence_Function;
						GC.KeepAlive(m_renderVisibleObjectsCustomSequence_CallBack_void_CRenderQueueInvocationSequence);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderVisibleObjectsCustomSequence_void_CRenderQueueInvocationSequence(this.NativeObject, m_renderVisibleObjectsCustomSequence_CallBack_void_CRenderQueueInvocationSequence);
						m_prepareRenderQueue_CallBack_void = EarthView_World_Graphic_CSceneManager_prepareRenderQueue_void_Function;
						GC.KeepAlive(m_prepareRenderQueue_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_prepareRenderQueue_void(this.NativeObject, m_prepareRenderQueue_CallBack_void);
						m_renderSingleObject_CallBack_void_CRenderable_CPass_ev_bool_ev_bool_LightList = EarthView_World_Graphic_CSceneManager_renderSingleObject_void_CRenderable_CPass_ev_bool_ev_bool_LightList_Function;
						GC.KeepAlive(m_renderSingleObject_CallBack_void_CRenderable_CPass_ev_bool_ev_bool_LightList);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderSingleObject_void_CRenderable_CPass_ev_bool_ev_bool_LightList(this.NativeObject, m_renderSingleObject_CallBack_void_CRenderable_CPass_ev_bool_ev_bool_LightList);
						m_renderSingleObject_CallBack_void_CRenderable_CPass_ev_bool_ev_bool = EarthView_World_Graphic_CSceneManager_renderSingleObject_void_CRenderable_CPass_ev_bool_ev_bool_Function;
						GC.KeepAlive(m_renderSingleObject_CallBack_void_CRenderable_CPass_ev_bool_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderSingleObject_void_CRenderable_CPass_ev_bool_ev_bool(this.NativeObject, m_renderSingleObject_CallBack_void_CRenderable_CPass_ev_bool_ev_bool);
						m_createAutoParamDataSource_CallBack_CAutoParamDataSource = EarthView_World_Graphic_CSceneManager_createAutoParamDataSource_CAutoParamDataSource_Function;
						GC.KeepAlive(m_createAutoParamDataSource_CallBack_CAutoParamDataSource);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createAutoParamDataSource_CAutoParamDataSource(this.NativeObject, m_createAutoParamDataSource_CallBack_CAutoParamDataSource);
						m_findLightsAffectingFrustum_CallBack_void_CCamera = EarthView_World_Graphic_CSceneManager_findLightsAffectingFrustum_void_CCamera_Function;
						GC.KeepAlive(m_findLightsAffectingFrustum_CallBack_void_CCamera);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_findLightsAffectingFrustum_void_CCamera(this.NativeObject, m_findLightsAffectingFrustum_CallBack_void_CCamera);
						m_initShadowVolumeMaterials_CallBack_void = EarthView_World_Graphic_CSceneManager_initShadowVolumeMaterials_void_Function;
						GC.KeepAlive(m_initShadowVolumeMaterials_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_initShadowVolumeMaterials_void(this.NativeObject, m_initShadowVolumeMaterials_CallBack_void);
						m_ensureShadowTexturesCreated_CallBack_void = EarthView_World_Graphic_CSceneManager_ensureShadowTexturesCreated_void_Function;
						GC.KeepAlive(m_ensureShadowTexturesCreated_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_ensureShadowTexturesCreated_void(this.NativeObject, m_ensureShadowTexturesCreated_CallBack_void);
						m_destroyShadowTextures_CallBack_void = EarthView_World_Graphic_CSceneManager_destroyShadowTextures_void_Function;
						GC.KeepAlive(m_destroyShadowTextures_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyShadowTextures_void(this.NativeObject, m_destroyShadowTextures_CallBack_void);
						m_prepareShadowTextures_CallBack_void_CCamera_CViewport_LightList = EarthView_World_Graphic_CSceneManager_prepareShadowTextures_void_CCamera_CViewport_LightList_Function;
						GC.KeepAlive(m_prepareShadowTextures_CallBack_void_CCamera_CViewport_LightList);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_prepareShadowTextures_void_CCamera_CViewport_LightList(this.NativeObject, m_prepareShadowTextures_CallBack_void_CCamera_CViewport_LightList);
						m_prepareShadowTextures_CallBack_void_CCamera_CViewport = EarthView_World_Graphic_CSceneManager_prepareShadowTextures_void_CCamera_CViewport_Function;
						GC.KeepAlive(m_prepareShadowTextures_CallBack_void_CCamera_CViewport);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_prepareShadowTextures_void_CCamera_CViewport(this.NativeObject, m_prepareShadowTextures_CallBack_void_CCamera_CViewport);
						m_setImageDefaultMaterial_CallBack_void_CMaterialPtr = EarthView_World_Graphic_CSceneManager_setImageDefaultMaterial_void_CMaterialPtr_Function;
						GC.KeepAlive(m_setImageDefaultMaterial_CallBack_void_CMaterialPtr);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setImageDefaultMaterial_void_CMaterialPtr(this.NativeObject, m_setImageDefaultMaterial_CallBack_void_CMaterialPtr);
						m_setImageUseDefaultMaterial_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setImageUseDefaultMaterial_void_ev_bool_Function;
						GC.KeepAlive(m_setImageUseDefaultMaterial_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setImageUseDefaultMaterial_void_ev_bool(this.NativeObject, m_setImageUseDefaultMaterial_CallBack_void_ev_bool);
						m_getSunPosition_CallBack_CVector3 = EarthView_World_Graphic_CSceneManager_getSunPosition_CVector3_Function;
						GC.KeepAlive(m_getSunPosition_CallBack_CVector3);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSunPosition_CVector3(this.NativeObject, m_getSunPosition_CallBack_CVector3);
						m_setAtmosphereVisible_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setAtmosphereVisible_void_ev_bool_Function;
						GC.KeepAlive(m_setAtmosphereVisible_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setAtmosphereVisible_void_ev_bool(this.NativeObject, m_setAtmosphereVisible_CallBack_void_ev_bool);
						m_storeAtmosphereVisibleState_CallBack_void = EarthView_World_Graphic_CSceneManager_storeAtmosphereVisibleState_void_Function;
						GC.KeepAlive(m_storeAtmosphereVisibleState_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_storeAtmosphereVisibleState_void(this.NativeObject, m_storeAtmosphereVisibleState_CallBack_void);
						m_restoreAtmosphereVisibleState_CallBack_void = EarthView_World_Graphic_CSceneManager_restoreAtmosphereVisibleState_void_Function;
						GC.KeepAlive(m_restoreAtmosphereVisibleState_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_restoreAtmosphereVisibleState_void(this.NativeObject, m_restoreAtmosphereVisibleState_CallBack_void);
						m_setSunVisible_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setSunVisible_void_ev_bool_Function;
						GC.KeepAlive(m_setSunVisible_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSunVisible_void_ev_bool(this.NativeObject, m_setSunVisible_CallBack_void_ev_bool);
						m__pauseRendering_CallBack_RenderContext = EarthView_World_Graphic_CSceneManager__pauseRendering_RenderContext_Function;
						GC.KeepAlive(m__pauseRendering_CallBack_RenderContext);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__pauseRendering_RenderContext(this.NativeObject, m__pauseRendering_CallBack_RenderContext);
						m__resumeRendering_CallBack_void_RenderContext = EarthView_World_Graphic_CSceneManager__resumeRendering_void_RenderContext_Function;
						GC.KeepAlive(m__resumeRendering_CallBack_void_RenderContext);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__resumeRendering_void_RenderContext(this.NativeObject, m__resumeRendering_CallBack_void_RenderContext);
						m_renderShadowVolumesToStencil_CallBack_void_CLight_CCamera_ev_bool = EarthView_World_Graphic_CSceneManager_renderShadowVolumesToStencil_void_CLight_CCamera_ev_bool_Function;
						GC.KeepAlive(m_renderShadowVolumesToStencil_CallBack_void_CLight_CCamera_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderShadowVolumesToStencil_void_CLight_CCamera_ev_bool(this.NativeObject, m_renderShadowVolumesToStencil_CallBack_void_CLight_CCamera_ev_bool);
						m_setShadowVolumeStencilState_CallBack_void_ev_bool_ev_bool_ev_bool = EarthView_World_Graphic_CSceneManager_setShadowVolumeStencilState_void_ev_bool_ev_bool_ev_bool_Function;
						GC.KeepAlive(m_setShadowVolumeStencilState_CallBack_void_ev_bool_ev_bool_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowVolumeStencilState_void_ev_bool_ev_bool_ev_bool(this.NativeObject, m_setShadowVolumeStencilState_CallBack_void_ev_bool_ev_bool_ev_bool);
						m_findShadowCastersForLight_CallBack_ShadowCasterList_CLight_CCamera = EarthView_World_Graphic_CSceneManager_findShadowCastersForLight_ShadowCasterList_CLight_CCamera_Function;
						GC.KeepAlive(m_findShadowCastersForLight_CallBack_ShadowCasterList_CLight_CCamera);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_findShadowCastersForLight_ShadowCasterList_CLight_CCamera(this.NativeObject, m_findShadowCastersForLight_CallBack_ShadowCasterList_CLight_CCamera);
						m_renderBasicQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode = EarthView_World_Graphic_CSceneManager_renderBasicQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_Function;
						GC.KeepAlive(m_renderBasicQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderBasicQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(this.NativeObject, m_renderBasicQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode);
						m_renderAdditiveStencilShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode = EarthView_World_Graphic_CSceneManager_renderAdditiveStencilShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_Function;
						GC.KeepAlive(m_renderAdditiveStencilShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderAdditiveStencilShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(this.NativeObject, m_renderAdditiveStencilShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode);
						m_renderModulativeStencilShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode = EarthView_World_Graphic_CSceneManager_renderModulativeStencilShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_Function;
						GC.KeepAlive(m_renderModulativeStencilShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderModulativeStencilShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(this.NativeObject, m_renderModulativeStencilShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode);
						m_renderTextureShadowCasterQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode = EarthView_World_Graphic_CSceneManager_renderTextureShadowCasterQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_Function;
						GC.KeepAlive(m_renderTextureShadowCasterQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderTextureShadowCasterQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(this.NativeObject, m_renderTextureShadowCasterQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode);
						m_renderTextureShadowReceiverQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode = EarthView_World_Graphic_CSceneManager_renderTextureShadowReceiverQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_Function;
						GC.KeepAlive(m_renderTextureShadowReceiverQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderTextureShadowReceiverQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(this.NativeObject, m_renderTextureShadowReceiverQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode);
						m_renderModulativeTextureShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode = EarthView_World_Graphic_CSceneManager_renderModulativeTextureShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_Function;
						GC.KeepAlive(m_renderModulativeTextureShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderModulativeTextureShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(this.NativeObject, m_renderModulativeTextureShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode);
						m_renderAdditiveTextureShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode = EarthView_World_Graphic_CSceneManager_renderAdditiveTextureShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_Function;
						GC.KeepAlive(m_renderAdditiveTextureShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderAdditiveTextureShadowedQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(this.NativeObject, m_renderAdditiveTextureShadowedQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode);
						m_renderObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList = EarthView_World_Graphic_CSceneManager_renderObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_Function;
						GC.KeepAlive(m_renderObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(this.NativeObject, m_renderObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList);
						m_renderObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool = EarthView_World_Graphic_CSceneManager_renderObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_Function;
						GC.KeepAlive(m_renderObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(this.NativeObject, m_renderObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool);
						m_renderTransparentShadowCasterObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList = EarthView_World_Graphic_CSceneManager_renderTransparentShadowCasterObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList_Function;
						GC.KeepAlive(m_renderTransparentShadowCasterObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderTransparentShadowCasterObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList(this.NativeObject, m_renderTransparentShadowCasterObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_LightList);
						m_renderTransparentShadowCasterObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool = EarthView_World_Graphic_CSceneManager_renderTransparentShadowCasterObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool_Function;
						GC.KeepAlive(m_renderTransparentShadowCasterObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_renderTransparentShadowCasterObjects_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool(this.NativeObject, m_renderTransparentShadowCasterObjects_CallBack_void_CQueuedRenderableCollection_OrganisationMode_ev_bool_ev_bool);
						m_updateRenderQueueSplitOptions_CallBack_void = EarthView_World_Graphic_CSceneManager_updateRenderQueueSplitOptions_void_Function;
						GC.KeepAlive(m_updateRenderQueueSplitOptions_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_updateRenderQueueSplitOptions_void(this.NativeObject, m_updateRenderQueueSplitOptions_CallBack_void);
						m_updateRenderQueueGroupSplitOptions_CallBack_void_CRenderQueueGroup_ev_bool_ev_bool = EarthView_World_Graphic_CSceneManager_updateRenderQueueGroupSplitOptions_void_CRenderQueueGroup_ev_bool_ev_bool_Function;
						GC.KeepAlive(m_updateRenderQueueGroupSplitOptions_CallBack_void_CRenderQueueGroup_ev_bool_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_updateRenderQueueGroupSplitOptions_void_CRenderQueueGroup_ev_bool_ev_bool(this.NativeObject, m_updateRenderQueueGroupSplitOptions_CallBack_void_CRenderQueueGroup_ev_bool_ev_bool);
						m_buildAndSetScissor_CallBack_ClipResult_LightList_CCamera = EarthView_World_Graphic_CSceneManager_buildAndSetScissor_ClipResult_LightList_CCamera_Function;
						GC.KeepAlive(m_buildAndSetScissor_CallBack_ClipResult_LightList_CCamera);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_buildAndSetScissor_ClipResult_LightList_CCamera(this.NativeObject, m_buildAndSetScissor_CallBack_ClipResult_LightList_CCamera);
						m_buildScissor_CallBack_void_CLight_CCamera_RealRect = EarthView_World_Graphic_CSceneManager_buildScissor_void_CLight_CCamera_RealRect_Function;
						GC.KeepAlive(m_buildScissor_CallBack_void_CLight_CCamera_RealRect);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_buildScissor_void_CLight_CCamera_RealRect(this.NativeObject, m_buildScissor_CallBack_void_CLight_CCamera_RealRect);
						m_resetScissor_CallBack_void = EarthView_World_Graphic_CSceneManager_resetScissor_void_Function;
						GC.KeepAlive(m_resetScissor_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_resetScissor_void(this.NativeObject, m_resetScissor_CallBack_void);
						m_buildAndSetLightClip_CallBack_ClipResult_LightList = EarthView_World_Graphic_CSceneManager_buildAndSetLightClip_ClipResult_LightList_Function;
						GC.KeepAlive(m_buildAndSetLightClip_CallBack_ClipResult_LightList);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_buildAndSetLightClip_ClipResult_LightList(this.NativeObject, m_buildAndSetLightClip_CallBack_ClipResult_LightList);
						m_buildLightClip_CallBack_void_CLight_PlaneList = EarthView_World_Graphic_CSceneManager_buildLightClip_void_CLight_PlaneList_Function;
						GC.KeepAlive(m_buildLightClip_CallBack_void_CLight_PlaneList);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_buildLightClip_void_CLight_PlaneList(this.NativeObject, m_buildLightClip_CallBack_void_CLight_PlaneList);
						m_resetLightClip_CallBack_void = EarthView_World_Graphic_CSceneManager_resetLightClip_void_Function;
						GC.KeepAlive(m_resetLightClip_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_resetLightClip_void(this.NativeObject, m_resetLightClip_CallBack_void);
						m_checkCachedLightClippingInfo_CallBack_void = EarthView_World_Graphic_CSceneManager_checkCachedLightClippingInfo_void_Function;
						GC.KeepAlive(m_checkCachedLightClippingInfo_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_checkCachedLightClippingInfo_void(this.NativeObject, m_checkCachedLightClippingInfo_CallBack_void);
						m_useLights_CallBack_void_LightList_ev_uint16 = EarthView_World_Graphic_CSceneManager_useLights_void_LightList_ev_uint16_Function;
						GC.KeepAlive(m_useLights_CallBack_void_LightList_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_useLights_void_LightList_ev_uint16(this.NativeObject, m_useLights_CallBack_void_LightList_ev_uint16);
						m_setViewMatrix_CallBack_void_CMatrix4 = EarthView_World_Graphic_CSceneManager_setViewMatrix_void_CMatrix4_Function;
						GC.KeepAlive(m_setViewMatrix_CallBack_void_CMatrix4);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setViewMatrix_void_CMatrix4(this.NativeObject, m_setViewMatrix_CallBack_void_CMatrix4);
						m_useLightsGpuProgram_CallBack_void_CPass_LightList = EarthView_World_Graphic_CSceneManager_useLightsGpuProgram_void_CPass_LightList_Function;
						GC.KeepAlive(m_useLightsGpuProgram_CallBack_void_CPass_LightList);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_useLightsGpuProgram_void_CPass_LightList(this.NativeObject, m_useLightsGpuProgram_CallBack_void_CPass_LightList);
						m_bindGpuProgram_CallBack_void_CGpuProgram = EarthView_World_Graphic_CSceneManager_bindGpuProgram_void_CGpuProgram_Function;
						GC.KeepAlive(m_bindGpuProgram_CallBack_void_CGpuProgram);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_bindGpuProgram_void_CGpuProgram(this.NativeObject, m_bindGpuProgram_CallBack_void_CGpuProgram);
						m_updateGpuProgramParameters_CallBack_void_CPass = EarthView_World_Graphic_CSceneManager_updateGpuProgramParameters_void_CPass_Function;
						GC.KeepAlive(m_updateGpuProgramParameters_CallBack_void_CPass);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_updateGpuProgramParameters_void_CPass(this.NativeObject, m_updateGpuProgramParameters_CallBack_void_CPass);
						m_getTypeName_CallBack_EVString = EarthView_World_Graphic_CSceneManager_getTypeName_EVString_Function;
						GC.KeepAlive(m_getTypeName_CallBack_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getTypeName_EVString(this.NativeObject, m_getTypeName_CallBack_EVString);
						m_createCamera_CallBack_CCamera_EVString = EarthView_World_Graphic_CSceneManager_createCamera_CCamera_EVString_Function;
						GC.KeepAlive(m_createCamera_CallBack_CCamera_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createCamera_CCamera_EVString(this.NativeObject, m_createCamera_CallBack_CCamera_EVString);
						m_getCamera_CallBack_CCamera_EVString = EarthView_World_Graphic_CSceneManager_getCamera_CCamera_EVString_Function;
						GC.KeepAlive(m_getCamera_CallBack_CCamera_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getCamera_CCamera_EVString(this.NativeObject, m_getCamera_CallBack_CCamera_EVString);
						m_hasCamera_CallBack_ev_bool_EVString = EarthView_World_Graphic_CSceneManager_hasCamera_ev_bool_EVString_Function;
						GC.KeepAlive(m_hasCamera_CallBack_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasCamera_ev_bool_EVString(this.NativeObject, m_hasCamera_CallBack_ev_bool_EVString);
						m_destroyCamera_CallBack_void_CCamera = EarthView_World_Graphic_CSceneManager_destroyCamera_void_CCamera_Function;
						GC.KeepAlive(m_destroyCamera_CallBack_void_CCamera);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyCamera_void_CCamera(this.NativeObject, m_destroyCamera_CallBack_void_CCamera);
						m_destroyCamera_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_destroyCamera_void_EVString_Function;
						GC.KeepAlive(m_destroyCamera_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyCamera_void_EVString(this.NativeObject, m_destroyCamera_CallBack_void_EVString);
						m_destroyAllCameras_CallBack_void = EarthView_World_Graphic_CSceneManager_destroyAllCameras_void_Function;
						GC.KeepAlive(m_destroyAllCameras_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllCameras_void(this.NativeObject, m_destroyAllCameras_CallBack_void);
						m_createLight_CallBack_CLight_EVString = EarthView_World_Graphic_CSceneManager_createLight_CLight_EVString_Function;
						GC.KeepAlive(m_createLight_CallBack_CLight_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createLight_CLight_EVString(this.NativeObject, m_createLight_CallBack_CLight_EVString);
						m_createLight_CallBack_CLight = EarthView_World_Graphic_CSceneManager_createLight_CLight_Function;
						GC.KeepAlive(m_createLight_CallBack_CLight);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createLight_CLight(this.NativeObject, m_createLight_CallBack_CLight);
						m_getLightCount_CallBack_ev_uint16 = EarthView_World_Graphic_CSceneManager_getLightCount_ev_uint16_Function;
						GC.KeepAlive(m_getLightCount_CallBack_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getLightCount_ev_uint16(this.NativeObject, m_getLightCount_CallBack_ev_uint16);
						m_getLight_CallBack_CLight_ev_uint16 = EarthView_World_Graphic_CSceneManager_getLight_CLight_ev_uint16_Function;
						GC.KeepAlive(m_getLight_CallBack_CLight_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getLight_CLight_ev_uint16(this.NativeObject, m_getLight_CallBack_CLight_ev_uint16);
						m_getLight_CallBack_CLight_EVString = EarthView_World_Graphic_CSceneManager_getLight_CLight_EVString_Function;
						GC.KeepAlive(m_getLight_CallBack_CLight_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getLight_CLight_EVString(this.NativeObject, m_getLight_CallBack_CLight_EVString);
						m_hasLight_CallBack_ev_bool_EVString = EarthView_World_Graphic_CSceneManager_hasLight_ev_bool_EVString_Function;
						GC.KeepAlive(m_hasLight_CallBack_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasLight_ev_bool_EVString(this.NativeObject, m_hasLight_CallBack_ev_bool_EVString);
						m_getLightClippingPlanes_CallBack_PlaneList_CLight = EarthView_World_Graphic_CSceneManager_getLightClippingPlanes_PlaneList_CLight_Function;
						GC.KeepAlive(m_getLightClippingPlanes_CallBack_PlaneList_CLight);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getLightClippingPlanes_PlaneList_CLight(this.NativeObject, m_getLightClippingPlanes_CallBack_PlaneList_CLight);
						m_getLightScissorRect_CallBack_RealRect_CLight_CCamera = EarthView_World_Graphic_CSceneManager_getLightScissorRect_RealRect_CLight_CCamera_Function;
						GC.KeepAlive(m_getLightScissorRect_CallBack_RealRect_CLight_CCamera);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getLightScissorRect_RealRect_CLight_CCamera(this.NativeObject, m_getLightScissorRect_CallBack_RealRect_CLight_CCamera);
						m_destroyLight_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_destroyLight_void_EVString_Function;
						GC.KeepAlive(m_destroyLight_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyLight_void_EVString(this.NativeObject, m_destroyLight_CallBack_void_EVString);
						m_destroyLight_CallBack_void_CLight = EarthView_World_Graphic_CSceneManager_destroyLight_void_CLight_Function;
						GC.KeepAlive(m_destroyLight_CallBack_void_CLight);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyLight_void_CLight(this.NativeObject, m_destroyLight_CallBack_void_CLight);
						m_destroyAllLights_CallBack_void = EarthView_World_Graphic_CSceneManager_destroyAllLights_void_Function;
						GC.KeepAlive(m_destroyAllLights_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllLights_void(this.NativeObject, m_destroyAllLights_CallBack_void);
						m_getSoftShadowTexName_CallBack_EVString = EarthView_World_Graphic_CSceneManager_getSoftShadowTexName_EVString_Function;
						GC.KeepAlive(m_getSoftShadowTexName_CallBack_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSoftShadowTexName_EVString(this.NativeObject, m_getSoftShadowTexName_CallBack_EVString);
						m_getShadowTexCam_CallBack_CCamera = EarthView_World_Graphic_CSceneManager_getShadowTexCam_CCamera_Function;
						GC.KeepAlive(m_getShadowTexCam_CallBack_CCamera);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowTexCam_CCamera(this.NativeObject, m_getShadowTexCam_CallBack_CCamera);
						m_getSoftShadowProjMatrix_CallBack_CMatrix4_ev_uint16 = EarthView_World_Graphic_CSceneManager_getSoftShadowProjMatrix_CMatrix4_ev_uint16_Function;
						GC.KeepAlive(m_getSoftShadowProjMatrix_CallBack_CMatrix4_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSoftShadowProjMatrix_CMatrix4_ev_uint16(this.NativeObject, m_getSoftShadowProjMatrix_CallBack_CMatrix4_ev_uint16);
						m_getCascadeEyeSpaceDepthArray_CallBack_CVector4 = EarthView_World_Graphic_CSceneManager_getCascadeEyeSpaceDepthArray_CVector4_Function;
						GC.KeepAlive(m_getCascadeEyeSpaceDepthArray_CallBack_CVector4);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getCascadeEyeSpaceDepthArray_CVector4(this.NativeObject, m_getCascadeEyeSpaceDepthArray_CallBack_CVector4);
						m_getSoftShadowNearClip_CallBack_float_ev_uint8 = EarthView_World_Graphic_CSceneManager_getSoftShadowNearClip_float_ev_uint8_Function;
						GC.KeepAlive(m_getSoftShadowNearClip_CallBack_float_ev_uint8);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSoftShadowNearClip_float_ev_uint8(this.NativeObject, m_getSoftShadowNearClip_CallBack_float_ev_uint8);
						m_getSoftShadowFarClip_CallBack_float_ev_uint8 = EarthView_World_Graphic_CSceneManager_getSoftShadowFarClip_float_ev_uint8_Function;
						GC.KeepAlive(m_getSoftShadowFarClip_CallBack_float_ev_uint8);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSoftShadowFarClip_float_ev_uint8(this.NativeObject, m_getSoftShadowFarClip_CallBack_float_ev_uint8);
						m_getIsUseSoftShadowFitToCascadesMode_CallBack_bool = EarthView_World_Graphic_CSceneManager_getIsUseSoftShadowFitToCascadesMode_bool_Function;
						GC.KeepAlive(m_getIsUseSoftShadowFitToCascadesMode_CallBack_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getIsUseSoftShadowFitToCascadesMode_bool(this.NativeObject, m_getIsUseSoftShadowFitToCascadesMode_CallBack_bool);
						m_setIsUseSoftShadowFitToCascadesMode_CallBack_void_bool = EarthView_World_Graphic_CSceneManager_setIsUseSoftShadowFitToCascadesMode_void_bool_Function;
						GC.KeepAlive(m_setIsUseSoftShadowFitToCascadesMode_CallBack_void_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setIsUseSoftShadowFitToCascadesMode_void_bool(this.NativeObject, m_setIsUseSoftShadowFitToCascadesMode_CallBack_void_bool);
						m_getCurrentClipIndex_CallBack_ev_uint8 = EarthView_World_Graphic_CSceneManager_getCurrentClipIndex_ev_uint8_Function;
						GC.KeepAlive(m_getCurrentClipIndex_CallBack_ev_uint8);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getCurrentClipIndex_ev_uint8(this.NativeObject, m_getCurrentClipIndex_CallBack_ev_uint8);
						m_getIsUseSoftShadowTechnique_CallBack_bool = EarthView_World_Graphic_CSceneManager_getIsUseSoftShadowTechnique_bool_Function;
						GC.KeepAlive(m_getIsUseSoftShadowTechnique_CallBack_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getIsUseSoftShadowTechnique_bool(this.NativeObject, m_getIsUseSoftShadowTechnique_CallBack_bool);
						m_setIsUseSoftShadowTechnique_CallBack_void_bool = EarthView_World_Graphic_CSceneManager_setIsUseSoftShadowTechnique_void_bool_Function;
						GC.KeepAlive(m_setIsUseSoftShadowTechnique_CallBack_void_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setIsUseSoftShadowTechnique_void_bool(this.NativeObject, m_setIsUseSoftShadowTechnique_CallBack_void_bool);
						m_getCascadePartitionsPercent_CallBack_float = EarthView_World_Graphic_CSceneManager_getCascadePartitionsPercent_float_Function;
						GC.KeepAlive(m_getCascadePartitionsPercent_CallBack_float);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getCascadePartitionsPercent_float(this.NativeObject, m_getCascadePartitionsPercent_CallBack_float);
						m_setCascadePartitionsPercent_CallBack_void_float = EarthView_World_Graphic_CSceneManager_setCascadePartitionsPercent_void_float_Function;
						GC.KeepAlive(m_setCascadePartitionsPercent_CallBack_void_float);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setCascadePartitionsPercent_void_float(this.NativeObject, m_setCascadePartitionsPercent_CallBack_void_float);
						m_getCascadePartitionsDistance_CallBack_int_ev_uint8 = EarthView_World_Graphic_CSceneManager_getCascadePartitionsDistance_int_ev_uint8_Function;
						GC.KeepAlive(m_getCascadePartitionsDistance_CallBack_int_ev_uint8);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getCascadePartitionsDistance_int_ev_uint8(this.NativeObject, m_getCascadePartitionsDistance_CallBack_int_ev_uint8);
						m_setCascadePartitionsDistance_CallBack_void_ev_uint8_ev_uint8 = EarthView_World_Graphic_CSceneManager_setCascadePartitionsDistance_void_ev_uint8_ev_uint8_Function;
						GC.KeepAlive(m_setCascadePartitionsDistance_CallBack_void_ev_uint8_ev_uint8);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setCascadePartitionsDistance_void_ev_uint8_ev_uint8(this.NativeObject, m_setCascadePartitionsDistance_CallBack_void_ev_uint8_ev_uint8);
						m_getSoftShadowOffsetFormat_CallBack_PixelFormat = EarthView_World_Graphic_CSceneManager_getSoftShadowOffsetFormat_PixelFormat_Function;
						GC.KeepAlive(m_getSoftShadowOffsetFormat_CallBack_PixelFormat);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSoftShadowOffsetFormat_PixelFormat(this.NativeObject, m_getSoftShadowOffsetFormat_CallBack_PixelFormat);
						m_checkShadowCasterInFrustum_CallBack_void_CCamera = EarthView_World_Graphic_CSceneManager_checkShadowCasterInFrustum_void_CCamera_Function;
						GC.KeepAlive(m_checkShadowCasterInFrustum_CallBack_void_CCamera);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_checkShadowCasterInFrustum_void_CCamera(this.NativeObject, m_checkShadowCasterInFrustum_CallBack_void_CCamera);
						m_hasShadowCasterInFrustum_CallBack_bool = EarthView_World_Graphic_CSceneManager_hasShadowCasterInFrustum_bool_Function;
						GC.KeepAlive(m_hasShadowCasterInFrustum_CallBack_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasShadowCasterInFrustum_bool(this.NativeObject, m_hasShadowCasterInFrustum_CallBack_bool);
						m_getSoftShadowLightBleedPower_CallBack_Real = EarthView_World_Graphic_CSceneManager_getSoftShadowLightBleedPower_Real_Function;
						GC.KeepAlive(m_getSoftShadowLightBleedPower_CallBack_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSoftShadowLightBleedPower_Real(this.NativeObject, m_getSoftShadowLightBleedPower_CallBack_Real);
						m_setSoftShadowLightBleedPower_CallBack_void_Real = EarthView_World_Graphic_CSceneManager_setSoftShadowLightBleedPower_void_Real_Function;
						GC.KeepAlive(m_setSoftShadowLightBleedPower_CallBack_void_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSoftShadowLightBleedPower_void_Real(this.NativeObject, m_setSoftShadowLightBleedPower_CallBack_void_Real);
						m_getSoftShadowDepthOffset_CallBack_Real = EarthView_World_Graphic_CSceneManager_getSoftShadowDepthOffset_Real_Function;
						GC.KeepAlive(m_getSoftShadowDepthOffset_CallBack_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSoftShadowDepthOffset_Real(this.NativeObject, m_getSoftShadowDepthOffset_CallBack_Real);
						m_setSoftShadowDepthOffset_CallBack_void_Real = EarthView_World_Graphic_CSceneManager_setSoftShadowDepthOffset_void_Real_Function;
						GC.KeepAlive(m_setSoftShadowDepthOffset_CallBack_void_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSoftShadowDepthOffset_void_Real(this.NativeObject, m_setSoftShadowDepthOffset_CallBack_void_Real);
						m_getSoftShadowNormalFactor_CallBack_float = EarthView_World_Graphic_CSceneManager_getSoftShadowNormalFactor_float_Function;
						GC.KeepAlive(m_getSoftShadowNormalFactor_CallBack_float);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSoftShadowNormalFactor_float(this.NativeObject, m_getSoftShadowNormalFactor_CallBack_float);
						m_setSoftShadowNormalFactor_CallBack_void_float = EarthView_World_Graphic_CSceneManager_setSoftShadowNormalFactor_void_float_Function;
						GC.KeepAlive(m_setSoftShadowNormalFactor_CallBack_void_float);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSoftShadowNormalFactor_void_float(this.NativeObject, m_setSoftShadowNormalFactor_CallBack_void_float);
						m__notifyLightsDirty_CallBack_void = EarthView_World_Graphic_CSceneManager__notifyLightsDirty_void_Function;
						GC.KeepAlive(m__notifyLightsDirty_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__notifyLightsDirty_void(this.NativeObject, m__notifyLightsDirty_CallBack_void);
						m__getLightsAffectingFrustum_CallBack_LightList = EarthView_World_Graphic_CSceneManager__getLightsAffectingFrustum_LightList_Function;
						GC.KeepAlive(m__getLightsAffectingFrustum_CallBack_LightList);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__getLightsAffectingFrustum_LightList(this.NativeObject, m__getLightsAffectingFrustum_CallBack_LightList);
						m__populateLightList_CallBack_void_CVector3_Real_LightList_ev_uint32 = EarthView_World_Graphic_CSceneManager__populateLightList_void_CVector3_Real_LightList_ev_uint32_Function;
						GC.KeepAlive(m__populateLightList_CallBack_void_CVector3_Real_LightList_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__populateLightList_void_CVector3_Real_LightList_ev_uint32(this.NativeObject, m__populateLightList_CallBack_void_CVector3_Real_LightList_ev_uint32);
						m__populateLightList_CallBack_void_CVector3_Real_LightList = EarthView_World_Graphic_CSceneManager__populateLightList_void_CVector3_Real_LightList_Function;
						GC.KeepAlive(m__populateLightList_CallBack_void_CVector3_Real_LightList);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__populateLightList_void_CVector3_Real_LightList(this.NativeObject, m__populateLightList_CallBack_void_CVector3_Real_LightList);
						m_showImage_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_showImage_void_ev_bool_Function;
						GC.KeepAlive(m_showImage_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_showImage_void_ev_bool(this.NativeObject, m_showImage_CallBack_void_ev_bool);
						m_getImageVisible_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_getImageVisible_ev_bool_Function;
						GC.KeepAlive(m_getImageVisible_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getImageVisible_ev_bool(this.NativeObject, m_getImageVisible_CallBack_ev_bool);
						m_showOcean_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_showOcean_void_ev_bool_Function;
						GC.KeepAlive(m_showOcean_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_showOcean_void_ev_bool(this.NativeObject, m_showOcean_CallBack_void_ev_bool);
						m_getOceanVisible_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_getOceanVisible_ev_bool_Function;
						GC.KeepAlive(m_getOceanVisible_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getOceanVisible_ev_bool(this.NativeObject, m_getOceanVisible_CallBack_ev_bool);
						m__populateLightList_CallBack_void_CSceneNode_Real_LightList_ev_uint32 = EarthView_World_Graphic_CSceneManager__populateLightList_void_CSceneNode_Real_LightList_ev_uint32_Function;
						GC.KeepAlive(m__populateLightList_CallBack_void_CSceneNode_Real_LightList_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__populateLightList_void_CSceneNode_Real_LightList_ev_uint32(this.NativeObject, m__populateLightList_CallBack_void_CSceneNode_Real_LightList_ev_uint32);
						m__populateLightList_CallBack_void_CSceneNode_Real_LightList = EarthView_World_Graphic_CSceneManager__populateLightList_void_CSceneNode_Real_LightList_Function;
						GC.KeepAlive(m__populateLightList_CallBack_void_CSceneNode_Real_LightList);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__populateLightList_void_CSceneNode_Real_LightList(this.NativeObject, m__populateLightList_CallBack_void_CSceneNode_Real_LightList);
						m_createSceneNode_CallBack_CSceneNode = EarthView_World_Graphic_CSceneManager_createSceneNode_CSceneNode_Function;
						GC.KeepAlive(m_createSceneNode_CallBack_CSceneNode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createSceneNode_CSceneNode(this.NativeObject, m_createSceneNode_CallBack_CSceneNode);
						m_createSceneNode_CallBack_CSceneNode_EVString = EarthView_World_Graphic_CSceneManager_createSceneNode_CSceneNode_EVString_Function;
						GC.KeepAlive(m_createSceneNode_CallBack_CSceneNode_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createSceneNode_CSceneNode_EVString(this.NativeObject, m_createSceneNode_CallBack_CSceneNode_EVString);
						m_destroySceneNode_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_destroySceneNode_void_EVString_Function;
						GC.KeepAlive(m_destroySceneNode_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroySceneNode_void_EVString(this.NativeObject, m_destroySceneNode_CallBack_void_EVString);
						m_destroySceneNode_CallBack_void_CSceneNode = EarthView_World_Graphic_CSceneManager_destroySceneNode_void_CSceneNode_Function;
						GC.KeepAlive(m_destroySceneNode_CallBack_void_CSceneNode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroySceneNode_void_CSceneNode(this.NativeObject, m_destroySceneNode_CallBack_void_CSceneNode);
						m_getRootSceneNode_CallBack_CSceneNode = EarthView_World_Graphic_CSceneManager_getRootSceneNode_CSceneNode_Function;
						GC.KeepAlive(m_getRootSceneNode_CallBack_CSceneNode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getRootSceneNode_CSceneNode(this.NativeObject, m_getRootSceneNode_CallBack_CSceneNode);
						m_getSceneNode_CallBack_CSceneNode_EVString = EarthView_World_Graphic_CSceneManager_getSceneNode_CSceneNode_EVString_Function;
						GC.KeepAlive(m_getSceneNode_CallBack_CSceneNode_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSceneNode_CSceneNode_EVString(this.NativeObject, m_getSceneNode_CallBack_CSceneNode_EVString);
						m_hasSceneNode_CallBack_ev_bool_EVString = EarthView_World_Graphic_CSceneManager_hasSceneNode_ev_bool_EVString_Function;
						GC.KeepAlive(m_hasSceneNode_CallBack_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasSceneNode_ev_bool_EVString(this.NativeObject, m_hasSceneNode_CallBack_ev_bool_EVString);
						m_createEntity_CallBack_CEntity_EVString_EVString_IntVector_EVString = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_IntVector_EVString_Function;
						GC.KeepAlive(m_createEntity_CallBack_CEntity_EVString_EVString_IntVector_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_IntVector_EVString(this.NativeObject, m_createEntity_CallBack_CEntity_EVString_EVString_IntVector_EVString);
						m_createEntity_CallBack_CEntity_EVString_EVString_EVString = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_EVString_Function;
						GC.KeepAlive(m_createEntity_CallBack_CEntity_EVString_EVString_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_EVString(this.NativeObject, m_createEntity_CallBack_CEntity_EVString_EVString_EVString);
						m_createEntity_CallBack_CEntity_EVString_EVString_IntVector = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_IntVector_Function;
						GC.KeepAlive(m_createEntity_CallBack_CEntity_EVString_EVString_IntVector);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_IntVector(this.NativeObject, m_createEntity_CallBack_CEntity_EVString_EVString_IntVector);
						m_createEntity_CallBack_CEntity_EVString_EVString = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString_Function;
						GC.KeepAlive(m_createEntity_CallBack_CEntity_EVString_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_EVString(this.NativeObject, m_createEntity_CallBack_CEntity_EVString_EVString);
						m_createEntity_CallBack_CEntity_EVString_CMeshPtr_IntVector = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_CMeshPtr_IntVector_Function;
						GC.KeepAlive(m_createEntity_CallBack_CEntity_EVString_CMeshPtr_IntVector);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_CMeshPtr_IntVector(this.NativeObject, m_createEntity_CallBack_CEntity_EVString_CMeshPtr_IntVector);
						m_createEntity_CallBack_CEntity_EVString_CMeshPtr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_CMeshPtr_Function;
						GC.KeepAlive(m_createEntity_CallBack_CEntity_EVString_CMeshPtr);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_CMeshPtr(this.NativeObject, m_createEntity_CallBack_CEntity_EVString_CMeshPtr);
						m_createEntity_CallBack_CEntity_CMeshPtr_IntVector = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_CMeshPtr_IntVector_Function;
						GC.KeepAlive(m_createEntity_CallBack_CEntity_CMeshPtr_IntVector);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_CMeshPtr_IntVector(this.NativeObject, m_createEntity_CallBack_CEntity_CMeshPtr_IntVector);
						m_createEntity_CallBack_CEntity_CMeshPtr = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_CMeshPtr_Function;
						GC.KeepAlive(m_createEntity_CallBack_CEntity_CMeshPtr);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_CMeshPtr(this.NativeObject, m_createEntity_CallBack_CEntity_CMeshPtr);
						m_createEntity_CallBack_CEntity_EVString_IntVector = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_IntVector_Function;
						GC.KeepAlive(m_createEntity_CallBack_CEntity_EVString_IntVector);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_IntVector(this.NativeObject, m_createEntity_CallBack_CEntity_EVString_IntVector);
						m_createEntity_CallBack_CEntity_EVString = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_Function;
						GC.KeepAlive(m_createEntity_CallBack_CEntity_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString(this.NativeObject, m_createEntity_CallBack_CEntity_EVString);
						m_createEntity_CallBack_CEntity_EVString_PrefabType = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_PrefabType_Function;
						GC.KeepAlive(m_createEntity_CallBack_CEntity_EVString_PrefabType);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_EVString_PrefabType(this.NativeObject, m_createEntity_CallBack_CEntity_EVString_PrefabType);
						m_createEntity_CallBack_CEntity_PrefabType = EarthView_World_Graphic_CSceneManager_createEntity_CEntity_PrefabType_Function;
						GC.KeepAlive(m_createEntity_CallBack_CEntity_PrefabType);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createEntity_CEntity_PrefabType(this.NativeObject, m_createEntity_CallBack_CEntity_PrefabType);
						m_getEntity_CallBack_CEntity_EVString = EarthView_World_Graphic_CSceneManager_getEntity_CEntity_EVString_Function;
						GC.KeepAlive(m_getEntity_CallBack_CEntity_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getEntity_CEntity_EVString(this.NativeObject, m_getEntity_CallBack_CEntity_EVString);
						m_hasEntity_CallBack_ev_bool_EVString = EarthView_World_Graphic_CSceneManager_hasEntity_ev_bool_EVString_Function;
						GC.KeepAlive(m_hasEntity_CallBack_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasEntity_ev_bool_EVString(this.NativeObject, m_hasEntity_CallBack_ev_bool_EVString);
						m_destroyEntity_CallBack_void_CEntity = EarthView_World_Graphic_CSceneManager_destroyEntity_void_CEntity_Function;
						GC.KeepAlive(m_destroyEntity_CallBack_void_CEntity);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyEntity_void_CEntity(this.NativeObject, m_destroyEntity_CallBack_void_CEntity);
						m_destroyEntity_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_destroyEntity_void_EVString_Function;
						GC.KeepAlive(m_destroyEntity_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyEntity_void_EVString(this.NativeObject, m_destroyEntity_CallBack_void_EVString);
						m_destroyAllEntities_CallBack_void = EarthView_World_Graphic_CSceneManager_destroyAllEntities_void_Function;
						GC.KeepAlive(m_destroyAllEntities_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllEntities_void(this.NativeObject, m_destroyAllEntities_CallBack_void);
						m_createManualObject_CallBack_CManualObject_EVString = EarthView_World_Graphic_CSceneManager_createManualObject_CManualObject_EVString_Function;
						GC.KeepAlive(m_createManualObject_CallBack_CManualObject_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createManualObject_CManualObject_EVString(this.NativeObject, m_createManualObject_CallBack_CManualObject_EVString);
						m_createManualObject_CallBack_CManualObject = EarthView_World_Graphic_CSceneManager_createManualObject_CManualObject_Function;
						GC.KeepAlive(m_createManualObject_CallBack_CManualObject);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createManualObject_CManualObject(this.NativeObject, m_createManualObject_CallBack_CManualObject);
						m_getManualObject_CallBack_CManualObject_EVString = EarthView_World_Graphic_CSceneManager_getManualObject_CManualObject_EVString_Function;
						GC.KeepAlive(m_getManualObject_CallBack_CManualObject_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getManualObject_CManualObject_EVString(this.NativeObject, m_getManualObject_CallBack_CManualObject_EVString);
						m_hasManualObject_CallBack_ev_bool_EVString = EarthView_World_Graphic_CSceneManager_hasManualObject_ev_bool_EVString_Function;
						GC.KeepAlive(m_hasManualObject_CallBack_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasManualObject_ev_bool_EVString(this.NativeObject, m_hasManualObject_CallBack_ev_bool_EVString);
						m_destroyManualObject_CallBack_void_CManualObject = EarthView_World_Graphic_CSceneManager_destroyManualObject_void_CManualObject_Function;
						GC.KeepAlive(m_destroyManualObject_CallBack_void_CManualObject);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyManualObject_void_CManualObject(this.NativeObject, m_destroyManualObject_CallBack_void_CManualObject);
						m_destroyManualObject_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_destroyManualObject_void_EVString_Function;
						GC.KeepAlive(m_destroyManualObject_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyManualObject_void_EVString(this.NativeObject, m_destroyManualObject_CallBack_void_EVString);
						m_destroyAllManualObjects_CallBack_void = EarthView_World_Graphic_CSceneManager_destroyAllManualObjects_void_Function;
						GC.KeepAlive(m_destroyAllManualObjects_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllManualObjects_void(this.NativeObject, m_destroyAllManualObjects_CallBack_void);
						m_usingWebMercator_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_usingWebMercator_ev_bool_Function;
						GC.KeepAlive(m_usingWebMercator_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_usingWebMercator_ev_bool(this.NativeObject, m_usingWebMercator_CallBack_ev_bool);
						m_createBillboardChain_CallBack_CBillboardChain_EVString = EarthView_World_Graphic_CSceneManager_createBillboardChain_CBillboardChain_EVString_Function;
						GC.KeepAlive(m_createBillboardChain_CallBack_CBillboardChain_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createBillboardChain_CBillboardChain_EVString(this.NativeObject, m_createBillboardChain_CallBack_CBillboardChain_EVString);
						m_createBillboardChain_CallBack_CBillboardChain = EarthView_World_Graphic_CSceneManager_createBillboardChain_CBillboardChain_Function;
						GC.KeepAlive(m_createBillboardChain_CallBack_CBillboardChain);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createBillboardChain_CBillboardChain(this.NativeObject, m_createBillboardChain_CallBack_CBillboardChain);
						m_getBillboardChain_CallBack_CBillboardChain_EVString = EarthView_World_Graphic_CSceneManager_getBillboardChain_CBillboardChain_EVString_Function;
						GC.KeepAlive(m_getBillboardChain_CallBack_CBillboardChain_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getBillboardChain_CBillboardChain_EVString(this.NativeObject, m_getBillboardChain_CallBack_CBillboardChain_EVString);
						m_hasBillboardChain_CallBack_ev_bool_EVString = EarthView_World_Graphic_CSceneManager_hasBillboardChain_ev_bool_EVString_Function;
						GC.KeepAlive(m_hasBillboardChain_CallBack_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasBillboardChain_ev_bool_EVString(this.NativeObject, m_hasBillboardChain_CallBack_ev_bool_EVString);
						m_destroyBillboardChain_CallBack_void_CBillboardChain = EarthView_World_Graphic_CSceneManager_destroyBillboardChain_void_CBillboardChain_Function;
						GC.KeepAlive(m_destroyBillboardChain_CallBack_void_CBillboardChain);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyBillboardChain_void_CBillboardChain(this.NativeObject, m_destroyBillboardChain_CallBack_void_CBillboardChain);
						m_destroyBillboardChain_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_destroyBillboardChain_void_EVString_Function;
						GC.KeepAlive(m_destroyBillboardChain_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyBillboardChain_void_EVString(this.NativeObject, m_destroyBillboardChain_CallBack_void_EVString);
						m_destroyAllBillboardChains_CallBack_void = EarthView_World_Graphic_CSceneManager_destroyAllBillboardChains_void_Function;
						GC.KeepAlive(m_destroyAllBillboardChains_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllBillboardChains_void(this.NativeObject, m_destroyAllBillboardChains_CallBack_void);
						m_createRibbonTrail_CallBack_CRibbonTrail_EVString = EarthView_World_Graphic_CSceneManager_createRibbonTrail_CRibbonTrail_EVString_Function;
						GC.KeepAlive(m_createRibbonTrail_CallBack_CRibbonTrail_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createRibbonTrail_CRibbonTrail_EVString(this.NativeObject, m_createRibbonTrail_CallBack_CRibbonTrail_EVString);
						m_createRibbonTrail_CallBack_CRibbonTrail = EarthView_World_Graphic_CSceneManager_createRibbonTrail_CRibbonTrail_Function;
						GC.KeepAlive(m_createRibbonTrail_CallBack_CRibbonTrail);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createRibbonTrail_CRibbonTrail(this.NativeObject, m_createRibbonTrail_CallBack_CRibbonTrail);
						m_getRibbonTrail_CallBack_CRibbonTrail_EVString = EarthView_World_Graphic_CSceneManager_getRibbonTrail_CRibbonTrail_EVString_Function;
						GC.KeepAlive(m_getRibbonTrail_CallBack_CRibbonTrail_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getRibbonTrail_CRibbonTrail_EVString(this.NativeObject, m_getRibbonTrail_CallBack_CRibbonTrail_EVString);
						m_hasRibbonTrail_CallBack_ev_bool_EVString = EarthView_World_Graphic_CSceneManager_hasRibbonTrail_ev_bool_EVString_Function;
						GC.KeepAlive(m_hasRibbonTrail_CallBack_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasRibbonTrail_ev_bool_EVString(this.NativeObject, m_hasRibbonTrail_CallBack_ev_bool_EVString);
						m_destroyRibbonTrail_CallBack_void_CRibbonTrail = EarthView_World_Graphic_CSceneManager_destroyRibbonTrail_void_CRibbonTrail_Function;
						GC.KeepAlive(m_destroyRibbonTrail_CallBack_void_CRibbonTrail);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyRibbonTrail_void_CRibbonTrail(this.NativeObject, m_destroyRibbonTrail_CallBack_void_CRibbonTrail);
						m_destroyRibbonTrail_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_destroyRibbonTrail_void_EVString_Function;
						GC.KeepAlive(m_destroyRibbonTrail_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyRibbonTrail_void_EVString(this.NativeObject, m_destroyRibbonTrail_CallBack_void_EVString);
						m_destroyAllRibbonTrails_CallBack_void = EarthView_World_Graphic_CSceneManager_destroyAllRibbonTrails_void_Function;
						GC.KeepAlive(m_destroyAllRibbonTrails_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllRibbonTrails_void(this.NativeObject, m_destroyAllRibbonTrails_CallBack_void);
						m_createParticleSystem_CallBack_CParticleSystem_EVString_EVString = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_EVString_Function;
						GC.KeepAlive(m_createParticleSystem_CallBack_CParticleSystem_EVString_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_EVString(this.NativeObject, m_createParticleSystem_CallBack_CParticleSystem_EVString_EVString);
						m_createParticleSystem_CallBack_CParticleSystem_EVString_ev_size_t_EVString = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_ev_size_t_EVString_Function;
						GC.KeepAlive(m_createParticleSystem_CallBack_CParticleSystem_EVString_ev_size_t_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_ev_size_t_EVString(this.NativeObject, m_createParticleSystem_CallBack_CParticleSystem_EVString_ev_size_t_EVString);
						m_createParticleSystem_CallBack_CParticleSystem_EVString_ev_size_t = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_ev_size_t_Function;
						GC.KeepAlive(m_createParticleSystem_CallBack_CParticleSystem_EVString_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_ev_size_t(this.NativeObject, m_createParticleSystem_CallBack_CParticleSystem_EVString_ev_size_t);
						m_createParticleSystem_CallBack_CParticleSystem_EVString = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString_Function;
						GC.KeepAlive(m_createParticleSystem_CallBack_CParticleSystem_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_EVString(this.NativeObject, m_createParticleSystem_CallBack_CParticleSystem_EVString);
						m_createParticleSystem_CallBack_CParticleSystem_ev_size_t_EVString = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_ev_size_t_EVString_Function;
						GC.KeepAlive(m_createParticleSystem_CallBack_CParticleSystem_ev_size_t_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_ev_size_t_EVString(this.NativeObject, m_createParticleSystem_CallBack_CParticleSystem_ev_size_t_EVString);
						m_createParticleSystem_CallBack_CParticleSystem_ev_size_t = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_ev_size_t_Function;
						GC.KeepAlive(m_createParticleSystem_CallBack_CParticleSystem_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_ev_size_t(this.NativeObject, m_createParticleSystem_CallBack_CParticleSystem_ev_size_t);
						m_createParticleSystem_CallBack_CParticleSystem = EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem_Function;
						GC.KeepAlive(m_createParticleSystem_CallBack_CParticleSystem);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createParticleSystem_CParticleSystem(this.NativeObject, m_createParticleSystem_CallBack_CParticleSystem);
						m_getParticleSystem_CallBack_CParticleSystem_EVString = EarthView_World_Graphic_CSceneManager_getParticleSystem_CParticleSystem_EVString_Function;
						GC.KeepAlive(m_getParticleSystem_CallBack_CParticleSystem_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getParticleSystem_CParticleSystem_EVString(this.NativeObject, m_getParticleSystem_CallBack_CParticleSystem_EVString);
						m_hasParticleSystem_CallBack_ev_bool_EVString = EarthView_World_Graphic_CSceneManager_hasParticleSystem_ev_bool_EVString_Function;
						GC.KeepAlive(m_hasParticleSystem_CallBack_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasParticleSystem_ev_bool_EVString(this.NativeObject, m_hasParticleSystem_CallBack_ev_bool_EVString);
						m_destroyParticleSystem_CallBack_void_CParticleSystem = EarthView_World_Graphic_CSceneManager_destroyParticleSystem_void_CParticleSystem_Function;
						GC.KeepAlive(m_destroyParticleSystem_CallBack_void_CParticleSystem);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyParticleSystem_void_CParticleSystem(this.NativeObject, m_destroyParticleSystem_CallBack_void_CParticleSystem);
						m_destroyParticleSystem_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_destroyParticleSystem_void_EVString_Function;
						GC.KeepAlive(m_destroyParticleSystem_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyParticleSystem_void_EVString(this.NativeObject, m_destroyParticleSystem_CallBack_void_EVString);
						m_destroyAllParticleSystems_CallBack_void = EarthView_World_Graphic_CSceneManager_destroyAllParticleSystems_void_Function;
						GC.KeepAlive(m_destroyAllParticleSystems_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllParticleSystems_void(this.NativeObject, m_destroyAllParticleSystems_CallBack_void);
						m_clearScene_CallBack_void = EarthView_World_Graphic_CSceneManager_clearScene_void_Function;
						GC.KeepAlive(m_clearScene_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_clearScene_void(this.NativeObject, m_clearScene_CallBack_void);
						m_prepareWorldGeometry_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_EVString_Function;
						GC.KeepAlive(m_prepareWorldGeometry_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_EVString(this.NativeObject, m_prepareWorldGeometry_CallBack_void_EVString);
						m_prepareWorldGeometry_CallBack_void_DataStreamPtr_EVString = EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_DataStreamPtr_EVString_Function;
						GC.KeepAlive(m_prepareWorldGeometry_CallBack_void_DataStreamPtr_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_DataStreamPtr_EVString(this.NativeObject, m_prepareWorldGeometry_CallBack_void_DataStreamPtr_EVString);
						m_prepareWorldGeometry_CallBack_void_DataStreamPtr = EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_DataStreamPtr_Function;
						GC.KeepAlive(m_prepareWorldGeometry_CallBack_void_DataStreamPtr);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_prepareWorldGeometry_void_DataStreamPtr(this.NativeObject, m_prepareWorldGeometry_CallBack_void_DataStreamPtr);
						m_setWorldGeometry_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_EVString_Function;
						GC.KeepAlive(m_setWorldGeometry_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_EVString(this.NativeObject, m_setWorldGeometry_CallBack_void_EVString);
						m_setWorldGeometry_CallBack_void_DataStreamPtr_EVString = EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_DataStreamPtr_EVString_Function;
						GC.KeepAlive(m_setWorldGeometry_CallBack_void_DataStreamPtr_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_DataStreamPtr_EVString(this.NativeObject, m_setWorldGeometry_CallBack_void_DataStreamPtr_EVString);
						m_setWorldGeometry_CallBack_void_DataStreamPtr = EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_DataStreamPtr_Function;
						GC.KeepAlive(m_setWorldGeometry_CallBack_void_DataStreamPtr);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setWorldGeometry_void_DataStreamPtr(this.NativeObject, m_setWorldGeometry_CallBack_void_DataStreamPtr);
						m_estimateWorldGeometry_CallBack_ev_size_t_EVString = EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_EVString_Function;
						GC.KeepAlive(m_estimateWorldGeometry_CallBack_ev_size_t_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_EVString(this.NativeObject, m_estimateWorldGeometry_CallBack_ev_size_t_EVString);
						m_estimateWorldGeometry_CallBack_ev_size_t_DataStreamPtr_EVString = EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_DataStreamPtr_EVString_Function;
						GC.KeepAlive(m_estimateWorldGeometry_CallBack_ev_size_t_DataStreamPtr_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_DataStreamPtr_EVString(this.NativeObject, m_estimateWorldGeometry_CallBack_ev_size_t_DataStreamPtr_EVString);
						m_estimateWorldGeometry_CallBack_ev_size_t_DataStreamPtr = EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_DataStreamPtr_Function;
						GC.KeepAlive(m_estimateWorldGeometry_CallBack_ev_size_t_DataStreamPtr);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_estimateWorldGeometry_ev_size_t_DataStreamPtr(this.NativeObject, m_estimateWorldGeometry_CallBack_ev_size_t_DataStreamPtr);
						m_getSuggestedViewpoint_CallBack_ViewPoint_ev_bool = EarthView_World_Graphic_CSceneManager_getSuggestedViewpoint_ViewPoint_ev_bool_Function;
						GC.KeepAlive(m_getSuggestedViewpoint_CallBack_ViewPoint_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSuggestedViewpoint_ViewPoint_ev_bool(this.NativeObject, m_getSuggestedViewpoint_CallBack_ViewPoint_ev_bool);
						m_getSuggestedViewpoint_CallBack_ViewPoint = EarthView_World_Graphic_CSceneManager_getSuggestedViewpoint_ViewPoint_Function;
						GC.KeepAlive(m_getSuggestedViewpoint_CallBack_ViewPoint);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSuggestedViewpoint_ViewPoint(this.NativeObject, m_getSuggestedViewpoint_CallBack_ViewPoint);
						m_setOption_CallBack_ev_bool_EVString_void = EarthView_World_Graphic_CSceneManager_setOption_ev_bool_EVString_void_Function;
						GC.KeepAlive(m_setOption_CallBack_ev_bool_EVString_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setOption_ev_bool_EVString_void(this.NativeObject, m_setOption_CallBack_ev_bool_EVString_void);
						m_getOption_CallBack_ev_bool_EVString_void = EarthView_World_Graphic_CSceneManager_getOption_ev_bool_EVString_void_Function;
						GC.KeepAlive(m_getOption_CallBack_ev_bool_EVString_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getOption_ev_bool_EVString_void(this.NativeObject, m_getOption_CallBack_ev_bool_EVString_void);
						m_hasOption_CallBack_ev_bool_EVString = EarthView_World_Graphic_CSceneManager_hasOption_ev_bool_EVString_Function;
						GC.KeepAlive(m_hasOption_CallBack_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasOption_ev_bool_EVString(this.NativeObject, m_hasOption_CallBack_ev_bool_EVString);
						m_getOptionValues_CallBack_ev_bool_EVString_StringVector = EarthView_World_Graphic_CSceneManager_getOptionValues_ev_bool_EVString_StringVector_Function;
						GC.KeepAlive(m_getOptionValues_CallBack_ev_bool_EVString_StringVector);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getOptionValues_ev_bool_EVString_StringVector(this.NativeObject, m_getOptionValues_CallBack_ev_bool_EVString_StringVector);
						m_getOptionKeys_CallBack_ev_bool_StringVector = EarthView_World_Graphic_CSceneManager_getOptionKeys_ev_bool_StringVector_Function;
						GC.KeepAlive(m_getOptionKeys_CallBack_ev_bool_StringVector);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getOptionKeys_ev_bool_StringVector(this.NativeObject, m_getOptionKeys_CallBack_ev_bool_StringVector);
						m__updateSceneGraph_CallBack_void_CCamera = EarthView_World_Graphic_CSceneManager__updateSceneGraph_void_CCamera_Function;
						GC.KeepAlive(m__updateSceneGraph_CallBack_void_CCamera);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__updateSceneGraph_void_CCamera(this.NativeObject, m__updateSceneGraph_CallBack_void_CCamera);
						m__findVisibleObjects_CallBack_void_CCamera_VisibleObjectsBoundsInfo_ev_bool = EarthView_World_Graphic_CSceneManager__findVisibleObjects_void_CCamera_VisibleObjectsBoundsInfo_ev_bool_Function;
						GC.KeepAlive(m__findVisibleObjects_CallBack_void_CCamera_VisibleObjectsBoundsInfo_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__findVisibleObjects_void_CCamera_VisibleObjectsBoundsInfo_ev_bool(this.NativeObject, m__findVisibleObjects_CallBack_void_CCamera_VisibleObjectsBoundsInfo_ev_bool);
						m__applySceneAnimations_CallBack_void = EarthView_World_Graphic_CSceneManager__applySceneAnimations_void_Function;
						GC.KeepAlive(m__applySceneAnimations_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__applySceneAnimations_void(this.NativeObject, m__applySceneAnimations_CallBack_void);
						m__renderVisibleObjects_CallBack_void = EarthView_World_Graphic_CSceneManager__renderVisibleObjects_void_Function;
						GC.KeepAlive(m__renderVisibleObjects_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__renderVisibleObjects_void(this.NativeObject, m__renderVisibleObjects_CallBack_void);
						m__renderScene_CallBack_void_CCamera_CViewport_ev_bool = EarthView_World_Graphic_CSceneManager__renderScene_void_CCamera_CViewport_ev_bool_Function;
						GC.KeepAlive(m__renderScene_CallBack_void_CCamera_CViewport_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__renderScene_void_CCamera_CViewport_ev_bool(this.NativeObject, m__renderScene_CallBack_void_CCamera_CViewport_ev_bool);
						m__queueSkiesForRendering_CallBack_void_CCamera = EarthView_World_Graphic_CSceneManager__queueSkiesForRendering_void_CCamera_Function;
						GC.KeepAlive(m__queueSkiesForRendering_CallBack_void_CCamera);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__queueSkiesForRendering_void_CCamera(this.NativeObject, m__queueSkiesForRendering_CallBack_void_CCamera);
						m__setDestinationRenderSystem_CallBack_void_CRenderSystem = EarthView_World_Graphic_CSceneManager__setDestinationRenderSystem_void_CRenderSystem_Function;
						GC.KeepAlive(m__setDestinationRenderSystem_CallBack_void_CRenderSystem);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setDestinationRenderSystem_void_CRenderSystem(this.NativeObject, m__setDestinationRenderSystem_CallBack_void_CRenderSystem);
						m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString = EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString_Function;
						GC.KeepAlive(m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString(this.NativeObject, m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_EVString);
						m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32 = EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32_Function;
						GC.KeepAlive(m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32(this.NativeObject, m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_ev_int32);
						m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32 = EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32_Function;
						GC.KeepAlive(m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32(this.NativeObject, m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_ev_int32);
						m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real = EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real_Function;
						GC.KeepAlive(m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real(this.NativeObject, m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Real);
						m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool = EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool_Function;
						GC.KeepAlive(m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_bool(this.NativeObject, m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_bool);
						m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real = EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_Function;
						GC.KeepAlive(m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real(this.NativeObject, m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real);
						m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real = EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real_Function;
						GC.KeepAlive(m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Real(this.NativeObject, m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real);
						m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString = EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString_Function;
						GC.KeepAlive(m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlane_void_ev_bool_CPlane_EVString(this.NativeObject, m_setSkyPlane_CallBack_void_ev_bool_CPlane_EVString);
						m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString = EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString_Function;
						GC.KeepAlive(m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString(this.NativeObject, m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_EVString);
						m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32 = EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32_Function;
						GC.KeepAlive(m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32(this.NativeObject, m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_ev_int32);
						m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32 = EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32_Function;
						GC.KeepAlive(m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32(this.NativeObject, m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_ev_int32);
						m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real = EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real_Function;
						GC.KeepAlive(m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real(this.NativeObject, m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Real);
						m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8 = EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8_Function;
						GC.KeepAlive(m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8(this.NativeObject, m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real_ev_uint8);
						m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real = EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real_Function;
						GC.KeepAlive(m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Real(this.NativeObject, m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real_Real);
						m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real = EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real_Function;
						GC.KeepAlive(m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Real(this.NativeObject, m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString_Real);
						m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString = EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString_Function;
						GC.KeepAlive(m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyPlane_void_ev_bool_CPlane_EVString(this.NativeObject, m__setSkyPlane_CallBack_void_ev_bool_CPlane_EVString);
						m_setSkyPlaneEnabled_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setSkyPlaneEnabled_void_ev_bool_Function;
						GC.KeepAlive(m_setSkyPlaneEnabled_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyPlaneEnabled_void_ev_bool(this.NativeObject, m_setSkyPlaneEnabled_CallBack_void_ev_bool);
						m_isSkyPlaneEnabled_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_isSkyPlaneEnabled_ev_bool_Function;
						GC.KeepAlive(m_isSkyPlaneEnabled_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isSkyPlaneEnabled_ev_bool(this.NativeObject, m_isSkyPlaneEnabled_CallBack_ev_bool);
						m_getSkyPlaneNode_CallBack_CSceneNode = EarthView_World_Graphic_CSceneManager_getSkyPlaneNode_CSceneNode_Function;
						GC.KeepAlive(m_getSkyPlaneNode_CallBack_CSceneNode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSkyPlaneNode_CSceneNode(this.NativeObject, m_getSkyPlaneNode_CallBack_CSceneNode);
						m_getSkyPlaneGenParameters_CallBack_SkyPlaneGenParameters = EarthView_World_Graphic_CSceneManager_getSkyPlaneGenParameters_SkyPlaneGenParameters_Function;
						GC.KeepAlive(m_getSkyPlaneGenParameters_CallBack_SkyPlaneGenParameters);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSkyPlaneGenParameters_SkyPlaneGenParameters(this.NativeObject, m_getSkyPlaneGenParameters_CallBack_SkyPlaneGenParameters);
						m_setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString = EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString_Function;
						GC.KeepAlive(m_setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString(this.NativeObject, m_setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool_CQuaternion_EVString);
						m_setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool_CQuaternion = EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_CQuaternion_Function;
						GC.KeepAlive(m_setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool_CQuaternion);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_CQuaternion(this.NativeObject, m_setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool_CQuaternion);
						m_setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool = EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool_Function;
						GC.KeepAlive(m_setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_ev_bool(this.NativeObject, m_setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_bool);
						m_setSkyBox_CallBack_void_ev_bool_EVString_Real = EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real_Function;
						GC.KeepAlive(m_setSkyBox_CallBack_void_ev_bool_EVString_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Real(this.NativeObject, m_setSkyBox_CallBack_void_ev_bool_EVString_Real);
						m_setSkyBox_CallBack_void_ev_bool_EVString = EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString_Function;
						GC.KeepAlive(m_setSkyBox_CallBack_void_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyBox_void_ev_bool_EVString(this.NativeObject, m_setSkyBox_CallBack_void_ev_bool_EVString);
						m__setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString = EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString_Function;
						GC.KeepAlive(m__setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString(this.NativeObject, m__setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_EVString);
						m__setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8_CQuaternion = EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_CQuaternion_Function;
						GC.KeepAlive(m__setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8_CQuaternion);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_CQuaternion(this.NativeObject, m__setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8_CQuaternion);
						m__setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8 = EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8_Function;
						GC.KeepAlive(m__setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_ev_uint8(this.NativeObject, m__setSkyBox_CallBack_void_ev_bool_EVString_Real_ev_uint8);
						m__setSkyBox_CallBack_void_ev_bool_EVString_Real = EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real_Function;
						GC.KeepAlive(m__setSkyBox_CallBack_void_ev_bool_EVString_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Real(this.NativeObject, m__setSkyBox_CallBack_void_ev_bool_EVString_Real);
						m__setSkyBox_CallBack_void_ev_bool_EVString = EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString_Function;
						GC.KeepAlive(m__setSkyBox_CallBack_void_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyBox_void_ev_bool_EVString(this.NativeObject, m__setSkyBox_CallBack_void_ev_bool_EVString);
						m_setSkyBoxEnabled_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setSkyBoxEnabled_void_ev_bool_Function;
						GC.KeepAlive(m_setSkyBoxEnabled_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyBoxEnabled_void_ev_bool(this.NativeObject, m_setSkyBoxEnabled_CallBack_void_ev_bool);
						m_isSkyBoxEnabled_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_isSkyBoxEnabled_ev_bool_Function;
						GC.KeepAlive(m_isSkyBoxEnabled_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isSkyBoxEnabled_ev_bool(this.NativeObject, m_isSkyBoxEnabled_CallBack_ev_bool);
						m_getSkyBoxNode_CallBack_CSceneNode = EarthView_World_Graphic_CSceneManager_getSkyBoxNode_CSceneNode_Function;
						GC.KeepAlive(m_getSkyBoxNode_CallBack_CSceneNode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSkyBoxNode_CSceneNode(this.NativeObject, m_getSkyBoxNode_CallBack_CSceneNode);
						m_getSkyBoxGenParameters_CallBack_SkyBoxGenParameters = EarthView_World_Graphic_CSceneManager_getSkyBoxGenParameters_SkyBoxGenParameters_Function;
						GC.KeepAlive(m_getSkyBoxGenParameters_CallBack_SkyBoxGenParameters);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSkyBoxGenParameters_SkyBoxGenParameters(this.NativeObject, m_getSkyBoxGenParameters_CallBack_SkyBoxGenParameters);
						m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString = EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_Function;
						GC.KeepAlive(m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(this.NativeObject, m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_EVString);
						m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32 = EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32_Function;
						GC.KeepAlive(m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32(this.NativeObject, m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_ev_int32);
						m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32 = EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32_Function;
						GC.KeepAlive(m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32(this.NativeObject, m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_ev_int32);
						m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32 = EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32_Function;
						GC.KeepAlive(m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32(this.NativeObject, m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_ev_int32);
						m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion = EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion_Function;
						GC.KeepAlive(m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion(this.NativeObject, m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool_CQuaternion);
						m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool = EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool_Function;
						GC.KeepAlive(m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_bool(this.NativeObject, m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_bool);
						m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real = EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real_Function;
						GC.KeepAlive(m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Real(this.NativeObject, m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real);
						m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real = EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real_Function;
						GC.KeepAlive(m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Real(this.NativeObject, m_setSkyDome_CallBack_void_ev_bool_EVString_Real_Real);
						m_setSkyDome_CallBack_void_ev_bool_EVString_Real = EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real_Function;
						GC.KeepAlive(m_setSkyDome_CallBack_void_ev_bool_EVString_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Real(this.NativeObject, m_setSkyDome_CallBack_void_ev_bool_EVString_Real);
						m_setSkyDome_CallBack_void_ev_bool_EVString = EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString_Function;
						GC.KeepAlive(m_setSkyDome_CallBack_void_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDome_void_ev_bool_EVString(this.NativeObject, m_setSkyDome_CallBack_void_ev_bool_EVString);
						m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString = EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString_Function;
						GC.KeepAlive(m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString(this.NativeObject, m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_EVString);
						m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32 = EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32_Function;
						GC.KeepAlive(m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32(this.NativeObject, m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_ev_int32);
						m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32 = EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32_Function;
						GC.KeepAlive(m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32(this.NativeObject, m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_ev_int32);
						m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32 = EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32_Function;
						GC.KeepAlive(m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32(this.NativeObject, m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_ev_int32);
						m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion = EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion_Function;
						GC.KeepAlive(m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion(this.NativeObject, m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8_CQuaternion);
						m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8 = EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8_Function;
						GC.KeepAlive(m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_ev_uint8(this.NativeObject, m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real_ev_uint8);
						m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real = EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real_Function;
						GC.KeepAlive(m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Real(this.NativeObject, m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real_Real);
						m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real = EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real_Function;
						GC.KeepAlive(m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Real(this.NativeObject, m__setSkyDome_CallBack_void_ev_bool_EVString_Real_Real);
						m__setSkyDome_CallBack_void_ev_bool_EVString_Real = EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real_Function;
						GC.KeepAlive(m__setSkyDome_CallBack_void_ev_bool_EVString_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Real(this.NativeObject, m__setSkyDome_CallBack_void_ev_bool_EVString_Real);
						m__setSkyDome_CallBack_void_ev_bool_EVString = EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString_Function;
						GC.KeepAlive(m__setSkyDome_CallBack_void_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setSkyDome_void_ev_bool_EVString(this.NativeObject, m__setSkyDome_CallBack_void_ev_bool_EVString);
						m_setSkyDomeEnabled_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setSkyDomeEnabled_void_ev_bool_Function;
						GC.KeepAlive(m_setSkyDomeEnabled_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSkyDomeEnabled_void_ev_bool(this.NativeObject, m_setSkyDomeEnabled_CallBack_void_ev_bool);
						m_isSkyDomeEnabled_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_isSkyDomeEnabled_ev_bool_Function;
						GC.KeepAlive(m_isSkyDomeEnabled_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isSkyDomeEnabled_ev_bool(this.NativeObject, m_isSkyDomeEnabled_CallBack_ev_bool);
						m_getSkyDomeNode_CallBack_CSceneNode = EarthView_World_Graphic_CSceneManager_getSkyDomeNode_CSceneNode_Function;
						GC.KeepAlive(m_getSkyDomeNode_CallBack_CSceneNode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSkyDomeNode_CSceneNode(this.NativeObject, m_getSkyDomeNode_CallBack_CSceneNode);
						m_getSkyDomeGenParameters_CallBack_SkyDomeGenParameters = EarthView_World_Graphic_CSceneManager_getSkyDomeGenParameters_SkyDomeGenParameters_Function;
						GC.KeepAlive(m_getSkyDomeGenParameters_CallBack_SkyDomeGenParameters);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSkyDomeGenParameters_SkyDomeGenParameters(this.NativeObject, m_getSkyDomeGenParameters_CallBack_SkyDomeGenParameters);
						m_getFogMode_CallBack_FogMode = EarthView_World_Graphic_CSceneManager_getFogMode_FogMode_Function;
						GC.KeepAlive(m_getFogMode_CallBack_FogMode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getFogMode_FogMode(this.NativeObject, m_getFogMode_CallBack_FogMode);
						m_getFogColour_CallBack_CColourValue = EarthView_World_Graphic_CSceneManager_getFogColour_CColourValue_Function;
						GC.KeepAlive(m_getFogColour_CallBack_CColourValue);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getFogColour_CColourValue(this.NativeObject, m_getFogColour_CallBack_CColourValue);
						m_getFogStart_CallBack_Real = EarthView_World_Graphic_CSceneManager_getFogStart_Real_Function;
						GC.KeepAlive(m_getFogStart_CallBack_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getFogStart_Real(this.NativeObject, m_getFogStart_CallBack_Real);
						m_getFogEnd_CallBack_Real = EarthView_World_Graphic_CSceneManager_getFogEnd_Real_Function;
						GC.KeepAlive(m_getFogEnd_CallBack_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getFogEnd_Real(this.NativeObject, m_getFogEnd_CallBack_Real);
						m_getFogDensity_CallBack_Real = EarthView_World_Graphic_CSceneManager_getFogDensity_Real_Function;
						GC.KeepAlive(m_getFogDensity_CallBack_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getFogDensity_Real(this.NativeObject, m_getFogDensity_CallBack_Real);
						m_createBillboardSet_CallBack_CBillboardSet_EVString_ev_uint32 = EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_EVString_ev_uint32_Function;
						GC.KeepAlive(m_createBillboardSet_CallBack_CBillboardSet_EVString_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_EVString_ev_uint32(this.NativeObject, m_createBillboardSet_CallBack_CBillboardSet_EVString_ev_uint32);
						m_createBillboardSet_CallBack_CBillboardSet_EVString = EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_EVString_Function;
						GC.KeepAlive(m_createBillboardSet_CallBack_CBillboardSet_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_EVString(this.NativeObject, m_createBillboardSet_CallBack_CBillboardSet_EVString);
						m_createBillboardSet_CallBack_CBillboardSet_ev_uint32 = EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_ev_uint32_Function;
						GC.KeepAlive(m_createBillboardSet_CallBack_CBillboardSet_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_ev_uint32(this.NativeObject, m_createBillboardSet_CallBack_CBillboardSet_ev_uint32);
						m_createBillboardSet_CallBack_CBillboardSet = EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet_Function;
						GC.KeepAlive(m_createBillboardSet_CallBack_CBillboardSet);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createBillboardSet_CBillboardSet(this.NativeObject, m_createBillboardSet_CallBack_CBillboardSet);
						m_getBillboardSet_CallBack_CBillboardSet_EVString = EarthView_World_Graphic_CSceneManager_getBillboardSet_CBillboardSet_EVString_Function;
						GC.KeepAlive(m_getBillboardSet_CallBack_CBillboardSet_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getBillboardSet_CBillboardSet_EVString(this.NativeObject, m_getBillboardSet_CallBack_CBillboardSet_EVString);
						m_hasBillboardSet_CallBack_ev_bool_EVString = EarthView_World_Graphic_CSceneManager_hasBillboardSet_ev_bool_EVString_Function;
						GC.KeepAlive(m_hasBillboardSet_CallBack_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasBillboardSet_ev_bool_EVString(this.NativeObject, m_hasBillboardSet_CallBack_ev_bool_EVString);
						m_destroyBillboardSet_CallBack_void_CBillboardSet = EarthView_World_Graphic_CSceneManager_destroyBillboardSet_void_CBillboardSet_Function;
						GC.KeepAlive(m_destroyBillboardSet_CallBack_void_CBillboardSet);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyBillboardSet_void_CBillboardSet(this.NativeObject, m_destroyBillboardSet_CallBack_void_CBillboardSet);
						m_destroyBillboardSet_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_destroyBillboardSet_void_EVString_Function;
						GC.KeepAlive(m_destroyBillboardSet_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyBillboardSet_void_EVString(this.NativeObject, m_destroyBillboardSet_CallBack_void_EVString);
						m_destroyAllBillboardSets_CallBack_void = EarthView_World_Graphic_CSceneManager_destroyAllBillboardSets_void_Function;
						GC.KeepAlive(m_destroyAllBillboardSets_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllBillboardSets_void(this.NativeObject, m_destroyAllBillboardSets_CallBack_void);
						m_setDisplaySceneNodes_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setDisplaySceneNodes_void_ev_bool_Function;
						GC.KeepAlive(m_setDisplaySceneNodes_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setDisplaySceneNodes_void_ev_bool(this.NativeObject, m_setDisplaySceneNodes_CallBack_void_ev_bool);
						m_getDisplaySceneNodes_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_getDisplaySceneNodes_ev_bool_Function;
						GC.KeepAlive(m_getDisplaySceneNodes_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getDisplaySceneNodes_ev_bool(this.NativeObject, m_getDisplaySceneNodes_CallBack_ev_bool);
						m_createAnimation_CallBack_CAnimation_EVString_Real = EarthView_World_Graphic_CSceneManager_createAnimation_CAnimation_EVString_Real_Function;
						GC.KeepAlive(m_createAnimation_CallBack_CAnimation_EVString_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createAnimation_CAnimation_EVString_Real(this.NativeObject, m_createAnimation_CallBack_CAnimation_EVString_Real);
						m_getAnimation_CallBack_CAnimation_EVString = EarthView_World_Graphic_CSceneManager_getAnimation_CAnimation_EVString_Function;
						GC.KeepAlive(m_getAnimation_CallBack_CAnimation_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getAnimation_CAnimation_EVString(this.NativeObject, m_getAnimation_CallBack_CAnimation_EVString);
						m_hasAnimation_CallBack_ev_bool_EVString = EarthView_World_Graphic_CSceneManager_hasAnimation_ev_bool_EVString_Function;
						GC.KeepAlive(m_hasAnimation_CallBack_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasAnimation_ev_bool_EVString(this.NativeObject, m_hasAnimation_CallBack_ev_bool_EVString);
						m_destroyAnimation_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_destroyAnimation_void_EVString_Function;
						GC.KeepAlive(m_destroyAnimation_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAnimation_void_EVString(this.NativeObject, m_destroyAnimation_CallBack_void_EVString);
						m_destroyAllAnimations_CallBack_void = EarthView_World_Graphic_CSceneManager_destroyAllAnimations_void_Function;
						GC.KeepAlive(m_destroyAllAnimations_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllAnimations_void(this.NativeObject, m_destroyAllAnimations_CallBack_void);
						m_createAnimationState_CallBack_CAnimationState_EVString = EarthView_World_Graphic_CSceneManager_createAnimationState_CAnimationState_EVString_Function;
						GC.KeepAlive(m_createAnimationState_CallBack_CAnimationState_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createAnimationState_CAnimationState_EVString(this.NativeObject, m_createAnimationState_CallBack_CAnimationState_EVString);
						m_getAnimationState_CallBack_CAnimationState_EVString = EarthView_World_Graphic_CSceneManager_getAnimationState_CAnimationState_EVString_Function;
						GC.KeepAlive(m_getAnimationState_CallBack_CAnimationState_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getAnimationState_CAnimationState_EVString(this.NativeObject, m_getAnimationState_CallBack_CAnimationState_EVString);
						m_hasAnimationState_CallBack_ev_bool_EVString = EarthView_World_Graphic_CSceneManager_hasAnimationState_ev_bool_EVString_Function;
						GC.KeepAlive(m_hasAnimationState_CallBack_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasAnimationState_ev_bool_EVString(this.NativeObject, m_hasAnimationState_CallBack_ev_bool_EVString);
						m_destroyAnimationState_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_destroyAnimationState_void_EVString_Function;
						GC.KeepAlive(m_destroyAnimationState_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAnimationState_void_EVString(this.NativeObject, m_destroyAnimationState_CallBack_void_EVString);
						m_destroyAllAnimationStates_CallBack_void = EarthView_World_Graphic_CSceneManager_destroyAllAnimationStates_void_Function;
						GC.KeepAlive(m_destroyAllAnimationStates_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllAnimationStates_void(this.NativeObject, m_destroyAllAnimationStates_CallBack_void);
						m_manualRender_CallBack_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool = EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool_Function;
						GC.KeepAlive(m_manualRender_CallBack_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool(this.NativeObject, m_manualRender_CallBack_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_ev_bool);
						m_manualRender_CallBack_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4 = EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4_Function;
						GC.KeepAlive(m_manualRender_CallBack_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4(this.NativeObject, m_manualRender_CallBack_void_CRenderOperation_CPass_CViewport_CMatrix4_CMatrix4_CMatrix4);
						m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList = EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList_Function;
						GC.KeepAlive(m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList(this.NativeObject, m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_LightList);
						m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool = EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool_Function;
						GC.KeepAlive(m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool(this.NativeObject, m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_ev_bool);
						m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool = EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool_Function;
						GC.KeepAlive(m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool(this.NativeObject, m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_ev_bool);
						m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool = EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool_Function;
						GC.KeepAlive(m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool(this.NativeObject, m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_ev_bool);
						m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4 = EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4_Function;
						GC.KeepAlive(m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_manualRender_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4(this.NativeObject, m_manualRender_CallBack_void_CRenderable_CPass_CViewport_CMatrix4_CMatrix4);
						m_getRenderQueue_CallBack_CRenderQueue = EarthView_World_Graphic_CSceneManager_getRenderQueue_CRenderQueue_Function;
						GC.KeepAlive(m_getRenderQueue_CallBack_CRenderQueue);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getRenderQueue_CRenderQueue(this.NativeObject, m_getRenderQueue_CallBack_CRenderQueue);
						m_addRenderQueueListener_CallBack_void_CRenderQueueListener = EarthView_World_Graphic_CSceneManager_addRenderQueueListener_void_CRenderQueueListener_Function;
						GC.KeepAlive(m_addRenderQueueListener_CallBack_void_CRenderQueueListener);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_addRenderQueueListener_void_CRenderQueueListener(this.NativeObject, m_addRenderQueueListener_CallBack_void_CRenderQueueListener);
						m_removeRenderQueueListener_CallBack_void_CRenderQueueListener = EarthView_World_Graphic_CSceneManager_removeRenderQueueListener_void_CRenderQueueListener_Function;
						GC.KeepAlive(m_removeRenderQueueListener_CallBack_void_CRenderQueueListener);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_removeRenderQueueListener_void_CRenderQueueListener(this.NativeObject, m_removeRenderQueueListener_CallBack_void_CRenderQueueListener);
						m_addRenderObjectListener_CallBack_void_CRenderObjectListener = EarthView_World_Graphic_CSceneManager_addRenderObjectListener_void_CRenderObjectListener_Function;
						GC.KeepAlive(m_addRenderObjectListener_CallBack_void_CRenderObjectListener);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_addRenderObjectListener_void_CRenderObjectListener(this.NativeObject, m_addRenderObjectListener_CallBack_void_CRenderObjectListener);
						m_removeRenderObjectListener_CallBack_void_CRenderObjectListener = EarthView_World_Graphic_CSceneManager_removeRenderObjectListener_void_CRenderObjectListener_Function;
						GC.KeepAlive(m_removeRenderObjectListener_CallBack_void_CRenderObjectListener);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_removeRenderObjectListener_void_CRenderObjectListener(this.NativeObject, m_removeRenderObjectListener_CallBack_void_CRenderObjectListener);
						m_addSpecialCaseRenderQueue_CallBack_void_ev_uint8 = EarthView_World_Graphic_CSceneManager_addSpecialCaseRenderQueue_void_ev_uint8_Function;
						GC.KeepAlive(m_addSpecialCaseRenderQueue_CallBack_void_ev_uint8);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_addSpecialCaseRenderQueue_void_ev_uint8(this.NativeObject, m_addSpecialCaseRenderQueue_CallBack_void_ev_uint8);
						m_removeSpecialCaseRenderQueue_CallBack_void_ev_uint8 = EarthView_World_Graphic_CSceneManager_removeSpecialCaseRenderQueue_void_ev_uint8_Function;
						GC.KeepAlive(m_removeSpecialCaseRenderQueue_CallBack_void_ev_uint8);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_removeSpecialCaseRenderQueue_void_ev_uint8(this.NativeObject, m_removeSpecialCaseRenderQueue_CallBack_void_ev_uint8);
						m_clearSpecialCaseRenderQueues_CallBack_void = EarthView_World_Graphic_CSceneManager_clearSpecialCaseRenderQueues_void_Function;
						GC.KeepAlive(m_clearSpecialCaseRenderQueues_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_clearSpecialCaseRenderQueues_void(this.NativeObject, m_clearSpecialCaseRenderQueues_CallBack_void);
						m_setSpecialCaseRenderQueueMode_CallBack_void_SpecialCaseRenderQueueMode = EarthView_World_Graphic_CSceneManager_setSpecialCaseRenderQueueMode_void_SpecialCaseRenderQueueMode_Function;
						GC.KeepAlive(m_setSpecialCaseRenderQueueMode_CallBack_void_SpecialCaseRenderQueueMode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setSpecialCaseRenderQueueMode_void_SpecialCaseRenderQueueMode(this.NativeObject, m_setSpecialCaseRenderQueueMode_CallBack_void_SpecialCaseRenderQueueMode);
						m_getSpecialCaseRenderQueueMode_CallBack_SpecialCaseRenderQueueMode = EarthView_World_Graphic_CSceneManager_getSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode_Function;
						GC.KeepAlive(m_getSpecialCaseRenderQueueMode_CallBack_SpecialCaseRenderQueueMode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getSpecialCaseRenderQueueMode_SpecialCaseRenderQueueMode(this.NativeObject, m_getSpecialCaseRenderQueueMode_CallBack_SpecialCaseRenderQueueMode);
						m_isRenderQueueToBeProcessed_CallBack_ev_bool_ev_uint8 = EarthView_World_Graphic_CSceneManager_isRenderQueueToBeProcessed_ev_bool_ev_uint8_Function;
						GC.KeepAlive(m_isRenderQueueToBeProcessed_CallBack_ev_bool_ev_uint8);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isRenderQueueToBeProcessed_ev_bool_ev_uint8(this.NativeObject, m_isRenderQueueToBeProcessed_CallBack_ev_bool_ev_uint8);
						m_setWorldGeometryRenderQueue_CallBack_void_ev_uint8 = EarthView_World_Graphic_CSceneManager_setWorldGeometryRenderQueue_void_ev_uint8_Function;
						GC.KeepAlive(m_setWorldGeometryRenderQueue_CallBack_void_ev_uint8);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setWorldGeometryRenderQueue_void_ev_uint8(this.NativeObject, m_setWorldGeometryRenderQueue_CallBack_void_ev_uint8);
						m_getWorldGeometryRenderQueue_CallBack_ev_uint8 = EarthView_World_Graphic_CSceneManager_getWorldGeometryRenderQueue_ev_uint8_Function;
						GC.KeepAlive(m_getWorldGeometryRenderQueue_CallBack_ev_uint8);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getWorldGeometryRenderQueue_ev_uint8(this.NativeObject, m_getWorldGeometryRenderQueue_CallBack_ev_uint8);
						m_showBoundingBoxes_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_showBoundingBoxes_void_ev_bool_Function;
						GC.KeepAlive(m_showBoundingBoxes_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_showBoundingBoxes_void_ev_bool(this.NativeObject, m_showBoundingBoxes_CallBack_void_ev_bool);
						m_getShowBoundingBoxes_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_getShowBoundingBoxes_ev_bool_Function;
						GC.KeepAlive(m_getShowBoundingBoxes_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShowBoundingBoxes_ev_bool(this.NativeObject, m_getShowBoundingBoxes_CallBack_ev_bool);
						m__notifyAutotrackingSceneNode_CallBack_void_CSceneNode_ev_bool = EarthView_World_Graphic_CSceneManager__notifyAutotrackingSceneNode_void_CSceneNode_ev_bool_Function;
						GC.KeepAlive(m__notifyAutotrackingSceneNode_CallBack_void_CSceneNode_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__notifyAutotrackingSceneNode_void_CSceneNode_ev_bool(this.NativeObject, m__notifyAutotrackingSceneNode_CallBack_void_CSceneNode_ev_bool);
						m_createAABBQuery_CallBack_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_ev_uint32 = EarthView_World_Graphic_CSceneManager_createAABBQuery_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_ev_uint32_Function;
						GC.KeepAlive(m_createAABBQuery_CallBack_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createAABBQuery_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_ev_uint32(this.NativeObject, m_createAABBQuery_CallBack_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_ev_uint32);
						m_createAABBQuery_CallBack_CAxisAlignedBoxSceneQuery_CAxisAlignedBox = EarthView_World_Graphic_CSceneManager_createAABBQuery_CAxisAlignedBoxSceneQuery_CAxisAlignedBox_Function;
						GC.KeepAlive(m_createAABBQuery_CallBack_CAxisAlignedBoxSceneQuery_CAxisAlignedBox);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createAABBQuery_CAxisAlignedBoxSceneQuery_CAxisAlignedBox(this.NativeObject, m_createAABBQuery_CallBack_CAxisAlignedBoxSceneQuery_CAxisAlignedBox);
						m_createSphereQuery_CallBack_CSphereSceneQuery_CSphere_ev_uint32 = EarthView_World_Graphic_CSceneManager_createSphereQuery_CSphereSceneQuery_CSphere_ev_uint32_Function;
						GC.KeepAlive(m_createSphereQuery_CallBack_CSphereSceneQuery_CSphere_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createSphereQuery_CSphereSceneQuery_CSphere_ev_uint32(this.NativeObject, m_createSphereQuery_CallBack_CSphereSceneQuery_CSphere_ev_uint32);
						m_createSphereQuery_CallBack_CSphereSceneQuery_CSphere = EarthView_World_Graphic_CSceneManager_createSphereQuery_CSphereSceneQuery_CSphere_Function;
						GC.KeepAlive(m_createSphereQuery_CallBack_CSphereSceneQuery_CSphere);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createSphereQuery_CSphereSceneQuery_CSphere(this.NativeObject, m_createSphereQuery_CallBack_CSphereSceneQuery_CSphere);
						m_createPlaneBoundedVolumeQuery_CallBack_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_ev_uint32 = EarthView_World_Graphic_CSceneManager_createPlaneBoundedVolumeQuery_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_ev_uint32_Function;
						GC.KeepAlive(m_createPlaneBoundedVolumeQuery_CallBack_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createPlaneBoundedVolumeQuery_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_ev_uint32(this.NativeObject, m_createPlaneBoundedVolumeQuery_CallBack_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_ev_uint32);
						m_createPlaneBoundedVolumeQuery_CallBack_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList = EarthView_World_Graphic_CSceneManager_createPlaneBoundedVolumeQuery_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList_Function;
						GC.KeepAlive(m_createPlaneBoundedVolumeQuery_CallBack_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createPlaneBoundedVolumeQuery_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList(this.NativeObject, m_createPlaneBoundedVolumeQuery_CallBack_CPlaneBoundedVolumeListSceneQuery_PlaneBoundedVolumeList);
						m_createRayQuery_CallBack_CRaySceneQuery_CRay_ev_uint32 = EarthView_World_Graphic_CSceneManager_createRayQuery_CRaySceneQuery_CRay_ev_uint32_Function;
						GC.KeepAlive(m_createRayQuery_CallBack_CRaySceneQuery_CRay_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createRayQuery_CRaySceneQuery_CRay_ev_uint32(this.NativeObject, m_createRayQuery_CallBack_CRaySceneQuery_CRay_ev_uint32);
						m_createRayQuery_CallBack_CRaySceneQuery_CRay = EarthView_World_Graphic_CSceneManager_createRayQuery_CRaySceneQuery_CRay_Function;
						GC.KeepAlive(m_createRayQuery_CallBack_CRaySceneQuery_CRay);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createRayQuery_CRaySceneQuery_CRay(this.NativeObject, m_createRayQuery_CallBack_CRaySceneQuery_CRay);
						m_createIntersectionQuery_CallBack_CIntersectionSceneQuery_ev_uint32 = EarthView_World_Graphic_CSceneManager_createIntersectionQuery_CIntersectionSceneQuery_ev_uint32_Function;
						GC.KeepAlive(m_createIntersectionQuery_CallBack_CIntersectionSceneQuery_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createIntersectionQuery_CIntersectionSceneQuery_ev_uint32(this.NativeObject, m_createIntersectionQuery_CallBack_CIntersectionSceneQuery_ev_uint32);
						m_createIntersectionQuery_CallBack_CIntersectionSceneQuery = EarthView_World_Graphic_CSceneManager_createIntersectionQuery_CIntersectionSceneQuery_Function;
						GC.KeepAlive(m_createIntersectionQuery_CallBack_CIntersectionSceneQuery);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createIntersectionQuery_CIntersectionSceneQuery(this.NativeObject, m_createIntersectionQuery_CallBack_CIntersectionSceneQuery);
						m_destroyQuery_CallBack_void_CSceneQuery = EarthView_World_Graphic_CSceneManager_destroyQuery_void_CSceneQuery_Function;
						GC.KeepAlive(m_destroyQuery_CallBack_void_CSceneQuery);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyQuery_void_CSceneQuery(this.NativeObject, m_destroyQuery_CallBack_void_CSceneQuery);
						m_setShadowTechnique_CallBack_void_ShadowTechnique = EarthView_World_Graphic_CSceneManager_setShadowTechnique_void_ShadowTechnique_Function;
						GC.KeepAlive(m_setShadowTechnique_CallBack_void_ShadowTechnique);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTechnique_void_ShadowTechnique(this.NativeObject, m_setShadowTechnique_CallBack_void_ShadowTechnique);
						m_getShadowTechnique_CallBack_ShadowTechnique = EarthView_World_Graphic_CSceneManager_getShadowTechnique_ShadowTechnique_Function;
						GC.KeepAlive(m_getShadowTechnique_CallBack_ShadowTechnique);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowTechnique_ShadowTechnique(this.NativeObject, m_getShadowTechnique_CallBack_ShadowTechnique);
						m_setShowDebugShadows_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setShowDebugShadows_void_ev_bool_Function;
						GC.KeepAlive(m_setShowDebugShadows_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShowDebugShadows_void_ev_bool(this.NativeObject, m_setShowDebugShadows_CallBack_void_ev_bool);
						m_getShowDebugShadows_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_getShowDebugShadows_ev_bool_Function;
						GC.KeepAlive(m_getShowDebugShadows_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShowDebugShadows_ev_bool(this.NativeObject, m_getShowDebugShadows_CallBack_ev_bool);
						m_setShadowColour_CallBack_void_CColourValue = EarthView_World_Graphic_CSceneManager_setShadowColour_void_CColourValue_Function;
						GC.KeepAlive(m_setShadowColour_CallBack_void_CColourValue);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowColour_void_CColourValue(this.NativeObject, m_setShadowColour_CallBack_void_CColourValue);
						m_getShadowColour_CallBack_CColourValue = EarthView_World_Graphic_CSceneManager_getShadowColour_CColourValue_Function;
						GC.KeepAlive(m_getShadowColour_CallBack_CColourValue);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowColour_CColourValue(this.NativeObject, m_getShadowColour_CallBack_CColourValue);
						m_setShadowDirectionalLightExtrusionDistance_CallBack_void_Real = EarthView_World_Graphic_CSceneManager_setShadowDirectionalLightExtrusionDistance_void_Real_Function;
						GC.KeepAlive(m_setShadowDirectionalLightExtrusionDistance_CallBack_void_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowDirectionalLightExtrusionDistance_void_Real(this.NativeObject, m_setShadowDirectionalLightExtrusionDistance_CallBack_void_Real);
						m_getShadowDirectionalLightExtrusionDistance_CallBack_Real = EarthView_World_Graphic_CSceneManager_getShadowDirectionalLightExtrusionDistance_Real_Function;
						GC.KeepAlive(m_getShadowDirectionalLightExtrusionDistance_CallBack_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowDirectionalLightExtrusionDistance_Real(this.NativeObject, m_getShadowDirectionalLightExtrusionDistance_CallBack_Real);
						m_setShadowColorRRatio_CallBack_void_Real = EarthView_World_Graphic_CSceneManager_setShadowColorRRatio_void_Real_Function;
						GC.KeepAlive(m_setShadowColorRRatio_CallBack_void_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowColorRRatio_void_Real(this.NativeObject, m_setShadowColorRRatio_CallBack_void_Real);
						m_setShadowColorGRatio_CallBack_void_Real = EarthView_World_Graphic_CSceneManager_setShadowColorGRatio_void_Real_Function;
						GC.KeepAlive(m_setShadowColorGRatio_CallBack_void_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowColorGRatio_void_Real(this.NativeObject, m_setShadowColorGRatio_CallBack_void_Real);
						m_setShadowColorBRatio_CallBack_void_Real = EarthView_World_Graphic_CSceneManager_setShadowColorBRatio_void_Real_Function;
						GC.KeepAlive(m_setShadowColorBRatio_CallBack_void_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowColorBRatio_void_Real(this.NativeObject, m_setShadowColorBRatio_CallBack_void_Real);
						m_getShadowColorRRatio_CallBack_Real = EarthView_World_Graphic_CSceneManager_getShadowColorRRatio_Real_Function;
						GC.KeepAlive(m_getShadowColorRRatio_CallBack_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowColorRRatio_Real(this.NativeObject, m_getShadowColorRRatio_CallBack_Real);
						m_getShadowColorGRatio_CallBack_Real = EarthView_World_Graphic_CSceneManager_getShadowColorGRatio_Real_Function;
						GC.KeepAlive(m_getShadowColorGRatio_CallBack_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowColorGRatio_Real(this.NativeObject, m_getShadowColorGRatio_CallBack_Real);
						m_getShadowColorBRatio_CallBack_Real = EarthView_World_Graphic_CSceneManager_getShadowColorBRatio_Real_Function;
						GC.KeepAlive(m_getShadowColorBRatio_CallBack_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowColorBRatio_Real(this.NativeObject, m_getShadowColorBRatio_CallBack_Real);
						m_setShadowFarDistance_CallBack_void_Real = EarthView_World_Graphic_CSceneManager_setShadowFarDistance_void_Real_Function;
						GC.KeepAlive(m_setShadowFarDistance_CallBack_void_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowFarDistance_void_Real(this.NativeObject, m_setShadowFarDistance_CallBack_void_Real);
						m_getShadowFarDistance_CallBack_Real = EarthView_World_Graphic_CSceneManager_getShadowFarDistance_Real_Function;
						GC.KeepAlive(m_getShadowFarDistance_CallBack_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowFarDistance_Real(this.NativeObject, m_getShadowFarDistance_CallBack_Real);
						m_getShadowFarDistanceSquared_CallBack_Real = EarthView_World_Graphic_CSceneManager_getShadowFarDistanceSquared_Real_Function;
						GC.KeepAlive(m_getShadowFarDistanceSquared_CallBack_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowFarDistanceSquared_Real(this.NativeObject, m_getShadowFarDistanceSquared_CallBack_Real);
						m_setShadowIndexBufferSize_CallBack_void_ev_size_t = EarthView_World_Graphic_CSceneManager_setShadowIndexBufferSize_void_ev_size_t_Function;
						GC.KeepAlive(m_setShadowIndexBufferSize_CallBack_void_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowIndexBufferSize_void_ev_size_t(this.NativeObject, m_setShadowIndexBufferSize_CallBack_void_ev_size_t);
						m_getShadowIndexBufferSize_CallBack_ev_size_t = EarthView_World_Graphic_CSceneManager_getShadowIndexBufferSize_ev_size_t_Function;
						GC.KeepAlive(m_getShadowIndexBufferSize_CallBack_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowIndexBufferSize_ev_size_t(this.NativeObject, m_getShadowIndexBufferSize_CallBack_ev_size_t);
						m_setShadowTextureSize_CallBack_void_ev_uint16 = EarthView_World_Graphic_CSceneManager_setShadowTextureSize_void_ev_uint16_Function;
						GC.KeepAlive(m_setShadowTextureSize_CallBack_void_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureSize_void_ev_uint16(this.NativeObject, m_setShadowTextureSize_CallBack_void_ev_uint16);
						m_setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat = EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_Function;
						GC.KeepAlive(m_setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat(this.NativeObject, m_setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat);
						m_setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16 = EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_Function;
						GC.KeepAlive(m_setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16(this.NativeObject, m_setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16);
						m_setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16 = EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_Function;
						GC.KeepAlive(m_setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(this.NativeObject, m_setShadowTextureConfig_CallBack_void_ev_size_t_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16);
						m_setShadowTextureConfig_CallBack_void_ev_size_t_ShadowTextureConfig = EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ShadowTextureConfig_Function;
						GC.KeepAlive(m_setShadowTextureConfig_CallBack_void_ev_size_t_ShadowTextureConfig);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureConfig_void_ev_size_t_ShadowTextureConfig(this.NativeObject, m_setShadowTextureConfig_CallBack_void_ev_size_t_ShadowTextureConfig);
						m_setShadowTexturePixelFormat_CallBack_void_PixelFormat = EarthView_World_Graphic_CSceneManager_setShadowTexturePixelFormat_void_PixelFormat_Function;
						GC.KeepAlive(m_setShadowTexturePixelFormat_CallBack_void_PixelFormat);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTexturePixelFormat_void_PixelFormat(this.NativeObject, m_setShadowTexturePixelFormat_CallBack_void_PixelFormat);
						m_setShadowTextureFSAA_CallBack_void_ev_uint16 = EarthView_World_Graphic_CSceneManager_setShadowTextureFSAA_void_ev_uint16_Function;
						GC.KeepAlive(m_setShadowTextureFSAA_CallBack_void_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureFSAA_void_ev_uint16(this.NativeObject, m_setShadowTextureFSAA_CallBack_void_ev_uint16);
						m_setShadowTextureCount_CallBack_void_ev_size_t = EarthView_World_Graphic_CSceneManager_setShadowTextureCount_void_ev_size_t_Function;
						GC.KeepAlive(m_setShadowTextureCount_CallBack_void_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureCount_void_ev_size_t(this.NativeObject, m_setShadowTextureCount_CallBack_void_ev_size_t);
						m_setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16 = EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_Function;
						GC.KeepAlive(m_setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16(this.NativeObject, m_setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16);
						m_setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat = EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_Function;
						GC.KeepAlive(m_setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat(this.NativeObject, m_setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat);
						m_setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16 = EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_Function;
						GC.KeepAlive(m_setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16(this.NativeObject, m_setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16);
						m_setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16 = EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16_Function;
						GC.KeepAlive(m_setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureSettings_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16(this.NativeObject, m_setShadowTextureSettings_CallBack_void_ev_uint16_ev_uint16_PixelFormat_ev_uint16_ev_uint16);
						m_getShadowTexture_CallBack_CTexturePtr_ev_size_t = EarthView_World_Graphic_CSceneManager_getShadowTexture_CTexturePtr_ev_size_t_Function;
						GC.KeepAlive(m_getShadowTexture_CallBack_CTexturePtr_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowTexture_CTexturePtr_ev_size_t(this.NativeObject, m_getShadowTexture_CallBack_CTexturePtr_ev_size_t);
						m_setShadowDirLightTextureOffset_CallBack_void_Real = EarthView_World_Graphic_CSceneManager_setShadowDirLightTextureOffset_void_Real_Function;
						GC.KeepAlive(m_setShadowDirLightTextureOffset_CallBack_void_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowDirLightTextureOffset_void_Real(this.NativeObject, m_setShadowDirLightTextureOffset_CallBack_void_Real);
						m_getShadowDirLightTextureOffset_CallBack_Real = EarthView_World_Graphic_CSceneManager_getShadowDirLightTextureOffset_Real_Function;
						GC.KeepAlive(m_getShadowDirLightTextureOffset_CallBack_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowDirLightTextureOffset_Real(this.NativeObject, m_getShadowDirLightTextureOffset_CallBack_Real);
						m_setShadowTextureFadeStart_CallBack_void_Real = EarthView_World_Graphic_CSceneManager_setShadowTextureFadeStart_void_Real_Function;
						GC.KeepAlive(m_setShadowTextureFadeStart_CallBack_void_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureFadeStart_void_Real(this.NativeObject, m_setShadowTextureFadeStart_CallBack_void_Real);
						m_setShadowTextureFadeEnd_CallBack_void_Real = EarthView_World_Graphic_CSceneManager_setShadowTextureFadeEnd_void_Real_Function;
						GC.KeepAlive(m_setShadowTextureFadeEnd_CallBack_void_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureFadeEnd_void_Real(this.NativeObject, m_setShadowTextureFadeEnd_CallBack_void_Real);
						m_setShadowTextureSelfShadow_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setShadowTextureSelfShadow_void_ev_bool_Function;
						GC.KeepAlive(m_setShadowTextureSelfShadow_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureSelfShadow_void_ev_bool(this.NativeObject, m_setShadowTextureSelfShadow_CallBack_void_ev_bool);
						m_getShadowTextureSelfShadow_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_getShadowTextureSelfShadow_ev_bool_Function;
						GC.KeepAlive(m_getShadowTextureSelfShadow_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowTextureSelfShadow_ev_bool(this.NativeObject, m_getShadowTextureSelfShadow_CallBack_ev_bool);
						m_setShadowTextureCasterMaterial_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_setShadowTextureCasterMaterial_void_EVString_Function;
						GC.KeepAlive(m_setShadowTextureCasterMaterial_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureCasterMaterial_void_EVString(this.NativeObject, m_setShadowTextureCasterMaterial_CallBack_void_EVString);
						m_setShadowTextureReceiverMaterial_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_setShadowTextureReceiverMaterial_void_EVString_Function;
						GC.KeepAlive(m_setShadowTextureReceiverMaterial_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowTextureReceiverMaterial_void_EVString(this.NativeObject, m_setShadowTextureReceiverMaterial_CallBack_void_EVString);
						m_setShadowCasterRenderBackFaces_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setShadowCasterRenderBackFaces_void_ev_bool_Function;
						GC.KeepAlive(m_setShadowCasterRenderBackFaces_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowCasterRenderBackFaces_void_ev_bool(this.NativeObject, m_setShadowCasterRenderBackFaces_CallBack_void_ev_bool);
						m_getShadowCasterRenderBackFaces_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_getShadowCasterRenderBackFaces_ev_bool_Function;
						GC.KeepAlive(m_getShadowCasterRenderBackFaces_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowCasterRenderBackFaces_ev_bool(this.NativeObject, m_getShadowCasterRenderBackFaces_CallBack_ev_bool);
						m_setShadowCameraSetup_CallBack_void_ShadowCameraSetupPtr = EarthView_World_Graphic_CSceneManager_setShadowCameraSetup_void_ShadowCameraSetupPtr_Function;
						GC.KeepAlive(m_setShadowCameraSetup_CallBack_void_ShadowCameraSetupPtr);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowCameraSetup_void_ShadowCameraSetupPtr(this.NativeObject, m_setShadowCameraSetup_CallBack_void_ShadowCameraSetupPtr);
						m_getShadowCameraSetup_CallBack_ShadowCameraSetupPtr = EarthView_World_Graphic_CSceneManager_getShadowCameraSetup_ShadowCameraSetupPtr_Function;
						GC.KeepAlive(m_getShadowCameraSetup_CallBack_ShadowCameraSetupPtr);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowCameraSetup_ShadowCameraSetupPtr(this.NativeObject, m_getShadowCameraSetup_CallBack_ShadowCameraSetupPtr);
						m_setShadowUseInfiniteFarPlane_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setShadowUseInfiniteFarPlane_void_ev_bool_Function;
						GC.KeepAlive(m_setShadowUseInfiniteFarPlane_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowUseInfiniteFarPlane_void_ev_bool(this.NativeObject, m_setShadowUseInfiniteFarPlane_CallBack_void_ev_bool);
						m_isShadowTechniqueStencilBased_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_isShadowTechniqueStencilBased_ev_bool_Function;
						GC.KeepAlive(m_isShadowTechniqueStencilBased_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isShadowTechniqueStencilBased_ev_bool(this.NativeObject, m_isShadowTechniqueStencilBased_CallBack_ev_bool);
						m_isShadowTechniqueTextureBased_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_isShadowTechniqueTextureBased_ev_bool_Function;
						GC.KeepAlive(m_isShadowTechniqueTextureBased_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isShadowTechniqueTextureBased_ev_bool(this.NativeObject, m_isShadowTechniqueTextureBased_CallBack_ev_bool);
						m_isShadowTechniqueModulative_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_isShadowTechniqueModulative_ev_bool_Function;
						GC.KeepAlive(m_isShadowTechniqueModulative_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isShadowTechniqueModulative_ev_bool(this.NativeObject, m_isShadowTechniqueModulative_CallBack_ev_bool);
						m_isShadowTechniqueAdditive_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_isShadowTechniqueAdditive_ev_bool_Function;
						GC.KeepAlive(m_isShadowTechniqueAdditive_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isShadowTechniqueAdditive_ev_bool(this.NativeObject, m_isShadowTechniqueAdditive_CallBack_ev_bool);
						m_isShadowTechniqueIntegrated_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_isShadowTechniqueIntegrated_ev_bool_Function;
						GC.KeepAlive(m_isShadowTechniqueIntegrated_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isShadowTechniqueIntegrated_ev_bool(this.NativeObject, m_isShadowTechniqueIntegrated_CallBack_ev_bool);
						m_isShadowTechniqueInUse_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_isShadowTechniqueInUse_ev_bool_Function;
						GC.KeepAlive(m_isShadowTechniqueInUse_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isShadowTechniqueInUse_ev_bool(this.NativeObject, m_isShadowTechniqueInUse_CallBack_ev_bool);
						m_setShadowUseLightClipPlanes_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setShadowUseLightClipPlanes_void_ev_bool_Function;
						GC.KeepAlive(m_setShadowUseLightClipPlanes_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setShadowUseLightClipPlanes_void_ev_bool(this.NativeObject, m_setShadowUseLightClipPlanes_CallBack_void_ev_bool);
						m_getShadowUseLightClipPlanes_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_getShadowUseLightClipPlanes_ev_bool_Function;
						GC.KeepAlive(m_getShadowUseLightClipPlanes_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getShadowUseLightClipPlanes_ev_bool(this.NativeObject, m_getShadowUseLightClipPlanes_CallBack_ev_bool);
						m__setActiveCompositorChain_CallBack_void_CCompositorChain = EarthView_World_Graphic_CSceneManager__setActiveCompositorChain_void_CCompositorChain_Function;
						GC.KeepAlive(m__setActiveCompositorChain_CallBack_void_CCompositorChain);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setActiveCompositorChain_void_CCompositorChain(this.NativeObject, m__setActiveCompositorChain_CallBack_void_CCompositorChain);
						m_setLateMaterialResolving_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setLateMaterialResolving_void_ev_bool_Function;
						GC.KeepAlive(m_setLateMaterialResolving_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setLateMaterialResolving_void_ev_bool(this.NativeObject, m_setLateMaterialResolving_CallBack_void_ev_bool);
						m_isLateMaterialResolving_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_isLateMaterialResolving_ev_bool_Function;
						GC.KeepAlive(m_isLateMaterialResolving_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_isLateMaterialResolving_ev_bool(this.NativeObject, m_isLateMaterialResolving_CallBack_ev_bool);
						m__getActiveCompositorChain_CallBack_CCompositorChain = EarthView_World_Graphic_CSceneManager__getActiveCompositorChain_CCompositorChain_Function;
						GC.KeepAlive(m__getActiveCompositorChain_CallBack_CCompositorChain);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__getActiveCompositorChain_CCompositorChain(this.NativeObject, m__getActiveCompositorChain_CallBack_CCompositorChain);
						m_addListener_CallBack_void_CSceneManagerListener = EarthView_World_Graphic_CSceneManager_addListener_void_CSceneManagerListener_Function;
						GC.KeepAlive(m_addListener_CallBack_void_CSceneManagerListener);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_addListener_void_CSceneManagerListener(this.NativeObject, m_addListener_CallBack_void_CSceneManagerListener);
						m_removeListener_CallBack_void_CSceneManagerListener = EarthView_World_Graphic_CSceneManager_removeListener_void_CSceneManagerListener_Function;
						GC.KeepAlive(m_removeListener_CallBack_void_CSceneManagerListener);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_removeListener_void_CSceneManagerListener(this.NativeObject, m_removeListener_CallBack_void_CSceneManagerListener);
						m_existListener_CallBack_ev_bool_CSceneManagerListener = EarthView_World_Graphic_CSceneManager_existListener_ev_bool_CSceneManagerListener_Function;
						GC.KeepAlive(m_existListener_CallBack_ev_bool_CSceneManagerListener);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_existListener_ev_bool_CSceneManagerListener(this.NativeObject, m_existListener_CallBack_ev_bool_CSceneManagerListener);
						m_createStaticGeometry_CallBack_CStaticGeometry_EVString = EarthView_World_Graphic_CSceneManager_createStaticGeometry_CStaticGeometry_EVString_Function;
						GC.KeepAlive(m_createStaticGeometry_CallBack_CStaticGeometry_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createStaticGeometry_CStaticGeometry_EVString(this.NativeObject, m_createStaticGeometry_CallBack_CStaticGeometry_EVString);
						m_getStaticGeometry_CallBack_CStaticGeometry_EVString = EarthView_World_Graphic_CSceneManager_getStaticGeometry_CStaticGeometry_EVString_Function;
						GC.KeepAlive(m_getStaticGeometry_CallBack_CStaticGeometry_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getStaticGeometry_CStaticGeometry_EVString(this.NativeObject, m_getStaticGeometry_CallBack_CStaticGeometry_EVString);
						m_hasStaticGeometry_CallBack_ev_bool_EVString = EarthView_World_Graphic_CSceneManager_hasStaticGeometry_ev_bool_EVString_Function;
						GC.KeepAlive(m_hasStaticGeometry_CallBack_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasStaticGeometry_ev_bool_EVString(this.NativeObject, m_hasStaticGeometry_CallBack_ev_bool_EVString);
						m_destroyStaticGeometry_CallBack_void_CStaticGeometry = EarthView_World_Graphic_CSceneManager_destroyStaticGeometry_void_CStaticGeometry_Function;
						GC.KeepAlive(m_destroyStaticGeometry_CallBack_void_CStaticGeometry);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyStaticGeometry_void_CStaticGeometry(this.NativeObject, m_destroyStaticGeometry_CallBack_void_CStaticGeometry);
						m_destroyStaticGeometry_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_destroyStaticGeometry_void_EVString_Function;
						GC.KeepAlive(m_destroyStaticGeometry_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyStaticGeometry_void_EVString(this.NativeObject, m_destroyStaticGeometry_CallBack_void_EVString);
						m_destroyAllStaticGeometry_CallBack_void = EarthView_World_Graphic_CSceneManager_destroyAllStaticGeometry_void_Function;
						GC.KeepAlive(m_destroyAllStaticGeometry_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllStaticGeometry_void(this.NativeObject, m_destroyAllStaticGeometry_CallBack_void);
						m_createInstancedGeometry_CallBack_CInstancedGeometry_EVString = EarthView_World_Graphic_CSceneManager_createInstancedGeometry_CInstancedGeometry_EVString_Function;
						GC.KeepAlive(m_createInstancedGeometry_CallBack_CInstancedGeometry_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createInstancedGeometry_CInstancedGeometry_EVString(this.NativeObject, m_createInstancedGeometry_CallBack_CInstancedGeometry_EVString);
						m_getInstancedGeometry_CallBack_CInstancedGeometry_EVString = EarthView_World_Graphic_CSceneManager_getInstancedGeometry_CInstancedGeometry_EVString_Function;
						GC.KeepAlive(m_getInstancedGeometry_CallBack_CInstancedGeometry_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getInstancedGeometry_CInstancedGeometry_EVString(this.NativeObject, m_getInstancedGeometry_CallBack_CInstancedGeometry_EVString);
						m_destroyInstancedGeometry_CallBack_void_CInstancedGeometry = EarthView_World_Graphic_CSceneManager_destroyInstancedGeometry_void_CInstancedGeometry_Function;
						GC.KeepAlive(m_destroyInstancedGeometry_CallBack_void_CInstancedGeometry);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyInstancedGeometry_void_CInstancedGeometry(this.NativeObject, m_destroyInstancedGeometry_CallBack_void_CInstancedGeometry);
						m_destroyInstancedGeometry_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_destroyInstancedGeometry_void_EVString_Function;
						GC.KeepAlive(m_destroyInstancedGeometry_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyInstancedGeometry_void_EVString(this.NativeObject, m_destroyInstancedGeometry_CallBack_void_EVString);
						m_destroyAllInstancedGeometry_CallBack_void = EarthView_World_Graphic_CSceneManager_destroyAllInstancedGeometry_void_Function;
						GC.KeepAlive(m_destroyAllInstancedGeometry_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllInstancedGeometry_void(this.NativeObject, m_destroyAllInstancedGeometry_CallBack_void);
						m_createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16 = EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_Function;
						GC.KeepAlive(m_createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(this.NativeObject, m_createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16);
						m_createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16 = EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_Function;
						GC.KeepAlive(m_createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(this.NativeObject, m_createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16);
						m_createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t = EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t_Function;
						GC.KeepAlive(m_createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createInstanceManager_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t(this.NativeObject, m_createInstanceManager_CallBack_CInstanceManager_EVString_EVString_EVString_InstancingTechnique_ev_size_t);
						m_getInstanceManager_CallBack_CInstanceManager_EVString = EarthView_World_Graphic_CSceneManager_getInstanceManager_CInstanceManager_EVString_Function;
						GC.KeepAlive(m_getInstanceManager_CallBack_CInstanceManager_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getInstanceManager_CInstanceManager_EVString(this.NativeObject, m_getInstanceManager_CallBack_CInstanceManager_EVString);
						m_hasInstanceManager_CallBack_ev_bool_EVString = EarthView_World_Graphic_CSceneManager_hasInstanceManager_ev_bool_EVString_Function;
						GC.KeepAlive(m_hasInstanceManager_CallBack_ev_bool_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasInstanceManager_ev_bool_EVString(this.NativeObject, m_hasInstanceManager_CallBack_ev_bool_EVString);
						m_destroyInstanceManager_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_destroyInstanceManager_void_EVString_Function;
						GC.KeepAlive(m_destroyInstanceManager_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyInstanceManager_void_EVString(this.NativeObject, m_destroyInstanceManager_CallBack_void_EVString);
						m_destroyInstanceManager_CallBack_void_CInstanceManager = EarthView_World_Graphic_CSceneManager_destroyInstanceManager_void_CInstanceManager_Function;
						GC.KeepAlive(m_destroyInstanceManager_CallBack_void_CInstanceManager);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyInstanceManager_void_CInstanceManager(this.NativeObject, m_destroyInstanceManager_CallBack_void_CInstanceManager);
						m_destroyInstanceManagerWithThreadSafe_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_destroyInstanceManagerWithThreadSafe_void_EVString_Function;
						GC.KeepAlive(m_destroyInstanceManagerWithThreadSafe_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyInstanceManagerWithThreadSafe_void_EVString(this.NativeObject, m_destroyInstanceManagerWithThreadSafe_CallBack_void_EVString);
						m_destroyInstanceManagerWithThreadSafe_CallBack_void_CInstanceManager = EarthView_World_Graphic_CSceneManager_destroyInstanceManagerWithThreadSafe_void_CInstanceManager_Function;
						GC.KeepAlive(m_destroyInstanceManagerWithThreadSafe_CallBack_void_CInstanceManager);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyInstanceManagerWithThreadSafe_void_CInstanceManager(this.NativeObject, m_destroyInstanceManagerWithThreadSafe_CallBack_void_CInstanceManager);
						m_destroyAllInstanceManagers_CallBack_void = EarthView_World_Graphic_CSceneManager_destroyAllInstanceManagers_void_Function;
						GC.KeepAlive(m_destroyAllInstanceManagers_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllInstanceManagers_void(this.NativeObject, m_destroyAllInstanceManagers_CallBack_void);
						m_getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t = EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_Function;
						GC.KeepAlive(m_getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t(this.NativeObject, m_getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t);
						m_getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16 = EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_Function;
						GC.KeepAlive(m_getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16(this.NativeObject, m_getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16);
						m_getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16 = EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16_Function;
						GC.KeepAlive(m_getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getNumInstancesPerBatch_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16(this.NativeObject, m_getNumInstancesPerBatch_CallBack_ev_size_t_EVString_EVString_EVString_InstancingTechnique_ev_size_t_ev_uint16_ev_uint16);
						m_createInstancedEntity_CallBack_CInstancedEntity_EVString_EVString = EarthView_World_Graphic_CSceneManager_createInstancedEntity_CInstancedEntity_EVString_EVString_Function;
						GC.KeepAlive(m_createInstancedEntity_CallBack_CInstancedEntity_EVString_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createInstancedEntity_CInstancedEntity_EVString_EVString(this.NativeObject, m_createInstancedEntity_CallBack_CInstancedEntity_EVString_EVString);
						m_destroyInstancedEntity_CallBack_void_CInstancedEntity = EarthView_World_Graphic_CSceneManager_destroyInstancedEntity_void_CInstancedEntity_Function;
						GC.KeepAlive(m_destroyInstancedEntity_CallBack_void_CInstancedEntity);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyInstancedEntity_void_CInstancedEntity(this.NativeObject, m_destroyInstancedEntity_CallBack_void_CInstancedEntity);
						m_createMovableObject_CallBack_CMovableObject_EVString_EVString_CommonStringPairList = EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_EVString_CommonStringPairList_Function;
						GC.KeepAlive(m_createMovableObject_CallBack_CMovableObject_EVString_EVString_CommonStringPairList);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_EVString_CommonStringPairList(this.NativeObject, m_createMovableObject_CallBack_CMovableObject_EVString_EVString_CommonStringPairList);
						m_createMovableObject_CallBack_CMovableObject_EVString_EVString = EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_EVString_Function;
						GC.KeepAlive(m_createMovableObject_CallBack_CMovableObject_EVString_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_EVString(this.NativeObject, m_createMovableObject_CallBack_CMovableObject_EVString_EVString);
						m_createMovableObject_CallBack_CMovableObject_EVString_CommonStringPairList = EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_CommonStringPairList_Function;
						GC.KeepAlive(m_createMovableObject_CallBack_CMovableObject_EVString_CommonStringPairList);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_CommonStringPairList(this.NativeObject, m_createMovableObject_CallBack_CMovableObject_EVString_CommonStringPairList);
						m_createMovableObject_CallBack_CMovableObject_EVString = EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString_Function;
						GC.KeepAlive(m_createMovableObject_CallBack_CMovableObject_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_createMovableObject_CMovableObject_EVString(this.NativeObject, m_createMovableObject_CallBack_CMovableObject_EVString);
						m_destroyMovableObject_CallBack_void_EVString_EVString = EarthView_World_Graphic_CSceneManager_destroyMovableObject_void_EVString_EVString_Function;
						GC.KeepAlive(m_destroyMovableObject_CallBack_void_EVString_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyMovableObject_void_EVString_EVString(this.NativeObject, m_destroyMovableObject_CallBack_void_EVString_EVString);
						m_destroyMovableObject_CallBack_void_CMovableObject = EarthView_World_Graphic_CSceneManager_destroyMovableObject_void_CMovableObject_Function;
						GC.KeepAlive(m_destroyMovableObject_CallBack_void_CMovableObject);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyMovableObject_void_CMovableObject(this.NativeObject, m_destroyMovableObject_CallBack_void_CMovableObject);
						m_destroyAllMovableObjectsByType_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_destroyAllMovableObjectsByType_void_EVString_Function;
						GC.KeepAlive(m_destroyAllMovableObjectsByType_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllMovableObjectsByType_void_EVString(this.NativeObject, m_destroyAllMovableObjectsByType_CallBack_void_EVString);
						m_destroyAllMovableObjects_CallBack_void = EarthView_World_Graphic_CSceneManager_destroyAllMovableObjects_void_Function;
						GC.KeepAlive(m_destroyAllMovableObjects_CallBack_void);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_destroyAllMovableObjects_void(this.NativeObject, m_destroyAllMovableObjects_CallBack_void);
						m_getMovableObject_CallBack_CMovableObject_EVString_EVString = EarthView_World_Graphic_CSceneManager_getMovableObject_CMovableObject_EVString_EVString_Function;
						GC.KeepAlive(m_getMovableObject_CallBack_CMovableObject_EVString_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getMovableObject_CMovableObject_EVString_EVString(this.NativeObject, m_getMovableObject_CallBack_CMovableObject_EVString_EVString);
						m_hasMovableObject_CallBack_ev_bool_EVString_EVString = EarthView_World_Graphic_CSceneManager_hasMovableObject_ev_bool_EVString_EVString_Function;
						GC.KeepAlive(m_hasMovableObject_CallBack_ev_bool_EVString_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_hasMovableObject_ev_bool_EVString_EVString(this.NativeObject, m_hasMovableObject_CallBack_ev_bool_EVString_EVString);
						m_getMovableObjectIterator_CallBack_MovableObjectIterator_EVString = EarthView_World_Graphic_CSceneManager_getMovableObjectIterator_MovableObjectIterator_EVString_Function;
						GC.KeepAlive(m_getMovableObjectIterator_CallBack_MovableObjectIterator_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getMovableObjectIterator_MovableObjectIterator_EVString(this.NativeObject, m_getMovableObjectIterator_CallBack_MovableObjectIterator_EVString);
						m_injectMovableObject_CallBack_void_CMovableObject = EarthView_World_Graphic_CSceneManager_injectMovableObject_void_CMovableObject_Function;
						GC.KeepAlive(m_injectMovableObject_CallBack_void_CMovableObject);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_injectMovableObject_void_CMovableObject(this.NativeObject, m_injectMovableObject_CallBack_void_CMovableObject);
						m_extractMovableObject_CallBack_void_EVString_EVString = EarthView_World_Graphic_CSceneManager_extractMovableObject_void_EVString_EVString_Function;
						GC.KeepAlive(m_extractMovableObject_CallBack_void_EVString_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_extractMovableObject_void_EVString_EVString(this.NativeObject, m_extractMovableObject_CallBack_void_EVString_EVString);
						m_extractMovableObject_CallBack_void_CMovableObject = EarthView_World_Graphic_CSceneManager_extractMovableObject_void_CMovableObject_Function;
						GC.KeepAlive(m_extractMovableObject_CallBack_void_CMovableObject);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_extractMovableObject_void_CMovableObject(this.NativeObject, m_extractMovableObject_CallBack_void_CMovableObject);
						m_extractAllMovableObjectsByType_CallBack_void_EVString = EarthView_World_Graphic_CSceneManager_extractAllMovableObjectsByType_void_EVString_Function;
						GC.KeepAlive(m_extractAllMovableObjectsByType_CallBack_void_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_extractAllMovableObjectsByType_void_EVString(this.NativeObject, m_extractAllMovableObjectsByType_CallBack_void_EVString);
						m_setVisibilityMask_CallBack_void_ev_uint32 = EarthView_World_Graphic_CSceneManager_setVisibilityMask_void_ev_uint32_Function;
						GC.KeepAlive(m_setVisibilityMask_CallBack_void_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setVisibilityMask_void_ev_uint32(this.NativeObject, m_setVisibilityMask_CallBack_void_ev_uint32);
						m_getVisibilityMask_CallBack_ev_uint32 = EarthView_World_Graphic_CSceneManager_getVisibilityMask_ev_uint32_Function;
						GC.KeepAlive(m_getVisibilityMask_CallBack_ev_uint32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getVisibilityMask_ev_uint32(this.NativeObject, m_getVisibilityMask_CallBack_ev_uint32);
						m_setFindVisibleObjects_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setFindVisibleObjects_void_ev_bool_Function;
						GC.KeepAlive(m_setFindVisibleObjects_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setFindVisibleObjects_void_ev_bool(this.NativeObject, m_setFindVisibleObjects_CallBack_void_ev_bool);
						m_getFindVisibleObjects_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_getFindVisibleObjects_ev_bool_Function;
						GC.KeepAlive(m_getFindVisibleObjects_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getFindVisibleObjects_ev_bool(this.NativeObject, m_getFindVisibleObjects_CallBack_ev_bool);
						m_setNormaliseNormalsOnScale_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setNormaliseNormalsOnScale_void_ev_bool_Function;
						GC.KeepAlive(m_setNormaliseNormalsOnScale_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setNormaliseNormalsOnScale_void_ev_bool(this.NativeObject, m_setNormaliseNormalsOnScale_CallBack_void_ev_bool);
						m_getNormaliseNormalsOnScale_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_getNormaliseNormalsOnScale_ev_bool_Function;
						GC.KeepAlive(m_getNormaliseNormalsOnScale_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getNormaliseNormalsOnScale_ev_bool(this.NativeObject, m_getNormaliseNormalsOnScale_CallBack_ev_bool);
						m_setFlipCullingOnNegativeScale_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setFlipCullingOnNegativeScale_void_ev_bool_Function;
						GC.KeepAlive(m_setFlipCullingOnNegativeScale_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setFlipCullingOnNegativeScale_void_ev_bool(this.NativeObject, m_setFlipCullingOnNegativeScale_CallBack_void_ev_bool);
						m_getFlipCullingOnNegativeScale_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_getFlipCullingOnNegativeScale_ev_bool_Function;
						GC.KeepAlive(m_getFlipCullingOnNegativeScale_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getFlipCullingOnNegativeScale_ev_bool(this.NativeObject, m_getFlipCullingOnNegativeScale_CallBack_ev_bool);
						m__injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool_ev_bool_LightList = EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_ev_bool_LightList_Function;
						GC.KeepAlive(m__injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool_ev_bool_LightList);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_ev_bool_LightList(this.NativeObject, m__injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool_ev_bool_LightList);
						m__injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool_ev_bool = EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_ev_bool_Function;
						GC.KeepAlive(m__injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_ev_bool(this.NativeObject, m__injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool_ev_bool);
						m__injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool = EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool_Function;
						GC.KeepAlive(m__injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_ev_bool(this.NativeObject, m__injectRenderWithPass_CallBack_void_CPass_CRenderable_ev_bool);
						m__injectRenderWithPass_CallBack_void_CPass_CRenderable = EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable_Function;
						GC.KeepAlive(m__injectRenderWithPass_CallBack_void_CPass_CRenderable);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__injectRenderWithPass_void_CPass_CRenderable(this.NativeObject, m__injectRenderWithPass_CallBack_void_CPass_CRenderable);
						m__suppressRenderStateChanges_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager__suppressRenderStateChanges_void_ev_bool_Function;
						GC.KeepAlive(m__suppressRenderStateChanges_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__suppressRenderStateChanges_void_ev_bool(this.NativeObject, m__suppressRenderStateChanges_CallBack_void_ev_bool);
						m__areRenderStateChangesSuppressed_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager__areRenderStateChangesSuppressed_ev_bool_Function;
						GC.KeepAlive(m__areRenderStateChangesSuppressed_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__areRenderStateChangesSuppressed_ev_bool(this.NativeObject, m__areRenderStateChangesSuppressed_CallBack_ev_bool);
						m__setPass_CallBack_CPass_CPass_ev_bool_ev_bool = EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_ev_bool_ev_bool_Function;
						GC.KeepAlive(m__setPass_CallBack_CPass_CPass_ev_bool_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_ev_bool_ev_bool(this.NativeObject, m__setPass_CallBack_CPass_CPass_ev_bool_ev_bool);
						m__setPass_CallBack_CPass_CPass_ev_bool = EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_ev_bool_Function;
						GC.KeepAlive(m__setPass_CallBack_CPass_CPass_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_ev_bool(this.NativeObject, m__setPass_CallBack_CPass_CPass_ev_bool);
						m__setPass_CallBack_CPass_CPass = EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass_Function;
						GC.KeepAlive(m__setPass_CallBack_CPass_CPass);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__setPass_CPass_CPass(this.NativeObject, m__setPass_CallBack_CPass_CPass);
						m__markGpuParamsDirty_CallBack_void_ev_uint16 = EarthView_World_Graphic_CSceneManager__markGpuParamsDirty_void_ev_uint16_Function;
						GC.KeepAlive(m__markGpuParamsDirty_CallBack_void_ev_uint16);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__markGpuParamsDirty_void_ev_uint16(this.NativeObject, m__markGpuParamsDirty_CallBack_void_ev_uint16);
						m__suppressShadows_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager__suppressShadows_void_ev_bool_Function;
						GC.KeepAlive(m__suppressShadows_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__suppressShadows_void_ev_bool(this.NativeObject, m__suppressShadows_CallBack_void_ev_bool);
						m__areShadowsSuppressed_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager__areShadowsSuppressed_ev_bool_Function;
						GC.KeepAlive(m__areShadowsSuppressed_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__areShadowsSuppressed_ev_bool(this.NativeObject, m__areShadowsSuppressed_CallBack_ev_bool);
						m__renderQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode = EarthView_World_Graphic_CSceneManager__renderQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode_Function;
						GC.KeepAlive(m__renderQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager__renderQueueGroupObjects_void_CRenderQueueGroup_OrganisationMode(this.NativeObject, m__renderQueueGroupObjects_CallBack_void_CRenderQueueGroup_OrganisationMode);
						m_setCameraRelativeRendering_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setCameraRelativeRendering_void_ev_bool_Function;
						GC.KeepAlive(m_setCameraRelativeRendering_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setCameraRelativeRendering_void_ev_bool(this.NativeObject, m_setCameraRelativeRendering_CallBack_void_ev_bool);
						m_getCameraRelativeRendering_CallBack_ev_bool = EarthView_World_Graphic_CSceneManager_getCameraRelativeRendering_ev_bool_Function;
						GC.KeepAlive(m_getCameraRelativeRendering_CallBack_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getCameraRelativeRendering_ev_bool(this.NativeObject, m_getCameraRelativeRendering_CallBack_ev_bool);
						m_getHeightAt_CallBack_Real_Real_Real_ev_real32 = EarthView_World_Graphic_CSceneManager_getHeightAt_Real_Real_Real_ev_real32_Function;
						GC.KeepAlive(m_getHeightAt_CallBack_Real_Real_Real_ev_real32);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getHeightAt_Real_Real_Real_ev_real32(this.NativeObject, m_getHeightAt_CallBack_Real_Real_Real_ev_real32);
						m_getBestHeightAt_CallBack_Real_Real_Real = EarthView_World_Graphic_CSceneManager_getBestHeightAt_Real_Real_Real_Function;
						GC.KeepAlive(m_getBestHeightAt_CallBack_Real_Real_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getBestHeightAt_Real_Real_Real(this.NativeObject, m_getBestHeightAt_CallBack_Real_Real_Real);
						m_getHeightAtTile_CallBack_Real_Real_Real = EarthView_World_Graphic_CSceneManager_getHeightAtTile_Real_Real_Real_Function;
						GC.KeepAlive(m_getHeightAtTile_CallBack_Real_Real_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getHeightAtTile_Real_Real_Real(this.NativeObject, m_getHeightAtTile_CallBack_Real_Real_Real);
						m_getTileEnvelope_CallBack_ev_bool_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real = EarthView_World_Graphic_CSceneManager_getTileEnvelope_ev_bool_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real_Function;
						GC.KeepAlive(m_getTileEnvelope_CallBack_ev_bool_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_getTileEnvelope_ev_bool_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real(this.NativeObject, m_getTileEnvelope_CallBack_ev_bool_ev_int32_ev_uint32_ev_uint32_Real_Real_Real_Real);
						m_addTempLayer_CallBack_ev_bool_ILayer = EarthView_World_Graphic_CSceneManager_addTempLayer_ev_bool_ILayer_Function;
						GC.KeepAlive(m_addTempLayer_CallBack_ev_bool_ILayer);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_addTempLayer_ev_bool_ILayer(this.NativeObject, m_addTempLayer_CallBack_ev_bool_ILayer);
						m_removeTempLayer_CallBack_ev_bool_ILayer = EarthView_World_Graphic_CSceneManager_removeTempLayer_ev_bool_ILayer_Function;
						GC.KeepAlive(m_removeTempLayer_CallBack_ev_bool_ILayer);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_removeTempLayer_ev_bool_ILayer(this.NativeObject, m_removeTempLayer_CallBack_ev_bool_ILayer);
						m_updateQuadImage_CallBack_void_bool_bool_bool = EarthView_World_Graphic_CSceneManager_updateQuadImage_void_bool_bool_bool_Function;
						GC.KeepAlive(m_updateQuadImage_CallBack_void_bool_bool_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_updateQuadImage_void_bool_bool_bool(this.NativeObject, m_updateQuadImage_CallBack_void_bool_bool_bool);
						m_updateQuadImage_CallBack_void_bool_bool_bool_Real_Real_Real_Real = EarthView_World_Graphic_CSceneManager_updateQuadImage_void_bool_bool_bool_Real_Real_Real_Real_Function;
						GC.KeepAlive(m_updateQuadImage_CallBack_void_bool_bool_bool_Real_Real_Real_Real);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_updateQuadImage_void_bool_bool_bool_Real_Real_Real_Real(this.NativeObject, m_updateQuadImage_CallBack_void_bool_bool_bool_Real_Real_Real_Real);
						m_updateOBQ_CallBack_void_ev_bool_ev_bool_ev_bool_ev_bool = EarthView_World_Graphic_CSceneManager_updateOBQ_void_ev_bool_ev_bool_ev_bool_ev_bool_Function;
						GC.KeepAlive(m_updateOBQ_CallBack_void_ev_bool_ev_bool_ev_bool_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_updateOBQ_void_ev_bool_ev_bool_ev_bool_ev_bool(this.NativeObject, m_updateOBQ_CallBack_void_ev_bool_ev_bool_ev_bool_ev_bool);
						m_setCollisionDetectionEnable_CallBack_void_ev_bool = EarthView_World_Graphic_CSceneManager_setCollisionDetectionEnable_void_ev_bool_Function;
						GC.KeepAlive(m_setCollisionDetectionEnable_CallBack_void_ev_bool);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManager_setCollisionDetectionEnable_void_ev_bool(this.NativeObject, m_setCollisionDetectionEnable_CallBack_void_ev_bool);
					}
				}
				public static SceneManager FromBaseObject(BaseObject baseObj)
				{
					if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
						return null;
					SceneManager obj = baseObj as  SceneManager;
					if (object.Equals(obj, null))
					{
						obj = new SceneManager(CreatedWhenConstruct.CWC_NotToCreate);
						obj.BindNativeObject(baseObj.NativeObject, "CSceneManager");
						obj.IncreaseCast();
					}

					return obj;
				}
			}

			public class SceneManagerClassFactory : IClassFactory
			{
				public BaseObject Create()
				{
					SceneManager emptyInstance = new SceneManager(CreatedWhenConstruct.CWC_NotToCreate);
					return emptyInstance;
				}
			}

			public enum SCENETYPE
			{
						ST_GENERIC = 1,
						ST_EXTERIOR_CLOSE = 2,
						ST_EXTERIOR_FAR = 4,
						ST_EXTERIOR_REAL_FAR = 8,
						ST_INTERIOR = 16,
						ST_OCTREE = 32,
						ST_TERRAIN = 64,
						ST_GEO = 128,
						ST_COMMON = 256
			
			}

			public class SceneManagerMetaData : EarthView.World.Core.BaseObject
			{
				public SceneManagerMetaData() : base(CreatedWhenConstruct.CWC_NotToCreate)
				{
					Create("SceneManagerMetaData",  null);
					RegisterCallBack();
					this.needDispose = true;
					GlobalTraceInfoMap.Put(this);
				}
				private string typeNameField;
				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr Get_EarthView_World_Graphic_SceneManagerMetaData_typeName(IntPtr pObject);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_SceneManagerMetaData_typeName( IntPtr pObject, string value );

				public 				string TypeName
				{
					get
					{
						IntPtr __ptr = Get_EarthView_World_Graphic_SceneManagerMetaData_typeName(this.NativeObject);
						
						string ret = Marshal.PtrToStringAnsi(__ptr);
						ClassFactory.FreeString(ref __ptr);
						return ret;
						
					}

					set
					{
						typeNameField = value;
						Set_EarthView_World_Graphic_SceneManagerMetaData_typeName( this.NativeObject,value );
					}
				}

				private string descriptionField;
				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr Get_EarthView_World_Graphic_SceneManagerMetaData_description(IntPtr pObject);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_SceneManagerMetaData_description( IntPtr pObject, string value );

				public 				string Description
				{
					get
					{
						IntPtr __ptr = Get_EarthView_World_Graphic_SceneManagerMetaData_description(this.NativeObject);
						
						string ret = Marshal.PtrToStringAnsi(__ptr);
						ClassFactory.FreeString(ref __ptr);
						return ret;
						
					}

					set
					{
						descriptionField = value;
						Set_EarthView_World_Graphic_SceneManagerMetaData_description( this.NativeObject,value );
					}
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern ushort Get_EarthView_World_Graphic_SceneManagerMetaData_sceneTypeMask(IntPtr pObject);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_SceneManagerMetaData_sceneTypeMask( IntPtr pObject, ushort value );

				public 				ushort SceneTypeMask
				{
					get
					{
						ushort ret=Get_EarthView_World_Graphic_SceneManagerMetaData_sceneTypeMask(this.NativeObject);
						
						return ret;
						
					}

					set
					{
						Set_EarthView_World_Graphic_SceneManagerMetaData_sceneTypeMask(this.NativeObject,value);
					}
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern byte Get_EarthView_World_Graphic_SceneManagerMetaData_worldGeometrySupported(IntPtr pObject);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void Set_EarthView_World_Graphic_SceneManagerMetaData_worldGeometrySupported( IntPtr pObject, byte value );

				public 				bool WorldGeometrySupported
				{
					get
					{
						byte ret=Get_EarthView_World_Graphic_SceneManagerMetaData_worldGeometrySupported(this.NativeObject);
						
						return Convert.ToBoolean(ret);
						
					}

					set
					{
						Set_EarthView_World_Graphic_SceneManagerMetaData_worldGeometrySupported(this.NativeObject,Convert.ToByte(value));
					}
				}

				#if DEBUG 
					#if Windows 
						private static bool bLoadSceneManagerMetaData = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadSceneManagerMetaData = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#elif Linux 
						private static bool bLoadSceneManagerMetaData = LoadDll.Load("EV_Graphic_d.so");
						private static bool csbLoadSceneManagerMetaData = LoadDll.Load("EV_Graphic_CSharp_d.so");

					#else 
						private static bool bLoadSceneManagerMetaData = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadSceneManagerMetaData = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#endif 
				#else 
					#if Windows 
						private static bool bLoadSceneManagerMetaData = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadSceneManagerMetaData = LoadDll.Load("EV_Graphic_CSharp.dll");

					#elif Linux 
						private static bool bLoadSceneManagerMetaData = LoadDll.Load("EV_Graphic.so");
						private static bool csbLoadSceneManagerMetaData = LoadDll.Load("EV_Graphic_CSharp.so");

					#else 
						private static bool bLoadSceneManagerMetaData = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadSceneManagerMetaData = LoadDll.Load("EV_Graphic_CSharp.dll");

					#endif 
				#endif 

				private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::SceneManagerMetaData", new SceneManagerMetaDataClassFactory());

				public SceneManagerMetaData(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
				{
				}

				public override void RegisterCallBack()
				{
					if (this.NativeObject != IntPtr.Zero)
					{
					}
				}
				public static SceneManagerMetaData FromBaseObject(BaseObject baseObj)
				{
					if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
						return null;
					SceneManagerMetaData obj = baseObj as  SceneManagerMetaData;
					if (object.Equals(obj, null))
					{
						obj = new SceneManagerMetaData(CreatedWhenConstruct.CWC_NotToCreate);
						obj.BindNativeObject(baseObj.NativeObject, "SceneManagerMetaData");
						obj.IncreaseCast();
					}

					return obj;
				}
			}

			public class SceneManagerMetaDataClassFactory : IClassFactory
			{
				public BaseObject Create()
				{
					SceneManagerMetaData emptyInstance = new SceneManagerMetaData(CreatedWhenConstruct.CWC_NotToCreate);
					return emptyInstance;
				}
			}

			public class SceneManagerFactory : EarthView.World.Core.AllocatedObject
			{
				public SceneManagerFactory() : base(CreatedWhenConstruct.CWC_NotToCreate)
				{
					Create("CSceneManagerFactoryProxy", null);
					if (!"EarthView.World.Graphic.SceneManagerFactory".Equals(((Object)this).GetType().ToString()))
					{
						this.SetCustomExtend(true);
					}
					RegisterCallBack();
					this.needDispose = true;
					GlobalTraceInfoMap.Put(this);
				}
				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr getMetaData_CallBack_SceneManagerMetaData();

				protected getMetaData_CallBack_SceneManagerMetaData m_getMetaData_CallBack_SceneManagerMetaData;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManagerFactory_getMetaData_SceneManagerMetaData_NoVirtual(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.SceneManagerMetaData GetMetaData_NoVirtual()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManagerFactory_getMetaData_SceneManagerMetaData_NoVirtual(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneManagerMetaData csObj = new EarthView.World.Graphic.SceneManagerMetaData(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "SceneManagerMetaData");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManagerMetaData;
						csObj.BindNativeObject(__ptr, "SceneManagerMetaData");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManagerFactory_getMetaData_SceneManagerMetaData_Function()
				{
					EarthView.World.Graphic.SceneManagerMetaData csret=GetMetaData();
					
					if (!object.Equals(csret, null))
					{
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManagerFactory_getMetaData_SceneManagerMetaData(IntPtr pNativeObject);

				public virtual EarthView.World.Graphic.SceneManagerMetaData GetMetaData()
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManagerFactory_getMetaData_SceneManagerMetaData(this.NativeObject);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneManagerMetaData csObj = new EarthView.World.Graphic.SceneManagerMetaData(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "SceneManagerMetaData");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManagerMetaData;
						csObj.BindNativeObject(__ptr, "SceneManagerMetaData");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate IntPtr createInstance_CallBack_CSceneManager_EVString(ref IntPtr instanceName);

				protected createInstance_CallBack_CSceneManager_EVString m_createInstance_CallBack_CSceneManager_EVString;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManagerFactory_createInstance_CSceneManager_EVString_NoVirtual(IntPtr pNativeObject, string instanceName);

				public virtual EarthView.World.Graphic.SceneManager CreateInstance_NoVirtual(string instanceName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManagerFactory_createInstance_CSceneManager_EVString_NoVirtual(this.NativeObject, instanceName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneManager csObj = new EarthView.World.Graphic.SceneManager(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneManager");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager;
						csObj.BindNativeObject(__ptr, "CSceneManager");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				protected  IntPtr EarthView_World_Graphic_CSceneManagerFactory_createInstance_CSceneManager_EVString_Function(ref IntPtr instanceName)
				{
					string strinstanceName= Marshal.PtrToStringAnsi(instanceName);
					ClassFactory.FreeString(ref instanceName);
					
					EarthView.World.Graphic.SceneManager csret=CreateInstance(strinstanceName);
					
					if (!object.Equals(csret, null))
					{
					    csret.Delegate = true;
					    return csret.NativeObject;
					}
					else
					{
					    return IntPtr.Zero;
					}
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern IntPtr EarthView_World_Graphic_CSceneManagerFactory_createInstance_CSceneManager_EVString(IntPtr pNativeObject, string instanceName);

				public virtual EarthView.World.Graphic.SceneManager CreateInstance(string instanceName)
				{
					IntPtr __ptr = EarthView_World_Graphic_CSceneManagerFactory_createInstance_CSceneManager_EVString(this.NativeObject, instanceName);
					
					if(__ptr==IntPtr.Zero)
					{
					return null;
					}
					EarthView.World.Graphic.SceneManager csObj = new EarthView.World.Graphic.SceneManager(CreatedWhenConstruct.CWC_NotToCreate);
					csObj.BindNativeObject(__ptr, "CSceneManager");
					csObj.Delegate = true;
					IClassFactory csObjClassFactory = GlobalClassFactoryMap.Get(csObj.GetCppInstanceTypeName());
					if (csObjClassFactory != null)
					{
						csObj.Delegate = true;
						csObj = csObjClassFactory.Create() as EarthView.World.Graphic.SceneManager;
						csObj.BindNativeObject(__ptr, "CSceneManager");
						csObj.Delegate = true;
					}
					return csObj;
					
				}

				[System.Runtime.InteropServices.UnmanagedFunctionPointer(CallingConvention.StdCall)]
				protected delegate void destroyInstance_CallBack_void_CSceneManager(IntPtr instance);

				protected destroyInstance_CallBack_void_CSceneManager m_destroyInstance_CallBack_void_CSceneManager;

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManagerFactory_destroyInstance_void_CSceneManager_NoVirtual(IntPtr pNativeObject, IntPtr instance);

				public virtual void DestroyInstance_NoVirtual(EarthView.World.Graphic.SceneManager instance)
				{
					EarthView_World_Graphic_CSceneManagerFactory_destroyInstance_void_CSceneManager_NoVirtual(this.NativeObject, object.Equals(instance, null) ? IntPtr.Zero : instance.NativeObject);
					
				}

				protected  void EarthView_World_Graphic_CSceneManagerFactory_destroyInstance_void_CSceneManager_Function(IntPtr instance)
				{
					EarthView.World.Graphic.SceneManager csobj_instance = new EarthView.World.Graphic.SceneManager(CreatedWhenConstruct.CWC_NotToCreate);
					csobj_instance.BindNativeObject(instance,"CSceneManager");
					csobj_instance.Delegate = true;
					IClassFactory csobj_instanceClassFactory = GlobalClassFactoryMap.Get(csobj_instance.GetCppInstanceTypeName());
					if (csobj_instanceClassFactory != null)
					{
						csobj_instance.Delegate = true;
						csobj_instance = csobj_instanceClassFactory.Create() as EarthView.World.Graphic.SceneManager;
						csobj_instance.BindNativeObject(instance, "CSceneManager");
						csobj_instance.Delegate = true;
					}
					
					DestroyInstance(csobj_instance);
					
				}


				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				private static extern void EarthView_World_Graphic_CSceneManagerFactory_destroyInstance_void_CSceneManager(IntPtr pNativeObject, IntPtr instance);

				public virtual void DestroyInstance(EarthView.World.Graphic.SceneManager instance)
				{
					EarthView_World_Graphic_CSceneManagerFactory_destroyInstance_void_CSceneManager(this.NativeObject, object.Equals(instance, null) ? IntPtr.Zero : instance.NativeObject);
					
				}

				#if DEBUG 
					#if Windows 
						private static bool bLoadSceneManagerFactory = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadSceneManagerFactory = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#elif Linux 
						private static bool bLoadSceneManagerFactory = LoadDll.Load("EV_Graphic_d.so");
						private static bool csbLoadSceneManagerFactory = LoadDll.Load("EV_Graphic_CSharp_d.so");

					#else 
						private static bool bLoadSceneManagerFactory = LoadDll.Load("EV_Graphic_d.dll");
						private static bool csbLoadSceneManagerFactory = LoadDll.Load("EV_Graphic_CSharp_d.dll");

					#endif 
				#else 
					#if Windows 
						private static bool bLoadSceneManagerFactory = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadSceneManagerFactory = LoadDll.Load("EV_Graphic_CSharp.dll");

					#elif Linux 
						private static bool bLoadSceneManagerFactory = LoadDll.Load("EV_Graphic.so");
						private static bool csbLoadSceneManagerFactory = LoadDll.Load("EV_Graphic_CSharp.so");

					#else 
						private static bool bLoadSceneManagerFactory = LoadDll.Load("EV_Graphic.dll");
						private static bool csbLoadSceneManagerFactory = LoadDll.Load("EV_Graphic_CSharp.dll");

					#endif 
				#endif 

				private static bool registerStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManagerFactory", new SceneManagerFactoryClassFactory());

				private static bool registerProxyStatus = GlobalClassFactoryMap.Put("EarthView::World::Graphic::CSceneManagerFactoryProxy", new SceneManagerFactoryClassFactory());

				public SceneManagerFactory(CreatedWhenConstruct bAutoCreate) : base(bAutoCreate)
				{
				}

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManagerFactory_getMetaData_SceneManagerMetaData(IntPtr pObject, getMetaData_CallBack_SceneManagerMetaData pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManagerFactory_createInstance_CSceneManager_EVString(IntPtr pObject, createInstance_CallBack_CSceneManager_EVString pCallback);

				#if DEBUG 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp_d.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#else 
					#if Windows 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#elif Linux 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Android 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.so", CallingConvention = CallingConvention.StdCall)]
					#elif Apple 
						[System.Runtime.InteropServices.DllImport("__Internal")]
					#else 
						[System.Runtime.InteropServices.DllImport("EV_Graphic_CSharp.dll", CallingConvention = CallingConvention.StdCall)]
					#endif 
				#endif 
				protected static extern void EV_RegisterCallback_EarthView_World_Graphic_CSceneManagerFactory_destroyInstance_void_CSceneManager(IntPtr pObject, destroyInstance_CallBack_void_CSceneManager pCallback);

				public override void RegisterCallBack()
				{
					if (this.NativeObject != IntPtr.Zero)
					{
						m_getMetaData_CallBack_SceneManagerMetaData = EarthView_World_Graphic_CSceneManagerFactory_getMetaData_SceneManagerMetaData_Function;
						GC.KeepAlive(m_getMetaData_CallBack_SceneManagerMetaData);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManagerFactory_getMetaData_SceneManagerMetaData(this.NativeObject, m_getMetaData_CallBack_SceneManagerMetaData);
						m_createInstance_CallBack_CSceneManager_EVString = EarthView_World_Graphic_CSceneManagerFactory_createInstance_CSceneManager_EVString_Function;
						GC.KeepAlive(m_createInstance_CallBack_CSceneManager_EVString);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManagerFactory_createInstance_CSceneManager_EVString(this.NativeObject, m_createInstance_CallBack_CSceneManager_EVString);
						m_destroyInstance_CallBack_void_CSceneManager = EarthView_World_Graphic_CSceneManagerFactory_destroyInstance_void_CSceneManager_Function;
						GC.KeepAlive(m_destroyInstance_CallBack_void_CSceneManager);
						EV_RegisterCallback_EarthView_World_Graphic_CSceneManagerFactory_destroyInstance_void_CSceneManager(this.NativeObject, m_destroyInstance_CallBack_void_CSceneManager);
					}
				}
				public static SceneManagerFactory FromBaseObject(BaseObject baseObj)
				{
					if (baseObj == null || baseObj.NativeObject == IntPtr.Zero)
						return null;
					SceneManagerFactory obj = baseObj as  SceneManagerFactory;
					if (object.Equals(obj, null))
					{
						obj = new SceneManagerFactory(CreatedWhenConstruct.CWC_NotToCreate);
						obj.BindNativeObject(baseObj.NativeObject, "CSceneManagerFactory");
						obj.IncreaseCast();
					}

					return obj;
				}
			}

			public class SceneManagerFactoryClassFactory : IClassFactory
			{
				public BaseObject Create()
				{
					SceneManagerFactory emptyInstance = new SceneManagerFactory(CreatedWhenConstruct.CWC_NotToCreate);
					return emptyInstance;
				}
			}

		}
	}
}
